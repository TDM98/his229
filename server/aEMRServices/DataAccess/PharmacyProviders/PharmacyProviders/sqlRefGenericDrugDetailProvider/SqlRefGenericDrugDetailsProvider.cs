using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using DataEntities;
using System.Data.SqlClient;
using System.Data;
using System.Xml.Linq;
using System.Data.Common;
using Service.Core.Common;
using System.Collections;
using eHCMS.Services.Core;
using eHCMS.Configurations;
using AxLogging;
/*
 * 20170803 #001 CMN: Added HI Store Service
 * 20170810 #002 CMN: Added Bid Service
 * 20170821 #003 CMN: Added AdjustClinicPrice Service
 * 20180109 #004 CMN: Added more properties for HI Informations.
 * 20180412 #005 MTT: Added Volume
 * 20180505 #006 TBLD: Added out list ServiceList and XML for Service
 * 20180508 #007 TxD: Commented out all BeginTransaction in this class because it could have caused dead lock in DB (suspection only at this stage)
 * 20180605 #008 TBLD: Sua kieu du lieu tu varchar sang nvarchar cho phu hop BHYT quy dinh.
 * 20180729 #009 TNHX: Merge Pharmacy&DrugStore
 * 20180801 #010 TTM: New Method re-use RefGenMedProductDetails_Save => RefGenMedProductDetails_Save_New, and add new property V_CatDrugType
 * 20180808 #011 TTM:
 * 20181101 #012 TBL: Added GetAllRefGeneric, Add Parameter @GenericID
 * 20181121 #013 TTM: Thêm mới V_CatDrugType, V_MedProductType
 * 20181124 #014 TTM: BM 0005309: Lấy dữ liệu cho phiếu xuất kho BHYT - Màn hình Nhập trả kho dược.
 * 20180412 #015 TTM: BM 0005324: Lưu, tìm kiếm phiếu nhập từ (phiếu xuất khoa dược) cho màn hình Nhập từ kho dược Module Nhà thuốc.
 * 20181219 #016 TTM: BM 0005443: Tạo mới các hàm phục vụ cho lập, duyệt, tìm phiếu lĩnh hàng kho BHYT - nhà thuốc.
*/
namespace eHCMS.DAL
{
    public class SqlRefGenericDrugDetailsProvider : RefDrugGenericDetailsProvider
    {
        public SqlRefGenericDrugDetailsProvider()
            : base()
        {

        }

        #region 1. DrugDetail member

        public override List<RefGenericDrugDetail> SearchRefDrugGenericDetails_AutoPaging(bool? IsCode, string BrandName,
                                                                                          long? SupplierID,
                                                                                          int pageIndex, int pageSize,
                                                                               out int totalCount)
        {
            totalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugName_SearchAutoPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SupplierID));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<RefGenericDrugDetail> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetRefDrugGenericCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return objList;
            }
        }

        public override List<RefGenericDrugSimple> SearchRefGenericDrugName_SimpleAutoPaging(bool? IsCode, string BrandName,
                                                                                       int pageIndex, int pageSize,
                                                                                     out int totalCount)
        {
            totalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugName_SimpleAutoPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<RefGenericDrugSimple> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetRefGenericDrugSimpleCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return objList;
            }
        }


        public override List<RefGenericDrugDetail> SearchRefDrugGenericDetails_RefAutoPaging(bool? IsCode, string BrandName,
                                                                                             int pageIndex, int pageSize,
                                                                                             out int totalCount)
        {
            totalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugName_RefSearchAuPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<RefGenericDrugDetail> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetRefDrugGenericCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != DBNull.Value)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return objList;
            }
        }


        public override List<RefGenericDrugDetail> SearchRefDrugGenericDetails(DrugSearchCriteria criteria,
                                                                               int pageIndex,
                                                                               int pageSize, bool bCountTotal,
                                                                               out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetails_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramBrandName = new SqlParameter("@brandname", SqlDbType.NVarChar, 128);
                paramBrandName.Value = ConvertNullObjectToDBNull(criteria.BrandName);
                SqlParameter paramFaID = new SqlParameter("@faid", SqlDbType.BigInt);
                paramFaID.Value = ConvertNullObjectToDBNull(criteria.FaID);

                SqlParameter paramIsinsurance = new SqlParameter("@isinsurance", SqlDbType.TinyInt);
                paramIsinsurance.Value = criteria.IsInsurance;
                SqlParameter paramIsconsult = new SqlParameter("@isconsult", SqlDbType.TinyInt);
                paramIsconsult.Value = criteria.IsConsult;

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramIsMedDept = new SqlParameter("@IsActive", SqlDbType.TinyInt);
                paramIsMedDept.Value = ConvertNullObjectToDBNull(criteria.IsActive);

                cmd.Parameters.Add(paramBrandName);
                cmd.Parameters.Add(paramFaID);
                cmd.Parameters.Add(paramIsinsurance);
                cmd.Parameters.Add(paramIsconsult);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);
                cmd.Parameters.Add(paramIsMedDept);

                cn.Open();
                List<RefGenericDrugDetail> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetRefDrugGenericCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != DBNull.Value)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }

        }

        //khong lay gia gi het,chi la danh muc thoi
        public override List<RefGenericDrugDetail> SearchRefDrugGenericDetails_Simple(DrugSearchCriteria criteria,
                                                                              int pageIndex,
                                                                              int pageSize, bool bCountTotal,
                                                                              out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetails_Simple_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramBrandName = new SqlParameter("@brandname", SqlDbType.NVarChar, 128);
                paramBrandName.Value = ConvertNullObjectToDBNull(criteria.BrandName);
                SqlParameter paramFaID = new SqlParameter("@faid", SqlDbType.BigInt);
                paramFaID.Value = ConvertNullObjectToDBNull(criteria.FaID);

                SqlParameter paramIsinsurance = new SqlParameter("@isinsurance", SqlDbType.TinyInt);
                paramIsinsurance.Value = criteria.IsInsurance;
                SqlParameter paramIsconsult = new SqlParameter("@isconsult", SqlDbType.TinyInt);
                paramIsconsult.Value = criteria.IsConsult;

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramIsMedDept = new SqlParameter("@IsActive", SqlDbType.TinyInt);
                paramIsMedDept.Value = ConvertNullObjectToDBNull(criteria.IsActive);

                SqlParameter paramIsShow = new SqlParameter("@IsShow", SqlDbType.TinyInt);
                paramIsShow.Value = ConvertNullObjectToDBNull(criteria.IsShow);

                cmd.Parameters.Add(paramBrandName);
                cmd.Parameters.Add(paramFaID);
                cmd.Parameters.Add(paramIsinsurance);
                cmd.Parameters.Add(paramIsconsult);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);
                cmd.Parameters.Add(paramIsMedDept);
                cmd.Parameters.Add(paramIsShow);

                cn.Open();
                List<RefGenericDrugDetail> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetRefDrugGenericCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != DBNull.Value)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }

        }
        //▼===== 25072018 TTM
        public override List<RefGenericDrugDetail> SearchRefDrugGenericDetails_Simple_New(DrugSearchCriteria criteria,
                                                                      int pageIndex,
                                                                      int pageSize, bool bCountTotal,
                                                                      out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetails_Simple_Search_New", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramBrandName = new SqlParameter("@brandname", SqlDbType.NVarChar, 128);
                paramBrandName.Value = ConvertNullObjectToDBNull(criteria.BrandName);
                SqlParameter paramFaID = new SqlParameter("@faid", SqlDbType.BigInt);
                paramFaID.Value = ConvertNullObjectToDBNull(criteria.FaID);

                SqlParameter paramIsinsurance = new SqlParameter("@isinsurance", SqlDbType.TinyInt);
                paramIsinsurance.Value = criteria.IsInsurance;
                SqlParameter paramIsconsult = new SqlParameter("@isconsult", SqlDbType.TinyInt);
                paramIsconsult.Value = criteria.IsConsult;

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramIsMedDept = new SqlParameter("@IsActive", SqlDbType.TinyInt);
                paramIsMedDept.Value = ConvertNullObjectToDBNull(criteria.IsActive);

                SqlParameter paramIsShow = new SqlParameter("@IsShow", SqlDbType.TinyInt);
                paramIsShow.Value = ConvertNullObjectToDBNull(criteria.IsShow);

                cmd.Parameters.Add(paramBrandName);
                cmd.Parameters.Add(paramFaID);
                cmd.Parameters.Add(paramIsinsurance);
                cmd.Parameters.Add(paramIsconsult);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);
                cmd.Parameters.Add(paramIsMedDept);
                cmd.Parameters.Add(paramIsShow);

                cn.Open();
                List<RefGenericDrugDetail> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetRefDrugGenericCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != DBNull.Value)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }
        //▲===== 25072018 TTM



        //spRefGenericDrugDetails_Search_Price
        //tim theo danh muc nhung kem theo gia ban
        public override List<RefGenericDrugDetail> SearchRefDrugGenericDetails_ItemPrice(DrugSearchCriteria criteria,
                                                                             int pageIndex,
                                                                             int pageSize, bool bCountTotal,
                                                                             out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetails_Search_Price", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramBrandName = new SqlParameter("@brandname", SqlDbType.NVarChar, 128);
                paramBrandName.Value = ConvertNullObjectToDBNull(criteria.BrandName);
                SqlParameter paramFaID = new SqlParameter("@faid", SqlDbType.BigInt);
                paramFaID.Value = ConvertNullObjectToDBNull(criteria.FaID);

                SqlParameter paramIsinsurance = new SqlParameter("@isinsurance", SqlDbType.TinyInt);
                paramIsinsurance.Value = criteria.IsInsurance;
                SqlParameter paramIsconsult = new SqlParameter("@isconsult", SqlDbType.TinyInt);
                paramIsconsult.Value = criteria.IsConsult;

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramBrandName);
                cmd.Parameters.Add(paramFaID);
                cmd.Parameters.Add(paramIsinsurance);
                cmd.Parameters.Add(paramIsconsult);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<RefGenericDrugDetail> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetRefDrugGenericCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != DBNull.Value)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }

        }


        public override bool DeleteRefDrugGenericDetailByID(long drugID)
        {
            bool results = false;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetails_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, drugID);
                cn.Open();

                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }
        //▼===== 25072018 TTM
        public override bool DeleteRefDrugGenericDetailByID_New(long drugID)
        {
            bool results = false;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetails_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, drugID);
                cn.Open();

                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }
        //▲===== 25072018 TTM
        public override bool UpdateRefDrugGenericDetail(RefGenericDrugDetail p)
        {
            bool results = false;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetails_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, p.DrugID);
                cmd.AddParameter("@HIDrugCode5084", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.HIDrugCode5084));
                cmd.AddParameter("@CountryID", SqlDbType.BigInt, p.SeletedCountry.CountryID);
                cmd.AddParameter("@DrugClassID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(p.SeletedDrugClass.DrugClassID));
                cmd.AddParameter("@RefGenDrugBHYT_CatID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(p.RefGenDrugBHYT_CatID));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.RefGenDrugCatID_1));

                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, p.BrandName);
                cmd.AddParameter("@GenericName", SqlDbType.NVarChar, p.GenericName);
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.PCOID));
                cmd.AddParameter("@UnitID", SqlDbType.BigInt, p.SeletedUnit.UnitID);
                cmd.AddParameter("@DispenseVolume", SqlDbType.Float, ConvertNullObjectToDBNull(p.DispenseVolume));

                cmd.AddParameter("@UnitUseID", SqlDbType.BigInt, p.SeletedUnitUse.UnitID);
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.SdlDescription));
                cmd.AddParameter("@Composition", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Composition));
                cmd.AddParameter("@ActiveIngredient", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.ActiveIngredient));
                cmd.AddParameter("@Indication", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Indication));
                cmd.AddParameter("@Contraindication", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Contraindication));
                cmd.AddParameter("@Content", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Content));
                cmd.AddParameter("@Dosage", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Dosage));
                cmd.AddParameter("@Administration", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Administration));
                cmd.AddParameter("@Precaution_Warn", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Precaution_Warn));
                cmd.AddParameter("@SideEffects", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.SideEffects));
                cmd.AddParameter("@Interaction", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Interaction));
                cmd.AddParameter("@AdvTimeBeforeExpire", SqlDbType.Int, ConvertNullObjectToDBNull(p.AdvTimeBeforeExpire));
                cmd.AddParameter("@OutNotes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.OutNotes)); //p.OutNotes
                cmd.AddParameter("@InsuranceCover", SqlDbType.Bit, ConvertNullObjectToDBNull(p.InsuranceCover));
                cmd.AddParameter("@IsConsult", SqlDbType.Bit, ConvertNullObjectToDBNull(p.IsConsult));
                cmd.AddParameter("@DIsActive", SqlDbType.Bit, ConvertNullObjectToDBNull(p.DIsActive)); //p.DIsActive
                cmd.AddParameter("@Packaging", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Packaging));
                cmd.AddParameter("@Visa", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.Visa));
                cmd.AddParameter("@DrugCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.DrugCode));
                cmd.AddParameter("@HIDrugCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.HIDrugCode));

                cmd.AddParameter("@UnitPackaging", SqlDbType.Int, ConvertNullObjectToDBNull(p.UnitPackaging));
                cmd.AddParameter("@NumberOfEstimatedMonths", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(p.NumberOfEstimatedMonths_F));
                cmd.AddParameter("@FactorSafety", SqlDbType.Int, ConvertNullObjectToDBNull(p.FactorSafety));
                cmd.AddParameter("@ProductCodeRefNum", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.ProductCodeRefNum));
                cmd.AddParameter("@HosID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.HosID));
                cmd.AddParameter("@KeepRefrigerated", SqlDbType.Bit, ConvertNullObjectToDBNull(p.KeepRefrigerated));

                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(p.ConvertDetailsListToXml()));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.StaffID));
                cmd.AddParameter("@MaxDayPrescribed", SqlDbType.SmallInt,
                             ConvertNullObjectToDBNull(p.MaxDayPrescribed));
                cmd.AddParameter("@IsNotShow", SqlDbType.Bit, ConvertNullObjectToDBNull(p.IsNotShow)); //p.DIsActive
                cmd.AddParameter("@IsWarningHI", SqlDbType.Bit, ConvertNullObjectToDBNull(p.IsWarningHI));
                cmd.AddParameter("@WinningHospitals", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.WinningHospitals));
                cmd.AddParameter("@MonitorOutQty", SqlDbType.Bit, ConvertNullObjectToDBNull(p.MonitorOutQty));
                cmd.AddParameter("@LimitedOutQty", SqlDbType.Int, ConvertNullObjectToDBNull(p.LimitedOutQty));
                cmd.AddParameter("@RemainWarningLevel1", SqlDbType.Int, ConvertNullObjectToDBNull(p.RemainWarningLevel1));
                cmd.AddParameter("@RemainWarningLevel2", SqlDbType.Int, ConvertNullObjectToDBNull(p.RemainWarningLevel2));

                cmd.AddParameter("@V_RouteOfAdministration", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.RouteOfAdministration != null ? p.RouteOfAdministration.LookupID : 0));
                cmd.AddParameter("@DosageForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.DosageForm));
                cmd.AddParameter("@DrugForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.DrugForm));
                cmd.AddParameter("@V_VENType", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.V_VENType));
                cmd.AddParameter("@BiddingHospital", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.BiddingHospital));
                cmd.AddParameter("@ReportBrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.ReportBrandName));
                cmd.AddParameter("@BidDecisionNumAndOrdinalNum", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.BidDecisionNumAndOrdinalNum));
                cmd.AddParameter("@BidEffectiveDate", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.BidEffectiveDate));
                cmd.AddParameter("@Note", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Note));
                cmd.AddParameter("@TCKTAndTCCNGroup", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.TCKTAndTCCNGroup));
                cmd.AddParameter("@V_GroupTypeForReport20", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.V_GroupTypeForReport20));
                cmd.AddParameter("@RefPharmacyDrugCatID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.RefPharmacyDrugCatID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.MatchRefGenMedProduct != null ? p.MatchRefGenMedProduct.GenMedProductID : 0));
                cmd.AddParameter("@TLThanhToan", SqlDbType.Decimal, ConvertNullObjectToDBNull(p.TLThanhToan));
                /*▼====: #004*/
                cmd.AddParameter("@BidCode", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.BidCode));
                cmd.AddParameter("@V_ProductScope", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.V_ProductScope));
                cmd.AddParameter("@HITTypeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.HITTypeID));
                /*▲====: #004*/
                cn.Open();

                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }
        //▼===== 25072018 TTM
        public override bool UpdateRefDrugGenericDetail_New(RefGenericDrugDetail p)
        {
            bool results = false;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetails_Update_New", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, p.DrugID);
                cmd.AddParameter("@HIDrugCode5084", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.HIDrugCode5084));
                cmd.AddParameter("@CountryID", SqlDbType.BigInt, p.SeletedCountry.CountryID);
                cmd.AddParameter("@DrugClassID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(p.SeletedDrugClass.DrugClassID));
                cmd.AddParameter("@RefGenDrugBHYT_CatID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(p.RefGenDrugBHYT_CatID));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.RefGenDrugCatID_1));

                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, p.BrandName);
                cmd.AddParameter("@GenericName", SqlDbType.NVarChar, p.GenericName);
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.PCOID));
                cmd.AddParameter("@UnitID", SqlDbType.BigInt, p.SeletedUnit.UnitID);
                cmd.AddParameter("@DispenseVolume", SqlDbType.Float, ConvertNullObjectToDBNull(p.DispenseVolume));

                cmd.AddParameter("@UnitUseID", SqlDbType.BigInt, p.SeletedUnitUse.UnitID);
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.SdlDescription));
                cmd.AddParameter("@Composition", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Composition));
                cmd.AddParameter("@ActiveIngredient", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.ActiveIngredient));
                cmd.AddParameter("@Indication", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Indication));
                cmd.AddParameter("@Contraindication", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Contraindication));
                cmd.AddParameter("@Content", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Content));
                cmd.AddParameter("@Dosage", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Dosage));
                cmd.AddParameter("@Administration", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Administration));
                cmd.AddParameter("@Precaution_Warn", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Precaution_Warn));
                cmd.AddParameter("@SideEffects", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.SideEffects));
                cmd.AddParameter("@Interaction", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Interaction));
                cmd.AddParameter("@AdvTimeBeforeExpire", SqlDbType.Int, ConvertNullObjectToDBNull(p.AdvTimeBeforeExpire));
                cmd.AddParameter("@OutNotes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.OutNotes)); //p.OutNotes
                cmd.AddParameter("@InsuranceCover", SqlDbType.Bit, ConvertNullObjectToDBNull(p.InsuranceCover));
                cmd.AddParameter("@IsConsult", SqlDbType.Bit, ConvertNullObjectToDBNull(p.IsConsult));
                cmd.AddParameter("@DIsActive", SqlDbType.Bit, ConvertNullObjectToDBNull(p.DIsActive)); //p.DIsActive
                cmd.AddParameter("@Packaging", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Packaging));
                cmd.AddParameter("@Visa", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.Visa));
                cmd.AddParameter("@DrugCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.DrugCode));
                cmd.AddParameter("@HIDrugCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.HIDrugCode));

                cmd.AddParameter("@UnitPackaging", SqlDbType.Int, ConvertNullObjectToDBNull(p.UnitPackaging));
                cmd.AddParameter("@NumberOfEstimatedMonths", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(p.NumberOfEstimatedMonths_F));
                cmd.AddParameter("@FactorSafety", SqlDbType.Int, ConvertNullObjectToDBNull(p.FactorSafety));
                cmd.AddParameter("@ProductCodeRefNum", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.ProductCodeRefNum));
                cmd.AddParameter("@HosID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.HosID));
                cmd.AddParameter("@KeepRefrigerated", SqlDbType.Bit, ConvertNullObjectToDBNull(p.KeepRefrigerated));

                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(p.ConvertDetailsListToXml()));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.StaffID));
                cmd.AddParameter("@MaxDayPrescribed", SqlDbType.SmallInt,
                             ConvertNullObjectToDBNull(p.MaxDayPrescribed));
                cmd.AddParameter("@IsNotShow", SqlDbType.Bit, ConvertNullObjectToDBNull(p.IsNotShow)); //p.DIsActive
                cmd.AddParameter("@IsWarningHI", SqlDbType.Bit, ConvertNullObjectToDBNull(p.IsWarningHI));
                cmd.AddParameter("@WinningHospitals", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.WinningHospitals));
                cmd.AddParameter("@MonitorOutQty", SqlDbType.Bit, ConvertNullObjectToDBNull(p.MonitorOutQty));
                cmd.AddParameter("@LimitedOutQty", SqlDbType.Int, ConvertNullObjectToDBNull(p.LimitedOutQty));
                cmd.AddParameter("@RemainWarningLevel1", SqlDbType.Int, ConvertNullObjectToDBNull(p.RemainWarningLevel1));
                cmd.AddParameter("@RemainWarningLevel2", SqlDbType.Int, ConvertNullObjectToDBNull(p.RemainWarningLevel2));

                cmd.AddParameter("@V_RouteOfAdministration", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.RouteOfAdministration != null ? p.RouteOfAdministration.LookupID : 0));
                cmd.AddParameter("@DosageForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.DosageForm));
                cmd.AddParameter("@DrugForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.DrugForm));
                cmd.AddParameter("@V_VENType", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.V_VENType));
                cmd.AddParameter("@BiddingHospital", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.BiddingHospital));
                cmd.AddParameter("@ReportBrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.ReportBrandName));
                cmd.AddParameter("@BidDecisionNumAndOrdinalNum", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.BidDecisionNumAndOrdinalNum));
                cmd.AddParameter("@BidEffectiveDate", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.BidEffectiveDate));
                cmd.AddParameter("@Note", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Note));
                cmd.AddParameter("@TCKTAndTCCNGroup", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.TCKTAndTCCNGroup));
                cmd.AddParameter("@V_GroupTypeForReport20", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.V_GroupTypeForReport20));
                cmd.AddParameter("@RefPharmacyDrugCatID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.RefPharmacyDrugCatID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.MatchRefGenMedProduct != null ? p.MatchRefGenMedProduct.GenMedProductID : 0));
                cmd.AddParameter("@TLThanhToan", SqlDbType.Decimal, ConvertNullObjectToDBNull(p.TLThanhToan));
                /*▼====: #004*/
                cmd.AddParameter("@BidCode", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.BidCode));
                cmd.AddParameter("@V_ProductScope", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.V_ProductScope));
                cmd.AddParameter("@HITTypeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.HITTypeID));
                /*▲====: #004*/
                /*▼====: #009*/
                cmd.AddParameter("@V_MedProductType", SqlDbType.NVarChar, ConvertNullObjectToDBNull(11001));//V_MedProductType: 11001 Thuốc, 11002 Y cụ, 11003 Hóa chất.
                /*▲====: #009*/
                //▼====== #013
                cmd.AddParameter("@V_CatDrugType", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.V_CatDrugType)); //Tất cả các khoa: 82201, Khoa dược: 82202, Nhà thuốc: 82203
                //▲====== #013
                cmd.AddParameter("@GenericID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.SelectedGeneric.DrugClassID));
                cn.Open();

                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }
        //▲===== 25072018 TTM
        public override List<RefGenericDrugDetail> GetAllRefDrugGenericDetails()
        {
            throw new NotImplementedException();
        }

        public override RefGenericDrugDetail GetRefDrugGenericDetailsByID(long drugID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetails_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramdrugID = new SqlParameter("@DrugID", SqlDbType.BigInt);
                paramdrugID.Value = drugID;
                cmd.Parameters.Add(paramdrugID);

                cn.Open();
                RefGenericDrugDetail drug = null;

                IDataReader reader = ExecuteReader(cmd);

                if (reader != null && reader.Read())
                {
                    drug = GetRefDrugGenericDetailFromReader(reader);
                    reader.Close();
                }
                return drug;
            }
        }

        public override List<RefGenericDrugDetail> GetRefDrugGenericDetails(int IsMedDept, int pageIndex, int pageSize,
                                                                            bool bCountTotal, out int totalCount)
        {
            string value = "";
            totalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetails_All", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramIsMedDept = new SqlParameter("@IsMedDept", SqlDbType.TinyInt);
                paramIsMedDept.Value = IsMedDept;
                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(value);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramIsMedDept);
                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<RefGenericDrugDetail> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetRefDrugGenericCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != DBNull.Value)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        public override bool InsertRefDrugGenericDetail(RefGenericDrugDetail p, out long Total)
        {
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetails_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@HIDrugCode5084", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.HIDrugCode5084));
                cmd.AddParameter("@CountryID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.SeletedCountry.CountryID));
                cmd.AddParameter("@DrugClassID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(p.SeletedDrugClass.DrugClassID));
                cmd.AddParameter("@RefGenDrugBHYT_CatID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(p.RefGenDrugBHYT_CatID));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.RefGenDrugCatID_1));

                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, p.BrandName);
                cmd.AddParameter("@GenericName", SqlDbType.NVarChar, p.GenericName);
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.PCOID));
                cmd.AddParameter("@UnitID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.SeletedUnit.UnitID));
                cmd.AddParameter("@UnitUseID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.SeletedUnitUse.UnitID));
                cmd.AddParameter("@DispenseVolume", SqlDbType.Float, ConvertNullObjectToDBNull(p.DispenseVolume));

                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.SdlDescription));
                cmd.AddParameter("@Composition", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Composition));
                cmd.AddParameter("@ActiveIngredient", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.ActiveIngredient));
                cmd.AddParameter("@Indication", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Indication));
                cmd.AddParameter("@Contraindication", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Contraindication));
                cmd.AddParameter("@Content", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Content));
                cmd.AddParameter("@Dosage", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Dosage));
                cmd.AddParameter("@Administration", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Administration));
                cmd.AddParameter("@Precaution_Warn", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Precaution_Warn));
                cmd.AddParameter("@SideEffects", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.SideEffects));
                cmd.AddParameter("@Interaction", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Interaction));
                cmd.AddParameter("@AdvTimeBeforeExpire", SqlDbType.Int, ConvertNullToZero(p.AdvTimeBeforeExpire));
                cmd.AddParameter("@OutNotes", SqlDbType.NVarChar, ""); //p.OutNotes
                cmd.AddParameter("@InsuranceCover", SqlDbType.Bit, ConvertNullToFalse(p.InsuranceCover));
                cmd.AddParameter("@IsConsult", SqlDbType.Bit, ConvertNullToFalse(p.IsConsult));
                cmd.AddParameter("@DIsActive", SqlDbType.Bit, true); //p.DIsActive
                cmd.AddParameter("@Packaging", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Packaging));
                cmd.AddParameter("@Visa", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.Visa));
                cmd.AddParameter("@DrugCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.DrugCode));
                cmd.AddParameter("@HIDrugCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.HIDrugCode));
                cmd.AddParameter("@UnitPackaging", SqlDbType.Int, ConvertNullObjectToDBNull(p.UnitPackaging));
                cmd.AddParameter("@NumberOfEstimatedMonths", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(p.NumberOfEstimatedMonths_F));
                cmd.AddParameter("@FactorSafety", SqlDbType.Int, ConvertNullObjectToDBNull(p.FactorSafety));
                cmd.AddParameter("@ProductCodeRefNum", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.ProductCodeRefNum));
                cmd.AddParameter("@HosID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.HosID));
                cmd.AddParameter("@KeepRefrigerated", SqlDbType.Bit, ConvertNullObjectToDBNull(p.KeepRefrigerated));

                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(p.ConvertDetailsListToXml()));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.StaffID));
                cmd.AddParameter("@MaxDayPrescribed", SqlDbType.SmallInt,
                            ConvertNullObjectToDBNull(p.MaxDayPrescribed));
                //Dinh them
                SqlParameter paramTotal = new SqlParameter("@DrugID", SqlDbType.BigInt);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);

                cmd.AddParameter("@IsWarningHI", SqlDbType.Bit, ConvertNullObjectToDBNull(p.IsWarningHI));
                cmd.AddParameter("@WinningHospitals", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.WinningHospitals));
                cmd.AddParameter("@MonitorOutQty", SqlDbType.Bit, ConvertNullObjectToDBNull(p.MonitorOutQty));
                cmd.AddParameter("@LimitedOutQty", SqlDbType.Int, ConvertNullObjectToDBNull(p.LimitedOutQty));
                cmd.AddParameter("@RemainWarningLevel1", SqlDbType.Int, ConvertNullObjectToDBNull(p.RemainWarningLevel1));
                cmd.AddParameter("@RemainWarningLevel2", SqlDbType.Int, ConvertNullObjectToDBNull(p.RemainWarningLevel2));

                cmd.AddParameter("@V_RouteOfAdministration", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.RouteOfAdministration != null ? p.RouteOfAdministration.LookupID : 0));
                cmd.AddParameter("@DosageForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.DosageForm));
                cmd.AddParameter("@DrugForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.DrugForm));
                cmd.AddParameter("@V_VENType", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.V_VENType));
                cmd.AddParameter("@BiddingHospital", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.BiddingHospital));
                cmd.AddParameter("@ReportBrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.ReportBrandName));
                cmd.AddParameter("@BidDecisionNumAndOrdinalNum", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.BidDecisionNumAndOrdinalNum));
                cmd.AddParameter("@BidEffectiveDate", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.BidEffectiveDate));
                cmd.AddParameter("@Note", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Note));
                cmd.AddParameter("@TCKTAndTCCNGroup", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.TCKTAndTCCNGroup));
                cmd.AddParameter("@V_GroupTypeForReport20", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.V_GroupTypeForReport20));
                cmd.AddParameter("@RefPharmacyDrugCatID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.RefPharmacyDrugCatID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.MatchRefGenMedProduct != null ? p.MatchRefGenMedProduct.GenMedProductID : 0));
                cmd.AddParameter("@TLThanhToan", SqlDbType.Decimal, ConvertNullObjectToDBNull(p.TLThanhToan));
                /*▼====: #004*/
                cmd.AddParameter("@BidCode", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.BidCode));
                cmd.AddParameter("@V_ProductScope", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.V_ProductScope));
                cmd.AddParameter("@HITTypeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.HITTypeID));
                /*▲====: #004*/
                cn.Open();

                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (paramTotal.Value != null)
                {
                    Total = (long)paramTotal.Value;
                }
                else
                    Total = -1;
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        //▼===== 25072018 TTM
        public override bool InsertRefDrugGenericDetail_New(RefGenericDrugDetail p, out long Total)
        {
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetails_Insert_New", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@HIDrugCode5084", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.HIDrugCode5084));
                cmd.AddParameter("@CountryID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.SeletedCountry.CountryID));
                cmd.AddParameter("@DrugClassID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(p.SeletedDrugClass.DrugClassID));
                cmd.AddParameter("@RefGenDrugBHYT_CatID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(p.RefGenDrugBHYT_CatID));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.RefGenDrugCatID_1));

                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, p.BrandName);
                cmd.AddParameter("@GenericName", SqlDbType.NVarChar, p.GenericName);
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.PCOID));
                cmd.AddParameter("@UnitID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.SeletedUnit.UnitID));
                cmd.AddParameter("@UnitUseID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.SeletedUnitUse.UnitID));
                cmd.AddParameter("@DispenseVolume", SqlDbType.Float, ConvertNullObjectToDBNull(p.DispenseVolume));

                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.SdlDescription));
                cmd.AddParameter("@Composition", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Composition));
                cmd.AddParameter("@ActiveIngredient", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.ActiveIngredient));
                cmd.AddParameter("@Indication", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Indication));
                cmd.AddParameter("@Contraindication", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Contraindication));
                cmd.AddParameter("@Content", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Content));
                cmd.AddParameter("@Dosage", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Dosage));
                cmd.AddParameter("@Administration", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Administration));
                cmd.AddParameter("@Precaution_Warn", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Precaution_Warn));
                cmd.AddParameter("@SideEffects", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.SideEffects));
                cmd.AddParameter("@Interaction", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Interaction));
                cmd.AddParameter("@AdvTimeBeforeExpire", SqlDbType.Int, ConvertNullToZero(p.AdvTimeBeforeExpire));
                cmd.AddParameter("@OutNotes", SqlDbType.NVarChar, ""); //p.OutNotes
                cmd.AddParameter("@InsuranceCover", SqlDbType.Bit, ConvertNullToFalse(p.InsuranceCover));
                cmd.AddParameter("@IsConsult", SqlDbType.Bit, ConvertNullToFalse(p.IsConsult));
                cmd.AddParameter("@DIsActive", SqlDbType.Bit, true); //p.DIsActive
                cmd.AddParameter("@Packaging", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Packaging));
                cmd.AddParameter("@Visa", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.Visa));
                cmd.AddParameter("@DrugCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.DrugCode));
                cmd.AddParameter("@HIDrugCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.HIDrugCode));
                cmd.AddParameter("@UnitPackaging", SqlDbType.Int, ConvertNullObjectToDBNull(p.UnitPackaging));
                cmd.AddParameter("@NumberOfEstimatedMonths", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(p.NumberOfEstimatedMonths_F));
                cmd.AddParameter("@FactorSafety", SqlDbType.Int, ConvertNullObjectToDBNull(p.FactorSafety));
                cmd.AddParameter("@ProductCodeRefNum", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.ProductCodeRefNum));
                cmd.AddParameter("@HosID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.HosID));
                cmd.AddParameter("@KeepRefrigerated", SqlDbType.Bit, ConvertNullObjectToDBNull(p.KeepRefrigerated));

                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(p.ConvertDetailsListToXml()));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.StaffID));
                cmd.AddParameter("@MaxDayPrescribed", SqlDbType.SmallInt,
                            ConvertNullObjectToDBNull(p.MaxDayPrescribed));
                //Dinh them
                SqlParameter paramTotal = new SqlParameter("@DrugID", SqlDbType.BigInt);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);

                cmd.AddParameter("@IsWarningHI", SqlDbType.Bit, ConvertNullObjectToDBNull(p.IsWarningHI));
                cmd.AddParameter("@WinningHospitals", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.WinningHospitals));
                cmd.AddParameter("@MonitorOutQty", SqlDbType.Bit, ConvertNullObjectToDBNull(p.MonitorOutQty));
                cmd.AddParameter("@LimitedOutQty", SqlDbType.Int, ConvertNullObjectToDBNull(p.LimitedOutQty));
                cmd.AddParameter("@RemainWarningLevel1", SqlDbType.Int, ConvertNullObjectToDBNull(p.RemainWarningLevel1));
                cmd.AddParameter("@RemainWarningLevel2", SqlDbType.Int, ConvertNullObjectToDBNull(p.RemainWarningLevel2));

                cmd.AddParameter("@V_RouteOfAdministration", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.RouteOfAdministration != null ? p.RouteOfAdministration.LookupID : 0));
                cmd.AddParameter("@DosageForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.DosageForm));
                cmd.AddParameter("@DrugForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.DrugForm));
                cmd.AddParameter("@V_VENType", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.V_VENType));
                cmd.AddParameter("@BiddingHospital", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.BiddingHospital));
                cmd.AddParameter("@ReportBrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.ReportBrandName));
                cmd.AddParameter("@BidDecisionNumAndOrdinalNum", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.BidDecisionNumAndOrdinalNum));
                cmd.AddParameter("@BidEffectiveDate", SqlDbType.VarChar, ConvertNullObjectToDBNull(p.BidEffectiveDate));
                cmd.AddParameter("@Note", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.Note));
                cmd.AddParameter("@TCKTAndTCCNGroup", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.TCKTAndTCCNGroup));
                cmd.AddParameter("@V_GroupTypeForReport20", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.V_GroupTypeForReport20));
                cmd.AddParameter("@RefPharmacyDrugCatID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.RefPharmacyDrugCatID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.MatchRefGenMedProduct != null ? p.MatchRefGenMedProduct.GenMedProductID : 0));
                cmd.AddParameter("@TLThanhToan", SqlDbType.Decimal, ConvertNullObjectToDBNull(p.TLThanhToan));
                /*▼====: #004*/
                cmd.AddParameter("@BidCode", SqlDbType.NVarChar, ConvertNullObjectToDBNull(p.BidCode));
                cmd.AddParameter("@V_ProductScope", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.V_ProductScope));
                cmd.AddParameter("@HITTypeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.HITTypeID));
                /*▲====: #004*/

                //▼====== #013
                cmd.AddParameter("@V_CatDrugType", SqlDbType.BigInt, ConvertNullObjectToDBNull(82203)); //Tất cả các khoa: 82201, Khoa dược: 82202, Nhà thuốc: 82203
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(11001)); //V_MedProductType: 11001 Thuốc, 11002 Y cụ, 11003 Hóa chất.
                //▲====== #013
                cmd.AddParameter("@GenericID", SqlDbType.BigInt, ConvertNullObjectToDBNull(p.SelectedGeneric.DrugClassID));
                cn.Open();

                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (paramTotal.Value != null)
                {
                    Total = (long)paramTotal.Value;
                }
                else
                    Total = -1;
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }
        //▲===== 25072018 TTM
        #endregion

        #region 5. unit member

        #region 5.1 unit member
        public override List<RefUnit> GetUnits()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefUnits_All", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                List<RefUnit> units = null;

                IDataReader reader = ExecuteReader(cmd);

                units = GetUnitCollectionFromReader(reader);
                reader.Close();
                return units;
            }
        }

        public override List<RefUnit> GetPagingUnits(int pageIndex, int pageSize, bool bCountTotal, out int totalCount)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefUnits_AllPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<RefUnit> units = null;

                IDataReader reader = ExecuteReader(cmd);

                units = GetUnitCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;

                return units;
            }
        }

        public override List<RefUnit> SearchUnit(string UnitName, int pageIndex, int pageSize, bool bCountTotal,
                                                 out int totalCount)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefUnits_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlParameter paramUnitName = new SqlParameter("@UnitName", SqlDbType.NVarChar);
                paramUnitName.Value = ConvertNullObjectToDBNull(UnitName);
                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramUnitName);
                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<RefUnit> units = null;

                IDataReader reader = ExecuteReader(cmd);

                units = GetUnitCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;

                return units;
            }
        }

        public override bool DeleteUnitByID(long unitID)
        {
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefUnits_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@UnitID", SqlDbType.BigInt, unitID);
                cmd.AddParameter("@UnitActive", SqlDbType.Bit, false);

                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool UpdateUnit(RefUnit unit)
        {
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefUnits_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@UnitID", SqlDbType.BigInt, unit.UnitID);
                cmd.AddParameter("@UnitCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(unit.UnitCode));
                cmd.AddParameter("@UnitName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(unit.UnitName));
                cmd.AddParameter("@UnitVolume", SqlDbType.Float, ConvertNullObjectToDBNull(unit.UnitVolume));
                cmd.AddParameter("@UnitActive", SqlDbType.Bit, true);

                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool AddNewUnit(RefUnit newunit)
        {
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefUnits_Insert", cn);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@UnitCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(newunit.UnitCode));
                cmd.AddParameter("@UnitName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(newunit.UnitName));
                cmd.AddParameter("@UnitActive", SqlDbType.Bit, true);
                cmd.AddParameter("@UnitVolume", SqlDbType.Float, ConvertNullObjectToDBNull(newunit.UnitVolume));

                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override RefUnit GetUnitByID(long UnitID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefUnits_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@UnitID", SqlDbType.BigInt, UnitID);

                cn.Open();
                RefUnit unit = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    unit = GetUnitFromReader(reader);
                }

                reader.Close();
                return unit;
            }
        }

        #endregion

        #region 5.2 unit member

        public override List<RefUnit> GetDrugDeptUnits()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptRefUnits_All", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                List<RefUnit> units = null;

                IDataReader reader = ExecuteReader(cmd);

                units = GetUnitCollectionFromReader(reader);
                reader.Close();
                return units;
            }
        }


        // ------ DPT 03/10/2017 hoạt động chỉ đạo tuyến  và hoạt động ngiên cứu khoa học

        public override List<Lookup> GetTrainningTypeList()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetTrainningType", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                List<Lookup> units = null;
                IDataReader reader = ExecuteReader(cmd);

                units = GetTrainningTypeListFromReader(reader);
                reader.Close();
                return units;
            }
        }
        public override List<ScientificResearchActivities> GetScientificResearchActivityList(ScientificResearchActivities objActivity)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetScientificResearchActivityList_All", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ActivityName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(objActivity.ActivityName));
                cmd.AddParameter("@StartDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(objActivity.StartDate));
                cmd.AddParameter("@EndDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(objActivity.EndDate));
                cn.Open();
                List<ScientificResearchActivities> units = null;
                IDataReader reader = ExecuteReader(cmd);

                units = GetScientificResearchActivityFromReader(reader);
                reader.Close();
                return units;
            }
        }

        public override List<ActivityClasses> ActivityClassListAll(long ClassID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spActivityClassListAll", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ClassID", SqlDbType.BigInt, ClassID);
                cn.Open();
                List<ActivityClasses> units = null;
                IDataReader reader = ExecuteReader(cmd);
                units = ActivityClassListAllFromReader(reader);
                reader.Close();
                return units;
            }
        }

        public override List<TrainingForSubOrg> GetTrainingForSubOrgList(TrainingForSubOrg objActivity)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetTrainingForSubOrgList", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@TrainingName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(objActivity.TrainingName));
                cmd.AddParameter("@TrainingStartDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(objActivity.TrainingStartDate));
                cmd.AddParameter("@TrainingEndDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(objActivity.TrainingEndDate));
                cmd.AddParameter("@V_TrainingType", SqlDbType.BigInt, ConvertNullObjectToDBNull(objActivity.V_TrainingType));
                cn.Open();
                List<TrainingForSubOrg> units = null;
                IDataReader reader = ExecuteReader(cmd);

                units = GetTrainingForSubOrgListFromReader(reader);
                reader.Close();
                return units;
            }
        }

        public override bool InsertUpdateScientificResearchActivity(bool ISAdd, ScientificResearchActivities objActivity, out int Result)
        {
            bool check = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInsertUpdateScientificResearchActivity", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ISAdd", SqlDbType.Bit, ISAdd);
                cmd.AddParameter("@ActivityName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(objActivity.ActivityName));
                cmd.AddParameter("@AttendeeName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(objActivity.AttendeeName));
                cmd.AddParameter("@StartDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(objActivity.StartDate));
                cmd.AddParameter("@EndDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(objActivity.EndDate));
                cmd.AddParameter("@V_ActivityType", SqlDbType.BigInt, ConvertNullObjectToDBNull(objActivity.V_ActivityType));
                cmd.AddParameter("@ActivityID", SqlDbType.BigInt, ConvertNullObjectToDBNull(objActivity.ActivityID));
                cmd.AddParameter("@AcceptedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(objActivity.AcceptedDate));
                cmd.AddParameter("@ApprovedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(objActivity.ApprovedDate));
                cmd.AddParameter("@Note", SqlDbType.NVarChar, ConvertNullObjectToDBNull(objActivity.Note));
                cmd.AddParameter("@V_ActivityMethodType", SqlDbType.BigInt, ConvertNullObjectToDBNull(objActivity.V_ActivityMethodType));
                SqlParameter paramResult = new SqlParameter("@Result", SqlDbType.Int);
                paramResult.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramResult);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                Result = -1;
                if (count != 0)
                {
                    check = true;
                    if (paramResult != null)
                    {
                        Result = (int)paramResult.Value;
                    }

                }
                cmd.Dispose();
            }
            return check;
        }

        public override bool InsertUpdateTrainingForSubOrg(bool ISAdd, TrainingForSubOrg objTraining, out int Result)
        {
            bool check = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInsertUpdateTrainingForSubOrg", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ISAdd", SqlDbType.Bit, ISAdd);
                cmd.AddParameter("@TrainingName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(objTraining.TrainingName));
                cmd.AddParameter("@TrainingPerson", SqlDbType.NVarChar, ConvertNullObjectToDBNull(objTraining.TrainingPerson));
                cmd.AddParameter("@TrainingPlace", SqlDbType.NVarChar, ConvertNullObjectToDBNull(objTraining.TrainingPlace));
                cmd.AddParameter("@TrainingStartDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(objTraining.TrainingStartDate));
                cmd.AddParameter("@TrainingEndDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(objTraining.TrainingEndDate));
                cmd.AddParameter("@V_TrainingType", SqlDbType.BigInt, ConvertNullObjectToDBNull(objTraining.V_TrainingType));
                cmd.AddParameter("@TrainingID", SqlDbType.BigInt, ConvertNullObjectToDBNull(objTraining.TrainingID));
                cmd.AddParameter("@TotalAttendees", SqlDbType.Int, ConvertNullObjectToDBNull(objTraining.TotalAttendees));
                cmd.AddParameter("@ActivityClassID", SqlDbType.BigInt, ConvertNullObjectToDBNull(objTraining.ActivityClassID));
                SqlParameter paramResult = new SqlParameter("@Result", SqlDbType.Int);
                paramResult.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramResult);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                Result = -1;
                if (count != 0)
                {
                    check = true;
                    if (paramResult != null)
                    {
                        Result = (int)paramResult.Value;
                    }

                }
                cmd.Dispose();
            }
            return check;
        }
        public override bool DeleteScientificResearchActivity(long ActivityID, out int Result)
        {
            bool check = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDeleteScientificResearchActivity", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ActivityID", SqlDbType.BigInt, ActivityID);
                SqlParameter paramResult = new SqlParameter("@Result", SqlDbType.Int);
                paramResult.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramResult);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                Result = -1;
                if (count != 0)
                {
                    check = true;
                    if (paramResult != null)
                    {
                        Result = (int)paramResult.Value;
                    }

                }
                cmd.Dispose();
            }
            return check;
        }
        public override bool DeleteTrainingForSubOrg(long TrainingID, out int Result)
        {
            bool check = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDeleteTrainingForSubOrg", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@TrainingID", SqlDbType.BigInt, TrainingID);
                SqlParameter paramResult = new SqlParameter("@Result", SqlDbType.Int);
                paramResult.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramResult);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                Result = -1;
                if (count != 0)
                {
                    check = true;
                    if (paramResult != null)
                    {
                        Result = (int)paramResult.Value;
                    }

                }
                cmd.Dispose();
            }
            return check;
        }

        // DPT 03/10/2017 hoạt động chỉ đạo tuyến  và hoạt động ngiên cứu khoa học -----------------------------



        public override List<RefUnit> GetPagingDrugDeptUnits(int pageIndex, int pageSize, bool bCountTotal, out int totalCount)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptRefUnits_AllPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<RefUnit> units = null;

                IDataReader reader = ExecuteReader(cmd);

                units = GetUnitCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;

                return units;
            }
        }

        public override List<RefUnit> SearchDrugDeptUnit(string UnitName, int pageIndex, int pageSize, bool bCountTotal,
                                                 out int totalCount)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptRefUnits_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlParameter paramUnitName = new SqlParameter("@UnitName", SqlDbType.NVarChar);
                paramUnitName.Value = ConvertNullObjectToDBNull(UnitName);
                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramUnitName);
                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<RefUnit> units = null;

                IDataReader reader = ExecuteReader(cmd);

                units = GetUnitCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;

                return units;
            }
        }

        public override bool DeleteDrugDeptUnitByID(long unitID)
        {
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptRefUnits_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@UnitID", SqlDbType.BigInt, unitID);
                cmd.AddParameter("@UnitActive", SqlDbType.Bit, false);

                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool UpdateDrugDeptUnit(RefUnit unit)
        {
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptRefUnits_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@UnitID", SqlDbType.BigInt, unit.UnitID);
                cmd.AddParameter("@UnitCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(unit.UnitCode));
                cmd.AddParameter("@UnitName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(unit.UnitName));
                cmd.AddParameter("@UnitVolume", SqlDbType.Float, ConvertNullObjectToDBNull(unit.UnitVolume));
                cmd.AddParameter("@UnitActive", SqlDbType.Bit, true);

                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool AddNewDrugDeptUnit(RefUnit newunit)
        {
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptRefUnits_Insert", cn);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@UnitCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(newunit.UnitCode));
                cmd.AddParameter("@UnitName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(newunit.UnitName));
                cmd.AddParameter("@UnitActive", SqlDbType.Bit, true);
                cmd.AddParameter("@UnitVolume", SqlDbType.Float, ConvertNullObjectToDBNull(newunit.UnitVolume));

                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override RefUnit GetDrugDeptUnitByID(long UnitID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptRefUnits_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@UnitID", SqlDbType.BigInt, UnitID);

                cn.Open();
                RefUnit unit = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    unit = GetUnitFromReader(reader);
                }

                reader.Close();
                return unit;
            }
        }
        #endregion
        #endregion

        #region 6. FamilyTherapy member

        #region 6.1 DrugClasses member
        public override DrugClass GetFamilyTherapyByID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugClass_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugClassID", SqlDbType.BigInt, ID);

                cn.Open();
                DrugClass familytherapy = null;

                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    familytherapy = GetDrugClassFromReader(reader);
                }

                reader.Close();
                return familytherapy;
            }
        }

        public override bool AddNewFamilyTherapy(DrugClass newfamily, out string StrError)
        {
            StrError = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugClass_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ParDrugClassID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(newfamily.ParDrugClassID));
                cmd.AddParameter("@FaName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(newfamily.FaName));
                cmd.AddParameter("@FaDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(newfamily.FaDescription));
                cmd.AddParameter("@FaActive", SqlDbType.Bit, true);
                cmd.AddParameter("@DrugClassCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(newfamily.DrugClassID));
                SqlParameter paramStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 256);
                paramStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramStrError);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                try
                {
                    StrError = paramStrError.Value.ToString();
                }
                catch
                {
                    StrError = "";
                }
                cmd.Dispose();
                return count > 0;
            }

        }

        public override bool UpdateFamilyTherapy(DrugClass updatefamily, out string StrError)
        {
            StrError = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugClass_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugClassID", SqlDbType.BigInt, updatefamily.DrugClassID);
                cmd.AddParameter("@ParDrugClassID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(updatefamily.ParDrugClassID));
                cmd.AddParameter("@FaName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(updatefamily.FaName));
                cmd.AddParameter("@FaDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(updatefamily.FaDescription));
                cmd.AddParameter("@FaActive", SqlDbType.Bit, true);
                cmd.AddParameter("@DrugClassCode", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(updatefamily.DrugClassCode));
                SqlParameter paramStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 256);
                paramStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramStrError);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                try
                {
                    StrError = paramStrError.Value.ToString();
                }
                catch
                {
                    StrError = "";
                }
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool DeleteFamilyTherapy(long deletefamily, out string StrError)
        {
            StrError = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugClass_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugClassID", SqlDbType.BigInt, deletefamily);
                SqlParameter paramStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 256);
                paramStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramStrError);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                try
                {
                    StrError = paramStrError.Value.ToString();
                }
                catch
                {
                    StrError = "";
                }
                cmd.Dispose();
                return count > 0;
            }
        }

        public override List<DrugClass> GetFamilyTherapyParent(long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugClass_AllParent", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<DrugClass> familytherapies = null;

                IDataReader reader = ExecuteReader(cmd);

                familytherapies = GetDrugClassCollectionFromReader(reader);
                reader.Close();
                return familytherapies;
            }
        }

        public override List<DrugClass> GetFamilyTherapies(long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugClass_All", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<DrugClass> familytherapies = null;

                IDataReader reader = ExecuteReader(cmd);

                familytherapies = GetDrugClassCollectionFromReader(reader);
                reader.Close();
                return familytherapies;
            }
        }

        public override List<DrugClass> GetSearchFamilyTherapies(string faname, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugClass_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@FaName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(faname));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<DrugClass> familytherapies = null;

                IDataReader reader = ExecuteReader(cmd);

                familytherapies = GetDrugClassCollectionFromReader(reader);
                reader.Close();
                return familytherapies;
            }
        }
        #endregion

        #region 6.2 DrugDeptClasses member

        public override DrugClass GetDrugDeptClassesByID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptClass_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugClassID", SqlDbType.BigInt, ID);

                cn.Open();
                DrugClass DrugDeptClasses = null;

                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    DrugDeptClasses = GetDrugClassFromReader(reader);
                }

                reader.Close();
                return DrugDeptClasses;
            }
        }

        public override bool AddNewDrugDeptClasses(DrugClass newfamily, out string StrError)
        {
            StrError = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptClass_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ParDrugClassID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(newfamily.ParDrugClassID));
                cmd.AddParameter("@FaName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(newfamily.FaName));
                cmd.AddParameter("@FaDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(newfamily.FaDescription));
                cmd.AddParameter("@FaActive", SqlDbType.Bit, true);
                cmd.AddParameter("@DrugClassCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(newfamily.DrugClassID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(newfamily.V_MedProductType));
                SqlParameter paramStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 256);
                paramStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramStrError);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                try
                {
                    StrError = paramStrError.Value.ToString();
                }
                catch
                {
                    StrError = "";
                }
                cmd.Dispose();
                return count > 0;
            }

        }

        public override bool UpdateDrugDeptClasses(DrugClass updatefamily, out string StrError)
        {
            StrError = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptClass_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugClassID", SqlDbType.BigInt, updatefamily.DrugClassID);
                cmd.AddParameter("@ParDrugClassID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(updatefamily.ParDrugClassID));
                cmd.AddParameter("@FaName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(updatefamily.FaName));
                cmd.AddParameter("@FaDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(updatefamily.FaDescription));
                cmd.AddParameter("@FaActive", SqlDbType.Bit, true);
                cmd.AddParameter("@DrugClassCode", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(updatefamily.DrugClassCode));
                SqlParameter paramStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 256);
                paramStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramStrError);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                try
                {
                    StrError = paramStrError.Value.ToString();
                }
                catch
                {
                    StrError = "";
                }
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool DeleteDrugDeptClasses(long deletefamily, out string StrError)
        {
            StrError = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptClass_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugClassID", SqlDbType.BigInt, deletefamily);
                SqlParameter paramStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 256);
                paramStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramStrError);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                try
                {
                    StrError = paramStrError.Value.ToString();
                }
                catch
                {
                    StrError = "";
                }
                cmd.Dispose();
                return count > 0;
            }
        }

        public override List<DrugClass> GetDrugDeptClassesParent(long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptClass_AllParent", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<DrugClass> familytherapies = null;

                IDataReader reader = ExecuteReader(cmd);

                familytherapies = GetDrugClassCollectionFromReader(reader);
                reader.Close();
                return familytherapies;
            }
        }

        public override List<DrugClass> GetDrugDeptClasses(long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptClass_All", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<DrugClass> familytherapies = null;

                IDataReader reader = ExecuteReader(cmd);

                familytherapies = GetDrugClassCollectionFromReader(reader);
                reader.Close();
                return familytherapies;
            }
        }

        public override List<DrugClass> GetSearchDrugDeptClasses(string faname, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptClass_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@FaName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(faname));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<DrugClass> familytherapies = null;

                IDataReader reader = ExecuteReader(cmd);

                familytherapies = GetDrugClassCollectionFromReader(reader);
                reader.Close();
                return familytherapies;
            }
        }
        /*▼====: #012*/
        public override List<DrugClass> GetAllRefGeneric()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetAllRefGeneric", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                List<DrugClass> refGeneric = null;

                IDataReader reader = ExecuteReader(cmd);

                refGeneric = GetAllRefGenericCollectionFromReader(reader);
                reader.Close();
                return refGeneric;
            }
        }
        /*▲====: #012*/
        #endregion
        #endregion

        #region 7. Supplier member

        public override Supplier GetSupplierByID(long supplierID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplier_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, supplierID);

                cn.Open();
                Supplier supplier = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    supplier = GetSupplierFromReader(reader);
                }

                reader.Close();
                return supplier;
            }
        }

        public override bool DeleteSupplierByID(long supplierID)
        {
            bool results = false;
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spSupplier_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, supplierID);
                    cmd.AddParameter("@Active", SqlDbType.Bit, false);

                    cn.Open();
                    int count = 0;
                    count = cmd.ExecuteNonQuery();
                    if (count != 0)
                    {
                        results = true;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool UpdateSupplier(Supplier supplier, out string StrError)
        {
            StrError = "";
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplier_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupplierID", SqlDbType.NVarChar, supplier.SupplierID);
                cmd.AddParameter("@SupplierName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.SupplierName));
                cmd.AddParameter("@SupplierCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(supplier.SupplierCode));
                cmd.AddParameter("@TelephoneNumber", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.TelephoneNumber));
                cmd.AddParameter("@WebSiteAddress", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.WebSiteAddress));
                cmd.AddParameter("@SupplierDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.SupplierDescription));
                cmd.AddParameter("@PAHEmailAddress", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.PAHEmailAddress));
                cmd.AddParameter("@FaxNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.FaxNumber));
                cmd.AddParameter("@ContactPerson", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.ContactPerson));
                cmd.AddParameter("@CityStateZipCode", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.CityStateZipCode));
                cmd.AddParameter("@CertificateAgency", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.CertificateAgency));
                cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.Address));
                cmd.AddParameter("@AccountNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(supplier.AccountNumber));
                cmd.AddParameter("@BankName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.BankName));
                cmd.AddParameter("@Active", SqlDbType.Bit, true);
                SqlParameter paramStrError = new SqlParameter("@StrError", SqlDbType.VarChar, 1024);
                paramStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramStrError);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                    if (paramStrError.Value != DBNull.Value)
                    {
                        StrError = paramStrError.Value.ToString();
                    }
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool AddNewSupplier(Supplier supplier, out long SupplierID, out string StrError)
        {
            bool results = false;
            StrError = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplier_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupplierName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.SupplierName));
                cmd.AddParameter("@SupplierCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(supplier.SupplierCode));
                cmd.AddParameter("@SupplierType", SqlDbType.BigInt, supplier.SupplierType);
                cmd.AddParameter("@TelephoneNumber", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.TelephoneNumber));
                cmd.AddParameter("@WebSiteAddress", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.WebSiteAddress));
                cmd.AddParameter("@SupplierDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.SupplierDescription));
                cmd.AddParameter("@PAHEmailAddress", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.PAHEmailAddress));
                cmd.AddParameter("@FaxNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.FaxNumber));
                cmd.AddParameter("@ContactPerson", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.ContactPerson));
                cmd.AddParameter("@CityStateZipCode", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.CityStateZipCode));
                cmd.AddParameter("@CertificateAgency", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.CertificateAgency));
                cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.Address));
                cmd.AddParameter("@Active", SqlDbType.Bit, true);
                cmd.AddParameter("@AccountNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(supplier.AccountNumber));
                cmd.AddParameter("@BankName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.BankName));
                SqlParameter paramTotal = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramTotal.Direction = ParameterDirection.Output;
                SqlParameter paramStrError = new SqlParameter("@StrError", SqlDbType.VarChar, 1024);
                paramStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cmd.Parameters.Add(paramStrError);
                cn.Open();

                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (paramTotal.Value != null)
                {
                    SupplierID = (long)paramTotal.Value;
                }
                else
                    SupplierID = -1;
                if (paramStrError.Value != DBNull.Value)
                {
                    StrError = paramStrError.Value.ToString();
                }
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override List<Supplier> GetAllSupplierCbx(int supplierType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplier_AllCbx", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@SupplierType", SqlDbType.BigInt, (long)supplierType);
                cn.Open();
                List<Supplier> suppliers = null;

                IDataReader reader = ExecuteReader(cmd);

                suppliers = GetSupplierCollectionFromReader(reader);
                reader.Close();
                return suppliers;
            }
        }

        #endregion

        #region 8. Storage member

        public override List<RefStorageWarehouseType> GetRefStorageWarehouseType_All()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefStorageWarehouseType_All", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                List<RefStorageWarehouseType> storages = null;
                IDataReader reader = ExecuteReader(cmd);
                storages = GetRefStorageWarehouseTypeCollectionFromReader(reader);
                reader.Close();
                return storages;
            }
        }

        public override List<RefDepartment> GetRefDepartment_ByDeptType(long DeptType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefDepartments_ByDeptType", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DeptType", SqlDbType.BigInt, DeptType);
                cn.Open();
                List<RefDepartment> storages = null;
                IDataReader reader = ExecuteReader(cmd);
                storages = GetRefDeptsCollectionFromReader(reader);
                reader.Close();
                return storages;
            }
        }

        public override RefStorageWarehouseLocation GetStorageByID(long storageID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefStorageWarehouseLocation_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, storageID);

                cn.Open();
                RefStorageWarehouseLocation storage = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    storage = GetStorageFromReader(reader);
                }

                reader.Close();
                return storage;
            }
        }


        public override int DeleteStorageByID(long storageID)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefStorageWarehouseLocation_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, storageID);
                cmd.AddParameter("@swhlActive", SqlDbType.Bit, false);
                SqlParameter paramError = new SqlParameter("@Error", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                else
                    results = -1;
                cmd.Dispose();
            }
            return results;
        }

        public override int UpdateStorage(RefStorageWarehouseLocation storage)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefStorageWarehouseLocation_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(storage.StoreID));
                cmd.AddParameter("@StoreTypeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(storage.StoreTypeID));
                cmd.AddParameter("@DeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(storage.DeptID));
                cmd.AddParameter("@swhlName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(storage.swhlName));
                cmd.AddParameter("@swhlNotes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(storage.swhlNotes));
                cmd.AddParameter("@swhlActive", SqlDbType.Bit, true);
                cmd.AddParameter("@ListV_MedProductType", SqlDbType.VarChar, ConvertNullObjectToDBNull(storage.ListV_MedProductType));
                SqlParameter paramError = new SqlParameter("@Error", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                else
                    results = -1;
                cmd.Dispose();
            }
            return results;
        }

        public override int AddNewStorage(RefStorageWarehouseLocation storage)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefStorageWarehouseLocation_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreTypeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(storage.StoreTypeID));
                cmd.AddParameter("@DeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(storage.DeptID));
                cmd.AddParameter("@swhlName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(storage.swhlName));
                cmd.AddParameter("@swhlNotes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(storage.swhlNotes));
                cmd.AddParameter("@swhlActive", SqlDbType.Bit, true);
                cmd.AddParameter("@ListV_MedProductType", SqlDbType.VarChar, ConvertNullObjectToDBNull(storage.ListV_MedProductType));
                SqlParameter paramError = new SqlParameter("@Error", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                else
                    results = -1;
                cmd.Dispose();
            }
            return results;
        }

        public override List<RefStorageWarehouseLocation> GetAllStorages(int pageIndex, int pageSize, bool bCountTotal,
                                                                         out int totalCount)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefStorageWarehouseLocation_All", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<RefStorageWarehouseLocation> storages = null;

                IDataReader reader = ExecuteReader(cmd);

                storages = GetStorageCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;

                return storages;
            }
        }

        public override List<RefStorageWarehouseLocation> GetAllStorages(long? type, bool? bNo, long? DeptID, bool? IsNotSubStorage)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefStorageWarehouseLocation_AllNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@type", SqlDbType.BigInt, ConvertNullObjectToDBNull(type));
                cmd.AddParameter("@flag", SqlDbType.Bit, ConvertNullObjectToDBNull(bNo));
                cmd.AddParameter("@DeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DeptID));
                cmd.AddParameter("@IsNotSubStorage", SqlDbType.Bit, ConvertNullObjectToDBNull(IsNotSubStorage));
                cn.Open();
                List<RefStorageWarehouseLocation> storages = null;
                IDataReader reader = ExecuteReader(cmd);
                storages = GetStorageCollectionFromReader(reader);
                reader.Close();
                return storages;
            }
        }

        public override List<RefStorageWarehouseLocation> GetAllStorages_ForRespon(List<long> allListStoreID, long? type, bool? bNo)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefStorageWarehouseLocation_forRespons", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@type", SqlDbType.BigInt, ConvertNullObjectToDBNull(type));
                cmd.AddParameter("@flag", SqlDbType.Bit, ConvertNullObjectToDBNull(bNo));
                cmd.AddParameter("@xml", SqlDbType.Xml, GetXMLStore(allListStoreID));

                cn.Open();
                List<RefStorageWarehouseLocation> storages = null;
                IDataReader reader = ExecuteReader(cmd);
                storages = GetStorageCollectionFromReader(reader);
                reader.Close();
                return storages;
            }
        }
        private string GetXMLStore(List<long> allListStoreID)
        {
            XDocument xmlDocument;
            string Res = "";

            if (allListStoreID != null && allListStoreID.Count > 0)
            {
                xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes")
                    , new XElement("DS"
                        , from item in allListStoreID select new XElement("Info", new XElement("StoreID", item))
                        )
                    );

                Res = xmlDocument.ToString();
            }

            return Res;
        }
        public override List<RefStorageWarehouseLocation> SearchStorage(string StorageName, int pageIndex, int pageSize,
                                                                        bool bCountTotal, out int totalCount)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefStorageWarehouseLocation_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlParameter paramswhlName = new SqlParameter("@swhlName", SqlDbType.NVarChar);
                paramswhlName.Value = ConvertNullObjectToDBNull(StorageName);
                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramswhlName);
                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<RefStorageWarehouseLocation> storages = null;

                IDataReader reader = ExecuteReader(cmd);

                storages = GetStorageCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;

                return storages;
            }
        }

        public override List<RefStorageWarehouseLocation> GetStoragesByStaffID(long StaffID, long? StoreTypeID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefStorageWarehouseLocation_ByStaffID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, StaffID);
                cmd.AddParameter("@StoreTypeID", SqlDbType.BigInt, StoreTypeID);
                cn.Open();
                List<RefStorageWarehouseLocation> storages = null;
                IDataReader reader = ExecuteReader(cmd);
                storages = GetStorageCollectionFromReader(reader);
                reader.Close();
                return storages;
            }
        }

        #endregion

        #region 9. InwardDrug member

        public override List<InwardDrugInvoice> GetAllInwardDrugInvoice(int pageIndex, int pageSize, bool bCountTotal,
                                                                        out int totalCount)
        {
            string value = "";
            totalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugInvoices_All", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(value);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<InwardDrugInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetspInwardDrugInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        public override List<InwardDrugInvoice> SearchInwardDrugInvoice(InwardInvoiceSearchCriteria criteria,
                                                                        long? TypID, int pageIndex, int pageSize,
                                                                        bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugInvoices_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramInwardID = new SqlParameter("@InwardID", SqlDbType.VarChar, 128);
                paramInwardID.Value = ConvertNullObjectToDBNull(criteria.InwardID);
                SqlParameter paramInvoiveNumber = new SqlParameter("@InvoiceNumber", SqlDbType.VarChar, 128);
                paramInvoiveNumber.Value = ConvertNullObjectToDBNull(criteria.InvoiceNumber);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);

                SqlParameter paramIsInwardOther = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramIsInwardOther.Value = ConvertNullObjectToDBNull(TypID);


                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramInwardID);
                cmd.Parameters.Add(paramInvoiveNumber);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramIsInwardOther);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<InwardDrugInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetspInwardDrugInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }


        public override RefGenericDrugDetail GetRefGenericDrugDetail(long drugID, long? drugVersionID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spGetRefGenericDrugDetail", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(drugID));
                    cmd.AddParameter("@DrugVersionID", SqlDbType.BigInt, ConvertNullObjectToDBNull(drugVersionID));

                    cn.Open();
                    RefGenericDrugDetail product = null;
                    IDataReader reader = ExecuteReader(cmd);
                    if (reader.Read())
                    {
                        product = GetRefDrugGenericDetailFromReader(reader);
                    }
                    reader.Close();
                    cmd.Dispose();
                    return product;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        public override InwardDrugInvoice GetInwardDrugInvoiceByID(long invoiceID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugInvoices_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InvInvoice", SqlDbType.BigInt, invoiceID);
                cn.Open();
                InwardDrugInvoice invoicedrug = null;

                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetspInwardDrugInvoiceFromReader(reader);
                }

                reader.Close();
                return invoicedrug;
            }
        }

        public override List<InwardDrug> GetspInwardDrugDetailsByID(long inviID, int pageSize, int pageIndex
            , bool bCountTotal, out int totalCount
            , out decimal TongTienSPChuaVAT
            , out decimal CKTrenSP
            , out decimal TongTienTrenSPDaTruCK
            , out decimal TongCKTrenHoaDon
            , out decimal TongTienHoaDonCoThueNK
            , out decimal TongTienHoaDonCoVAT
            , out decimal TotalVATDifferenceAmount)
        {
            totalCount = 0;
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;
            TotalVATDifferenceAmount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugs_ByIDPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = " ";

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Decimal, 5, DBNull.Value, ParameterDirection.Output);
                cn.Open();
                List<InwardDrug> inwarddrugs = null;

                IDataReader reader = ExecuteReader(cmd);

                inwarddrugs = GetspInwardDrugCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal)
                {
                    try
                    {
                        totalCount = (int)paramTotal.Value;
                        TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                        CKTrenSP = (decimal)paramCKTrenSP.Value;
                        TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                        TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                        TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                        TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                        TotalVATDifferenceAmount = (decimal)cmd.Parameters.Cast<SqlParameter>().Where(x => x.ParameterName == "@TotalVATDifferenceAmount").FirstOrDefault().Value;
                    }
                    catch
                    {
                        totalCount = -1;
                        TongTienSPChuaVAT = 0;
                        CKTrenSP = 0;
                        TongTienTrenSPDaTruCK = 0;
                        TongCKTrenHoaDon = 0;
                        TongTienHoaDonCoThueNK = 0;
                        TongTienHoaDonCoVAT = 0;
                        TotalVATDifferenceAmount = 0;
                    }
                }


                return inwarddrugs;
            }
        }

        public override List<InwardDrug> InwardDrugDetails_ByID(long inviID
                                                                , out decimal TongTienSPChuaVAT
                                                                                  , out decimal CKTrenSP
                                                                                  , out decimal TongTienTrenSPDaTruCK
                                                                                  , out decimal TongCKTrenHoaDon
                                                                                  , out decimal TongTienHoaDonCoThueNK
                                                                                  , out decimal TongTienHoaDonCoVAT)
        {
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugs_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);

                cn.Open();
                List<InwardDrug> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetspInwardDrugCollectionFromReader(reader);
                reader.Close();
                try
                {
                    TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                    CKTrenSP = (decimal)paramCKTrenSP.Value;
                    TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                    TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                    TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                    TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                }
                catch
                {
                    TongTienSPChuaVAT = 0;
                    CKTrenSP = 0;
                    TongTienTrenSPDaTruCK = 0;
                    TongCKTrenHoaDon = 0;
                    TongTienHoaDonCoThueNK = 0;
                    TongTienHoaDonCoVAT = 0;
                }
                return drugs;
            }

        }

        public override bool InwardDrugInvoice_Save(InwardDrugInvoice InvoiceDrug, out long inwardid,
                                                    out string StrError)
        {
            bool results = false;
            inwardid = 0;
            StrError = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugInvoice_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, InvoiceDrug.inviID);
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, InvoiceDrug.StaffID);
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                cmd.AddParameter("@InvID", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(InvoiceDrug.InvID));
                cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                 ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                cmd.AddParameter("@VAT", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));
                cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(InvoiceDrug.ConvertDetailsListToXml()));
                SqlParameter paramid = new SqlParameter("@id", SqlDbType.BigInt);
                paramid.Direction = ParameterDirection.Output;
                SqlParameter paramStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1000);
                paramStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramid);
                cmd.Parameters.Add(paramStrError);
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                if (count > 0)
                {
                    if (paramid.Value != DBNull.Value)
                    {
                        inwardid = (long)paramid.Value;
                    }
                    StrError = paramStrError.Value.ToString();
                }
                cmd.Dispose();
                return results;
            }
        }


        public override int AddInwardDrugInvoice(InwardDrugInvoice InvoiceDrug, out long inwarid)
        {
            int results = 0;
            inwarid = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugInvoices_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                cmd.AddParameter("@InvID", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(InvoiceDrug.InvID));
                cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                 ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));

                SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                paramID.Direction = ParameterDirection.Output;

                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramID);
                cmd.Parameters.Add(paramError);

                cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                cmd.AddParameter("@CustomTax", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));

                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                if (paramID.Value != DBNull.Value)
                {
                    inwarid = (long)paramID.Value;
                }
                cmd.Dispose();
            }
            return results;

        }

        public override int UpdateInwardDrugInvoice(InwardDrugInvoice InvoiceDrug)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugInvoices_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InviID", SqlDbType.BigInt, InvoiceDrug.inviID);
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, InvoiceDrug.StaffID);
                //cmd.AddParameter("@Deliverer", SqlDbType.NVarChar,ConvertNullObjectToDBNull(InvoiceDrug.Deliverer));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, InvoiceDrug.SupplierID);
                cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar, InvoiceDrug.InvInvoiceNumber);
                cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit, InvoiceDrug.TempRequireUpdate);
                cmd.AddParameter("@VAT", SqlDbType.Decimal, InvoiceDrug.VAT);
                cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, InvoiceDrug.StoreID);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);

                cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                cmd.AddParameter("@CustomTax", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));
                cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.TotalVATDifferenceAmount));

                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int DeleteInwardDrugInvoice(long ID)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugInvoices_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InvID", SqlDbType.BigInt, ID);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool InwardDrug_Insert(PharmacyPurchaseOrderDetail invoicedrug, long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugs_InsertNew", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.DrugID));
                cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
                cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
                cmd.AddParameter("@PharmacyPoDetailID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.PharmacyPoDetailID));
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenericDrugDetail != null ? invoicedrug.RefGenericDrugDetail.NormalPrice : 0));
                cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenericDrugDetail != null ? invoicedrug.RefGenericDrugDetail.PriceForHIPatient : 0));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenericDrugDetail != null ? invoicedrug.RefGenericDrugDetail.HIAllowedPrice : 0));
                cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money, ConvertNullToZero(invoicedrug.TotalPriceNotVAT));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }

        }

        public override int InwardDrug_Update(InwardDrug invoicedrug, long StaffID)
        {
            int results = 0;
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardDrugs_UpdateNew", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.InID));
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.inviID));
                    cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                    cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.DrugID));
                    cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                    cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                    cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                    cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                    cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InBuyingPrice));
                    cmd.AddParameter("@PharmacyPoDetailID", SqlDbType.BigInt,
                                     ConvertNullToZero(invoicedrug.PharmacyPoDetailID));
                    cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                    cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.V_GoodsType));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                    cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                    cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                    cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                    cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));

                    cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.SelectedDrug != null ? invoicedrug.SelectedDrug.NormalPrice : 0));
                    cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.SelectedDrug != null ? invoicedrug.SelectedDrug.PriceForHIPatient : 0));
                    cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.SelectedDrug != null ? invoicedrug.SelectedDrug.HIAllowedPrice : 0));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                    cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money, ConvertNullToZero(invoicedrug.TotalPriceNotVAT));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

            return results;
        }

        public override bool AddInwardDrug(InwardDrug invoicedrug)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugs_InsertNew", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.inviID));
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.DrugID));
                cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InBuyingPrice));
                cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.V_GoodsType));
                cmd.AddParameter("@PharmacyPoDetailID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.PharmacyPoDetailID));
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.SelectedDrug != null ? invoicedrug.SelectedDrug.NormalPrice : 0));
                cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.SelectedDrug != null ? invoicedrug.SelectedDrug.PriceForHIPatient : 0));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.SelectedDrug != null ? invoicedrug.SelectedDrug.HIAllowedPrice : 0));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }

        }

        public override int DeleteInwardDrug(long invoicedrug)
        {
            int results = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugs_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InID", SqlDbType.BigInt, invoicedrug);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override List<PharmacyPurchaseOrder> PharmacyPurchaseOrder_BySupplierID(long SupplierID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyPurchaseOrders_BySupplierID", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, SupplierID);
                cn.Open();
                List<PharmacyPurchaseOrder> drugs = null;
                IDataReader reader = ExecuteReader(cmd);

                drugs = GetPharmacyPurchaseOrderCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }

        }

        #endregion

        #region  10. Pharmaceutical member

        public override List<PharmaceuticalCompany> GetPharmaceuticalCompanyCbx()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmaceuticalCompanies_All", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                List<PharmaceuticalCompany> PharmaceuticalCompanies = null;
                IDataReader reader = ExecuteReader(cmd);
                PharmaceuticalCompanies = GetPharmaceuticalCompanyCollectionFromReader(reader);
                reader.Close();
                return PharmaceuticalCompanies;
            }
        }

        public override int PharmaceuticalCompany_Insert(PharmaceuticalCompany Pharmaceatical)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmaceuticalCompanies_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOName));
                cmd.AddParameter("@PCOAddress", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOAddress));
                cmd.AddParameter("@PCOState", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOState));
                cmd.AddParameter("@PCOZipCode", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOZipCode));
                cmd.AddParameter("@CountryID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Pharmaceatical.CountryID));
                cmd.AddParameter("@PCOTelephone", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Pharmaceatical.PCOTelephone));
                cmd.AddParameter("@ContactName", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Pharmaceatical.ContactName));
                SqlParameter paramTotal = new SqlParameter("@Error", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0 && paramTotal.Value != DBNull.Value)
                {
                    results = (int)paramTotal.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int PharmaceuticalCompany_Update(PharmaceuticalCompany Pharmaceatical)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmaceuticalCompanies_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Pharmaceatical.PCOID));
                cmd.AddParameter("@PCOName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOName));
                cmd.AddParameter("@PCOAddress", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOAddress));
                cmd.AddParameter("@PCOState", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOState));
                cmd.AddParameter("@PCOZipCode", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOZipCode));
                cmd.AddParameter("@CountryID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Pharmaceatical.CountryID));
                cmd.AddParameter("@PCOTelephone", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Pharmaceatical.PCOTelephone));
                cmd.AddParameter("@ContactName", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Pharmaceatical.ContactName));
                SqlParameter paramTotal = new SqlParameter("@Error", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0 && paramTotal.Value != DBNull.Value)
                {
                    results = (int)paramTotal.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool PharmaceuticalCompany_Delete(long PCOID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmaceuticalCompanies_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PCOID));
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        public override List<PharmaceuticalCompany> PharmaceuticalCompany_SearchPaging(string PCOName, int PageSize,
                                                                                       int PageIndex, out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmaceuticalCompanies_SearchPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(PCOName));
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<PharmaceuticalCompany> suppliers = null;
                IDataReader reader = ExecuteReader(cmd);
                suppliers = GetPharmaceuticalCompanyCollectionFromReader(reader);
                reader.Close();

                if (paramTotal.Value != DBNull.Value)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return suppliers;
            }
        }

        public override List<Supplier> GetSupplier_NotPCOID(long? PCOID, long V_SupplierType, int PageSize,
                                                            int PageIndex, out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSuppliers_NotPCOID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PCOID));
                cmd.AddParameter("@SupplierType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_SupplierType));
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<Supplier> suppliers = null;
                IDataReader reader = ExecuteReader(cmd);
                suppliers = GetSupplierCollectionFromReader(reader);
                reader.Close();

                if (paramTotal.Value != DBNull.Value)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return suppliers;
            }
        }

        public override List<Supplier> GetSupplier_ByPCOID(long? PCOID, long V_SupplierType, int PageSize, int PageIndex,
                                                           out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSuppliers_ByPCOID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PCOID));
                cmd.AddParameter("@SupplierType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_SupplierType));
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<Supplier> suppliers = null;
                IDataReader reader = ExecuteReader(cmd);
                suppliers = GetSupplierCollectionFromReader(reader);
                reader.Close();

                if (paramTotal.Value != DBNull.Value)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return suppliers;
            }
        }

        public override List<Supplier> GetSupplier_ByPCOIDNotPaging(long? PCOID, long V_SupplierType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSuppliers_ByPCOIDNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PCOID));
                cmd.AddParameter("@SupplierType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_SupplierType));
                cn.Open();
                List<Supplier> suppliers = null;
                IDataReader reader = ExecuteReader(cmd);
                suppliers = GetSupplierCollectionFromReader(reader);
                reader.Close();
                return suppliers;
            }
        }

        public override int PharmaceuticalSuppliers_Insert(PharmaceuticalSupplier S)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmaceuticalSuppliers_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(S.PCOID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(S.SupplierID));
                SqlParameter paramTotal = new SqlParameter("@Error", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0 && paramTotal.Value != DBNull.Value)
                {
                    results = (int)paramTotal.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool PharmaceuticalSuppliers_Delete(PharmaceuticalSupplier S)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmaceuticalSuppliers_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(S.PCOID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(S.SupplierID));
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                return count > 0;
            }

        }

        #endregion

        #region  10.1 DrugDept Pharmaceutical member

        public override List<DrugDeptPharmaceuticalCompany> GetDrugDeptPharmaceuticalCompanyCbx()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPharmaceuticalCompanies_All", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                List<DrugDeptPharmaceuticalCompany> PharmaceuticalCompanies = null;
                IDataReader reader = ExecuteReader(cmd);
                PharmaceuticalCompanies = GetDrugDeptPharmaceuticalCompanyCollectionFromReader(reader);
                reader.Close();
                return PharmaceuticalCompanies;
            }
        }

        public override int DrugDeptPharmaceuticalCompany_Insert(DrugDeptPharmaceuticalCompany Pharmaceatical)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPharmaceuticalCompanies_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOName));
                cmd.AddParameter("@PCOAddress", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOAddress));
                cmd.AddParameter("@PCOState", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOState));
                cmd.AddParameter("@PCOZipCode", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOZipCode));
                cmd.AddParameter("@CountryID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Pharmaceatical.CountryID));
                cmd.AddParameter("@PCOTelephone", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Pharmaceatical.PCOTelephone));
                cmd.AddParameter("@ContactName", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Pharmaceatical.ContactName));
                SqlParameter paramTotal = new SqlParameter("@Error", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0 && paramTotal.Value != DBNull.Value)
                {
                    results = (int)paramTotal.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int DrugDeptPharmaceuticalCompany_Update(DrugDeptPharmaceuticalCompany Pharmaceatical)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPharmaceuticalCompanies_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Pharmaceatical.PCOID));
                cmd.AddParameter("@PCOName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOName));
                cmd.AddParameter("@PCOAddress", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOAddress));
                cmd.AddParameter("@PCOState", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOState));
                cmd.AddParameter("@PCOZipCode", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Pharmaceatical.PCOZipCode));
                cmd.AddParameter("@CountryID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Pharmaceatical.CountryID));
                cmd.AddParameter("@PCOTelephone", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Pharmaceatical.PCOTelephone));
                cmd.AddParameter("@ContactName", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Pharmaceatical.ContactName));
                SqlParameter paramTotal = new SqlParameter("@Error", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0 && paramTotal.Value != DBNull.Value)
                {
                    results = (int)paramTotal.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool DrugDeptPharmaceuticalCompany_Delete(long PCOID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPharmaceuticalCompanies_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PCOID));
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        public override List<DrugDeptPharmaceuticalCompany> DrugDeptPharmaceuticalCompany_SearchPaging(string PCOName,
                                                                                                       int PageSize,
                                                                                                       int PageIndex,
                                                                                                       out int
                                                                                                           TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPharmaceuticalCompanies_SearchPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(PCOName));
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<DrugDeptPharmaceuticalCompany> suppliers = null;
                IDataReader reader = ExecuteReader(cmd);
                suppliers = GetDrugDeptPharmaceuticalCompanyCollectionFromReader(reader);
                reader.Close();

                if (paramTotal.Value != DBNull.Value)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return suppliers;
            }
        }

        public override List<DrugDeptSupplier> GetSupplierDrugDept_NotPCOID(string SearchText, long? PCOID,
                                                                            long V_SupplierType, int PageSize,
                                                                            int PageIndex, out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSuppliersDrugDept_NotPCOID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PCOID));
                cmd.AddParameter("@SearchText", SqlDbType.NVarChar, ConvertNullObjectToDBNull(SearchText));
                cmd.AddParameter("@SupplierType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_SupplierType));
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<DrugDeptSupplier> suppliers = null;
                IDataReader reader = ExecuteReader(cmd);
                suppliers = GetDrugDeptSupplierCollectionFromReader(reader);
                reader.Close();

                if (paramTotal.Value != DBNull.Value)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return suppliers;
            }
        }

        public override List<DrugDeptSupplier> GetSupplierDrugDept_ByPCOID(string SearchText, long? PCOID,
                                                                           long V_SupplierType, int PageSize,
                                                                           int PageIndex, out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSuppliersDrugDept_ByPCOID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PCOID));
                cmd.AddParameter("@SearchText", SqlDbType.NVarChar, ConvertNullObjectToDBNull(SearchText));
                cmd.AddParameter("@SupplierType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_SupplierType));
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<DrugDeptSupplier> suppliers = null;
                IDataReader reader = ExecuteReader(cmd);
                suppliers = GetDrugDeptSupplierCollectionFromReader(reader);
                reader.Close();

                if (paramTotal.Value != DBNull.Value)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return suppliers;
            }
        }

        public override List<DrugDeptSupplier> GetSupplierDrugDept_ByPCOIDNotPaging(long? PCOID, long V_SupplierType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSuppliersDrugDept_ByPCOIDNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PCOID));
                cmd.AddParameter("@SupplierType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_SupplierType));
                cn.Open();
                List<DrugDeptSupplier> suppliers = null;
                IDataReader reader = ExecuteReader(cmd);
                suppliers = GetDrugDeptSupplierCollectionFromReader(reader);
                reader.Close();
                return suppliers;
            }
        }

        public override int DrugDeptPharmaceuticalSuppliers_Insert(DrugDeptPharmaceuticalSupplier S)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPharmaceuticalSuppliers_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(S.PCOID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(S.SupplierID));
                SqlParameter paramTotal = new SqlParameter("@Error", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0 && paramTotal.Value != DBNull.Value)
                {
                    results = (int)paramTotal.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool DrugDeptPharmaceuticalSuppliers_Delete(DrugDeptPharmaceuticalSupplier S)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPharmaceuticalSuppliers_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(S.PCOID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(S.SupplierID));
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                return count > 0;
            }

        }

        public override List<RefGenMedProductDetails> RefGenMedProductDetails_ByPCOID(long PCOID, long? V_MedProductType,
                                                                                      int PageIndex, int PageSize,
                                                                                      bool bcount, out int totalcount)
        {
            totalcount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_ByPOID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PCOID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, ConvertNullObjectToDBNull(PageIndex));
                cmd.AddParameter("@PageSize", SqlDbType.Int, ConvertNullObjectToDBNull(PageSize));
                cmd.AddParameter("@CountTotal", SqlDbType.BigInt, ConvertNullObjectToDBNull(bcount));

                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<RefGenMedProductDetails> lst = null;
                IDataReader reader = ExecuteReader(cmd);
                lst = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != DBNull.Value)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return lst;
            }
        }

        #endregion

        #region 11. RefShelfDrugLocation member

        public override List<RefShelfDrugLocation> GetRefShelfDrugLocationAutoComplete(string Name, int pageIndex,
                                                                                       int pageSize)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefShelfDrugLocation_SearchAutoComplete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@Name", SqlDbType.NVarChar, Name);
                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cn.Open();
                List<RefShelfDrugLocation> PharmaceuticalCompanies = null;
                IDataReader reader = ExecuteReader(cmd);
                PharmaceuticalCompanies = GetRefShelfDrugLocationCollectionFromReader(reader);
                reader.Close();
                return PharmaceuticalCompanies;
            }
        }

        public override bool InsertRefShelfDrugLocation(RefShelfDrugLocation Location, out long ID)
        {
            bool results = false;
            ID = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefShelfDrugLocation_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar, Location.SdlDescription);
                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    results = true;
                    ID = (long)reader["ID"];
                }
                reader.Close();
            }
            return results;
        }

        #endregion

        #region 12. OutWardDrugInvoices Member


        public override bool AddOutWardDrugInvoiceReturnVisitor(OutwardDrugInvoice InvoiceDrug, long ReturnStaffID, out long outwardid)
        {
            outwardid = 0;
            DateTime curDate = DateTime.Now;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoiceReturn_InsertVisitor", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(InvoiceDrug.StoreID));
                //cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(InvoiceDrug.StaffID));
                //KMx: Nhân viên trả thuốc là nhân viên đang đăng nhập chứ không phải là nhân viên đã bán toa thuốc đó. (26/02/2014 11:27)
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(ReturnStaffID));
                cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.V_OutDrugInvStatus));

                // Txd 04/10/2013 Fixed Date of returned outward Drug from InvoiceDrug.OutDate to DateTime.Now
                //cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.OutDate));
                cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(curDate));

                // TxD 03/10/2016 Added IssueID for returned Drug that had IssueID (was sold by prescription) to help speed up query Sales report
                if (InvoiceDrug.IssueID.HasValue && InvoiceDrug.IssueID.Value > 0)
                {
                    cmd.AddParameter("@IssueID", SqlDbType.BigInt, InvoiceDrug.IssueID);
                }

                cmd.AddParameter("@ReturnID", SqlDbType.BigInt, InvoiceDrug.outiID);
                cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                cmd.AddParameter("@Amount", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalInvoicePrice));
                cmd.AddParameter("@AmountCoPay", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalCoPayment));
                cmd.AddParameter("@HealthInsuranceRebate", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalHIPayment));
                cmd.AddParameter("@PriceDifference", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalPriceDifference));
                cmd.AddParameter("@Qty", SqlDbType.Float, 1);
                cmd.AddParameter("@TranRefID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                cmd.AddParameter("@V_TranRefType", SqlDbType.BigInt, ConvertNullObjectToDBNull((long)AllLookupValues.V_TranRefType.DRUG_NGOAITRU));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.PtRegistrationID));

                cmd.AddParameter("@XML", SqlDbType.Xml, InvoiceDrug.ConvertDetailsListToXml());

                cmd.AddParameter("@V_RegistrationType", SqlDbType.BigInt, ConvertNullObjectToDBNull((long)InvoiceDrug.V_RegistrationType));

                SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                paramID.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramID);
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                cmd = null;
                if (paramID.Value != DBNull.Value)
                {
                    outwardid = (long)paramID.Value;
                }
                else
                {
                    outwardid = -1;
                }
                return count > 0;
            }

        }

        public override int OutWardDrugInvoiceVisitor_Cancel(OutwardDrugInvoice InvoiceDrug, out long TransItemID)
        {
            int Error = 0;
            TransItemID = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoices_HuyPhieuXuat", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(InvoiceDrug.StoreID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(InvoiceDrug.StaffID));
                cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                cmd.AddParameter("@outiID", SqlDbType.BigInt, InvoiceDrug.outiID);
                cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, InvoiceDrug.V_OutDrugInvStatus);

                cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.OutDate));

                cmd.AddParameter("@Amount", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalInvoicePrice));
                cmd.AddParameter("@AmountCoPay", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalCoPayment));
                cmd.AddParameter("@HealthInsuranceRebate", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalHIPayment));
                cmd.AddParameter("@PriceDifference", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalPriceDifference));
                cmd.AddParameter("@Qty", SqlDbType.Float, 1);
                cmd.AddParameter("@TranRefID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                cmd.AddParameter("@V_TranRefType", SqlDbType.BigInt, ConvertNullObjectToDBNull((long)AllLookupValues.V_TranRefType.DRUG_NGOAITRU));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.PtRegistrationID));

                cmd.AddParameter("@V_RegistrationType", SqlDbType.BigInt, ConvertNullObjectToDBNull((long)InvoiceDrug.V_RegistrationType));

                SqlParameter paramID = new SqlParameter("@Error", SqlDbType.Int);
                paramID.Direction = ParameterDirection.Output;
                SqlParameter paramTransItemID = new SqlParameter("@TransItemID", SqlDbType.BigInt);
                paramTransItemID.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramID);
                cmd.Parameters.Add(paramTransItemID);
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                cmd = null;
                if (paramID.Value != DBNull.Value)
                {
                    Error = (int)paramID.Value;
                }
                else
                {
                    Error = -1;
                }
                if (paramTransItemID.Value != DBNull.Value)
                {
                    TransItemID = (long)paramTransItemID.Value;
                }
                else
                {
                    TransItemID = -1;
                }
                return Error;
            }
        }


        public override int OutWardDrugInvoicePrescriptChuaThuTien_Cancel(OutwardDrugInvoice InvoiceDrug)
        {
            try
            {
                int Error = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spOutwardDrugInvoices_HuyChuaThuTien", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(InvoiceDrug.StoreID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, InvoiceDrug.outiID);

                    cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.OutDate));

                    SqlParameter paramID = new SqlParameter("@Error", SqlDbType.Int);
                    paramID.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramID);
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    cmd.Dispose();
                    cmd = null;
                    if (paramID.Value != DBNull.Value)
                    {
                        Error = (int)paramID.Value;
                    }
                    else
                    {
                        Error = -1;
                    }

                    return Error;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        public override int OutWardDrugInvoice_Delete(long id)
        {
            int Error = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoices_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, id);
                SqlParameter paramError = new SqlParameter("@Error", SqlDbType.Int, 4);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteNonQuery(cmd);
                cmd.Dispose();
                cmd = null;
                if (paramError.Value != DBNull.Value)
                {
                    Error = (int)paramError.Value;
                }
                else
                {
                    Error = -1;
                }
                return Error;
            }
        }

        public override int OutWardDrugInvoice_UpdateStatus(OutwardDrugInvoice InvoiceDrug)
        {
            int Error = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoices_UpdateStatus", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, InvoiceDrug.outiID);
                cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, InvoiceDrug.V_OutDrugInvStatus);
                SqlParameter paramError = new SqlParameter("@Error", SqlDbType.Int, 4);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteNonQuery(cmd);
                cmd.Dispose();
                cmd = null;
                if (paramError.Value != DBNull.Value)
                {
                    Error = (int)paramError.Value;
                }
                else
                {
                    Error = -1;
                }
                return Error;
            }
        }

        public override bool CountMoneyForVisitorPharmacy(long outiID, out decimal AmountPaid)
        {
            AmountPaid = 0;
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("sp_CountMoneyForVisitorPharmacy", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, outiID);
                SqlParameter paremail = new SqlParameter("@amountpaid", SqlDbType.Money);
                paremail.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paremail);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    if (paremail.Value != DBNull.Value)
                    {
                        AmountPaid = (decimal)paremail.Value;
                    }
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool AddTransactionVisitor(PatientTransactionPayment payment, OutwardDrugInvoice InvoiceDrug, out long PaymentID,
                                                   long? StaffID, long? CollectorDeptLocID)
        {
            PaymentID = 0;
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spTransationVisitor_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@OutiID", SqlDbType.BigInt, InvoiceDrug.outiID);
                cmd.AddParameter("@Amount", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalInvoicePrice));
                cmd.AddParameter("@AmountCoPay", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalCoPayment));
                cmd.AddParameter("@HealthInsuranceRebate", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalHIPayment));
                cmd.AddParameter("@PriceDifference", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalPriceDifference));
                cmd.AddParameter("@Qty", SqlDbType.Float, 1);
                cmd.AddParameter("@TranRefID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                cmd.AddParameter("@V_TranRefType", SqlDbType.BigInt, ConvertNullObjectToDBNull((long)AllLookupValues.V_TranRefType.DRUG_NGOAITRU));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.PtRegistrationID));
                cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.V_OutDrugInvStatus));
                long? V_Currency = null;
                if (payment.Currency != null)
                {
                    V_Currency = payment.Currency.LookupID;
                }
                long? V_PaymentType = null;
                if (payment.PaymentType != null)
                {
                    V_PaymentType = payment.PaymentType.LookupID;
                }
                long? V_PaymentMode = null;
                if (payment.PaymentMode != null)
                {
                    V_PaymentMode = payment.PaymentMode.LookupID;
                }
                cmd.AddParameter("@V_Currency", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_Currency));
                cmd.AddParameter("@V_PaymentType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_PaymentType));
                cmd.AddParameter("@V_PaymentMode", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_PaymentMode));
                cmd.AddParameter("@PayAmount", SqlDbType.Money, ConvertNullObjectToDBNull(payment.PayAmount));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                cmd.AddParameter("@CollectorDeptLocID", SqlDbType.BigInt, ConvertNullObjectToDBNull(CollectorDeptLocID));
                cmd.AddParameter("@CreditOrDebit", SqlDbType.SmallInt, ConvertNullObjectToDBNull(payment.CreditOrDebit));
                cmd.AddParameter("@PtPmtAccID", SqlDbType.BigInt, ConvertNullObjectToDBNull(payment.PtPmtAccID));
                cmd.AddParameter("@V_TradingPlaces", SqlDbType.BigInt, ConvertNullObjectToDBNull(payment.V_TradingPlaces));
                cmd.AddParameter("@V_RegistrationType", SqlDbType.BigInt, ConvertNullObjectToDBNull((long)InvoiceDrug.V_RegistrationType));

                SqlParameter paremail = new SqlParameter("@PaymentID", SqlDbType.BigInt);
                paremail.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paremail);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    if (paremail.Value != DBNull.Value)
                    {
                        PaymentID = (long)paremail.Value;
                    }
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool AddTransactionHoanTien(PatientTransactionPayment payment, OutwardDrugInvoice InvoiceDrug, out long PaymentID,
                                                  long? StaffID, long? CollectorDeptLocID)
        {
            PaymentID = 0;
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spTransationHoanTien_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@OutiID", SqlDbType.BigInt, InvoiceDrug.outiID);
                long? V_Currency = null;
                if (payment.Currency != null)
                {
                    V_Currency = payment.Currency.LookupID;
                }
                long? V_PaymentType = null;
                if (payment.PaymentType != null)
                {
                    V_PaymentType = payment.PaymentType.LookupID;
                }
                long? V_PaymentMode = null;
                if (payment.PaymentMode != null)
                {
                    V_PaymentMode = payment.PaymentMode.LookupID;
                }
                cmd.AddParameter("@V_Currency", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_Currency));
                cmd.AddParameter("@V_PaymentType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_PaymentType));
                cmd.AddParameter("@V_PaymentMode", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_PaymentMode));
                cmd.AddParameter("@PayAmount", SqlDbType.Money, ConvertNullObjectToDBNull(payment.PayAmount));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                cmd.AddParameter("@CollectorDeptLocID", SqlDbType.BigInt, ConvertNullObjectToDBNull(CollectorDeptLocID));
                cmd.AddParameter("@CreditOrDebit", SqlDbType.SmallInt, ConvertNullObjectToDBNull(payment.CreditOrDebit));
                cmd.AddParameter("@PtPmtAccID", SqlDbType.BigInt, ConvertNullObjectToDBNull(payment.PtPmtAccID));
                cmd.AddParameter("@V_TradingPlaces", SqlDbType.BigInt, ConvertNullObjectToDBNull(payment.V_TradingPlaces));
                SqlParameter paremail = new SqlParameter("@PaymentID", SqlDbType.BigInt);
                paremail.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paremail);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    if (paremail.Value != DBNull.Value)
                    {
                        PaymentID = (long)paremail.Value;
                    }
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool AddTransactionMedDept(PatientTransactionPayment payment, OutwardDrugMedDeptInvoice InvoiceDrug, out long PaymentID,
                                               long? StaffID)
        {
            PaymentID = 0;
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spTransationMedDept_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@OutiID", SqlDbType.BigInt, InvoiceDrug.outiID);
                cmd.AddParameter("@Amount", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalInvoicePrice));
                cmd.AddParameter("@AmountCoPay", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalCoPayment));
                cmd.AddParameter("@HealthInsuranceRebate", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalHIPayment));
                cmd.AddParameter("@PriceDifference", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalPriceDifference));
                cmd.AddParameter("@Qty", SqlDbType.Float, 1);
                cmd.AddParameter("@TranRefID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                cmd.AddParameter("@V_TranRefType", SqlDbType.BigInt, ConvertNullObjectToDBNull((long)AllLookupValues.V_TranRefType.DRUG_NOITRU_KHODUOC));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.PtRegistrationID));
                cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.V_OutDrugInvStatus));
                long? V_Currency = null;
                if (payment.Currency != null)
                {
                    V_Currency = payment.Currency.LookupID;
                }
                long? V_PaymentType = null;
                if (payment.PaymentType != null)
                {
                    V_PaymentType = payment.PaymentType.LookupID;
                }
                long? V_PaymentMode = null;
                if (payment.PaymentMode != null)
                {
                    V_PaymentMode = payment.PaymentMode.LookupID;
                }
                cmd.AddParameter("@V_Currency", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_Currency));
                cmd.AddParameter("@V_PaymentType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_PaymentType));
                cmd.AddParameter("@V_PaymentMode", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_PaymentMode));
                cmd.AddParameter("@PayAmount", SqlDbType.Money, ConvertNullObjectToDBNull(payment.PayAmount));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                cmd.AddParameter("@CreditOrDebit", SqlDbType.SmallInt, ConvertNullObjectToDBNull(payment.CreditOrDebit));
                cmd.AddParameter("@PtPmtAccID", SqlDbType.BigInt, ConvertNullObjectToDBNull(payment.PtPmtAccID));
                cmd.AddParameter("@V_TradingPlaces", SqlDbType.BigInt, ConvertNullObjectToDBNull(payment.V_TradingPlaces));
                SqlParameter paremail = new SqlParameter("@PaymentID", SqlDbType.BigInt);
                paremail.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paremail);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    if (paremail.Value != DBNull.Value)
                    {
                        PaymentID = (long)paremail.Value;
                    }
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool AddTransactionMedDeptHoanTien(PatientTransactionPayment payment, OutwardDrugMedDeptInvoice InvoiceDrug, out long PaymentID,
                                                  long? StaffID)
        {
            PaymentID = 0;
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spTransationMedDeptHoanTien_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@OutiID", SqlDbType.BigInt, InvoiceDrug.outiID);
                long? V_Currency = null;
                if (payment.Currency != null)
                {
                    V_Currency = payment.Currency.LookupID;
                }
                long? V_PaymentType = null;
                if (payment.PaymentType != null)
                {
                    V_PaymentType = payment.PaymentType.LookupID;
                }
                long? V_PaymentMode = null;
                if (payment.PaymentMode != null)
                {
                    V_PaymentMode = payment.PaymentMode.LookupID;
                }
                cmd.AddParameter("@V_Currency", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_Currency));
                cmd.AddParameter("@V_PaymentType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_PaymentType));
                cmd.AddParameter("@V_PaymentMode", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_PaymentMode));
                cmd.AddParameter("@PayAmount", SqlDbType.Money, ConvertNullObjectToDBNull(payment.PayAmount));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                cmd.AddParameter("@CreditOrDebit", SqlDbType.SmallInt, ConvertNullObjectToDBNull(payment.CreditOrDebit));
                cmd.AddParameter("@PtPmtAccID", SqlDbType.BigInt, ConvertNullObjectToDBNull(payment.PtPmtAccID));
                cmd.AddParameter("@V_TradingPlaces", SqlDbType.BigInt, ConvertNullObjectToDBNull(payment.V_TradingPlaces));
                SqlParameter paremail = new SqlParameter("@PaymentID", SqlDbType.BigInt);
                paremail.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paremail);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    if (paremail.Value != DBNull.Value)
                    {
                        PaymentID = (long)paremail.Value;
                    }
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }


        public override OutwardDrugInvoice GetOutWardDrugInvoiceVisitorByID(long outwardid)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoices_ByIDVisitor", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, outwardid);
                cn.Open();
                OutwardDrugInvoice invoicedrug = null;

                IDataReader reader = ExecuteReader(cmd);
                // try
                // {
                if (reader.Read())
                {
                    invoicedrug = GetOutWardDrugInvoiceFromReader(reader);
                }
                // }
                // catch (Exception ex)
                // {
                //   }
                // finally
                //  {
                reader.Close();
                // }
                return invoicedrug;
            }
        }

        public override List<OutwardDrugInvoice> GetOutWardDrugInvoiceSearchAllByStatus(
            SearchOutwardInfo SearchCriteria, int pageIndex, int pageSize, bool bCountTotal, bool? bFlagStoreHI, bool bFlagPaidTime, out int totalCount)
        {
            totalCount = 0;
            if (SearchCriteria == null)
            {
                SearchCriteria = new SearchOutwardInfo();
            }
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoice_SearchAllByStatus", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = int.MaxValue;
                cmd.AddParameter("@OutInvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(SearchCriteria.OutInvID));
                cmd.AddParameter("@CustomerName", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.CustomerName));
                cmd.AddParameter("@PatientCode", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.PatientCode));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.fromdate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.todate));
                cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(SearchCriteria.V_OutDrugInvStatus));
                cmd.AddParameter("@HealthInsuranceCard", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.HICardCode));
                cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SearchCriteria.TypID));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SearchCriteria.StoreID));
                cmd.AddParameter("@ID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SearchCriteria.ID));
                cmd.AddParameter("@IsNotSolve", SqlDbType.Bit, ConvertNullObjectToDBNull(SearchCriteria.IsNotSolve));

                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, ConvertNullObjectToDBNull(SearchCriteria.OrderBy));
                cmd.AddParameter("@CountTotal", SqlDbType.Int, bCountTotal);
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SearchCriteria.PtRegistrationID));
                cmd.AddParameter("@FlagStoreHI", SqlDbType.Bit, ConvertNullObjectToDBNull(bFlagStoreHI));
                cmd.AddParameter("@FlagPaidTime", SqlDbType.Bit, ConvertNullObjectToDBNull(bFlagPaidTime));
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<OutwardDrugInvoice> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutwardDrugInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        public override List<OutwardDrugInvoice> GetOutWardDrugInvoiceSearchReturn(SearchOutwardInfo SearchCriteria,
                                                                                   int pageIndex, int pageSize,
                                                                                   bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoice_SearchReturn", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = int.MaxValue;
                cmd.AddParameter("@OutInvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(SearchCriteria.OutInvID));
                cmd.AddParameter("@CustomerName", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.CustomerName));
                cmd.AddParameter("@PatientCode", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.PatientCode));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.fromdate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.todate));
                cmd.AddParameter("@HealthInsuranceCard", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.HICardCode));
                cmd.AddParameter("@IsNotSolve", SqlDbType.Bit, ConvertNullObjectToDBNull(SearchCriteria.IsNotSolve));

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = "";

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<OutwardDrugInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetOutwardDrugInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        //KMx: Sau khi kiểm tra toàn bộ chương trình, thấy hàm này không được gọi (không được sử dụng) nữa.
        public override OutwardDrugInvoice GetOutWardDrugInvoiceReturnByID(long? OutiID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoice_ReturnID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@OutiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(OutiID));
                cn.Open();
                OutwardDrugInvoice invoicedrug = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    invoicedrug = GetOutWardDrugInvoiceFromReader(reader);
                }

                reader.Close();
                return invoicedrug;
            }
        }
        //==== #001
        //public override OutwardDrugInvoice GetOutWardDrugInvoiceByID(long? OutiID)
        //{
        //    using (SqlConnection cn = new SqlConnection(this.ConnectionString))
        //    {
        //        SqlCommand cmd = new SqlCommand("spOutwardDrugInvoice_GetByID", cn);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.AddParameter("@OutiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(OutiID));
        //        cn.Open();
        //        OutwardDrugInvoice invoicedrug = null;
        //        IDataReader reader = ExecuteReader(cmd);
        //        if (reader.Read())
        //        {
        //            invoicedrug = GetOutWardDrugInvoiceFromReader(reader);
        //            if (reader.NextResult())
        //            {
        //                List<OutwardDrug> drugs = null;
        //                drugs = GetOutWardDrugDetailCollectionFromReader(reader);
        //                if (drugs != null)
        //                {
        //                    invoicedrug.OutwardDrugs = new ObservableCollection<OutwardDrug>(drugs);
        //                }
        //            }
        //        }
        //        reader.Close();
        //        if (invoicedrug != null && invoicedrug.ReturnID.GetValueOrDefault(-1) > 0) //La phieu tra hang
        //        {
        //            //Lay thong tin phieu xuat tuong ung
        //            cmd.Parameters[0].Value = invoicedrug.ReturnID.Value;
        //            reader = ExecuteReader(cmd);
        //            if (reader.Read())
        //            {
        //                var drugInvoice = GetOutWardDrugInvoiceFromReader(reader);
        //                if (reader.NextResult())
        //                {
        //                    List<OutwardDrug> drugs = null;
        //                    drugs = GetOutWardDrugDetailCollectionFromReader(reader);
        //                    if (drugs != null)
        //                    {
        //                        drugInvoice.OutwardDrugs = new ObservableCollection<OutwardDrug>(drugs);
        //                    }
        //                }
        //                invoicedrug.DrugInvoice = drugInvoice;
        //                if (drugInvoice != null)
        //                {
        //                    invoicedrug.FullName = drugInvoice.FullName;
        //                    invoicedrug.Address = drugInvoice.Address;
        //                    invoicedrug.NumberPhone = drugInvoice.NumberPhone;
        //                    if (drugInvoice.SelectedPrescription != null)
        //                    {
        //                        if (invoicedrug == null)
        //                        {
        //                            invoicedrug.SelectedPrescription = new Prescription();
        //                        }
        //                        invoicedrug.SelectedPrescription.ObjIssuerStaffID =
        //                            drugInvoice.SelectedPrescription.ObjIssuerStaffID;
        //                    }
        //                }
        //            }
        //            reader.Close();
        //        }
        //        return invoicedrug;
        //    }
        //}
        public override OutwardDrugInvoice GetOutWardDrugInvoiceByID(long? OutiID)
        {
            return GetOutWardDrugInvoice(OutiID);
        }
        private OutwardDrugInvoice GetOutWardDrugInvoice(long? OutiID, bool HI = false)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoice_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@OutiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(OutiID));
                cmd.AddParameter("@HI", SqlDbType.Bit, ConvertNullObjectToDBNull(HI));
                cn.Open();
                OutwardDrugInvoice invoicedrug = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    invoicedrug = GetOutWardDrugInvoiceFromReader(reader);
                    if (reader.NextResult())
                    {
                        List<OutwardDrug> drugs = null;
                        drugs = GetOutWardDrugDetailCollectionFromReader(reader);
                        if (drugs != null)
                        {
                            invoicedrug.OutwardDrugs = new ObservableCollection<OutwardDrug>(drugs);
                        }
                    }
                }

                reader.Close();
                if (invoicedrug != null && invoicedrug.ReturnID.GetValueOrDefault(-1) > 0) //La phieu tra hang
                {
                    //Lay thong tin phieu xuat tuong ung
                    cmd.Parameters[0].Value = invoicedrug.ReturnID.Value;
                    reader = ExecuteReader(cmd);
                    if (reader.Read())
                    {
                        var drugInvoice = GetOutWardDrugInvoiceFromReader(reader);
                        if (reader.NextResult())
                        {
                            List<OutwardDrug> drugs = null;
                            drugs = GetOutWardDrugDetailCollectionFromReader(reader);
                            if (drugs != null)
                            {
                                drugInvoice.OutwardDrugs = new ObservableCollection<OutwardDrug>(drugs);
                            }
                        }
                        invoicedrug.DrugInvoice = drugInvoice;
                        if (drugInvoice != null)
                        {
                            invoicedrug.FullName = drugInvoice.FullName;
                            invoicedrug.Address = drugInvoice.Address;
                            invoicedrug.NumberPhone = drugInvoice.NumberPhone;
                            if (drugInvoice.SelectedPrescription != null)
                            {
                                if (invoicedrug == null)
                                {
                                    invoicedrug.SelectedPrescription = new Prescription();
                                }
                                invoicedrug.SelectedPrescription.ObjIssuerStaffID =
                                    drugInvoice.SelectedPrescription.ObjIssuerStaffID;
                            }
                        }
                    }

                    reader.Close();
                }
                return invoicedrug;
            }
        }
        public override OutwardDrugInvoice GetHIOutWardDrugInvoiceByID(long? OutiID)
        {
            return GetOutWardDrugInvoice(OutiID, true);
        }
        //==== #001

        public override List<GetDrugForSellVisitor> GetDrugForSellVisitorAutoComplete_New(string BrandName, long StoreID,
                                                                                          bool? IsCode)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetDrugForAutoComplete_New", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cn.Open();
                List<GetDrugForSellVisitor> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetDrugForSellVisitorCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }


        public override List<GetDrugForSellVisitor> RefGennericDrugDetails_GetRemaining_Paging(string BrandName, long StoreID,
                                                                                        bool? IsCode, int PageSize, int PageIndex, out int Total)
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGennericDrugDetails_GetRemaining_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@PageSize", SqlDbType.Int, ConvertNullObjectToDBNull(PageSize));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, ConvertNullObjectToDBNull(PageIndex));
                // cmd.AddParameter("@Total", SqlDbType.Int,Total,ParameterDirection.Output);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<GetDrugForSellVisitor> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetDrugForSellVisitorCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != DBNull.Value)
                {
                    Total = (int)paramTotal.Value;
                }
                else
                    Total = -1;
                return drugs;
            }
        }
        public override List<GetDrugForSellVisitor> GetDrugForSellVisitorBatchNumber(long DrugID, long StoreID, bool? IsHIPatient)
        {
            return GetDrugForSellVisitorBatchNumber_V2(DrugID, StoreID, IsHIPatient);
        }
        public override List<GetDrugForSellVisitor> GetDrugForSellVisitorBatchNumber_V2(long DrugID, long StoreID, bool? IsHIPatient, bool? InsuranceCover = null)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetInBatchNumberAllPharmacy_ByDrugID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DrugID));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                //▼====== #011
                //Vì bị ảnh hưởng tới chương trình cũ (do store cũ không có parameter này) nên dẫn đến lỗi
                //Thêm điều kiện nếu cấu hình mở cho phép xài kho BHYT thì mới thêm parameter InsuranceCover.
                if (Globals.AxServerSettings.CommonItems.EnableHIStore)
                {
                    cmd.AddParameter("@InsuranceCover", SqlDbType.Bit, ConvertNullObjectToDBNull(InsuranceCover));
                }
                //▲====== #011
                cn.Open();
                List<GetDrugForSellVisitor> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetDrugForSellVisitorCollectionFromReader(reader);
                reader.Close();
                reader.Dispose();
                return drugs;
            }
        }

        public override bool UpdateRemainingWhenCancel(OutwardDrugInvoice invoice)
        {
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spUpdateRemainingByStatus", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, invoice.V_OutDrugInvStatus);
                cmd.AddParameter("@outiID", SqlDbType.BigInt, invoice.outiID);
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, invoice.StaffID);
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, invoice.StoreID);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        #endregion

        #region 13. Outward Drug member

        public override bool AddOutwardDrug(OutwardDrug Outward, long outwardid)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrug_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, outwardid);
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, Outward.GetDrugForSellVisitor.DrugID);
                // cmd.AddParameter("@InID", SqlDbType.Decimal, Outward.GetDrugForSellVisitor.InID);
                cmd.AddParameter("@OutQuantity", SqlDbType.NVarChar, Outward.OutQuantity);
                cmd.AddParameter("@OutPrice", SqlDbType.VarChar, Outward.OutPrice);
                cmd.AddParameter("@OutNotes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.OutNotes));
                cmd.AddParameter("@OutAmount", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.OutAmount));
                cmd.AddParameter("@OutPriceDifference", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Outward.PriceDifference));
                cmd.AddParameter("@OutAmountCoPay", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Outward.OutAmountCoPay));
                cmd.AddParameter("@OutHIRebate", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.OutHIRebate));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                cmd = null;
                return count > 0;
            }
        }

        //==== #001
        //public override List<OutwardDrug> GetOutwardDrugDetailsByOutwardInvoice(long OutiID)
        //{
        //    using (SqlConnection cn = new SqlConnection(this.ConnectionString))
        //    {
        //        SqlCommand cmd = new SqlCommand("spOutwardDrug_ByIDInvoice", cn);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.AddParameter("@outiID", SqlDbType.BigInt, OutiID);
        //        cn.Open();
        //        List<OutwardDrug> drugs = null;
        //        IDataReader reader = ExecuteReader(cmd);
        //        drugs = GetOutWardDrugDetailCollectionFromReader(reader);
        //        reader.Close();
        //        return drugs;
        //    }
        //}
        public override List<OutwardDrug> GetOutwardDrugDetailsByOutwardInvoice(long OutiID, bool HI = false, long[] OutiIDArray = null, long? PtRegistrationID = null)
        {
            return GetOutwardDrugDetails(OutiID, HI, OutiIDArray, PtRegistrationID);
        }
        private List<OutwardDrug> GetOutwardDrugDetails(long OutiID, bool HI = false, long[] OutiIDArray = null, long? PtRegistrationID = null)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrug_ByIDInvoice", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, OutiID);
                cmd.AddParameter("@HI", SqlDbType.Bit, HI);
                if (OutiIDArray != null)
                    cmd.AddParameter("@OutiIDArray", SqlDbType.VarChar, string.Join(",", OutiIDArray));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PtRegistrationID));
                cn.Open();
                List<OutwardDrug> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutWardDrugDetailCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }
        public override List<OutwardDrug> GetHIOutwardDrugDetailsByOutwardInvoice(long OutiID)
        {
            return GetOutwardDrugDetails(OutiID, true);
        }
        //==== #001
        public override List<OutwardDrug> spGetInBatchNumberAndPrice_List(long StoreID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetInBatchNumberAndPrice_List", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cn.Open();
                List<OutwardDrug> drugs = null;

                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutWardDrugDetailCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        //==== #001
        //public override List<OutwardDrug> spGetInBatchNumberAndPrice_ByPresciption(long PrescriptID, long StoreID, Int16 IsObject)
        //{
        //    using (SqlConnection cn = new SqlConnection(this.ConnectionString))
        //    {
        //        SqlCommand cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForPrescription", cn);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.AddParameter("@PrescriptID", SqlDbType.BigInt, PrescriptID);
        //        cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
        //        cmd.AddParameter("@object", SqlDbType.SmallInt, IsObject);

        //        cn.Open();
        //        List<OutwardDrug> drugs = null;

        //        IDataReader reader = ExecuteReader(cmd);
        //        drugs = GetOutWardDrugDetailCollectionFromReader(reader);
        //        reader.Close();
        //        return drugs;
        //    }
        //}
        private List<OutwardDrug> GetInBatchNumberAndPrice_ByPresciption(long PrescriptID, long StoreID, Int16 IsObject, bool HI = false, bool IsIssueID = true, long? PtRegistrationID = null)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForPrescription", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PrescriptID", SqlDbType.BigInt, PrescriptID);
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@object", SqlDbType.SmallInt, IsObject);
                cmd.AddParameter("@HI", SqlDbType.Bit, HI);
                cmd.AddParameter("@IsIssueID", SqlDbType.Bit, IsIssueID);
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PtRegistrationID));
                cn.Open();
                List<OutwardDrug> drugs = null;

                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutWardDrugDetailCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }
        public override List<OutwardDrug> spGetInBatchNumberAndPrice_ByPresciption(long PrescriptID, long StoreID, Int16 IsObject, bool HI = false, bool IsIssueID = true, long? PtRegistrationID = null)
        {
            return GetInBatchNumberAndPrice_ByPresciption(PrescriptID, StoreID, IsObject, HI, IsIssueID, PtRegistrationID);
        }
        public override List<OutwardDrug> spGetInBatchNumberAndPrice_ByPresciptionHI(long PrescriptID, long StoreID, Int16 IsObject, bool IsIssueID = true)
        {
            return GetInBatchNumberAndPrice_ByPresciption(PrescriptID, StoreID, IsObject, true, IsIssueID);
        }
        //==== #001
        public override List<OutwardDrug> spGetInBatchNumberAndPrice_ByPresciption_NotSave(Prescription ObjPrescription, long StoreID, Int16 RegistrationType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForPrescription_NotSave", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DataXML", SqlDbType.Xml, ConvertNullObjectToDBNull(GetXMLIDThuoc(ObjPrescription)));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@RegistrationType", SqlDbType.SmallInt, RegistrationType);
                cmd.CommandTimeout = int.MaxValue;
                cn.Open();
                List<OutwardDrug> drugs = null;

                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutWardDrugDetailCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        private string GetXMLIDThuoc(Prescription ObjPrescription)
        {
            XDocument xmlDocument;
            string Res = "";
            if (ObjPrescription != null && ObjPrescription.PrescriptionDetails != null && ObjPrescription.PrescriptionDetails.Count > 0)
            {
                //regDetailsString = string.Join(",", from p in paidRegDetailsList select p.PtRegDetailID);
                //KMx: Bỏ điều kiện item.DayRpts > 0 vì thuốc cần, có thể không có ngày dùng (04/07/2014 10:53).
                xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                           new XElement("DS",
                           from item in ObjPrescription.PrescriptionDetails
                           where item.DrugID > 0 && item.Qty > 0 //&& item.DayRpts > 0
                           select new XElement("Info",
                           new XElement("DrugID", item.DrugID),
                           new XElement("Quantity", item.Qty),
                           new XElement("DayRpts", item.DayRpts + item.DayExtended)
                           )));
                Res = xmlDocument.ToString();
            }
            return Res;
        }

        public override List<OutwardDrug> spGetOutwardDrugAll_ByPtRegistrationID(long PtRegistrationID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                return spGetOutwardDrugAll_ByPtRegistrationID(PtRegistrationID, cn, null);
            }
        }

        public override List<OutwardDrug> spGetOutwardDrugAll_ByPtRegistrationID(long PtRegistrationID,
                                                                                 DbConnection connection,
                                                                                 DbTransaction tran)
        {
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
            }
            SqlCommand cmd = (SqlCommand)connection.CreateCommand();
            cmd.Transaction = (SqlTransaction)tran;
            cmd.CommandText = "spOutwardDrugALL_ByPtRegistrationID";
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.AddParameter("@RegistrationID", SqlDbType.BigInt, PtRegistrationID);

            List<OutwardDrug> drugs = null;

            IDataReader reader = ExecuteReader(cmd);
            drugs = GetOutWardDrugDetailCollectionFromReader(reader);
            reader.Close();
            return drugs;

        }


        public override bool UpdateOutwardDrugInvoicePrice(OutwardDrugInvoice invoice)
        {
            using (SqlConnection conn = new SqlConnection(this.ConnectionString))
            {
                return UpdateOutwardDrugInvoicePrice(invoice, conn, null);
            }
        }

        public override bool UpdateOutwardDrugInvoicePrice(OutwardDrugInvoice invoice, DbConnection conn,
                                                           DbTransaction tran)
        {

            XDocument xmlDocument;
            xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                                        new XElement("OutwardDrugInvoice",
                                                     new XElement("OutiID", invoice.outiID),
                                                     new XElement("V_OutDrugInvStatus", invoice.V_OutDrugInvStatus),
                                                     new XElement("OutwardDrugs",
                                                                  from outwarddrug in invoice.OutwardDrugs
                                                                  select new XElement("OutwardDrug",
                                                                                      new XElement("OutID",
                                                                                                   outwarddrug.OutID),
                                                                                      new XElement("HIBenefit",
                                                                                                   outwarddrug.HIBenefit),
                                                                                      new XElement("OutPrice",
                                                                                                   outwarddrug.OutPrice),
                                                                                      new XElement("OutQuantity",
                                                                                                   outwarddrug.
                                                                                                       OutQuantity),
                                                                                      new XElement("OutQuantityReturn",
                                                                                                   outwarddrug.
                                                                                                       OutQuantityReturn),
                                                                                      new XElement("OutAmount",
                                                                                                   outwarddrug.
                                                                                                       TotalInvoicePrice),
                                                                                      new XElement("OutHIRebate",
                                                                                                   outwarddrug.
                                                                                                       TotalHIPayment),
                                                                                      new XElement(
                                                                                          "OutPriceDifference",
                                                                                          outwarddrug.
                                                                                              TotalPriceDifference),
                                                                                      new XElement("OutAmountCoPay",
                                                                                                   outwarddrug.
                                                                                                       TotalCoPayment),
                                                                                      new XElement("OutHIAllowedPrice",
                                                                                                   outwarddrug.
                                                                                                       HIAllowedPrice),
                                                                                      new XElement("OutNotes",
                                                                                                   outwarddrug.OutNotes))
                                                         )));


            if (conn.State != ConnectionState.Open)
            {
                conn.Open();
            }

            SqlCommand cmd;
            cmd = (SqlCommand)conn.CreateCommand();
            cmd.Transaction = (SqlTransaction)tran;
            cmd.CommandText = "spUpdateOutwardDrugInvoicePrice";
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.AddParameter("@OutwardDrugList", SqlDbType.Xml, xmlDocument.ToString());

            ExecuteNonQuery(cmd);

            return true;
        }

        public override bool BackupOutwardDrugInvoice(long invoiceID, DbConnection conn, DbTransaction tran)
        {
            if (conn.State != ConnectionState.Open)
            {
                conn.Open();
            }

            var cmd = (SqlCommand)conn.CreateCommand();
            cmd.Transaction = (SqlTransaction)tran;
            cmd.CommandText = "spBackupOutwardDrugInvoice";
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.AddParameter("@OutiID", SqlDbType.BigInt, invoiceID);

            ExecuteNonQuery(cmd);

            return true;
        }

        public override bool BackupOutwardDrugInvoiceOfRegistration(long registrationID, DbConnection conn,
                                                                    DbTransaction tran)
        {
            if (conn.State != ConnectionState.Open)
            {
                conn.Open();
            }

            var cmd = (SqlCommand)conn.CreateCommand();
            cmd.Transaction = (SqlTransaction)tran;
            cmd.CommandText = "spBackupOutwardDrugInvoiceOfRegistration";
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.AddParameter("@RegistrationID", SqlDbType.BigInt, registrationID);

            ExecuteNonQuery(cmd);

            return true;
        }

        public override bool InsertOrUpdateDrugInvoices(OutwardDrugInvoice Outward, out long outiID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                return InsertOrUpdateDrugInvoices(Outward, out outiID, cn, null);
            }
        }

        public override bool InsertOrUpdateDrugInvoices(OutwardDrugInvoice Outward, out long outiID,
                                                        DbConnection connection, DbTransaction tran)
        {
            outiID = 0;
            XDocument xml = GenerateListToXMLOutwardDrugCalMoney(Outward.OutwardDrugs);
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
            }
            SqlCommand cmd;
            cmd = (SqlCommand)connection.CreateCommand();
            cmd.Transaction = (SqlTransaction)tran;
            cmd.CommandText = "spUpdateOrInsertDrugItems";
            cmd.CommandType = CommandType.StoredProcedure;
            if (Outward.SelectedStaff == null)
            {
                Outward.SelectedStaff = new Staff();
            }
            if (Outward.SelectedStorage == null)
            {
                Outward.SelectedStorage = new RefStorageWarehouseLocation();
            }
            cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.outiID));
            cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.SelectedStorage.StoreID));
            cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.SelectedStaff.StaffID));
            cmd.AddParameter("@PrescriptID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.PrescriptID));
            cmd.AddParameter("@IssueID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.IssueID));
            cmd.AddParameter("@OutDate", SqlDbType.DateTime, Outward.OutDate);
            cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.V_OutDrugInvStatus));
            cmd.AddParameter("@IsHICount", SqlDbType.Bit, ConvertZeroObjectToDBNull(Outward.IsHICount));
            cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.TypID));
            cmd.AddParameter("@XML", SqlDbType.Xml, xml.ToString());
            SqlParameter paramTotal = new SqlParameter("@id", SqlDbType.BigInt);
            paramTotal.Direction = ParameterDirection.Output;
            cmd.Parameters.Add(paramTotal);
            int result = ExecuteNonQuery(cmd);
            if (result > 0)
            {
                if (paramTotal.Value != null)
                {
                    outiID = (long)paramTotal.Value;
                }
            }
            return result > 0;

        }

        public override bool UpdateInvoicePayed(OutwardDrugInvoice Outward, out long outiID, out long PaymentID,
                                                out string StrError)
        {
            outiID = 0;
            PaymentID = 0;
            StrError = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoices_UpdateInvoicePayed", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.outiID));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.StoreID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.StaffID));
                cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.TypID));
                cmd.AddParameter("@FullName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.FullName));
                cmd.AddParameter("@NumberPhone", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.NumberPhone));
                cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.Address));
                cmd.AddParameter("@DOB", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.DOBString));
                cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.V_OutDrugInvStatus));
                cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.Notes));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Outward.ConvertDetailsListToXml()));

                cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Outward.OutDate));

                cmd.AddParameter("@V_RegistrationType", SqlDbType.BigInt, ConvertNullObjectToDBNull((long)Outward.V_RegistrationType));

                SqlParameter paramTotal = new SqlParameter("@id", SqlDbType.BigInt);
                paramTotal.Direction = ParameterDirection.Output;
                SqlParameter paremail = new SqlParameter("@PaymentID", SqlDbType.BigInt);
                paremail.Direction = ParameterDirection.Output;
                SqlParameter pareStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1000);
                pareStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cmd.Parameters.Add(paremail);
                cmd.Parameters.Add(pareStrError);
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                cmd = null;
                if (paramTotal.Value != DBNull.Value)
                {
                    outiID = (long)paramTotal.Value;
                }
                else
                {
                    outiID = -1;
                }
                if (paremail.Value != DBNull.Value)
                {
                    PaymentID = (long)paremail.Value;
                }
                else
                {
                    PaymentID = -1;
                }
                if (pareStrError.Value != DBNull.Value)
                {
                    StrError = pareStrError.Value.ToString();
                }
                else
                {
                    StrError = "";
                }
                return count > 0;
            }

        }

        public override bool UpdateInvoiceInfo(OutwardDrugInvoice Outward)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoices_UpdateInfo", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.outiID));
                cmd.AddParameter("@FullName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.FullName));
                cmd.AddParameter("@NumberPhone", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.NumberPhone));
                cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.Address));
                cmd.AddParameter("@DOB", SqlDbType.NVarChar, ConvertZeroObjectToDBNull(Outward.DOBString));
                cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Outward.OutDate));
                cmd.AddParameter("@ToStoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.ToStoreID));
                cmd.AddParameter("@ToStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.ToStaffID));
                cmd.AddParameter("@HosID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.HosID));
                cmd.AddParameter("@ReqDrugInID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.ReqDrugInID));
                cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.Notes));
                cmd.AddParameter("@V_ByOutPrice", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.V_ByOutPrice));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.StaffID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                cmd = null;
                return count > 0;
            }

        }



        #endregion

        #region 14. GetDrugForPrescription

        public override IList<GetDrugForSellVisitor> GetDrugForPrescription_Auto(String BrandName, int IsInsurance,
                                                                                 int PageSize, int PageIndex,
                                                                                 int IsMedDept)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetDrugInfoForPrescription_Auto", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, BrandName);
                cmd.AddParameter("@IsInsurance", SqlDbType.SmallInt, IsInsurance);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@IsMedDept", SqlDbType.Int, IsMedDept);
                cn.Open();
                IList<GetDrugForSellVisitor> GetDrugForPrescriptions = null;
                IDataReader reader = ExecuteReader(cmd);
                GetDrugForPrescriptions = GetDrugForSellVisitorCollectionFromReader(reader);
                reader.Close();
                return GetDrugForPrescriptions;
            }
        }

        public override List<GetDrugForSellVisitor> GetDrugForSellVisitorAutoComplete_ForPrescription(byte HI,
                                                                                                      bool? IsHIPatient,
                                                                                                      string BrandName,
                                                                                                      long StoreID,
                                                                                                      long? PrescriptID,
                                                                                                      bool? IsCode)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetDrugForAutoCompleteForPrescription", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@HI", SqlDbType.TinyInt, ConvertNullObjectToDBNull(HI));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@PrescriptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PrescriptID));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cn.Open();
                List<GetDrugForSellVisitor> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetDrugForSellVisitorCollectionFromReader(reader);
                reader.Close();
                reader = null;
                return drugs;
            }
        }

        //Lấy tất cả loại thuốc trong toa thuốc (mỗi loại lấy hết lô nào có remaining > 0 và IsEndStockTakePeriod = 0)
        public override List<GetDrugForSellVisitor> GetDrugForSellVisitorAutoComplete_ForPrescriptionByID(byte HI,
                                                                                                          bool? IsHIPatient,
                                                                                                          long StoreID,
                                                                                                          long? PrescriptID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetDrugForAutoCompleteForPrescriptionByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@HI", SqlDbType.TinyInt, ConvertNullObjectToDBNull(HI));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@PrescriptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PrescriptID));
                cn.Open();
                List<GetDrugForSellVisitor> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetDrugForSellVisitorCollectionFromReader(reader);
                reader.Close();
                reader = null;
                return drugs;
            }
        }

        #endregion

        #region 15. Selling Price Fomular

        public override SellingPriceFormular GetSellingPriceFormularByID(long ItemID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSellingPriceFormular_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SPFItemID", SqlDbType.BigInt, ItemID);

                cn.Open();
                SellingPriceFormular p = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    p = GetSellingPriceFormularFromReader(reader);
                }

                reader.Close();
                return p;
            }
        }

        public override SellingPriceFormular GetSellingPriceFormularIsActive()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSellingPriceFormular_IsActive", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                SellingPriceFormular p = null;
                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    p = GetSellingPriceFormularFromReader(reader);
                }
                reader.Close();
                return p;
            }
        }

        public override List<SellingPriceFormular> GetSellingPriceFormularAll(DateTime? FromDate, DateTime? Todate,
                                                                              int PageIndex, int PageSize,
                                                                              out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSellingPriceFormular_All", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramFromDate = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramFromDate.Value = ConvertNullObjectToDBNull(FromDate);
                SqlParameter paramTodate = new SqlParameter("@todate", SqlDbType.DateTime);
                paramTodate.Value = ConvertNullObjectToDBNull(Todate);
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = PageIndex;
                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = PageSize;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramFromDate);
                cmd.Parameters.Add(paramTodate);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<SellingPriceFormular> p = null;
                IDataReader reader = ExecuteReader(cmd);
                p = GetSellingPriceFormularCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return p;
            }

        }

        public override bool AddNewSellingPriceFormular(SellingPriceFormular p)
        {
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSellingPriceFormular_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InternalProfitPrice", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(p.InternalProfitPrice));
                cmd.AddParameter("@ExternalProfitPrice", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(p.ExternalProfitPrice));
                cmd.AddParameter("@HIProfitPrice", SqlDbType.Float, ConvertNullObjectToDBNull(p.HIProfitPrice));
                cmd.AddParameter("@IsPercentage", SqlDbType.Bit, ConvertNullObjectToDBNull(p.IsPercentage));
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool UpdateSellingPriceFormular(SellingPriceFormular p)
        {
            return true;
        }

        public override bool DeleteSellingPriceFormular(long ItemID)
        {
            return true;
        }

        #endregion

        #region 16*. Drug Contraindicator

        public override List<RefMedicalConditionType> GetRefMedicalConditionTypes()
        {
            List<RefMedicalConditionType> listReVal = new List<RefMedicalConditionType>();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefMedicalConditionTypes_GetAll", cn);

                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                listReVal = GetRefMedicalConditionTypesAllPagingCollectionFromReader(reader);
                reader.Close();
            }
            return listReVal;
        }

        public override bool DeleteRefMedicalConditionTypes(int MCTypeID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefMedicalConditionTypes_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@MCTypeID", SqlDbType.BigInt, MCTypeID);
                cn.Open();
                cmd.ExecuteNonQuery();
                return true;
            }
        }

        public override bool InsertRefMedicalConditionTypes(string MedConditionType, int Idx)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefMedicalConditionTypes_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@MedConditionType", SqlDbType.NVarChar, MedConditionType);
                cmd.AddParameter("@Idx", SqlDbType.Int, Idx);

                cn.Open();
                cmd.ExecuteNonQuery();
                return true;
            }
        }

        public override bool UpdateRefMedicalConditionTypes(int MCTypeID, string MedConditionType, int Idx)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefMedicalConditionTypes_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@MCTypeID", SqlDbType.BigInt, MCTypeID);
                cmd.AddParameter("@MedConditionType", SqlDbType.NVarChar, MedConditionType);
                cmd.AddParameter("@Idx", SqlDbType.Int, Idx);

                cn.Open();
                cmd.ExecuteNonQuery();
                return true;
            }
        }

        public override List<RefMedicalCondition> GetRefMedicalConditions(int MCTypeID)
        {
            List<RefMedicalCondition> listReVal = new List<RefMedicalCondition>();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefMedicalConditions_GetAll", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@MCTypeID", SqlDbType.Int, MCTypeID);
                cn.Open();
                IDataReader reader = ExecuteReader(cmd);

                listReVal = GetRefMedicalConditionCollectionFromReader(reader);
                reader.Close();
            }
            return listReVal;
        }

        public override bool DeleteRefMedicalConditions(int MCID, int MCTypeID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefMedicalConditions_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@MCID", SqlDbType.Int, MCID);
                cmd.AddParameter("@MCTypeID", SqlDbType.Int, MCTypeID);

                cn.Open();
                cmd.ExecuteNonQuery();
                return true;
            }
        }

        public override bool InsertRefMedicalConditions(int MCTypeID, string MCDescription)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefMedicalConditions_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@MCDescription", SqlDbType.NVarChar, MCDescription);
                cmd.AddParameter("@MCTypeID", SqlDbType.Int, MCTypeID);

                cn.Open();
                cmd.ExecuteNonQuery();
                return true;
            }
        }

        public override bool UpdateRefMedicalConditions(int MCID, int MCTypeID, string MCDescription)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefMedicalConditions_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@MCTypeID", SqlDbType.BigInt, MCTypeID);
                cmd.AddParameter("@MCDescription", SqlDbType.NVarChar, MCDescription);
                cmd.AddParameter("@MCID", SqlDbType.Int, MCID);

                cn.Open();
                cmd.ExecuteNonQuery();
                return true;
            }
        }

        #endregion

        #region 16. Drug Contraindicator

        public override List<ContraIndicatorDrugsRelToMedCond> GetContraIndicatorDrugsRelToMedCondList(int MCTypeID,
                                                                                                       long DrugID)
        {
            List<ContraIndicatorDrugsRelToMedCond> listReVal = new List<ContraIndicatorDrugsRelToMedCond>();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spContraIndicatorDrugsRelToMedCond_GetList", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@MCTypeID", SqlDbType.BigInt, MCTypeID);
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, DrugID);

                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                listReVal = GetContraIndicatorDrugsRelToMedCondFromReader(reader);
                reader.Close();
            }
            return listReVal;
        }

        //▼===== 25072018 TTM
        public override List<ContraIndicatorDrugsRelToMedCond> GetContraIndicatorDrugsRelToMedCondList_New(int MCTypeID,
                                                                                                       long DrugID)
        {
            List<ContraIndicatorDrugsRelToMedCond> listReVal = new List<ContraIndicatorDrugsRelToMedCond>();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spContraIndicatorDrugsRelToMedCond_GetList", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@MCTypeID", SqlDbType.BigInt, MCTypeID);
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, DrugID);

                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                listReVal = GetContraIndicatorDrugsRelToMedCondFromReader(reader);
                reader.Close();
            }
            return listReVal;
        }
        //▲===== 25072018 TTM
        public override List<ContraIndicatorDrugsRelToMedCond> GetAllContrainIndicatorDrugs()
        {
            List<ContraIndicatorDrugsRelToMedCond> listReVal = new List<ContraIndicatorDrugsRelToMedCond>();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spContraIndicatorDrugsRelToMedCondALlList", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                listReVal = GetContraIndicatorDrugsRelToMedCondFromReader(reader);
                reader.Close();
            }
            return listReVal;
        }

        public override List<RefMedicalConditionType> GetRefMedicalConditionTypesAllPaging(
            int PageSize
            , int PageIndex
            , string OrderBy
            , bool CountTotal
            , out int Total)
        {

            List<RefMedicalConditionType> listReVal = new List<RefMedicalConditionType>();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefMedicalConditionTypes_AllPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PageSize", SqlDbType.Int, (PageSize));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, (PageIndex));
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, (OrderBy));
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                //cmd.AddParameter("@Total", SqlDbType.Bit, ParameterDirection.Output(Total));

                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramTotal);
                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                listReVal = GetRefMedicalConditionTypesAllPagingCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    Total = (int)paramTotal.Value;
                }
                else
                    Total = -1;
            }
            return listReVal;
        }

        public override bool GetConIndicatorDrugsRelToMedCondAll(int MCTypeID, long DrugID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spContraIndicatorDrugsRelToMedCond_GetAll", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@MCTypeID", SqlDbType.BigInt, MCTypeID);
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, DrugID);

                cn.Open();
                object sum = cmd.ExecuteScalar();
                if ((long)sum > 0)
                    return true;
                else return false;
            }
        }

        public override bool DeleteConIndicatorDrugsRelToMedCond(long DrugsMCTypeID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spContraIndicatorDrugsRelToMedCond_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugsMCTypeID", SqlDbType.BigInt, DrugsMCTypeID);
                cn.Open();
                cmd.ExecuteNonQuery();
                return true;
            }
        }


        public override void InsertConIndicatorDrugsRelToMedCond(IList<RefMedicalConditionType> lstRefMedicalCondition,
                                                                 long DrugID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                List<SqlCommand> lstCmd = new List<SqlCommand>();
                //SqlTransaction transaction;
                cn.Open();
                // =====▼ #007                
                // transaction = cn.BeginTransaction();                
                // =====▲ #007

                foreach (RefMedicalConditionType rPL in lstRefMedicalCondition)
                {
                    SqlCommand cmd = new SqlCommand("spConIndicDrugsRelToMedCond_Insert", cn);


                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@MCTypeID", SqlDbType.BigInt, rPL.MCTypeID);
                    cmd.AddParameter("@DrugID", SqlDbType.BigInt, DrugID);

                    // =====▼ #007
                    // cmd.Transaction = transaction;
                    // =====▲ #007

                    lstCmd.Add(cmd);
                }
                //status o day

                try
                {
                    foreach (SqlCommand sQLCmd in lstCmd)
                    {
                        sQLCmd.ExecuteNonQuery();
                    }
                    // =====▼ #007                    
                    // transaction.Commit();                    
                    // =====▲ #007
                }
                catch (Exception exObj)
                {
                    AxLogger.Instance.LogError(exObj);
                    // =====▼ #007                    
                    // transaction.Rollback();                    
                    // =====▲ #007
                }

            }
            return;
        }

        //▼===== 25072018 TTM
        public override void InsertConIndicatorDrugsRelToMedCond_New(IList<RefMedicalConditionType> lstRefMedicalCondition,
                                                                 long DrugID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                List<SqlCommand> lstCmd = new List<SqlCommand>();
                //SqlTransaction transaction;
                cn.Open();
                // =====▼ #007                
                // transaction = cn.BeginTransaction();                
                // =====▲ #007

                foreach (RefMedicalConditionType rPL in lstRefMedicalCondition)
                {
                    SqlCommand cmd = new SqlCommand("spConIndicDrugsRelToMedCond_Insert", cn);


                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@MCTypeID", SqlDbType.BigInt, rPL.MCTypeID);
                    cmd.AddParameter("@DrugID", SqlDbType.BigInt, DrugID);

                    // =====▼ #007
                    // cmd.Transaction = transaction;
                    // =====▲ #007

                    lstCmd.Add(cmd);
                }
                //status o day

                try
                {
                    foreach (SqlCommand sQLCmd in lstCmd)
                    {
                        sQLCmd.ExecuteNonQuery();
                    }
                    // =====▼ #007                    
                    // transaction.Commit();                    
                    // =====▲ #007
                }
                catch (Exception exObj)
                {
                    AxLogger.Instance.LogError(exObj);
                    // =====▼ #007                    
                    // transaction.Rollback();                    
                    // =====▲ #007
                }

            }
            return;
        }
        //▲===== 25072018 TTM

        public override bool InsertDeleteUpdateConIndicatorDrugsRelToMedCondXML(IList<ContraIndicatorDrugsRelToMedCond> lstInsert
                                                                 , IList<ContraIndicatorDrugsRelToMedCond> lstDelete
                                                            , IList<ContraIndicatorDrugsRelToMedCond> lstUpdate)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                List<SqlCommand> lstCmd = new List<SqlCommand>();
                cn.Open();

                SqlCommand cmd = new SqlCommand("spConIndicDrugsRelToMedCond_InsertDeleteUpdateXml", cn);


                cmd.CommandType = CommandType.StoredProcedure;

                //cmd.AddParameter("@DrugsMCTypeID", SqlDbType.Xml, ConvertNullObjectToDBNull(DrugsMCTypeID));
                //cmd.AddParameter("@DrugID", SqlDbType.Xml, ConvertNullObjectToDBNull(DrugID));
                cmd.AddParameter("@InsertDataXml", SqlDbType.Xml, ConvertNullObjectToDBNull(CIDRTMC_ConvertListToXml(lstInsert)));
                cmd.AddParameter("@DeleteDataXml", SqlDbType.Xml, ConvertNullObjectToDBNull(CIDRTMC_ConvertListToXml(lstDelete)));
                cmd.AddParameter("@UpdateDataXml", SqlDbType.Xml, ConvertNullObjectToDBNull(CIDRTMC_ConvertListToXml(lstUpdate)));
                try
                {
                    var res = cmd.ExecuteNonQuery();
                    return res > 0;
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        //▼===== 25072018 TTM
        public override bool InsertDeleteUpdateConIndicatorDrugsRelToMedCondXML_New(IList<ContraIndicatorDrugsRelToMedCond> lstInsert
                                                                 , IList<ContraIndicatorDrugsRelToMedCond> lstDelete
                                                            , IList<ContraIndicatorDrugsRelToMedCond> lstUpdate)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                List<SqlCommand> lstCmd = new List<SqlCommand>();
                cn.Open();

                SqlCommand cmd = new SqlCommand("spConIndicDrugsRelToMedCond_InsertDeleteUpdateXml", cn);


                cmd.CommandType = CommandType.StoredProcedure;

                //cmd.AddParameter("@DrugsMCTypeID", SqlDbType.Xml, ConvertNullObjectToDBNull(DrugsMCTypeID));
                //cmd.AddParameter("@DrugID", SqlDbType.Xml, ConvertNullObjectToDBNull(DrugID));
                cmd.AddParameter("@InsertDataXml", SqlDbType.Xml, ConvertNullObjectToDBNull(CIDRTMC_ConvertListToXml(lstInsert)));
                cmd.AddParameter("@DeleteDataXml", SqlDbType.Xml, ConvertNullObjectToDBNull(CIDRTMC_ConvertListToXml(lstDelete)));
                cmd.AddParameter("@UpdateDataXml", SqlDbType.Xml, ConvertNullObjectToDBNull(CIDRTMC_ConvertListToXml(lstUpdate)));
                try
                {
                    var res = cmd.ExecuteNonQuery();
                    return res > 0;
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }
        //▲===== 25072018 TTM

        private string CIDRTMC_ConvertListToXml(IList<ContraIndicatorDrugsRelToMedCond> lstCIDRTMC)
        {
            if (lstCIDRTMC != null && lstCIDRTMC.Count > 0)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<DS>");
                foreach (ContraIndicatorDrugsRelToMedCond item in lstCIDRTMC)
                {
                    sb.Append("<ContraIndicatorDrugsRelToMedCond>");
                    sb.AppendFormat("<MCTypeID>{0}</MCTypeID>", item.MCTypeID);
                    sb.AppendFormat("<DrugsMCTypeID>{0}</DrugsMCTypeID>", item.DrugsMCTypeID);
                    sb.AppendFormat("<DrugID>{0}</DrugID>", item.DrugID);

                    sb.Append("</ContraIndicatorDrugsRelToMedCond>");

                }
                sb.Append("</DS>");

                return sb.ToString();
            }
            else
            {
                return null;
            }
        }

        public override void InsertConIndicatorDrugsRelToMedCondEx(IList<RefGenericDrugDetail> lstRefGenericDrugDetail,
                                                                   long MCTypeID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                List<SqlCommand> lstCmd = new List<SqlCommand>();
                //SqlTransaction transaction;
                cn.Open();
                // =====▼ #007                
                // transaction = cn.BeginTransaction();                
                // =====▲ #007

                foreach (RefGenericDrugDetail rPL in lstRefGenericDrugDetail)
                {
                    SqlCommand cmd = new SqlCommand("spConIndicDrugsRelToMedCond_Insert", cn);


                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@MCTypeID", SqlDbType.BigInt, MCTypeID);
                    cmd.AddParameter("@DrugID", SqlDbType.BigInt, rPL.DrugID);
                    // =====▼ #007                    
                    // cmd.Transaction = transaction;
                    // =====▲ #007

                    lstCmd.Add(cmd);
                }
                //status o day

                try
                {
                    foreach (SqlCommand sQLCmd in lstCmd)
                    {
                        sQLCmd.ExecuteNonQuery();
                    }
                    // =====▼ #007                    
                    // transaction.Commit();
                    // =====▲ #007

                }
                catch (Exception exObj)
                {
                    AxLogger.Instance.LogError(exObj);
                    // =====▼ #007
                    // transaction.Rollback();
                    // =====▲ #007
                }

            }
            return;
        }

        public override List<ContraIndicatorDrugsRelToMedCond> GetConIndicatorDrugsRelToMedCond(IList<long> lstMCTpe,
                                                                                                long DrugID)
        {
            List<ContraIndicatorDrugsRelToMedCond> listReVal = new List<ContraIndicatorDrugsRelToMedCond>();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {

                foreach (long rPL in lstMCTpe)
                {
                    List<ContraIndicatorDrugsRelToMedCond> sublist = new List<ContraIndicatorDrugsRelToMedCond>();
                    try
                    {
                        sublist = GetContraIndicatorDrugsRelToMedCondList(Convert.ToInt32(rPL), DrugID);
                    }
                    catch
                    {
                    }
                    if (sublist != null)
                    {
                        foreach (ContraIndicatorDrugsRelToMedCond cdt in sublist)
                        {
                            listReVal.Add(cdt);
                        }
                    }
                }
            }
            return listReVal;
        }

        public override List<RefMedicalConditionType> GetRefMedCondType()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefMedicalConditionTypes_All", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlParameter par1 = cmd.Parameters.Add("@MCTypeID", SqlDbType.Int);
                par1.Value = 0;
                cn.Open();
                List<RefMedicalConditionType> objLst = null;
                IDataReader reader = ExecuteReader(cmd);
                objLst = GetRefMedicalConditionTypeCollectionFromReader(reader);
                reader.Close();
                return objLst;
            }
        }


        public override List<ContraIndicatorDrugsRelToMedCond> GetContraIndicatorDrugsRelToMedCondPaging(
            long MCTypeID
            , int PageSize
            , int PageIndex
            , string OrderBy
            , bool CountTotal
            , out int Total)
        {

            List<ContraIndicatorDrugsRelToMedCond> listReVal = new List<ContraIndicatorDrugsRelToMedCond>();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spContraIndicatorDrugsRelToMedCondPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@MCTypeID", SqlDbType.Int, (MCTypeID));
                cmd.AddParameter("@PageSize", SqlDbType.Int, (PageSize));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, (PageIndex));
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, (OrderBy));
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                //cmd.AddParameter("@Total", SqlDbType.Bit, ParameterDirection.Output(Total));

                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramTotal);
                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                listReVal = GetContraIndicatorDrugsRelToMedCondFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    Total = (int)paramTotal.Value;
                }
                else
                    Total = -1;
            }
            return listReVal;
        }

        #endregion

        #region ContraIndicatorMedProductsRelToMedCond member

        public override bool DeleteConIndicatorMedProductsRelToMedCond(long MedProductsMCTypeID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spContraIndicatorMedProductsRelToMedCond_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@MedProductsMCTypeID", SqlDbType.BigInt, MedProductsMCTypeID);
                cn.Open();
                cmd.ExecuteNonQuery();
                return true;
            }
        }

        public override List<ContraIndicatorMedProductsRelToMedCond> GetContraIndicatorMedProductsRelToMedCondList(int MCTypeID,
                                                                                                 long GenMedProductID)
        {
            List<ContraIndicatorMedProductsRelToMedCond> listReVal = new List<ContraIndicatorMedProductsRelToMedCond>();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spContraIndicatorMedProductsRelToMedCond_GetList", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@MCTypeID", SqlDbType.BigInt, MCTypeID);
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, GenMedProductID);

                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                listReVal = GetContraIndicatorMedProductsRelToMedCondFromReader(reader);
                reader.Close();
            }
            return listReVal;
        }

        public override bool GetConIndicatorMedProductsRelToMedCondAll(int MCTypeID, long GenMedProductID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spContraIndicatorMedProductsRelToMedCond_GetAll", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@MCTypeID", SqlDbType.BigInt, MCTypeID);
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, GenMedProductID);

                cn.Open();
                object sum = cmd.ExecuteScalar();
                if ((long)sum > 0)
                    return true;
                else return false;
            }
        }

        public override void InsertConIndicatorMedProductsRelToMedCond(IList<RefMedicalConditionType> lstRefMedicalCondition,
                                                                long GenMedProductID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                List<SqlCommand> lstCmd = new List<SqlCommand>();
                //SqlTransaction transaction;
                cn.Open();
                // =====▼ #007                                
                // transaction = cn.BeginTransaction();
                // =====▲ #007
                foreach (RefMedicalConditionType rPL in lstRefMedicalCondition)
                {
                    SqlCommand cmd = new SqlCommand("spConIndicMedProductsRelToMedCond_Insert", cn);


                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@MCTypeID", SqlDbType.BigInt, rPL.MCTypeID);
                    cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, GenMedProductID);
                    // =====▼ #007                                
                    // cmd.Transaction = transaction;                                
                    // =====▲ #007
                    lstCmd.Add(cmd);
                }
                //status o day

                try
                {
                    foreach (SqlCommand sQLCmd in lstCmd)
                    {
                        sQLCmd.ExecuteNonQuery();
                    }
                    // =====▼ #007                                
                    // transaction.Commit();                              
                    // =====▲ #007
                }
                catch (Exception exObj)
                {
                    AxLogger.Instance.LogError(exObj);
                    // =====▼ #007                                
                    // transaction.Rollback();                               
                    // =====▲ #007
                }

            }
            return;
        }

        public override bool InsertDeleteUpdateConIndicatorMedProductsRelToMedCondXML(IList<ContraIndicatorMedProductsRelToMedCond> lstInsert
                                                            , IList<ContraIndicatorMedProductsRelToMedCond> lstDelete
                                                       , IList<ContraIndicatorMedProductsRelToMedCond> lstUpdate)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                List<SqlCommand> lstCmd = new List<SqlCommand>();
                cn.Open();

                SqlCommand cmd = new SqlCommand("spConIndicMedProductsRelToMedCond_InsertDeleteUpdateXml", cn);


                cmd.CommandType = CommandType.StoredProcedure;

                //cmd.AddParameter("@DrugsMCTypeID", SqlDbType.Xml, ConvertNullObjectToDBNull(DrugsMCTypeID));
                //cmd.AddParameter("@DrugID", SqlDbType.Xml, ConvertNullObjectToDBNull(DrugID));
                cmd.AddParameter("@InsertDataXml", SqlDbType.Xml, ConvertNullObjectToDBNull(CIDRTMCMedProduct_ConvertListToXml(lstInsert)));
                cmd.AddParameter("@DeleteDataXml", SqlDbType.Xml, ConvertNullObjectToDBNull(CIDRTMCMedProduct_ConvertListToXml(lstDelete)));
                cmd.AddParameter("@UpdateDataXml", SqlDbType.Xml, ConvertNullObjectToDBNull(CIDRTMCMedProduct_ConvertListToXml(lstUpdate)));
                try
                {
                    var res = cmd.ExecuteNonQuery();
                    return res > 0;
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }


        private string CIDRTMCMedProduct_ConvertListToXml(IList<ContraIndicatorMedProductsRelToMedCond> lstCIDRTMC)
        {
            if (lstCIDRTMC != null && lstCIDRTMC.Count > 0)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<DS>");
                foreach (ContraIndicatorMedProductsRelToMedCond item in lstCIDRTMC)
                {
                    sb.Append("<ContraIndicatorMedProductsRelToMedCond>");
                    sb.AppendFormat("<MCTypeID>{0}</MCTypeID>", item.MCTypeID);
                    sb.AppendFormat("<MedProductsMCTypeID>{0}</MedProductsMCTypeID>", item.MedProductsMCTypeID);
                    sb.AppendFormat("<GenMedProductID>{0}</GenMedProductID>", item.GenMedProductID);

                    sb.Append("</ContraIndicatorMedProductsRelToMedCond>");

                }
                sb.Append("</DS>");

                return sb.ToString();
            }
            else
            {
                return null;
            }
        }

        public override void InsertConIndicatorMedProductsRelToMedCondEx(IList<RefGenMedProductDetails> lstRefGenericDrugDetail,
                                                                  long MCTypeID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                List<SqlCommand> lstCmd = new List<SqlCommand>();
                //SqlTransaction transaction;
                cn.Open();
                // =====▼ #007                                                
                //transaction = cn.BeginTransaction();                                            
                // =====▲ #007

                foreach (RefGenMedProductDetails rPL in lstRefGenericDrugDetail)
                {
                    SqlCommand cmd = new SqlCommand("spConIndicMedProductsRelToMedCond_Insert", cn);


                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@MCTypeID", SqlDbType.BigInt, MCTypeID);
                    cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, rPL.GenMedProductID);
                    // =====▼ #007                                                    
                    //cmd.Transaction = transaction;                                           
                    // =====▲ #007

                    lstCmd.Add(cmd);
                }
                //status o day

                try
                {
                    foreach (SqlCommand sQLCmd in lstCmd)
                    {
                        sQLCmd.ExecuteNonQuery();
                    }
                    // =====▼ #007                                                   
                    // transaction.Commit();                             
                    // =====▲ #007

                }
                catch (Exception exObj)
                {
                    AxLogger.Instance.LogError(exObj);
                    // =====▼ #007                                
                    // transaction.Rollback();
                    // =====▲ #007
                }

            }
            return;
        }

        public override List<ContraIndicatorMedProductsRelToMedCond> GetContraIndicatorMedProductsRelToMedCond(IList<long> lstMCTpe,
                                                                                              long GenMedProductID)
        {
            List<ContraIndicatorMedProductsRelToMedCond> listReVal = new List<ContraIndicatorMedProductsRelToMedCond>();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {

                foreach (long rPL in lstMCTpe)
                {
                    List<ContraIndicatorMedProductsRelToMedCond> sublist = new List<ContraIndicatorMedProductsRelToMedCond>();
                    try
                    {
                        sublist = GetContraIndicatorMedProductsRelToMedCondList(Convert.ToInt32(rPL), GenMedProductID);
                    }
                    catch
                    {
                    }
                    if (sublist != null)
                    {
                        foreach (ContraIndicatorMedProductsRelToMedCond cdt in sublist)
                        {
                            listReVal.Add(cdt);
                        }
                    }
                }
            }
            return listReVal;
        }
        #endregion

        #region 17. Inward Drug For Clinic Dept

        public override List<OutwardDrugMedDeptInvoice> OutwardDrugMedDeptInvoice_Cbx(long? StoreID,
                                                                                      long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugMedDeptInvoices_InClinicDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<OutwardDrugMedDeptInvoice> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetOutwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugClinicDeptInvoice> SearchInwardDrugClinicDeptInvoice(
            InwardInvoiceSearchCriteria criteria, long? TypID, long V_MedProductType, int pageIndex, int pageSize,
            bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugClinicDeptInvoice_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramInwardID = new SqlParameter("@InwardID", SqlDbType.VarChar, 128);
                paramInwardID.Value = ConvertNullObjectToDBNull(criteria.InwardID);
                SqlParameter paramInvoiveNumber = new SqlParameter("@InvoiceNumber", SqlDbType.VarChar, 128);
                paramInvoiveNumber.Value = ConvertNullObjectToDBNull(criteria.InvoiceNumber);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);
                SqlParameter paramV_MedProductType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramV_MedProductType.Value = V_MedProductType;

                SqlParameter paramIsInwardOther = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramIsInwardOther.Value = ConvertNullObjectToDBNull(TypID);
                SqlParameter paramIsInputMedDept = new SqlParameter("@IsInputMedDept", SqlDbType.Bit);
                paramIsInputMedDept.Value = ConvertNullObjectToDBNull(criteria.IsInputMedDept);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.AddParameter("@IsMedDeptSubStorage", SqlDbType.Bit, ConvertNullObjectToDBNull(criteria.IsMedDeptSubStorage));

                cmd.Parameters.Add(paramInwardID);
                cmd.Parameters.Add(paramInvoiveNumber);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramV_MedProductType);
                cmd.Parameters.Add(paramIsInwardOther);
                cmd.Parameters.Add(paramIsInputMedDept);
                cmd.AddParameter("@DeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.InDeptID));

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                IList<InwardDrugClinicDeptInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetInwardDrugClinicDeptInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        public override InwardDrugClinicDeptInvoice GetInwardDrugClinicDeptInvoice_ByID(long ID)
        {
            return GetInwardDrugClinicDeptInvoice_ByID_V2(ID, null);
        }
        public override InwardDrugClinicDeptInvoice GetInwardDrugClinicDeptInvoice_ByID_V2(long ID, long? V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugClinicDeptInvoice_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                InwardDrugClinicDeptInvoice invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    invoicedrug = GetInwardDrugClinicDeptInvoiceFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugClinicDept> GetInwardDrugClinicDept_ByIDInvoice(long inviID, int pageSize,
                                                                                        int pageIndex, bool bCountTotal,
                                                                                        out int totalCount
                                                                                        , out decimal TongTienSPChuaVAT
                                                                                        , out decimal CKTrenSP
                                                                                        ,
                                                                                        out decimal
                                                                                            TongTienTrenSPDaTruCK
                                                                                        , out decimal TongCKTrenHoaDon
                                                                                        ,
                                                                                        out decimal TongTienHoaDonCoVAT)
        {
            totalCount = 0;
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoVAT = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugClinicDept_ByIDInvoice", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = " ";

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cn.Open();
                IList<InwardDrugClinicDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugClinicDeptCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal)
                {
                    try
                    {
                        totalCount = (int)paramTotal.Value;
                        TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                        CKTrenSP = (decimal)paramCKTrenSP.Value;
                        TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                        TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                        TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                    }
                    catch
                    {
                        totalCount = -1;
                        TongTienSPChuaVAT = 0;
                        CKTrenSP = 0;
                        TongTienTrenSPDaTruCK = 0;
                        TongCKTrenHoaDon = 0;
                        TongTienHoaDonCoVAT = 0;
                    }
                }
                return invoicedrug;
            }
        }

        public override IList<InwardDrugClinicDept> GetInwardDrugClinicDept_ByIDInvoiceNotPaging(long inviID
            , out decimal TongTienSPChuaVAT
            , out decimal CKTrenSP
            , out decimal TongTienTrenSPDaTruCK
            , out decimal TongCKTrenHoaDon
            , out decimal TongTienHoaDonCoVAT)
        {
            return GetInwardDrugClinicDept_ByIDInvoiceNotPaging_V2(inviID
                , out TongTienSPChuaVAT
                , out CKTrenSP
                , out TongTienTrenSPDaTruCK
                , out TongCKTrenHoaDon
                , out TongTienHoaDonCoVAT
                , null
                , false);
        }
        public override IList<InwardDrugClinicDept> GetInwardDrugClinicDept_ByIDInvoiceNotPaging_V2(long inviID
            , out decimal TongTienSPChuaVAT
            , out decimal CKTrenSP
            , out decimal TongTienTrenSPDaTruCK
            , out decimal TongCKTrenHoaDon
            , out decimal TongTienHoaDonCoVAT
            , long? V_MedProductType
            , bool IsMedDeptSubStorage)
        {
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoVAT = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugClinicDept_ByIDInvoiceNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@IsMedDeptSubStorage", SqlDbType.Bit, ConvertNullObjectToDBNull(IsMedDeptSubStorage));

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cn.Open();
                IList<InwardDrugClinicDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugClinicDeptCollectionFromReader(reader);
                reader.Close();

                try
                {
                    TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                    CKTrenSP = (decimal)paramCKTrenSP.Value;
                    TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                    TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                    TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                }
                catch
                {
                    TongTienSPChuaVAT = 0;
                    CKTrenSP = 0;
                    TongTienTrenSPDaTruCK = 0;
                    TongCKTrenHoaDon = 0;
                    TongTienHoaDonCoVAT = 0;
                }
                return invoicedrug;
            }
        }

        public override int AddInwardDrugClinicDeptInvoice(InwardDrugClinicDeptInvoice InvoiceDrug, out long inwardid)
        {
            int results = 0;
            inwardid = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugClinicDeptInvoice_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                 ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));

                SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                paramID.Direction = ParameterDirection.Output;

                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramID);
                cmd.Parameters.Add(paramError);

                cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));

                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                if (paramID.Value != DBNull.Value)
                {
                    inwardid = (long)paramID.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int DeleteInwardDrugClinicDept(long invoicedrug)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugClinicDept_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InID", SqlDbType.BigInt, invoicedrug);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                return results;
            }

        }

        public override int DeleteInwardDrugClinicDeptInvoice(long ID)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugClinicDeptInvoice_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InvID", SqlDbType.BigInt, ID);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int UpdateInwardDrugClinicDept(InwardDrugClinicDept invoicedrug)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugClinicDept_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.InID));
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.inviID));
                cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InBuyingPrice));
                cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                 ConvertNullToZero(invoicedrug.DrugDeptPoDetailID));
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.V_GoodsType));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));

                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                cmd.ExecuteNonQuery();
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int UpdateInwardDrugClinicDeptInvoice(InwardDrugClinicDeptInvoice InvoiceDrug)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugClinicDeptInvoice_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InviID", SqlDbType.BigInt, InvoiceDrug.inviID);
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, InvoiceDrug.StaffID);
                //cmd.AddParameter("@Deliverer", SqlDbType.NVarChar,ConvertNullObjectToDBNull(InvoiceDrug.Deliverer));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, InvoiceDrug.SupplierID);
                cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar, InvoiceDrug.InvInvoiceNumber);
                cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit, InvoiceDrug.TempRequireUpdate);
                cmd.AddParameter("@VAT", SqlDbType.Decimal, InvoiceDrug.VAT);
                cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, InvoiceDrug.StoreID);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);

                cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));

                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override List<RefGenMedProductDetails> spGetInBatchNumberAllDrugDept_Clinic_ByGenMedProductID(
            long GenMedProductID, long V_MedProductType, long StoreID, bool? IsHIPatient)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetInBatchNumberAllDrugDept_Clinic_ByGenMedProductID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(GenMedProductID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override bool AddInwardDrugClinicDept(DrugDeptPurchaseOrderDetail invoicedrug, long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugClinicDept_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
                cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
                cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.DrugDeptPoDetailID));
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }

        }

        public override int InwardDrugClinicDeptInvoice_SaveXML(InwardDrugClinicDeptInvoice InvoiceDrug, out long id)
        {
            try
            {
                int results = 0;
                id = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    //SqlCommand cmd;
                    //if(InvoiceDrug.V_MedProductType == (long)AllLookupValues.MedProductType.VTYT_TIEUHAO)
                    //{
                    //    cmd = new SqlCommand("spInwardVTYTTHClinicDeptInvoice_SaveXML", cn);
                    //}
                    //else if (InvoiceDrug.V_MedProductType == (long)AllLookupValues.MedProductType.TIEM_NGUA)
                    //{
                    //    cmd = new SqlCommand("spInwardVaccineClinicDeptInvoice_SaveXML", cn);
                    //}
                    //else if (InvoiceDrug.V_MedProductType == (long)AllLookupValues.MedProductType.MAU)
                    //{
                    //    cmd = new SqlCommand("spInwardBloodClinicDeptInvoice_SaveXML", cn);
                    //}
                    //else if (InvoiceDrug.V_MedProductType == (long)AllLookupValues.MedProductType.VAN_PHONG_PHAM)
                    //{
                    //    cmd = new SqlCommand("spInwardVPPClinicDeptInvoice_SaveXML", cn);
                    //}
                    //else if (InvoiceDrug.V_MedProductType == (long)AllLookupValues.MedProductType.VATTU_TIEUHAO)
                    //{
                    //    cmd = new SqlCommand("spInwardVTTHClinicDeptInvoice_SaveXML", cn);
                    //}
                    //else if (InvoiceDrug.V_MedProductType == (long)AllLookupValues.MedProductType.THANHTRUNG)
                    //{
                    //    cmd = new SqlCommand("spInwardThanhTrungClinicDeptInvoice_SaveXML", cn);
                    //}
                    //else if (InvoiceDrug.V_MedProductType == (long)AllLookupValues.MedProductType.HOA_CHAT)
                    //{
                    //    cmd = new SqlCommand("spInwardChemicalClinicDeptInvoice_SaveXML", cn);
                    //}
                    //else
                    //{
                    SqlCommand cmd = new SqlCommand("spInwardDrugClinicDeptInvoice_SaveXML", cn);
                    //}
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice.ToString("yyyy/MM/dd")));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                    cmd.AddParameter("@outiID_Clinic", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID_Clinic));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(InvoiceDrug.ConvertDetailsListToXml()));
                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramID);

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        id = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        public override bool AcceptAutoUpdateInwardClinicInvoice(long inviID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spAcceptAutoUpdateInwardClinicInvoice", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        #endregion

        #region 18. Inward Drug For Med Dept

        public override List<OutwardDrugClinicDeptInvoice> OutwardDrugClinicDeptInvoice_Cbx(long? StoreID, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugClinicDeptInvoices_InMedDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<OutwardDrugClinicDeptInvoice> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetOutwardDrugClinicDeptInvoiceCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDeptInvoice> SearchInwardDrugMedDeptInvoice(
            InwardInvoiceSearchCriteria criteria, long? TypID, long? V_MedProductType, int pageIndex, int pageSize,
            bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugMedDeptInvoice_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramInwardID = new SqlParameter("@InwardID", SqlDbType.VarChar, 128);
                paramInwardID.Value = ConvertNullObjectToDBNull(criteria.InwardID);
                SqlParameter paramInvoiveNumber = new SqlParameter("@InvoiceNumber", SqlDbType.VarChar, 128);
                paramInvoiveNumber.Value = ConvertNullObjectToDBNull(criteria.InvoiceNumber);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);
                SqlParameter paramV_MedProductType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramV_MedProductType.Value = ConvertNullObjectToDBNull(V_MedProductType);

                SqlParameter paramIsInwardOther = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramIsInwardOther.Value = ConvertNullObjectToDBNull(TypID);


                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramInwardID);
                cmd.Parameters.Add(paramInvoiveNumber);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramV_MedProductType);
                cmd.Parameters.Add(paramIsInwardOther);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.inviID));
                cn.Open();
                IList<InwardDrugMedDeptInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetInwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        public override InwardDrugMedDeptInvoice GetInwardDrugMedDeptInvoice_ByID(long ID)
        {
            return GetInwardDrugMedDeptInvoice_ByID_V2(ID, null);
        }
        public override InwardDrugMedDeptInvoice GetInwardDrugMedDeptInvoice_ByID_V2(long ID, long? V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugMedDeptInvoice_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                InwardDrugMedDeptInvoice invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    invoicedrug = GetInwardDrugMedDeptInvoiceFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardDrugMedDept_ByIDInvoice(long inviID, int pageSize
            ,int pageIndex, bool bCountTotal
            ,out int totalCount
            ,out decimal TongTienSPChuaVAT
            ,out decimal CKTrenSP
            ,out decimal TongTienTrenSPDaTruCK
            ,out decimal TongCKTrenHoaDon
            ,out decimal TongTienHoaDonCoThueNK
            ,out decimal TongTienHoaDonCoVAT
            ,out decimal TotalVATDifferenceAmount)
        {
            totalCount = 0;
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;
            TotalVATDifferenceAmount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugMedDept_ByIDInvoice", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = " ";

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, 5, DBNull.Value, ParameterDirection.Output);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal)
                {
                    try
                    {
                        totalCount = (int)paramTotal.Value;
                        TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                        CKTrenSP = (decimal)paramCKTrenSP.Value;
                        TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                        TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                        TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                        TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                        TotalVATDifferenceAmount = (decimal)cmd.Parameters.Cast<SqlParameter>().Where(x => x.ParameterName == "@TotalVATDifferenceAmount").FirstOrDefault().Value;
                    }
                    catch
                    {
                        totalCount = -1;
                        TongTienSPChuaVAT = 0;
                        CKTrenSP = 0;
                        TongTienTrenSPDaTruCK = 0;
                        TongCKTrenHoaDon = 0;
                        TongTienHoaDonCoThueNK = 0;
                        TongTienHoaDonCoVAT = 0;
                        TotalVATDifferenceAmount = 0;
                    }
                }
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardDrugMedDept_ByIDInvoiceNotPaging(long inviID
            , out decimal TongTienSPChuaVAT
            , out decimal CKTrenSP
            , out decimal TongTienTrenSPDaTruCK
            , out decimal TongCKTrenHoaDon
            , out decimal TongTienHoaDonCoThueNK
            , out decimal TongTienHoaDonCoVAT)
        {
            return GetInwardDrugMedDept_ByIDInvoiceNotPaging_V2(inviID, out TongTienSPChuaVAT
                , out CKTrenSP
                , out TongTienTrenSPDaTruCK
                , out TongCKTrenHoaDon
                , out TongTienHoaDonCoThueNK
                , out TongTienHoaDonCoVAT
                , null);
        }
        public override IList<InwardDrugMedDept> GetInwardDrugMedDept_ByIDInvoiceNotPaging_V2(long inviID
            , out decimal TongTienSPChuaVAT
            , out decimal CKTrenSP
            , out decimal TongTienTrenSPDaTruCK
            , out decimal TongCKTrenHoaDon
            , out decimal TongTienHoaDonCoThueNK
            , out decimal TongTienHoaDonCoVAT
            , long? V_MedProductType)
        {
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugMedDept_ByIDInvoiceNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                try
                {
                    TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                    CKTrenSP = (decimal)paramCKTrenSP.Value;
                    TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                    TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                    TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                    TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                }
                catch
                {
                    TongTienSPChuaVAT = 0;
                    CKTrenSP = 0;
                    TongTienTrenSPDaTruCK = 0;
                    TongCKTrenHoaDon = 0;
                    TongTienHoaDonCoThueNK = 0;
                    TongTienHoaDonCoVAT = 0;
                }
                return invoicedrug;
            }
        }

        public override int AddInwardDrugMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug, out long inwardid)
        {
            try
            {
                int results = 0;
                inwardid = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardDrugMedDeptInvoice_Insert", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));


                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));

                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));

                    cmd.AddParameter("@IsCheckBuyingPrice", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsCheckBuyingPrice));

                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar,ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));

                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramID);
                    cmd.Parameters.Add(paramError);

                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        inwardid = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardDrugMedDept(long invoicedrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardDrugMedDept_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, invoicedrug);
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    return results;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool DeleteInwardDrugMedDeptTemp(long InID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardDrugMedDeptTemp_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, InID);
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardDrugMedDeptInvoice(long ID)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugMedDeptInvoice_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InvID", SqlDbType.BigInt, ID);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int UpdateInwardDrugMedDept(InwardDrugMedDept invoicedrug, long StaffID)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardDrugMedDept_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.InID));
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.inviID));
                    cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                    cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                    cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                    cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                    cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                    cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                    cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InBuyingPrice));
                    cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                     ConvertNullToZero(invoicedrug.DrugDeptPoDetailID));
                    cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                    cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.V_GoodsType));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                    cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                    cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                    cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                    cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                    cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                     ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                    cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.NormalPrice : 0));
                    cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIPatientPrice : 0));
                    cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIAllowedPrice : 0));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int UpdateInwardDrugMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardDrugMedDeptInvoice_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    //cmd.AddParameter("@Deliverer", SqlDbType.NVarChar,ConvertNullObjectToDBNull(InvoiceDrug.Deliverer));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, InvoiceDrug.SupplierID);
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));
                    cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.TotalVATDifferenceAmount));

                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override List<RefGenMedProductDetails> spGetInBatchNumberAllClinicDept_ByGenMedProductID(long GenMedProductID, long V_MedProductType, long StoreID, bool? IsHIPatient)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetInBatchNumberAllClinicDept_ByGenMedProductID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(GenMedProductID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override List<RefGenMedProductDetails> spGetInBatchNumberAllDrugDept_ByGenMedProductID(
            long GenMedProductID, long V_MedProductType, long StoreID, bool? IsHIPatient)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetInBatchNumberAllDrugDept_ByGenMedProductID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(GenMedProductID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override bool AddInwardDrugMedDept(DrugDeptPurchaseOrderDetail invoicedrug, long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugMedDept_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
                cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
                cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.DrugDeptPoDetailID));
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                 ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.NormalPrice : 0));
                cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIPatientPrice : 0));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIAllowedPrice : 0));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }

        }


        private long InwardDrugMedDept_Insert_HangKyGoi(DrugDeptPurchaseOrderDetail invoicedrug, long inviID)
        {
            long Res = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugMedDept_Insert_HangKyGoi", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
                cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
                cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.DrugDeptPoDetailID));
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.NormalPrice : 0));
                cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIPatientPrice : 0));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIAllowedPrice : 0));
                SqlParameter paramInID = new SqlParameter("@InID", SqlDbType.BigInt);
                paramInID.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramInID);

                cn.Open();
                ExecuteNonQuery(cmd);
                if (cmd.Parameters["@InID"].Value != null)
                    Res = Convert.ToInt64(cmd.Parameters["@InID"].Value);

                return Res;
            }

        }




        public override bool InwardDrugMedDeptInvoice_UpdateCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugMedDept_UpdateinCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }

        }

        public override bool UpdateStatusDrugDeptPurchaseOrder(long DrugDeptPoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_UpdateStatusByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptPoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DrugDeptPoID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }


        public override int InwardDrugMedDeptInvoice_SaveXML(InwardDrugMedDeptInvoice InvoiceDrug, out long id)
        {
            try
            {
                int results = 0;
                id = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardDrugMedDeptInvoice_SaveXML", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@InvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice.ToString("yyyy/MM/dd")));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));
                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(InvoiceDrug.ConvertDetailsListToXml()));
                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramID);

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        id = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        public override RefGenMedProductDetails GetRefGenMedProductDetails(long genMedProductID, long? genMedVersionID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spGetRefGenMedProductDetails", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(genMedProductID));
                    cmd.AddParameter("@GenMedVersionID", SqlDbType.BigInt, ConvertNullObjectToDBNull(genMedVersionID));

                    cn.Open();
                    RefGenMedProductDetails product = null;
                    IDataReader reader = ExecuteReader(cmd);
                    if (reader.Read())
                    {
                        product = GetRefGenMedProductDetailsFromReader(reader);
                    }
                    reader.Close();
                    cmd.Dispose();
                    return product;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
        #endregion

        #region 19. Request Form Drug And DMedRscr

        public override bool SaveOutwardDrugClinicDeptTemplate(OutwardDrugClinicDeptTemplate OutwardTemplate, out long id)
        {
            try
            {
                bool results = false;
                id = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spSaveOutwardDrugClinicDeptTemplate", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@OutwardDrugClinicDeptTemplateID", SqlDbType.BigInt, OutwardTemplate.OutwardDrugClinicDeptTemplateID);
                    cmd.AddParameter("@OutwardDrugClinicDeptTemplateName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(OutwardTemplate.OutwardDrugClinicDeptTemplateName));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, OutwardTemplate.CreatedStaff.StaffID);
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, OutwardTemplate.V_MedProductType);
                    cmd.AddParameter("@DeptID", SqlDbType.BigInt, OutwardTemplate.Department.DeptID);
                    cmd.AddParameter("@CreateDate", SqlDbType.DateTime, OutwardTemplate.CreateDate);
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(OutwardTemplate.ConvertDetailsListToXml()));

                    SqlParameter parID = new SqlParameter("@id", SqlDbType.BigInt);
                    parID.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(parID);

                    cmd.CommandTimeout = int.MaxValue;

                    cn.Open();

                    ExecuteNonQuery(cmd);

                    if (parID.Value != DBNull.Value)
                    {
                        id = Convert.ToInt64(parID.Value);
                        if (id > 0)
                        {
                            results = true;
                        }
                    }

                    cmd.Dispose();
                    return results;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override OutwardDrugClinicDeptTemplate GetOutwardDrugClinicDeptTemplate(long OutwardDrugClinicDeptTemplateID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetOutwardDrugClinicDeptTemplate", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@OutwardDrugClinicDeptTemplateID", SqlDbType.BigInt, OutwardDrugClinicDeptTemplateID);
                cn.Open();
                IDataReader reader = ExecuteReader(cmd);

                OutwardDrugClinicDeptTemplate OutwardTemplate = new OutwardDrugClinicDeptTemplate();

                if (reader != null && reader.Read())
                {
                    OutwardTemplate = OutwardDrugClinicDeptTemplateFromReader(reader);
                }
                

                if (reader.NextResult())
                {
                    OutwardTemplate.OutwardTemplateItems = GetOutwardDrugClinicDeptTemplateItemCollectionFromReader(reader).ToObservableCollection();
                }
                reader.Close();
                return OutwardTemplate;
            }
        }


        public override List<OutwardDrugClinicDeptTemplate> GetAllOutwardTemplate(long V_MedProductType, long DeptID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetAllOutwardTemplate", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@DeptID", SqlDbType.BigInt, DeptID);
                cn.Open();
                List<OutwardDrugClinicDeptTemplate> OutwardTemplateList = null;
                IDataReader reader = ExecuteReader(cmd);
                OutwardTemplateList = GetOutwardDrugClinicDeptTemplateCollectionFromReader(reader);
                reader.Close();
                return OutwardTemplateList;
            }
        }


        public override bool DeleteOutwardDrugClinicDeptTemplate(long OutwardTemplateID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDeleteOutwardDrugClinicDeptTemplate", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@OutwardDrugClinicDeptTemplateID", SqlDbType.BigInt, OutwardTemplateID);

                cmd.CommandTimeout = int.MaxValue;

                cn.Open();

                int count = ExecuteNonQuery(cmd);

                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool FullOperatorRequestDMedRscrInwardClinicDept(RequestDMedRscrInwardClinicDept Request,
                                                                         out long id)
        {
            //to do
            id = 0;
            return true;
        }

        public override bool FullOperatorRequestDrugInwardClinicDept(RequestDrugInwardClinicDept Request,
                                                                     long V_MedProductType, out long id)
        {
            bool results = false;
            id = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardClinicDept_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, Request.ReqDrugInClinicDeptID);
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, Request.SelectedStaff.StaffID);
                cmd.AddParameter("@DeptID", SqlDbType.BigInt, ConvertNullToZero(Request.DeptID));
                cmd.AddParameter("@ReqDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Request.ReqDate));
                cmd.AddParameter("@ReqNumCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(Request.ReqNumCode));
                cmd.AddParameter("@OutFromStoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Request.OutFromStoreID));
                cmd.AddParameter("@InDeptStoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Request.InDeptStoreID));
                cmd.AddParameter("@Comment", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Request.Comment));
                cmd.AddParameter("@ReqStatus", SqlDbType.BigInt, ConvertNullObjectToDBNull(Request.ReqStatus));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Request.RefGenDrugCatID_1));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Request.ConvertDetailsListToXml()));
                cmd.AddParameter("@id", SqlDbType.BigInt, ParameterDirection.Output);
                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    results = true;
                    id = (long)reader["ID"];
                }
                reader.Close();
                return results;
            }
        }

        public override bool FullOperatorRequestDrugInwardClinicDeptNew(RequestDrugInwardClinicDept Request,
                                                                  long V_MedProductType, out long id)
        {
            bool results = false;
            id = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardClinicDept_SaveNew", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, Request.ReqDrugInClinicDeptID);
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, Request.SelectedStaff.StaffID);
                cmd.AddParameter("@DeptID", SqlDbType.BigInt, ConvertNullToZero(Request.DeptID));
                cmd.AddParameter("@ReqDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Request.ReqDate));
                cmd.AddParameter("@ReqNumCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(Request.ReqNumCode));
                cmd.AddParameter("@OutFromStoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Request.OutFromStoreID));
                cmd.AddParameter("@InDeptStoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Request.InDeptStoreID));
                cmd.AddParameter("@Comment", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Request.Comment));
                cmd.AddParameter("@ReqStatus", SqlDbType.BigInt, ConvertNullObjectToDBNull(Request.ReqStatus));

                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Request.RefGenDrugCatID_1));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Request.FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(Request.ToDate));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Request.ConvertOutwardDetailsListToXml()));
                cmd.AddParameter("@id", SqlDbType.BigInt, ParameterDirection.Output);

                cmd.CommandTimeout = int.MaxValue;

                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    results = true;
                    id = (long)reader["ID"];
                }
                reader.Close();
                return results;
            }
        }

        public override RequestDrugInwardClinicDept GetRequestDrugInwardClinicDeptByID(long ReqDrugInClinicDeptID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardClinicDept_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ReqDrugInClinicDeptID);
                cn.Open();
                RequestDrugInwardClinicDept invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetRequestDrugInwardClinicDeptFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override bool RequestDrugInwardClinicDept_Approved(RequestDrugInwardClinicDept Request)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardClinicDept_Approved", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, Request.ReqDrugInClinicDeptID);
                cmd.AddParameter("@ApprovedStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Request.ApprovedStaffID));
                cmd.AddParameter("@ApprovedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Request.ApprovedDate));
                cmd.AddParameter("@IsApproved", SqlDbType.Bit, ConvertNullObjectToDBNull(Request.IsApproved));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Request.ConvertOutwardDetailsListToXml()));
                cn.Open();
                return cmd.ExecuteNonQuery() > 0;
            }
        }

        public override List<ReqOutwardDrugClinicDeptPatient> GetRemainingQtyForInPtRequestDrug(long? StoreID, long V_MedProductType, long RefGenDrugCatID_1)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRpt_ClinicDept_InOutStocks", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ReqDrugInClinicDeptID);
                //cmd.AddParameter("@bGetExistingReqToCreateNew", SqlDbType.Bit, bGetExistingReqToCreateNew);
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1)); 
                cmd.Parameters.Add("@datebegin", SqlDbType.DateTime).Value = DateTime.Today.Date;
                cmd.Parameters.Add("@dateend", SqlDbType.DateTime).Value = DateTime.Today.Date;
                cn.Open();
                List<ReqOutwardDrugClinicDeptPatient> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetRemainingQtyForInPtRequestDrugFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }


        public override List<RequestDrugInwardClinicDeptDetail> GetRequestDrugInwardClinicDeptDetailByID(
            long ReqDrugInClinicDeptID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardClinicDeptDetail_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ReqDrugInClinicDeptID);
                cn.Open();
                List<RequestDrugInwardClinicDeptDetail> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetRequestDrugInwardClinicDeptDetailCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<RequestDrugInwardClinicDeptDetail> GetRequestDrugInwardClinicDeptDetailByRequestID(
            long ReqDrugInClinicDeptID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardClinicDeptDetail_ByRequestID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ReqDrugInClinicDeptID);
                cn.Open();
                List<RequestDrugInwardClinicDeptDetail> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetRequestDrugInwardClinicDeptDetailCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }


        public override List<ReqOutwardDrugClinicDeptPatient> GetReqOutwardDrugClinicDeptPatientByID(long ReqDrugInClinicDeptID, bool bGetExistingReqToCreateNew)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spReqOutwardDrugClinicDeptPatient_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ReqDrugInClinicDeptID);
                cmd.AddParameter("@bGetExistingReqToCreateNew", SqlDbType.Bit, bGetExistingReqToCreateNew);
                cn.Open();
                List<ReqOutwardDrugClinicDeptPatient> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetReqOutwardDrugClinicDeptPatientCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<ReqOutwardDrugClinicDeptPatient> ReqOutwardDrugClinicFromInstruction(long DeptID, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spReqOutwardDrugClinicFromInstruction", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DeptID", SqlDbType.BigInt, DeptID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cn.Open();
                List<ReqOutwardDrugClinicDeptPatient> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetReqOutwardDrugClinicDeptPatientCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<ReqOutwardDrugClinicDeptPatient> GetReqOutwardDrugClinicDeptPatientSumByID(
            long ReqDrugInClinicDeptID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spReqOutwardDrugClinicDeptPatient_SumGetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ReqDrugInClinicDeptID);
                cn.Open();
                List<ReqOutwardDrugClinicDeptPatient> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetReqOutwardDrugClinicDeptPatientCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<OutwardDrugMedDept> GetRequestDrugInwardClinicDeptDetailByRequestIDNew(
            long ReqDrugInClinicDeptID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardClinicDeptDetail_ByRequestID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ReqDrugInClinicDeptID);
                cn.Open();
                List<OutwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetOutwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<RequestDrugInwardClinicDept> SearchRequestDrugInwardClinicDept(
            RequestSearchCriteria Criteria, long V_MedProductType, int pageIndex, int pageSize, bool bCount,
            out int totalcount)
        {
            totalcount = 0;
            if (Criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardClinicDept_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramCode = new SqlParameter("@ReqNumCode", SqlDbType.VarChar, 128);
                paramCode.Value = ConvertNullObjectToDBNull(Criteria.Code);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(Criteria.FromDate);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(Criteria.ToDate);
                SqlParameter paramStaffID = new SqlParameter("@StaffID", SqlDbType.BigInt);
                paramStaffID.Value = ConvertNullObjectToDBNull(Criteria.StaffID);
                SqlParameter paramTypeID = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramTypeID.Value = ConvertNullObjectToDBNull(V_MedProductType);
                SqlParameter paramNhanHang = new SqlParameter("@DaNhanHang", SqlDbType.Bit);
                paramNhanHang.Value = ConvertNullObjectToDBNull(Criteria.DaNhanHang);
                SqlParameter paramIsApproved = new SqlParameter("@IsApproved", SqlDbType.Bit);
                paramIsApproved.Value = ConvertNullObjectToDBNull(Criteria.IsApproved);

                SqlParameter paramPtRegistrationID = new SqlParameter("@PtRegistrationID", SqlDbType.BigInt);
                paramPtRegistrationID.Value = ConvertNullObjectToDBNull(Criteria.PtRegistrationID);
                
                SqlParameter paramRequestStoreID = new SqlParameter("@RequestStoreID", SqlDbType.BigInt);
                paramRequestStoreID.Value = ConvertNullObjectToDBNull(Criteria.RequestStoreID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCount;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramCode);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramStaffID);
                cmd.Parameters.Add(paramTypeID);
                cmd.Parameters.Add(paramNhanHang);
                cmd.Parameters.Add(paramIsApproved);
                cmd.AddParameter("@FindByApprovedDate", SqlDbType.Bit, ConvertNullObjectToDBNull(Criteria.FindByApprovedDate));
                cmd.Parameters.Add(paramRequestStoreID);

                cmd.Parameters.Add(paramPtRegistrationID);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<RequestDrugInwardClinicDept> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetRequestDrugInwardClinicDeptCollectionFromReader(reader);
                reader.Close();

                if (bCount && paramTotal.Value != DBNull.Value)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return drugs;
            }
        }

        public override List<RequestDrugInwardClinicDept> GetRequestDrugInwardClinicDept_ByRegistrationID(long PtRegistrationID, long V_MedProductType, long StoreID,long? outiID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardClinicDept_ByRegistrationID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, PtRegistrationID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(outiID));
                cn.Open();
                List<RequestDrugInwardClinicDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetRequestDrugInwardClinicDeptCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }


        public override bool DeleteRequestDrugInwardClinicDept(long ReqDrugInClinicDeptID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardClinicDept_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ReqDrugInClinicDeptID);
                cn.Open();
                int results = ExecuteNonQuery(cmd);
                return results > 0;
            }
        }

        #endregion

        #region 20. Outward Drug By Request

        public string ConvertDetailsListRequestToXml(List<RequestDrugInwardClinicDept> items)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<RequestDrugInwardClinicDepts>");
            if (items != null)
            {
                foreach (RequestDrugInwardClinicDept details in items)
                {
                    sb.Append("<RequestDrugInwardClinicDept>");
                    sb.AppendFormat("<ReqDrugInClinicDeptID>{0}</ReqDrugInClinicDeptID>",
                        details.ReqDrugInClinicDeptID);
                    sb.Append("</RequestDrugInwardClinicDept>");
                }
            }
            sb.Append("</RequestDrugInwardClinicDepts>");
            return sb.ToString();
        }

        public override List<OutwardDrugClinicDept> spGetInBatchNumberAndPrice_ListForRequestClinicDept(bool? IsCost,
                                                                                          List<RequestDrugInwardClinicDept> ReqDrugInClinicDeptID,
                                                                                           long OutwardTemplateID,
                                                                                          long StoreID,
                                                                                          long V_MedProductType, long PtRegistrationID, bool? IsHIPatient,
                                                                                            DateTime OutDate)
        {

            //StringBuilder sb = new StringBuilder();
            //sb.Append("<RequestDrugInwardClinicDepts>");
            //if (ReqDrugInClinicDeptID != null)
            //{
            //    foreach (RequestDrugInwardClinicDept details in ReqDrugInClinicDeptID)
            //    {
            //        sb.Append("<RequestDrugInwardClinicDept>");
            //        sb.AppendFormat("<ReqDrugInClinicDeptID>{0}</ReqDrugInClinicDeptID>", details.ReqDrugInClinicDeptID);
            //        sb.Append("</RequestDrugInwardClinicDept>");
            //    }
            //}
            //sb.Append("</RequestDrugInwardClinicDepts>");

            string strRequestDrugList = ConvertDetailsListRequestToXml(ReqDrugInClinicDeptID);

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForRequestClinicDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.BigInt, ConvertNullObjectToDBNull(IsCost));
                //cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.Xml, ConvertNullObjectToDBNull(sb.ToString()));
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.Xml, ConvertNullObjectToDBNull(strRequestDrugList));
                cmd.AddParameter("@OutwardDrugClinicDeptTemplateID", SqlDbType.BigInt, OutwardTemplateID);
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PtRegistrationID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(OutDate));
                cn.Open();
                List<OutwardDrugClinicDept> drugs = null;

                //DataTable dt = ExecuteDataTable(cmd);

                IDataReader reader = cmd.ExecuteReader();
                drugs = GetOutwardDrugClinicDeptCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }


        public override List<OutwardDrugMedDept> spGetInBatchNumberAndPrice_ListForRequest(bool? IsCost,
                                                                                           long ReqDrugInClinicDeptID,
                                                                                           long StoreID,
                                                                                           long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd;
                if (V_MedProductType == (long)AllLookupValues.MedProductType.VTYT_TIEUHAO)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForRequestVTYTTH", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.TIEM_NGUA)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForRequestVaccine", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.HOA_CHAT)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForRequestChemical", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.MAU)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForRequestBlood", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.THANHTRUNG)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForRequestThanhTrung", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.VAN_PHONG_PHAM)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForRequestVPP", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.VATTU_TIEUHAO)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForRequestVTTH", cn);
                }
                else
                {
                    cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForRequestDrugDept", cn);
                }
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.BigInt, ConvertNullObjectToDBNull(IsCost));
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ReqDrugInClinicDeptID);
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cn.Open();
                List<OutwardDrugMedDept> drugs = null;

                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override List<OutwardDrugMedDept> GetRequestDrugDeptList_ForDepositGoods(long ReqDrugInClinicDeptID,
                                                                                   long StoreID,
                                                                                   long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetRequestDrugDeptList_ForDepositGoods", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ReqDrugInClinicDeptID);
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cn.Open();
                List<OutwardDrugMedDept> DrugList = null;
                List<DrugDeptSupplier> SupplierList = null;

                IDataReader reader = ExecuteReader(cmd);

                DrugList = GetOutwardDrugMedDeptCollectionFromReader(reader);
                if (reader.NextResult())
                {
                    SupplierList = GetDrugDeptSupplierCollectionFromReader(reader);
                }

                if (DrugList != null && SupplierList != null)
                {
                    foreach (OutwardDrugMedDept drugItem in DrugList)
                    {
                        drugItem.ObjSupplierList = SupplierList.Where(x => x.GenMedProductID == drugItem.GenMedProductID).ToObservableCollection();
                    }
                }

                reader.Close();
                return DrugList;
            }
        }

        public override List<OutwardDrugClinicDept> GetOutwardDrugClinicDeptDetailByInvoice(long ID)
        {
            return GetOutwardDrugClinicDeptDetailByInvoice_V2(ID, null);
        }
        public override List<OutwardDrugClinicDept> GetOutwardDrugClinicDeptDetailByInvoice_V2(long ID, long? V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugClinicDept_ByOutID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, ID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<OutwardDrugClinicDept> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutwardDrugClinicDeptCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override List<OutwardDrugMedDept> GetOutwardDrugMedDeptDetailByInvoice(long ID, long V_MedProductType, bool FromClinicDept)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd;
                if(V_MedProductType == (long)AllLookupValues.MedProductType.VTYT_TIEUHAO)
                {
                    cmd = new SqlCommand("spOutwardVTYTTHMedDept_ByOutID", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.TIEM_NGUA)
                {
                    cmd = new SqlCommand("spOutwardVaccineMedDept_ByOutID", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.HOA_CHAT)
                {
                    cmd = new SqlCommand("spOutwardChemicalMedDept_ByOutID", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.MAU)
                {
                    cmd = new SqlCommand("spOutwardBloodMedDept_ByOutID", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.THANHTRUNG)
                {
                    cmd = new SqlCommand("spOutwardThanhTrungMedDept_ByOutID", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.VAN_PHONG_PHAM)
                {
                    cmd = new SqlCommand("spOutwardVPPMedDept_ByOutID", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.VATTU_TIEUHAO)
                {
                    cmd = new SqlCommand("spOutwardVTTHMedDept_ByOutID", cn);
                }
                else
                {
                    cmd = new SqlCommand("spOutwardDrugMedDept_ByOutID", cn);
                }
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, ID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@FromClinicDept", SqlDbType.Bit, FromClinicDept);
                cn.Open();
                List<OutwardDrugMedDept> drugs = null;

                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override List<OutwardDrugMedDept> GetOutwardDrugMedDeptDetailByInvoice_HangKyGoi(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugMedDept_OutTemp_ByOutID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, ID);
                cn.Open();

                List<OutwardDrugMedDept> DrugList = null;
                List<DrugDeptSupplier> SupplierList = null;

                IDataReader reader = ExecuteReader(cmd);

                DrugList = GetOutwardDrugMedDeptCollectionFromReader(reader);

                if (reader.NextResult())
                {
                    SupplierList = GetDrugDeptSupplierCollectionFromReader(reader);
                }

                if (DrugList != null && SupplierList != null)
                {
                    foreach (OutwardDrugMedDept drugItem in DrugList)
                    {
                        drugItem.ObjSupplierList = SupplierList.Where(x => x.GenMedProductID == drugItem.GenMedProductID).ToObservableCollection();
                    }
                }

                reader.Close();
                return DrugList;
            }
        }

        public override List<OutwardDrugMedDept> GetListDrugExpiryDate_DrugDept(long? StoreID, int Type,
                                                                                long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd;
                if (V_MedProductType == (long)AllLookupValues.MedProductType.VTYT_TIEUHAO)
                {
                    cmd = new SqlCommand("spLoadVTYTTHExpiryDate", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.TIEM_NGUA)
                {
                    cmd = new SqlCommand("spLoadVaccineExpiryDate", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.HOA_CHAT)
                {
                    cmd = new SqlCommand("spLoadChemicalExpiryDate", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.MAU)
                {
                    cmd = new SqlCommand("spLoadBloodExpiryDate", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.THANHTRUNG)
                {
                    cmd = new SqlCommand("spLoadThanhTrungExpiryDate", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.VAN_PHONG_PHAM)
                {
                    cmd = new SqlCommand("spLoadVPPExpiryDate", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.VATTU_TIEUHAO)
                {
                    cmd = new SqlCommand("spLoadVTTHExpiryDate", cn);
                }
                else
                {
                    cmd = new SqlCommand("spLoadDrugExpiryDate_DrugDept", cn);
                }
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@type", SqlDbType.Int, Type);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<OutwardDrugMedDept> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override List<OutwardDrugClinicDept> OutwardDrugClinicDeptInvoices_SearchTKPaging(
            SearchOutwardInfo SearchCriteria, long V_MedProductType, int pageIndex, int pageSize, bool bCount,
            out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugClinicDeptInvoices_SearchTKPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SearchCriteria.StoreID));
                cmd.AddParameter("@PatientName", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.CustomerName));
                cmd.AddParameter("@PatientCode", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.PatientCode));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(SearchCriteria.PtRegistrationID));
                cmd.AddParameter("@FromDateDK", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.fromdatedk));
                cmd.AddParameter("@ToDateDK", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.todatedk));
                cmd.AddParameter("@fromdate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.fromdate));
                cmd.AddParameter("@todate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.todate));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCount;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<OutwardDrugClinicDept> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutwardDrugClinicDeptCollectionFromReader(reader);
                reader.Close();
                if (bCount && paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return drugs;
            }
        }

        public override bool OutwardDrugMedDept_Delete(long id, long StaffID, long V_MedProductType)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd;
                    if (V_MedProductType == (long)AllLookupValues.MedProductType.VTYT_TIEUHAO)
                    {
                        cmd = new SqlCommand("spOutwardVTYTTHMedDeptInvoices_Delete", cn);
                    }
                    else if (V_MedProductType == (long)AllLookupValues.MedProductType.TIEM_NGUA)
                    {
                        cmd = new SqlCommand("spOutwardVaccineMedDeptInvoices_Delete", cn);
                    }
                    else if (V_MedProductType == (long)AllLookupValues.MedProductType.HOA_CHAT)
                    {
                        cmd = new SqlCommand("spOutwardChemicalMedDeptInvoices_Delete", cn);
                    }
                    else if (V_MedProductType == (long)AllLookupValues.MedProductType.MAU)
                    {
                        cmd = new SqlCommand("spOutwardBloodMedDeptInvoices_Delete", cn);
                    }
                    else if (V_MedProductType == (long)AllLookupValues.MedProductType.THANHTRUNG)
                    {
                        cmd = new SqlCommand("spOutwardThanhTrungMedDeptInvoices_Delete", cn);
                    }
                    else if (V_MedProductType == (long)AllLookupValues.MedProductType.VAN_PHONG_PHAM)
                    {
                        cmd = new SqlCommand("spOutwardVPPMedDeptInvoices_Delete", cn);
                    }
                    else if (V_MedProductType == (long)AllLookupValues.MedProductType.VATTU_TIEUHAO)
                    {
                        cmd = new SqlCommand("spOutwardVTTHMedDeptInvoices_Delete", cn);
                    }
                    else
                    {
                        cmd = new SqlCommand("spOutwardDrugMedDeptInvoices_Delete", cn);
                    }
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, id);
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, StaffID);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override OutwardDrugClinicDeptInvoice GetOutwardDrugClinicDeptInvoice(long ID)
        {
            return GetOutwardDrugClinicDeptInvoice_V2(ID, null);
        }
        public override OutwardDrugClinicDeptInvoice GetOutwardDrugClinicDeptInvoice_V2(long ID, long? V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugClinicDeptInvoices_Get", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@OutiID", SqlDbType.BigInt, ID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                OutwardDrugClinicDeptInvoice invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetOutwardDrugClinicDeptInvoiceFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override OutwardDrugMedDeptInvoice GetOutwardDrugMedDeptInvoice(long ID, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd;
                if (V_MedProductType == (long)AllLookupValues.MedProductType.VTYT_TIEUHAO)
                {
                    cmd = new SqlCommand("spOutwardVTYTTHMedDeptInvoices_Get", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.TIEM_NGUA)
                {
                    cmd = new SqlCommand("spOutwardVaccineMedDeptInvoices_Get", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.HOA_CHAT)
                {
                    cmd = new SqlCommand("spOutwardChemicalMedDeptInvoices_Get", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.MAU)
                {
                    cmd = new SqlCommand("spOutwardBloodMedDeptInvoices_Get", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.THANHTRUNG)
                {
                    cmd = new SqlCommand("spOutwardThanhTrungMedDeptInvoices_Get", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.VAN_PHONG_PHAM)
                {
                    cmd = new SqlCommand("spOutwardVPPMedDeptInvoices_Get", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.VATTU_TIEUHAO)
                {
                    cmd = new SqlCommand("spOutwardVTTHMedDeptInvoices_Get", cn);
                }
                else
                {
                    cmd = new SqlCommand("spOutwardDrugMedDeptInvoices_Get", cn);
                }
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@OutiID", SqlDbType.BigInt, ID);
                cn.Open();
                OutwardDrugMedDeptInvoice invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetOutwardDrugMedDeptInvoiceFromReader(reader);
                }
                reader.Close();
                if (invoicedrug != null && invoicedrug.ReturnID.GetValueOrDefault(-1) > 0) //La phieu tra hang
                {
                    //Lay thong tin phieu xuat tuong ung
                    cmd.Parameters[0].Value = invoicedrug.ReturnID.Value;
                    reader = ExecuteReader(cmd);
                    if (reader.Read())
                    {
                        var drugInvoice = GetOutwardDrugMedDeptInvoiceFromReader(reader);
                        invoicedrug.OutInvoice = drugInvoice;
                        if (drugInvoice != null)
                        {
                            invoicedrug.FullName = drugInvoice.FullName;
                            invoicedrug.Address = drugInvoice.Address;
                            invoicedrug.NumberPhone = drugInvoice.NumberPhone;
                        }
                    }

                    reader.Close();
                }
                return invoicedrug;
            }
        }

        public override List<OutwardDrugClinicDeptInvoice> OutwardDrugClinicDeptInvoice_SearchByType(MedDeptInvoiceSearchCriteria Criteria, int pageIndex, int pageSize, bool bCount, out int totalcount)
        {
            totalcount = 0;
            if (Criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugClinicDeptInvoices_SearchByType", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlParameter paramCodeInvoice = new SqlParameter("@OutInvID", SqlDbType.VarChar);
                paramCodeInvoice.Value = ConvertNullObjectToDBNull(Criteria.CodeInvoice);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(Criteria.FromDate);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(Criteria.ToDate);
                SqlParameter paramStoreID = new SqlParameter("@StoreID", SqlDbType.BigInt);
                paramStoreID.Value = ConvertNullObjectToDBNull(Criteria.StoreID);
                SqlParameter paramTypID = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramTypID.Value = ConvertNullObjectToDBNull(Criteria.TypID);
                SqlParameter paramMedProductType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramMedProductType.Value = ConvertNullObjectToDBNull(Criteria.V_MedProductType);

                SqlParameter paramRequestCode = new SqlParameter("@RequestCode", SqlDbType.VarChar);
                paramRequestCode.Value = ConvertNullObjectToDBNull(Criteria.CodeRequest);
                SqlParameter paramFullName = new SqlParameter("@FullName", SqlDbType.NVarChar);
                paramFullName.Value = ConvertNullObjectToDBNull(Criteria.CustomerName);
                SqlParameter paramPatientCode = new SqlParameter("@PatientCode", SqlDbType.VarChar);
                paramPatientCode.Value = ConvertNullObjectToDBNull(Criteria.PatientCode);
                SqlParameter paramHICardNo = new SqlParameter("@HICardNo", SqlDbType.VarChar);
                paramHICardNo.Value = ConvertNullObjectToDBNull(Criteria.HICardNo);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCount;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramCodeInvoice);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramStoreID);
                cmd.Parameters.Add(paramTypID);
                cmd.Parameters.Add(paramMedProductType);

                cmd.Parameters.Add(paramRequestCode);
                cmd.Parameters.Add(paramFullName);
                cmd.Parameters.Add(paramPatientCode);
                cmd.Parameters.Add(paramHICardNo);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<OutwardDrugClinicDeptInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetOutwardDrugClinicDeptInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCount && paramTotal.Value != DBNull.Value)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return drugs;
            }
        }

        public override List<OutwardDrugMedDeptInvoice> OutwardDrugMedDeptInvoice_SearchByType(
            MedDeptInvoiceSearchCriteria Criteria, int pageIndex, int pageSize, bool bCount, out int totalcount)
        {
            totalcount = 0;
            if (Criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd;
                if (Criteria.V_MedProductType == (long)AllLookupValues.MedProductType.VTYT_TIEUHAO)
                {
                    cmd = new SqlCommand("spOutwardVTYTTHMedDept_SearchByType", cn);
                }
                else if (Criteria.V_MedProductType == (long)AllLookupValues.MedProductType.TIEM_NGUA)
                {
                    cmd = new SqlCommand("spOutwardVaccineMedDept_SearchByType", cn);
                }
                else if (Criteria.V_MedProductType == (long)AllLookupValues.MedProductType.HOA_CHAT)
                {
                    cmd = new SqlCommand("spOutwardChemicalMedDept_SearchByType", cn);
                }
                else if (Criteria.V_MedProductType == (long)AllLookupValues.MedProductType.MAU)
                {
                    cmd = new SqlCommand("spOutwardBloodMedDept_SearchByType", cn);
                }
                else if (Criteria.V_MedProductType == (long)AllLookupValues.MedProductType.THANHTRUNG)
                {
                    cmd = new SqlCommand("spOutwardThanhTrungMedDept_SearchByType", cn);
                }
                else if (Criteria.V_MedProductType == (long)AllLookupValues.MedProductType.VAN_PHONG_PHAM)
                {
                    cmd = new SqlCommand("spOutwardVPPMedDept_SearchByType", cn);
                }
                else if (Criteria.V_MedProductType == (long)AllLookupValues.MedProductType.VATTU_TIEUHAO)
                {
                    cmd = new SqlCommand("spOutwardVTTHMedDept_SearchByType", cn);
                }
                else
                {
                    cmd = new SqlCommand("spOutwardDrugMedDeptInvoices_SearchByType", cn);
                }
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramCodeInvoice = new SqlParameter("@OutInvID", SqlDbType.VarChar);
                paramCodeInvoice.Value = ConvertNullObjectToDBNull(Criteria.CodeInvoice);
                SqlParameter paramCodeRequest = new SqlParameter("@ReqNumCode", SqlDbType.VarChar);
                paramCodeRequest.Value = ConvertNullObjectToDBNull(Criteria.CodeRequest);
                SqlParameter paramCustomerName = new SqlParameter("@CustomerName", SqlDbType.NVarChar);
                paramCustomerName.Value = ConvertNullObjectToDBNull(Criteria.CustomerName);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(Criteria.FromDate);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(Criteria.ToDate);
                SqlParameter paramStoreID = new SqlParameter("@StoreID", SqlDbType.BigInt);
                paramStoreID.Value = ConvertNullObjectToDBNull(Criteria.StoreID);
                SqlParameter paramTypID = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramTypID.Value = ConvertNullObjectToDBNull(Criteria.TypID);
                SqlParameter paramMedProductType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramMedProductType.Value = ConvertNullObjectToDBNull(Criteria.V_MedProductType);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCount;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramCodeInvoice);
                cmd.Parameters.Add(paramCodeRequest);
                cmd.Parameters.Add(paramCustomerName);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramStoreID);
                cmd.Parameters.Add(paramTypID);
                cmd.Parameters.Add(paramMedProductType);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<OutwardDrugMedDeptInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetOutwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCount && paramTotal.Value != DBNull.Value)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return drugs;
            }
        }

        public override List<RefGenMedProductDetails> GetRefGenMedProductDetailsAuto_ByRequestID(string BrandName,
                                                                                                 long V_MedProductType,
                                                                                                 long? RequestID,
                                                                                                 int pageIndex,
                                                                                                 int pageSize,
                                                                                                 out int totalcount)
        {
            totalcount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_AutoByRequestID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, BrandName);
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(RequestID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return drugs;
            }
        }

        public override List<RefGenMedProductDetails> GetDrugForSellVisitorAutoComplete_ForRequestClinicDept(bool? IsCost, string BrandName, long StoreID, long V_MedProductTyp, long? RefGenDrugCatID_1, List<RequestDrugInwardClinicDept> RequestDrugList, bool? IsCode, long? PtRegistrationID, bool? IsHIPatient)
        {
            string strRequestDrugList = ConvertDetailsListRequestToXml(RequestDrugList);

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetDrugForAutoCompleteForRequestClinicDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCost));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductTyp));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                //cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(RequestID));
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.Xml, ConvertNullObjectToDBNull(strRequestDrugList));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PtRegistrationID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override List<RefGenMedProductDetails> GetDrugForSellVisitorAutoComplete_ForRequestDrugDept(
            bool? IsCost, string BrandName, long StoreID, long V_MedProductTyp, long? RefGenDrugCatID_1, long? RequestID, bool? IsCode)
        {
            return GetDrugForSellVisitorAutoComplete_ForRequestDrugDept_V2(IsCost, BrandName, StoreID, V_MedProductTyp, RefGenDrugCatID_1, RequestID, IsCode);
        }
        
        public override List<RefGenMedProductDetails> GetDrugForSellVisitorAutoComplete_ForRequestDrugDept_V2(
            bool? IsCost, string BrandName, long StoreID, long V_MedProductTyp, long? RefGenDrugCatID_1, long? RequestID, bool? IsCode, long? OutputToStoreID = null)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd;
                if (V_MedProductTyp == (long)AllLookupValues.MedProductType.VTYT_TIEUHAO)
                {
                    cmd = new SqlCommand("spGetVTYTTHForAutoCompleteForRequestVTYTTH", cn);
                }
                else if (V_MedProductTyp == (long)AllLookupValues.MedProductType.TIEM_NGUA)
                {
                    cmd = new SqlCommand("spGetVaccineForAutoCompleteForRequestVaccine", cn);
                }
                else if (V_MedProductTyp == (long)AllLookupValues.MedProductType.HOA_CHAT)
                {
                    cmd = new SqlCommand("spGetChemicalForAutoCompleteForRequestChemical", cn);
                }
                else if (V_MedProductTyp == (long)AllLookupValues.MedProductType.MAU)
                {
                    cmd = new SqlCommand("spGetBloodForAutoCompleteForRequestBlood", cn);
                }
                else if (V_MedProductTyp == (long)AllLookupValues.MedProductType.THANHTRUNG)
                {
                    cmd = new SqlCommand("spGetThanhTrungForAutoCompleteForRequestThanhTrung", cn);
                }
                else if (V_MedProductTyp == (long)AllLookupValues.MedProductType.VAN_PHONG_PHAM)
                {
                    cmd = new SqlCommand("spGetVPPForAutoCompleteForRequestVPP", cn);
                }
                else if (V_MedProductTyp == (long)AllLookupValues.MedProductType.VATTU_TIEUHAO)
                {
                    cmd = new SqlCommand("spGetVTTHForAutoCompleteForRequestVTTH", cn);
                }
                else
                {
                    cmd = new SqlCommand("spGetDrugForAutoCompleteForRequestDrugDept", cn);
                }
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCost));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductTyp));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(RequestID));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@OutputToStoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(OutputToStoreID));

                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override List<GetGenMedProductForSell> GetGenMedProductForSellAutoComplete_ForPrescriptionByID(byte HI,
                                                                                                          bool? IsHIPatient,
                                                                                                          long StoreID,
                                                                                                          long V_MedProductType,
                                                                                                          long? IssueID,
                                                                                                            long RefGenDrugCatID_1)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spGetDrugForAutoCompleteForPrescriptionByID_InPt", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@HI", SqlDbType.TinyInt, ConvertNullObjectToDBNull(HI));
                    cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                    cmd.AddParameter("@IssueID", SqlDbType.BigInt, ConvertNullObjectToDBNull(IssueID));
                    cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(IssueID));
                    cn.Open();
                    List<GetGenMedProductForSell> products = null;
                    IDataReader reader = ExecuteReader(cmd);
                    products = GetGenMedProductForSellCollectionFromReader(reader);
                    reader.Close();
                    reader = null;
                    return products;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override List<OutwardDrugMedDept> spGetInBatchNumberAndPrice_ByPresciption_InPt(long PrescriptID, long StoreID, Int16 IsObject, long V_MedProductType, long RefGenDrugCatID_1)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForPrescription_InPt", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IssueID", SqlDbType.BigInt, PrescriptID);
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@object", SqlDbType.SmallInt, IsObject);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, RefGenDrugCatID_1);

                cn.Open();
                List<OutwardDrugMedDept> drugs = null;

                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override bool SaveOutwardInvoice(OutwardDrugMedDeptInvoice Invoice, out long outiID)
        {
            try
            {
                outiID = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spSaveOutwardInvoice", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StoreID));
                    cmd.AddParameter("@IssueID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.IssueID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StaffID));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.TypID));
                    cmd.AddParameter("@OutInvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(Invoice.OutInvID));
                    cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_OutDrugInvStatus));
                    cmd.AddParameter("@V_OutputTo", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_OutputTo));
                    cmd.AddParameter("@OutputToID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.OutputToID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_MedProductType));
                    cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.RefGenDrugCatID_1));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Notes));
                    cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.PtRegistrationID));
                    cmd.AddParameter("@IsHICount", SqlDbType.Bit, ConvertNullObjectToDBNull(Invoice.IsHICount));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Invoice.ConvertDetailsListToXml()));
                    SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                    pareID.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(pareID);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    if (count != 0)
                    {
                        if (pareID.Value != DBNull.Value)
                        {
                            outiID = (long)pareID.Value;
                        }
                    }
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        public override bool UpdateOutwardInvoice(OutwardDrugMedDeptInvoice Invoice, out long outiID_New)
        {
            try
            {
                outiID_New = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spUpdateOutwardInvoice", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.outiID));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StoreID));
                    cmd.AddParameter("@IssueID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.IssueID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StaffID));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.TypID));
                    cmd.AddParameter("@OutInvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(Invoice.OutInvID));
                    cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_OutDrugInvStatus));
                    cmd.AddParameter("@V_OutputTo", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_OutputTo));
                    cmd.AddParameter("@OutputToID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.OutputToID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_MedProductType));
                    cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.RefGenDrugCatID_1));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Notes));
                    cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.PtRegistrationID));
                    cmd.AddParameter("@IsHICount", SqlDbType.Bit, ConvertNullObjectToDBNull(Invoice.IsHICount));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Invoice.ConvertDetailsListToXml()));
                    SqlParameter pareID = new SqlParameter("@id_new", SqlDbType.BigInt);
                    pareID.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(pareID);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    if (count != 0)
                    {
                        if (pareID.Value != DBNull.Value)
                        {
                            outiID_New = (long)pareID.Value;
                        }
                    }
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override List<OutwardDrugMedDeptInvoice> GetOutWardDrugInvoiceSearchAllByStatus_InPt(
    SearchOutwardInfo SearchCriteria, int pageIndex, int pageSize, bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (SearchCriteria == null)
            {
                SearchCriteria = new SearchOutwardInfo();
            }
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoice_SearchAllByStatus_InPt", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@OutInvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(SearchCriteria.OutInvID));
                cmd.AddParameter("@CustomerName", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.CustomerName));
                cmd.AddParameter("@PatientCode", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.PatientCode));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.fromdate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.todate));
                cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(SearchCriteria.V_OutDrugInvStatus));
                cmd.AddParameter("@HealthInsuranceCard", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.HICardCode));
                cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SearchCriteria.TypID));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SearchCriteria.StoreID));
                cmd.AddParameter("@ID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SearchCriteria.ID));
                cmd.AddParameter("@IsNotSolve", SqlDbType.Bit, ConvertNullObjectToDBNull(SearchCriteria.IsNotSolve));

                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, ConvertNullObjectToDBNull(SearchCriteria.OrderBy));
                cmd.AddParameter("@CountTotal", SqlDbType.Int, bCountTotal);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<OutwardDrugMedDeptInvoice> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }


        public override List<OutwardDrugMedDept> GetOutwardDrugDetailsByOutwardInvoice_InPt(long OutiID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrug_ByIDInvoice_InPt", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, OutiID);
                cn.Open();
                List<OutwardDrugMedDept> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override OutwardDrugMedDeptInvoice GetOutWardDrugInvoiceByID_InPt(long outiID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoice_GetByID_InPt", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(outiID));
                cn.Open();
                OutwardDrugMedDeptInvoice invoicedrug = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    invoicedrug = GetOutwardDrugMedDeptInvoiceFromReader(reader);
                    if (reader.NextResult())
                    {
                        List<OutwardDrugMedDept> drugs = null;
                        drugs = GetOutwardDrugMedDeptCollectionFromReader(reader);
                        if (drugs != null)
                        {
                            invoicedrug.OutwardDrugMedDepts = new ObservableCollection<OutwardDrugMedDept>(drugs);
                        }
                    }
                }

                reader.Close();

                return invoicedrug;
            }
        }


        public override List<GetGenMedProductForSell> GetGenMedProductForSellAutoComplete_ForPrescription(byte HI,
                                                                                              bool? IsHIPatient,
                                                                                              string BrandName,
                                                                                              long StoreID,
                                                                                              long? IssueID,
                                                                                              bool? IsCode,
                                                                                              long V_MedProductType,
                                                                                                long RefGenDrugCatID_1)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spGetGenMedProductForAutoCompleteForPrescription", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@HI", SqlDbType.TinyInt, ConvertNullObjectToDBNull(HI));
                    cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                    cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                    cmd.AddParameter("@IssueID", SqlDbType.BigInt, ConvertNullObjectToDBNull(IssueID));
                    cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                    cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                    cn.Open();
                    List<GetGenMedProductForSell> drugs = null;
                    IDataReader reader = ExecuteReader(cmd);
                    drugs = GetGenMedProductForSellCollectionFromReader(reader);
                    reader.Close();
                    reader = null;
                    return drugs;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        public override bool DeleteOutwardInvoice(long outiID, long staffID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spDeleteOutwardInvoice", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(outiID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(staffID));

                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override List<GetGenMedProductForSell> GetInBatchNumberAllDrugDept_ByGenMedProductID_ForPrescription(long GenMedProductID, long V_MedProductType, long StoreID, bool? IsHIPatient)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd;
                if (V_MedProductType == (long)AllLookupValues.MedProductType.VTYT_TIEUHAO)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAllVTYTTH_ByGenMedProductID", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.TIEM_NGUA)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAllVaccine_ByGenMedProductID", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.HOA_CHAT)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAllChemical_ByGenMedProductID", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.MAU)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAllBlood_ByGenMedProductID", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.THANHTRUNG)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAllThanhTrung_ByGenMedProductID", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.VAN_PHONG_PHAM)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAllVPP_ByGenMedProductID", cn);
                }
                else if (V_MedProductType == (long)AllLookupValues.MedProductType.VATTU_TIEUHAO)
                {
                    cmd = new SqlCommand("spGetInBatchNumberAllVTTH_ByGenMedProductID", cn);
                }
                else
                {
                    cmd = new SqlCommand("spGetInBatchNumberAllDrugDept_ByGenMedProductID", cn);
                }
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(GenMedProductID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cn.Open();
                List<GetGenMedProductForSell> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetGenMedProductForSellCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }


        public override bool CreateBillForOutwardFromPrescription(OutwardDrugMedDeptInvoice Invoice, long StaffID, out long InPatientBillingInvID)
        {
            try
            {
                InPatientBillingInvID = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spCreateBillForOutwardFromPrescription", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.outiID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                    cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.PtRegistrationID));
                    SqlParameter pareID = new SqlParameter("@InPatientBillingInvID", SqlDbType.BigInt);
                    pareID.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(pareID);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    if (count != 0)
                    {
                        if (pareID.Value != DBNull.Value)
                        {
                            InPatientBillingInvID = (long)pareID.Value;
                        }
                    }

                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        public override bool DeleteBillForOutwardFromPrescription(long InPatientBillingInvID, long StaffID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spDeleteBillForOutwardFromPrescription", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InPatientBillingInvID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InPatientBillingInvID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    cmd.Dispose();

                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override List<RefGenMedProductDetails> GetDrugForSellVisitorAutoComplete_ForRequestDrugDept_HangKyGoi(
            bool? IsCost, string BrandName, long StoreID, long V_MedProductTyp, long? RefGenDrugCatID_1, long? RequestID,
            bool? IsCode, int PageSize, int PageIndex, out int Total)
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetListDrugToInputTemp", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCost));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductTyp));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(RequestID));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@PageSize", SqlDbType.Int, ConvertNullObjectToDBNull(PageSize));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, ConvertNullObjectToDBNull(PageIndex));
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();

                if (paramTotal.Value != DBNull.Value)
                {
                    Total = (int)paramTotal.Value;
                }
                else
                {
                    Total = -1;
                }
                return drugs;
            }
        }

        public override bool OutwardDrugClinicDeptInvoice_SaveByType(OutwardDrugClinicDeptInvoice Invoice, out long ID, out string StrError)
        {
            try
            {
                ID = 0;
                StrError = "";
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spOutwardDrugClinicDeptInvoices_SaveByType", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.outiID));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StoreID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StaffID));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.TypID));
                    cmd.AddParameter("@CustomerName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.CustomerName));
                    cmd.AddParameter("@PhoneNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(Invoice.PhoneNumber));
                    cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Address));
                    cmd.AddParameter("@OutInvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(Invoice.OutInvID));
                    cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_OutDrugInvStatus));
                    cmd.AddParameter("@V_OutputTo", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_OutputTo));
                    cmd.AddParameter("@OutputToID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.OutputToID));
                    cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Invoice.OutDate));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.MedProductType));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Notes));
                    cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.PtRegistrationID));
                    cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.ReqDrugInClinicDeptID));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Invoice.ConvertDetailsListToXmlNy()));
                    cmd.AddParameter("@ReqDrugInClinicDeptIDList", SqlDbType.Xml, ConvertNullObjectToDBNull(Invoice.ConvertDetailsListRequestToXml()));
                    cmd.AddParameter("@V_RegistrationType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_RegistrationType));
                    SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                    pareID.Direction = ParameterDirection.Output;
                    SqlParameter pareStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1024);
                    pareStrError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(pareID);
                    cmd.Parameters.Add(pareStrError);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    if (count != 0)
                    {
                        if (pareID.Value != DBNull.Value)
                        {
                            ID = (long)pareID.Value;
                        }
                        if (pareStrError.Value != DBNull.Value)
                        {
                            StrError = pareStrError.Value.ToString();
                        }
                    }
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        public override bool OutwardDrugClinicDeptInvoice_UpdateByType(OutwardDrugClinicDeptInvoice Invoice, out long ID, out string StrError)
        {
            try
            {
                ID = 0;
                StrError = "";
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spOutwardDrugClinicDeptInvoices_UpdateByType_V2", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.outiID));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StoreID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StaffID));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.TypID));
                    cmd.AddParameter("@CustomerName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.CustomerName));
                    cmd.AddParameter("@PhoneNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(Invoice.PhoneNumber));
                    cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Address));
                    cmd.AddParameter("@OutInvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(Invoice.OutInvID));
                    cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_OutDrugInvStatus));
                    cmd.AddParameter("@V_OutputTo", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_OutputTo));
                    cmd.AddParameter("@OutputToID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.OutputToID));
                    cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Invoice.OutDate));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.MedProductType));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Notes));
                    cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.PtRegistrationID));
                    cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.ReqDrugInClinicDeptID));
                    cmd.AddParameter("@XML_Add", SqlDbType.Xml, ConvertNullObjectToDBNull(Invoice.ConvertDetailsListToXml_Add()));
                    cmd.AddParameter("@XML_Update", SqlDbType.Xml, ConvertNullObjectToDBNull(Invoice.ConvertDetailsListToXml_Update()));
                    cmd.AddParameter("@XML_Delete", SqlDbType.Xml, ConvertNullObjectToDBNull(Invoice.ConvertDetailsListToXml_Delete()));
                    cmd.AddParameter("@ReqDrugInClinicDeptIDList", SqlDbType.Xml, ConvertNullObjectToDBNull(Invoice.ConvertDetailsListRequestToXml()));
                    SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                    pareID.Direction = ParameterDirection.Output;
                    SqlParameter pareStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1024);
                    pareStrError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(pareID);
                    cmd.Parameters.Add(pareStrError);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    if (count != 0)
                    {
                        if (pareID.Value != DBNull.Value)
                        {
                            ID = (long)pareID.Value;
                        }
                        if (pareStrError.Value != DBNull.Value)
                        {
                            StrError = pareStrError.Value.ToString();
                        }
                    }
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        public override bool OutwardDrugMedDeptInvoice_SaveByType(OutwardDrugMedDeptInvoice Invoice, out long ID,
                                                                  out string StrError)
        {
            try
            {
                ID = 0;
                StrError = "";
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd;
                    if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.VTYT_TIEUHAO)
                    {
                        cmd = new SqlCommand("spOutwardVTYTTHMedDeptInvoices_SaveByType", cn);
                    }
                    else if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.TIEM_NGUA)
                    {
                        cmd = new SqlCommand("spOutwardVaccineMedDeptInvoices_SaveByType", cn);
                    }
                    else if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.HOA_CHAT)
                    {
                        cmd = new SqlCommand("spOutwardChemicalMedDeptInvoices_SaveByType", cn);
                    }
                    else if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.MAU)
                    {
                        cmd = new SqlCommand("spOutwardBloodMedDeptInvoices_SaveByType", cn);
                    }
                    else if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.THANHTRUNG)
                    {
                        cmd = new SqlCommand("spOutwardThanhTrungMedDeptInvoices_SaveByType", cn);
                    }
                    else if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.VAN_PHONG_PHAM)
                    {
                        cmd = new SqlCommand("spOutwardVPPMedDeptInvoices_SaveByType", cn);
                    }
                    else if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.VATTU_TIEUHAO)
                    {
                        cmd = new SqlCommand("spOutwardVTTHMedDeptInvoices_SaveByType", cn);
                    }
                    else
                    {
                        cmd = new SqlCommand("spOutwardDrugMedDeptInvoices_SaveByType", cn);
                        cmd.AddParameter("@ReturnID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.ReturnID));
                        cmd.AddParameter("@ReturnInvInvoiceNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(Invoice.ReturnInvInvoiceNumber));
                        cmd.AddParameter("@ReturnSerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.ReturnSerialNumber));
                        cmd.AddParameter("@ReturnInvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.ReturnInvoiceForm));
                        cmd.AddParameter("@ReturnNote", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.ReturnNote));
                    }
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.outiID));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StoreID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StaffID));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.TypID));
                    cmd.AddParameter("@FullName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.FullName));
                    cmd.AddParameter("@NumberPhone", SqlDbType.VarChar, ConvertNullObjectToDBNull(Invoice.NumberPhone));
                    cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Address));
                    cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(Invoice.V_OutDrugInvStatus));
                    cmd.AddParameter("@V_OutputTo", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_OutputTo));
                    cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Invoice.OutDate));
                    cmd.AddParameter("@OutputToID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.OutputToID));
                    cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(Invoice.ReqDrugInClinicDeptID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(Invoice.V_MedProductType));
                    cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(Invoice.RefGenDrugCatID_1));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Notes));
                    cmd.AddParameter("@V_ByOutPriceMedDept", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_ByOutPriceMedDept));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Invoice.ConvertDetailsListToXml()));
                    cmd.AddParameter("@VAT", SqlDbType.Float, ConvertNullObjectToDBNull(Invoice.VAT));
                    SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                    pareID.Direction = ParameterDirection.Output;
                    SqlParameter pareStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1024);
                    pareStrError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(pareID);
                    cmd.Parameters.Add(pareStrError);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    if (count != 0)
                    {
                        if (pareID.Value != DBNull.Value)
                        {
                            ID = (long)pareID.Value;
                        }
                        if (pareStrError.Value != DBNull.Value)
                        {
                            StrError = pareStrError.Value.ToString();
                        }
                    }
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        public override bool OutwardDrugMedDeptInvoice_Update(OutwardDrugMedDeptInvoice Invoice,List<OutwardDrugMedDept> NewOutwardDrugMedDepts,
                                                            List<OutwardDrugMedDept> UpdateOutwardDrugMedDepts, List<OutwardDrugMedDept> DeleteOutwardDrugMedDepts, out long ID,
                                                          out string StrError)
        {
            try
            {
                ID = 0;
                StrError = "";
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd;
                    if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.VTYT_TIEUHAO)
                    {
                        cmd = new SqlCommand("spOutwardVTYTTHMedDeptInvoices_Update", cn);
                    }
                    else if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.TIEM_NGUA)
                    {
                        cmd = new SqlCommand("spOutwardVaccineMedDeptInvoices_Update", cn);
                    }
                    else if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.HOA_CHAT)
                    {
                        cmd = new SqlCommand("spOutwardChemicalMedDeptInvoices_Update", cn);
                    }
                    else if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.MAU)
                    {
                        cmd = new SqlCommand("spOutwardBloodMedDeptInvoices_Update", cn);
                    }
                    else if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.THANHTRUNG)
                    {
                        cmd = new SqlCommand("spOutwardThanhTrungMedDeptInvoices_Update", cn);
                    }
                    else if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.VAN_PHONG_PHAM)
                    {
                        cmd = new SqlCommand("spOutwardVPPMedDeptInvoices_Update", cn);
                    }
                    else if (Invoice.V_MedProductType == (long)AllLookupValues.MedProductType.VATTU_TIEUHAO)
                    {
                        cmd = new SqlCommand("spOutwardVTTHMedDeptInvoices_Update", cn);
                    }
                    else
                    {
                        cmd = new SqlCommand("spOutwardDrugMedDeptInvoices_Update", cn);
                    }
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.outiID));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StoreID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StaffID));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.TypID));
                    cmd.AddParameter("@FullName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.FullName));
                    cmd.AddParameter("@NumberPhone", SqlDbType.VarChar, ConvertNullObjectToDBNull(Invoice.NumberPhone));
                    cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Address));
                    cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(Invoice.V_OutDrugInvStatus));
                    cmd.AddParameter("@V_OutputTo", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_OutputTo));
                    cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Invoice.OutDate));
                    cmd.AddParameter("@OutputToID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.OutputToID));
                    cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(Invoice.ReqDrugInClinicDeptID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(Invoice.V_MedProductType));
                    cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(Invoice.RefGenDrugCatID_1));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Notes));
                    cmd.AddParameter("@V_ByOutPriceMedDept", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_ByOutPriceMedDept));
                    cmd.AddParameter("@NewOutwardDrugMedDeptsXML", SqlDbType.Xml, ConvertNullObjectToDBNull(ConvertDetailsListToXml(NewOutwardDrugMedDepts)));
                    cmd.AddParameter("@UpdateOutwardDrugMedDeptsXML", SqlDbType.Xml, ConvertNullObjectToDBNull(ConvertDetailsListToXml(UpdateOutwardDrugMedDepts)));
                    cmd.AddParameter("@DeleteOutwardDrugMedDeptsXML", SqlDbType.Xml, ConvertNullObjectToDBNull(ConvertDetailsListToXml(DeleteOutwardDrugMedDepts)));
                    cmd.AddParameter("@VAT", SqlDbType.Float, ConvertNullObjectToDBNull(Invoice.VAT));
                    SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                    pareID.Direction = ParameterDirection.Output;
                    SqlParameter pareStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1024);
                    pareStrError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(pareID);
                    cmd.Parameters.Add(pareStrError);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    if (count != 0)
                    {
                        if (pareID.Value != DBNull.Value)
                        {
                            ID = (long)pareID.Value;
                        }
                        if (pareStrError.Value != DBNull.Value)
                        {
                            StrError = pareStrError.Value.ToString();
                        }
                    }
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        public string ConvertDetailsListToXml(IEnumerable<OutwardDrugMedDept> items)
        {
            if (items != null)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<OutDrugDetails>");
                foreach (OutwardDrugMedDept details in items)
                {
                    if (details.RefGenericDrugDetail != null && details.GenMedProductID > 0)
                    {
                        int EntityState = (int)details.EntityState;
                        sb.Append("<RecInfo>");
                        sb.AppendFormat("<OutID>{0}</OutID>", details.OutID);
                        sb.AppendFormat("<outiID>{0}</outiID>", details.outiID);
                        sb.AppendFormat("<GenMedProductID>{0}</GenMedProductID>", details.RefGenericDrugDetail.GenMedProductID);
                        sb.AppendFormat("<SupplierID>{0}</SupplierID>", details.ObjSupplierID != null ? details.ObjSupplierID.SupplierID : 0);
                        sb.AppendFormat("<InExpiryDate>{0}</InExpiryDate>", details.InExpiryDate.GetValueOrDefault().ToString("yyyy-MM-dd HH:mm:ss.fff"));
                        sb.AppendFormat("<InID>{0}</InID>", details.InID);
                        sb.AppendFormat("<OutQuantity>{0}</OutQuantity>", details.OutQuantity);
                        sb.AppendFormat("<OutPrice>{0}</OutPrice>", details.OutPrice);
                        sb.AppendFormat("<OutNotes>{0}</OutNotes>", details.OutNotes);
                        sb.AppendFormat("<ReqDrugInDetailID>{0}</ReqDrugInDetailID>", details.ReqDrugInDetailID);
                        sb.AppendFormat("<EntityState>{0}</EntityState>", EntityState);
                        sb.AppendFormat("<RequestQty>{0}</RequestQty>", details.RequestQty);

                        sb.AppendFormat("<OutQuantityReturn>{0}</OutQuantityReturn>", details.OutQuantityReturn);
                        sb.AppendFormat("<OutHIRebate>{0}</OutHIRebate>", Math.Floor(Convert.ToDouble(details.TotalHIPayment > 0 ? details.TotalHIPayment : details.OutHIRebate.GetValueOrDefault(0))));
                        sb.AppendFormat("<OutPriceDifference>{0}</OutPriceDifference>", details.PriceDifference);
                        sb.AppendFormat("<HIAllowedPrice>{0}</HIAllowedPrice>", details.HIAllowedPrice);
                        sb.AppendFormat("<OutAmountCoPay>{0}</OutAmountCoPay>", Math.Ceiling(Convert.ToDouble(details.TotalCoPayment > 0 ? details.TotalCoPayment : details.OutAmountCoPay)));
                        sb.AppendFormat("<IsDeleted>{0}</IsDeleted>", details.IsDeleted);
                        if (details.InwardDrugMedDept != null)
                        {
                            sb.Append("<InwardDrugMedDept>");
                            sb.AppendFormat("<NormalPrice>{0}</NormalPrice>", details.InwardDrugMedDept.NormalPrice);
                            sb.AppendFormat("<HIPatientPrice>{0}</HIPatientPrice>", details.InwardDrugMedDept.HIPatientPrice);
                            sb.AppendFormat("<HIAllowedPrice>{0}</HIAllowedPrice>", details.InwardDrugMedDept.HIAllowedPrice);
                            sb.Append("</InwardDrugMedDept>");
                        }
                        sb.Append("</RecInfo>");
                    }
                }
                sb.Append("</OutDrugDetails>");
                return sb.ToString();
            }
            else
            {
                return null;
            }
        }

        public override bool RequireUnlockOutMedDeptInvoice(long outiID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spRequireUnlockOutMedDeptInvoice", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(outiID));
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        public override List<RefOutputType> RefOutputType_Get(bool? All)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefOutputType_Get", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@All", SqlDbType.BigInt, ConvertNullObjectToDBNull(All));
                cn.Open();
                List<RefOutputType> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetRefOutputTypeCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override StaffDeptPresence GetAllStaffDeptPresenceInfo(long DeptID, DateTime StaffCountDate)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetAllStaffDeptPresenceInfo", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DeptID));
                cmd.AddParameter("@StaffCountDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(StaffCountDate));
                cn.Open();
                StaffDeptPresence result = null;
                IDataReader reader = ExecuteReader(cmd);
                result = GetStaffDeptPresenceFromReader(reader);
                return result;
            }
        }

        public override StaffDeptPresence SaveAllStaffDeptPresenceInfo(StaffDeptPresence CurStaffDeptPresence, bool IsUpdateRequiredNumber)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSaveAllStaffDeptPresenceInfo", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                if (IsUpdateRequiredNumber)
                {
                    cmd.AddParameter("@NumberOfDoctorRequired", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfDoctorRequired));
                    cmd.AddParameter("@NumberOfNurseRequired", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfNurseRequired));
                    cmd.AddParameter("@NumberOfAsstNurseRequired", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfAsstNurseRequired));
                    cmd.AddParameter("@NumberOfClinicalAsstRequired", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfClinicalAsstRequired));
                    cmd.AddParameter("@NumberOfTechnicianRequired", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfTechnicianRequired));
                }
                else
                {
                    cmd.AddParameter("@NumberOfDoctorPresent", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfDoctorPresent));
                    cmd.AddParameter("@NumberOfNursePresent", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfNursePresent));
                    cmd.AddParameter("@NumberOfAsstNursePresent", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfAsstNursePresent));
                    cmd.AddParameter("@NumberOfClinicalAsstPresent", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfClinicalAsstPresent));
                    cmd.AddParameter("@NumberOfTechnicianPresent", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfTechnicianPresent));

                    cmd.AddParameter("@NumberOfPatientDeceased", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfPatientDeceased));
                    cmd.AddParameter("@NumberOfPatientDischarged", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfPatientDischarged));
                    cmd.AddParameter("@NumberOfPatientPresent", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfPatientPresent));
                    cmd.AddParameter("@NumberOfCurrentPatient", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfCurrentPatient));
                    cmd.AddParameter("@NumberOfPatientTxfrDept", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfPatientTxfrDept));
                    cmd.AddParameter("@NumberOfPatientTxfrHospital", SqlDbType.Int, ConvertNullObjectToDBNull(CurStaffDeptPresence.NumberOfPatientTxfrHospital));
                }
                cmd.AddParameter("@StaffCountDate", SqlDbType.Date, ConvertNullObjectToDBNull(CurStaffDeptPresence.StaffCountDate));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(CurStaffDeptPresence.StaffID));
                cmd.AddParameter("@DeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(CurStaffDeptPresence.DeptID));
                cmd.AddParameter("@IsUpdateRequiredNumber", SqlDbType.Bit, ConvertNullObjectToDBNull(IsUpdateRequiredNumber));
                cn.Open();
                StaffDeptPresence result = null;
                IDataReader reader = ExecuteReader(cmd);
                result = GetStaffDeptPresenceFromReader(reader);
                return result;
            }
        }

        #endregion

        #region Outward From Prescription

        public override IList<Prescription> SearchPrescription_InPt(PrescriptionSearchCriteria Criteria, int pageIndex, int pageSize, bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (Criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPrescription_Search_InPt", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramPrescriptID = new SqlParameter("@PrescriptID", SqlDbType.BigInt);
                paramPrescriptID.Value = ConvertNullObjectToDBNull(Criteria.PrescriptID);
                SqlParameter paramPatientID = new SqlParameter("@PatientCode", SqlDbType.VarChar);
                paramPatientID.Value = ConvertNullObjectToDBNull(Criteria.PatientCode);

                SqlParameter paramFullName = new SqlParameter("@FullName", SqlDbType.NVarChar, 128);
                paramFullName.Value = ConvertNullObjectToDBNull(Criteria.FullName);

                SqlParameter paramFromDate = new SqlParameter("@FromDate", SqlDbType.DateTime);
                paramFromDate.Value = ConvertNullObjectToDBNull(Criteria.FromDate);

                SqlParameter paramToDate = new SqlParameter("@ToDate", SqlDbType.DateTime);
                paramToDate.Value = ConvertNullObjectToDBNull(Criteria.ToDate);

                SqlParameter paramHICardNo = new SqlParameter("@HealthInsuranceCard", SqlDbType.VarChar);
                paramHICardNo.Value = ConvertNullObjectToDBNull(Criteria.HICardCode);

                SqlParameter paramIsHI = new SqlParameter("@IsInsurance", SqlDbType.Bit);
                paramIsHI.Value = ConvertNullObjectToDBNull(Criteria.IsInsurance);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = "";

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPrescriptID);
                cmd.Parameters.Add(paramPatientID);
                cmd.Parameters.Add(paramFullName);
                cmd.Parameters.Add(paramFromDate);
                cmd.Parameters.Add(paramToDate);
                cmd.Parameters.Add(paramHICardNo);
                cmd.Parameters.Add(paramIsHI);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<Prescription> prescriptions = null;

                IDataReader reader = ExecuteReader(cmd);

                prescriptions = GetPtPrescriptionCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return prescriptions;
            }
        }

        #endregion

        #region 21. Drug Expiry

        public override List<OutwardDrug> GetListDrugExpiryDate(long? StoreID, int Type)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spLoadDrugExpiryDate", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@type", SqlDbType.Int, Type);
                cn.Open();
                List<OutwardDrug> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutWardDrugDetailCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override bool ListDrugExpiryDate_Save(OutwardDrugInvoice Invoice, out long ID, out string StrError)
        {
            ID = 0;
            StrError = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugList_InsertByType", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PatientID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.SelectedPrescription != null ? Invoice.SelectedPrescription.PatientID : 0));
                cmd.AddParameter("@PrescriptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.PrescriptID));
                cmd.AddParameter("@IssueID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.IssueID));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StoreID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StaffID));
                cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.TypID));
                cmd.AddParameter("@OutInvID", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(Invoice.OutInvID));
                cmd.AddParameter("@OutInvoiceNumber", SqlDbType.VarChar,
                              ConvertNullObjectToDBNull(Invoice.OutInvoiceNumber));
                cmd.AddParameter("@FullName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.FullName));
                cmd.AddParameter("@NumberPhone", SqlDbType.VarChar, ConvertNullObjectToDBNull(Invoice.NumberPhone));
                cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Address));
                cmd.AddParameter("@DOB", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.DOBString));
                cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Invoice.V_OutDrugInvStatus));
                cmd.AddParameter("@ToStoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.ToStoreID));
                cmd.AddParameter("@ToStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.ToStaffID));
                cmd.AddParameter("@HosID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.HosID));
                cmd.AddParameter("@ReqDrugInID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.ReqDrugInID));
                cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Notes));
                cmd.AddParameter("@V_ByOutPrice", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_ByOutPrice));
                cmd.AddParameter("@ColectDrugSeqNum", SqlDbType.Int,
                                 ConvertNullObjectToDBNull(Invoice.ColectDrugSeqNum));
                cmd.AddParameter("@ColectDrugSeqNumType", SqlDbType.TinyInt,
                                 ConvertNullObjectToDBNull(Invoice.ColectDrugSeqNumType));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Invoice.ConvertDetailsListToXml()));
                SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                pareID.Direction = ParameterDirection.Output;
                SqlParameter pareStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1024);
                pareStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(pareID);
                cmd.Parameters.Add(pareStrError);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    if (pareID.Value != DBNull.Value)
                    {
                        ID = (long)pareID.Value;
                    }
                    if (pareStrError.Value != DBNull.Value)
                    {
                        StrError = pareStrError.Value.ToString();
                    }
                }
                cmd.Dispose();
                return count > 0;
            }
        }

        public override List<OutwardDrugInvoice> OutWardDrugInvoice_SearchByType(SearchOutwardInfo SearchCriteria,
                                                                                 int pageIndex, int pageSize,
                                                                                 bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (SearchCriteria == null)
            {
                SearchCriteria = new SearchOutwardInfo();
            }
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoice_SearchByType", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlParameter paramOutInvID = new SqlParameter("@OutInvID", SqlDbType.VarChar);
                paramOutInvID.Value = ConvertNullObjectToDBNull(SearchCriteria.OutInvID);
                SqlParameter paramfromdate = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramfromdate.Value = ConvertNullObjectToDBNull(SearchCriteria.fromdate);
                SqlParameter paramtodate = new SqlParameter("@todate", SqlDbType.DateTime);
                paramtodate.Value = ConvertNullObjectToDBNull(SearchCriteria.todate);
                SqlParameter paramStoreID = new SqlParameter("@StoreID", SqlDbType.BigInt);
                paramStoreID.Value = ConvertNullObjectToDBNull(SearchCriteria.StoreID);
                SqlParameter paramTypID = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramTypID.Value = ConvertNullObjectToDBNull(SearchCriteria.TypID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(SearchCriteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramOutInvID);
                cmd.Parameters.Add(paramfromdate);
                cmd.Parameters.Add(paramtodate);
                cmd.Parameters.Add(paramStoreID);
                cmd.Parameters.Add(paramTypID);
                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<OutwardDrugInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetOutwardDrugInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }

        }

        #endregion

        #region 22. RefDisposableMedicalResources

        public override List<RefDisposableMedicalResource> RefDisposableMedicalResources_Paging(
            RefDisposableMedicalResourceSearchCriteria Criteria,
            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefDisposableMedicalResources_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@DMedRscrTypeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Criteria.DMedRscrTypeID));
                cmd.AddParameter("@DMedRscrName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.DMedRscrName));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<RefDisposableMedicalResource> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetRefDisposableMedicalResourceCollectionFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }

        public override void RefDisposableMedicalResourcesInsertUpdate(
            RefDisposableMedicalResource Obj, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "0";

                SqlCommand cmd = new SqlCommand("spRefDisposableMedicalResourcesInsertUpdate", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@DMedRscrID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.DMedRscrID));
                cmd.AddParameter("@DMedRscrTypeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.DMedRscrTypeID));
                cmd.AddParameter("@DMedRscrName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.DMedRscrName));
                cmd.AddParameter("@DMedRscrNameBrand", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.DMedRscrNameBrand));
                cmd.AddParameter("@DMedRscrFunctions", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.DMedRscrFunctions));
                cmd.AddParameter("@DMedRscrTechInfo", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.DMedRscrTechInfo));
                cmd.AddParameter("@DMedRscrMaterial", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.DMedRscrMaterial));
                cmd.AddParameter("@DMedRscrContainerUnit", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.DMedRscrContainerUnit));
                cmd.AddParameter("@DMedRscr_PiecesUnit", SqlDbType.Int,
                                 ConvertNullObjectToDBNull(Obj.DMedRscr_PiecesUnit));
                cmd.AddParameter("@Packaging", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Packaging));
                cmd.AddParameter("@ProcessPeriod", SqlDbType.Real, ConvertNullObjectToDBNull(Obj.ProcessPeriod));
                cmd.AddParameter("@DefectPercentage", SqlDbType.Float, ConvertNullObjectToDBNull(Obj.DefectPercentage));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }

        public override bool RefDisposableMedicalResources_MarkDelete(
            Int64 DMedRscrID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd1 = new SqlCommand("spRefDisposableMedicalResources_MarkDelete", cn);
                cmd1.CommandType = CommandType.StoredProcedure;

                cmd1.AddParameter("@DMedRscrID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DMedRscrID));

                cmd1.AddParameter("@ReturnVal", SqlDbType.Int, DBNull.Value, ParameterDirection.ReturnValue);

                cn.Open();

                ExecuteNonQuery(cmd1);
                int ReturnVal = (cmd1.Parameters["@ReturnVal"].Value != null
                                     ? Convert.ToInt16(cmd1.Parameters["@ReturnVal"].Value)
                                     : 0);
                if (ReturnVal > 0)
                    return true;
                return false;
            }
        }

        public override RefDisposableMedicalResource RefDisposableMedicalResources_ByDMedRscrID(Int64 DMedRscrID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd1 = new SqlCommand("spRefDisposableMedicalResources_ByDMedRscrID", cn);
                cmd1.CommandType = CommandType.StoredProcedure;

                cmd1.AddParameter("@DMedRscrID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DMedRscrID));

                cn.Open();

                RefDisposableMedicalResource obj = null;

                IDataReader reader = ExecuteReader(cmd1);

                if (reader != null)
                {
                    obj = GetRefDisposableMedicalResourceFromReader(reader);
                }

                reader.Close();
                return obj;
            }
        }

        #endregion

        #region 23. DisposableMedicalResourceTypes

        public override List<DisposableMedicalResourceType> DisposableMedicalResourceTypes_GetAll()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDisposableMedicalResourceTypes_GetAll", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                //cmd.AddParameter("@DeptID", SqlDbType.BigInt, DeptID);
                //cmd.AddParameter("@MedServiceName", SqlDbType.NVarChar, MedServiceName);

                cn.Open();
                List<DisposableMedicalResourceType> objList = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    objList = GetDisposableMedicalResourceTypesCollectionFromReader(reader);
                }
                reader.Close();
                return objList;
            }
        }

        #endregion

        #region 24. Drug Dept Member

        #region 24.0 RefGenMedProductDetails

        public override List<RefGenMedProductDetails> GetRefGenMedProductDetails_GetALL(long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_ALL", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cn.Open();
                List<RefGenMedProductDetails> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                return objList;
            }
        }


        public override List<RefGenMedProductDetails> GetRefGenMedProductDetails_Auto(bool? IsCode, string BrandName,
                                                                                      long V_MedProductType,
                                                                                      int PageSize, int PageIndex,
                                                                                      out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_Auto", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<RefGenMedProductDetails> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    objList = GetRefGenMedProductDetailsCollectionFromReader(reader);
                }
                reader.Close();
                if (paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return objList;
            }
        }

        public override List<RefGenMedProductDetails> RefGenMedProductDetails_SearchAutoPaging(bool? IsCode,
            string BrandName,
            long? SupplierID,
            long V_MedProductType,
            long? RefGenDrugCatID_1,
            int PageSize,
            int PageIndex,
            out int TotalCount)
        {
            return RefGenMedProductDetails_SearchAutoPaging_V2(IsCode, BrandName, SupplierID, V_MedProductType, RefGenDrugCatID_1, PageSize, PageIndex,
                                                                                               out TotalCount);
        }
        public override List<RefGenMedProductDetails> RefGenMedProductDetails_SearchAutoPaging_V2(bool? IsCode,
            string BrandName,
            long? SupplierID,
            long V_MedProductType,
            long? RefGenDrugCatID_1,
            int PageSize,
            int PageIndex,
            out int TotalCount,
            long? RefGenDrugCatID_2 = null)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_SearchAutoPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SupplierID));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@RefGenDrugCatID_2", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_2));
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<RefGenMedProductDetails> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return objList;
            }
        }

        public override List<RefGenMedProductSimple> RefGenMedProductDetails_SimpleAutoPaging(bool? IsCode,
                                                                                              string BrandName,
                                                                                              long V_MedProductType,
                                                                                              long? RefGenDrugCatID_1,
                                                                                              int PageSize,
                                                                                              int PageIndex,
                                                                                              out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_SimpleAutoPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<RefGenMedProductSimple> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetRefGenMedProductSimpleCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return objList;
            }
        }

        //▼===== 25072018 TTM
        public override List<RefGenMedProductSimple> RefGenMedProductDetails_SimpleAutoPaging_New(bool? IsCode,
                                                                                                      string BrandName,
                                                                                                      long V_MedProductType,
                                                                                                      long? RefGenDrugCatID_1,
                                                                                                      int PageSize,
                                                                                                      int PageIndex,
                                                                                                      out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_SimpleAutoPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<RefGenMedProductSimple> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetRefGenMedProductSimpleCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return objList;
            }
        }
        //▲===== 25072018 TTM


        #endregion

        #region 24.1 Estimation For Drug Dept

        public override List<DrugDeptEstimationForPoDetail> GetEstimationForMonth(long V_MedProductType, DrugDeptEstimationForPO CurrentDrugDeptEstimationForPO)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spEstimation_ForMed", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@EstimationDate", SqlDbType.DateTime, CurrentDrugDeptEstimationForPO.DateOfEstimation);
                cmd.AddParameter("@V_EstimateType", SqlDbType.BigInt, ConvertNullObjectToDBNull(CurrentDrugDeptEstimationForPO.V_EstimateType));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(CurrentDrugDeptEstimationForPO.RefGenDrugCatID_1));
                cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(CurrentDrugDeptEstimationForPO.IsForeign));
                cn.Open();
                List<DrugDeptEstimationForPoDetail> objList = null;

                IDataReader reader = ExecuteReader(cmd);
                //KMx: Nếu để reader.Read() trong câu if thì sẽ bị mất 1 row đầu tiên. VD: SQL trả về 20 row, nhưng khi gán vào list chỉ còn 19 item (20/06/2014 15:27).
                //if (reader != null && reader.Read())
                //if (reader != null)
                //{
                    objList = GetDrugDeptEstimationForPoDetailCollectionFromReader(reader);
                //}

                reader.Close();
                return objList;
            }
        }

        public override DrugDeptEstimationForPoDetail DrugDeptEstimationForPoDetail_GenMedProductID(
            long GenMedProductID, string Code, DateTime EstimateDate, long? V_EstimateType, long V_MedProductType,
            long? RefGenDrugCatID_1)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spEstimation_ForGenMedProductID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(GenMedProductID));
                cmd.AddParameter("@Code", SqlDbType.VarChar, ConvertNullObjectToDBNull(Code));
                cmd.AddParameter("@EstimationDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(EstimateDate));
                cmd.AddParameter("@V_EstimateType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_EstimateType));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                cn.Open();
                DrugDeptEstimationForPoDetail invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetDrugDeptEstimationForPoDetailFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override long DrugDeptEstimationForPO_FullOperator(long V_MedProductType,
                                                                  DrugDeptEstimationForPO Estimate)
        {
            long id = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptEstimationForPO_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptEstimatePoID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Estimate.DrugDeptEstimatePoID));
                cmd.AddParameter("@EstimationCode", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(Estimate.EstimationCode));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullToZero(Estimate.StaffID));
                cmd.AddParameter("@DateOfEstimation", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(Estimate.DateOfEstimation));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@EstRemark", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Estimate.EstRemark));
                cmd.AddParameter("@V_EstimateType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Estimate.V_EstimateType));
                cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(Estimate.IsForeign));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Estimate.RefGenDrugCatID_1));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Estimate.ConvertDetailsListToXml()));
                SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                paramID.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramID);

                cmd.CommandTimeout = int.MaxValue;

                cn.Open();
                int count = cmd.ExecuteNonQuery();
                if (paramID.Value != DBNull.Value)
                {
                    id = (long)paramID.Value;
                }
                cmd.Dispose();
                return id;
            }
        }

        public override DrugDeptEstimationForPO DrugDeptEstimationForPO_ByID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptEstimationForPO_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptEstimatePoID", SqlDbType.BigInt, ID);
                cn.Open();
                DrugDeptEstimationForPO invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetDrugDeptEstimationForPOFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override bool DrugDeptEstimationForPO_CheckExists(long V_EstimateType, DateTime DateOfEstimation, long V_MedProductType)
        {
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptEstimationForPO_CheckExists", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_EstimateType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_EstimateType));
                cmd.AddParameter("@DateOfEstimation", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(DateOfEstimation.ToString("yyyy/MM/dd")));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                SqlParameter paramID = new SqlParameter("@IsChecked", SqlDbType.Bit);
                paramID.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramID);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                if (paramID.Value != DBNull.Value)
                {
                    results = (bool)paramID.Value;
                }
                cmd.Dispose();
                return results;
            }
        }

        public override List<DrugDeptEstimationForPoDetail> DrugDeptEstimationForPoDetail_ByParentID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptEstimationForPoDetails_ByIDParent", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptEstimatePoID", SqlDbType.BigInt, ID);
                cn.Open();
                List<DrugDeptEstimationForPoDetail> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetDrugDeptEstimationForPoDetailCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<DrugDeptEstimationForPO> DrugDeptEstimationForPO_Search(RequestSearchCriteria Criteria,
                                                                                     long V_MedProductType,
                                                                                     int pageIndex, int pageSize,
                                                                                     bool bCount, out int totalcount)
        {
            totalcount = 0;
            if (Criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptEstimationForPO_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramCode = new SqlParameter("@EstimationCode", SqlDbType.VarChar, 128);
                paramCode.Value = ConvertNullObjectToDBNull(Criteria.Code);
                SqlParameter paramStaffID = new SqlParameter("@StaffID", SqlDbType.BigInt);
                paramStaffID.Value = ConvertNullObjectToDBNull(Criteria.StaffID);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(Criteria.FromDate);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(Criteria.ToDate);
                SqlParameter paramTypeID = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramTypeID.Value = ConvertNullObjectToDBNull(V_MedProductType);
                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCount;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramCode);
                cmd.Parameters.Add(paramStaffID);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramTypeID);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<DrugDeptEstimationForPO> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetDrugDeptEstimationForPOCollectionFromReader(reader);
                reader.Close();

                if (bCount && paramTotal.Value != null)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return drugs;
            }
        }

        public override List<DrugDeptEstimationForPO> DrugDeptEstimationForPO_Load(long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptEstimationForPO_Load", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cn.Open();
                List<DrugDeptEstimationForPO> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetDrugDeptEstimationForPOCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<DrugDeptEstimationForPoDetail> DrugDeptEstimationForPoDetail_AllDrugAuto(
            long V_MedProductType, DateTime EstimationDate, long? V_EstimateType, long? RefGenDrugCatID_1,
            string BrandName, int pageIndex, int pageSize, out int totalcount, bool? IsCode)
        {
            totalcount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spEstimation_ForAllMedProductID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, BrandName);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@EstimationDate", SqlDbType.DateTime, EstimationDate);
                cmd.AddParameter("@V_EstimateType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_EstimateType));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cn.Open();
                List<DrugDeptEstimationForPoDetail> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetDrugDeptEstimationForPoDetailCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return invoicedrug;
            }
        }

        public override List<List<string>> ExportToExcel_ListRefGenMedProductDetail(ReportParameters criteria)
        {
            if (criteria == null || criteria.SearchRefGenMedProduct == null)
            {
                return null;
            }

            DataSet dsExportToExcelAll = new DataSet();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = null;
                cmd = new SqlCommand("spRefGenMedProductDetails_ExportExcel", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@isinsurance", SqlDbType.TinyInt, ConvertNullObjectToDBNull(criteria.SearchRefGenMedProduct.IsInsurance));
                cmd.AddParameter("@isconsult", SqlDbType.TinyInt, ConvertNullObjectToDBNull(criteria.SearchRefGenMedProduct.IsConsult));
                cmd.AddParameter("@IsActive", SqlDbType.TinyInt, ConvertNullObjectToDBNull(criteria.SearchRefGenMedProduct.IsActive));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.SearchRefGenMedProduct.V_MedProductType));

                cmd.CommandTimeout = int.MaxValue;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsExportToExcelAll);
                List<List<string>> returnAllExcelData = new List<List<string>>();

                //Add the below 4 lines to add the column names to show on the Excel file
                List<string> colname = new List<string>();
                for (int i = 0; i <= dsExportToExcelAll.Tables[0].Columns.Count - 1; i++)
                {
                    colname.Add(dsExportToExcelAll.Tables[0].Columns[i].ToString().Trim());
                }

                returnAllExcelData.Add(colname);

                for (int i = 0; i <= dsExportToExcelAll.Tables[0].Rows.Count - 1; i++)
                {
                    List<string> rowData = new List<string>();
                    for (int j = 0; j <= dsExportToExcelAll.Tables[0].Columns.Count - 1; j++)
                    {
                        rowData.Add(Convert.ToString(dsExportToExcelAll.Tables[0].Rows[i][j]).Replace("<", "&lt;").Replace(">", "&gt;"));
                    }
                    returnAllExcelData.Add(rowData);
                }

                return returnAllExcelData;

            }
        }




        //CRUD
        // TxD: Get List of RefGenMedProductDetails (Drug Dept Medicine Items)
        public override List<RefGenMedProductDetails> RefGenMedProductDetails_Paging(
            RefGenMedProductDetailsSearchCriteria SearchCriteria,

            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total)
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(SearchCriteria.V_MedProductType));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(SearchCriteria.BrandName));
                cmd.AddParameter("@GenericName", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.GenericName));
                cmd.AddParameter("@Code", SqlDbType.VarChar, ConvertNullObjectToDBNull(SearchCriteria.Code));


                cmd.AddParameter("@isinsurance", SqlDbType.TinyInt, ConvertNullObjectToDBNull(SearchCriteria.IsInsurance));
                cmd.AddParameter("@isconsult", SqlDbType.TinyInt,
                                 ConvertNullObjectToDBNull(SearchCriteria.IsConsult));
                cmd.AddParameter("@IsActive", SqlDbType.TinyInt, ConvertNullObjectToDBNull(SearchCriteria.IsActive));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);
                cn.Open();
                List<RefGenMedProductDetails> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetRefGenMedProductDetailsCollectionFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }

        public override void RefGenMedProductDetails_Save(RefGenMedProductDetails Obj, out string Res, out long GenMedProductID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Res = "";
                GenMedProductID = 0;

                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                //Y cụ hóa chất
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.GenMedProductID));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.BrandName));
                cmd.AddParameter("@GenericName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.GenericName));
                cmd.AddParameter("@Code", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.Code));
                cmd.AddParameter("@HICode", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.HICode));
                cmd.AddParameter("@Functions", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Functions));
                cmd.AddParameter("@TechInfo", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.TechInfo));
                cmd.AddParameter("@Material", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Material));
                /*▼====: #008*/
                cmd.AddParameter("@Visa", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Visa));
                /*▲====: #008*/

                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.RefGenDrugCatID_1));
                cmd.AddParameter("@RefGenDrugCatID_2", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.RefGenDrugCatID_2));

                cmd.AddParameter("@DrugClassID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.DrugClassID));
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.PCOID));
                cmd.AddParameter("@CountryID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Obj.SelectedCountry.CountryID));
                cmd.AddParameter("@Packaging", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Packaging));
                cmd.AddParameter("@UnitID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.SelectedUnit.UnitID));
                cmd.AddParameter("@UnitUseID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.SelectedUnitUse.UnitID));
                cmd.AddParameter("@UnitPackaging", SqlDbType.Int, ConvertNullObjectToDBNull(Obj.UnitPackaging));
                cmd.AddParameter("@Description", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Description));
                cmd.AddParameter("@V_RouteOfAdministration", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.RouteOfAdministration != null ? Obj.RouteOfAdministration.LookupID : 0));
                cmd.AddParameter("@Administration", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Administration));
                cmd.AddParameter("@InsuranceCover", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.InsuranceCover));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.V_MedProductType));
                cmd.AddParameter("@NumberOfEstimatedMonths", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(Obj.NumberOfEstimatedMonths_F));
                cmd.AddParameter("@FactorSafety", SqlDbType.Int, ConvertNullObjectToDBNull(Obj.FactorSafety));
                cmd.AddParameter("@ProductCodeRefNum", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(Obj.ProductCodeRefNum));
                cmd.AddParameter("@HosID", SqlDbType.Int, ConvertNullObjectToDBNull(Obj.HosID));
                cmd.AddParameter("@WinningHospitals", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.WinningHospitals));
                cmd.AddParameter("@ShelfName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.ShelfName));
                cmd.AddParameter("@IsActive", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsActive));
                cmd.AddParameter("@IsNotShow", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsNotShow));
                cmd.AddParameter("@DispenseVolume", SqlDbType.Float, ConvertNullObjectToDBNull(Obj.DispenseVolume));

                cmd.AddParameter("@V_MedicalMaterial", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.V_MedicalMaterial));

                //KMx: Chỉ sử dụng HICode, không dùng HICode2 (31/08/2015 15:35).
                //cmd.AddParameter("@HICode2", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.HICode2));

                cmd.AddParameter("@HIPaymentPercent", SqlDbType.Float, ConvertNullObjectToDBNull(Obj.HIPaymentPercent));

                cmd.AddParameter("@BiddingHospital", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.BiddingHospital));

                cmd.AddParameter("@ReportBrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.ReportBrandName));

                cmd.AddParameter("@BidDecisionNumAndOrdinalNum", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.BidDecisionNumAndOrdinalNum));

                cmd.AddParameter("@BidDecisionNumAndEffectiveDate", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.BidDecisionNumAndEffectiveDate));

                cmd.AddParameter("@BidEffectiveDate", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.BidEffectiveDate));

                cmd.AddParameter("@BidExpirationDate", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.BidExpirationDate));

                cmd.AddParameter("@OtherDecisionNumAndEffectiveDate", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.OtherDecisionNumAndEffectiveDate));

                cmd.AddParameter("@IsHighTechService", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsHighTechService));

                cmd.AddParameter("@TechServiceCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.TechServiceCode));

                cmd.AddParameter("@IsStamp", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsStamp));

                cmd.AddParameter("@NumOfUse", SqlDbType.Float, ConvertNullObjectToDBNull(Obj.NumOfUse));

                cmd.AddParameter("@MaxHIPay", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.MaxHIPay));

                cmd.AddParameter("@Note", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Note));

                cmd.AddParameter("@HIProductCode5084", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.HIProductCode5084));

                cmd.AddParameter("@IsWatchOutQty", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsWatchOutQty));

                cmd.AddParameter("@LimitedOutQty", SqlDbType.Int, ConvertNullObjectToDBNull(Obj.LimitedOutQty));

                cmd.AddParameter("@RemainWarningLevel1", SqlDbType.Int, ConvertNullObjectToDBNull(Obj.RemainWarningLevel1));

                cmd.AddParameter("@RemainWarningLevel2", SqlDbType.Int, ConvertNullObjectToDBNull(Obj.RemainWarningLevel2));

                cmd.AddParameter("@IsDonatedGoods", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsDonatedGoods));

                cmd.AddParameter("@TLThanhToan", SqlDbType.Decimal, ConvertNullObjectToDBNull(Obj.TLThanhToan));
                cmd.AddParameter("@HIReportGroupCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.HIReportGroupCode));

                cmd.AddParameter("@AppliedMedItemFollow04Cer", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.AppliedMedItemFollow04Cer));
                /*▼====: #005*/
                cmd.AddParameter("@Volume", SqlDbType.Float, ConvertNullObjectToDBNull(Obj.Volume));
                /*▲====: #005*/
               
                //Thuốc
                if (Obj.RefGenMedDrugDetails == null)
                {
                    Obj.RefGenMedDrugDetails = new RefGenMedDrugDetails();
                }
                cmd.AddParameter("@RefGenDrugBHYT_CatID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.RefGenDrugBHYT_CatID));

                cmd.AddParameter("@Content", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Content));
                cmd.AddParameter("@Dosage", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Dosage));

                cmd.AddParameter("@Composition", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Composition));
                cmd.AddParameter("@ActiveIngredient", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.ActiveIngredient));
                cmd.AddParameter("@Indication", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Indication));
                cmd.AddParameter("@Contraindication", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Contraindication));
                cmd.AddParameter("@Precaution_Warn", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Precaution_Warn));
                cmd.AddParameter("@SideEffects", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.SideEffects));
                cmd.AddParameter("@Interaction", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Interaction));
                cmd.AddParameter("@AdvTimeBeforeExpire", SqlDbType.Int,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.AdvTimeBeforeExpire));
                cmd.AddParameter("@IsConsult", SqlDbType.Bit,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.IsConsult));
                cmd.AddParameter("@KeepRefrigerated", SqlDbType.Bit,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.KeepRefrigerated));
                cmd.AddParameter("@MaxDayPrescribed", SqlDbType.SmallInt,
                                ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.MaxDayPrescribed));

                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Obj.ConvertDetailsListToXml()));
                /*▼====: #006*/
                cmd.AddParameter("@XMLForService", SqlDbType.Xml, ConvertNullObjectToDBNull(Obj.ConvertDetailsListToXmlForService()));
                /*▲====: #006*/
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.StaffID));                

                cmd.AddParameter("@V_GroupTypeForReport20", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.V_GroupTypeForReport20));

                cmd.AddParameter("@TCKTAndTCCNGroup", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.TCKTAndTCCNGroup));

                cmd.AddParameter("@DosageForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.DosageForm));

                cmd.AddParameter("@DrugForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.DrugForm));

                cmd.AddParameter("@VidalGroup", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.VidalGroup));

                cmd.AddParameter("@BidCode", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.BidCode));
                cmd.AddParameter("@V_ProductScope", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.V_ProductScope));
                cmd.AddParameter("@HITTypeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.HITTypeID));

                cmd.AddParameter("@Res", SqlDbType.NVarChar, 100, ParameterDirection.Output);
                SqlParameter pareID = new SqlParameter("@idOutput", SqlDbType.BigInt);
                pareID.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(pareID);
                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Res"].Value != null)
                    Res = cmd.Parameters["@Res"].Value.ToString();
                if (pareID.Value != DBNull.Value)
                {
                    GenMedProductID = (long)pareID.Value;
                }
            }
        }

        //▼====== #010
        public override void RefGenMedProductDetails_Save_New(RefGenMedProductDetails Obj, out string Res, out long GenMedProductID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Res = "";
                GenMedProductID = 0;

                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_Save_New", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                //Y cụ hóa chất
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.GenMedProductID));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.BrandName));
                cmd.AddParameter("@GenericName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.GenericName));
                cmd.AddParameter("@Code", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.Code));
                cmd.AddParameter("@HICode", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.HICode));
                cmd.AddParameter("@Functions", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Functions));
                cmd.AddParameter("@TechInfo", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.TechInfo));
                cmd.AddParameter("@Material", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Material));
                /*▼====: #008*/
                cmd.AddParameter("@Visa", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Visa));
                /*▲====: #008*/

                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.RefGenDrugCatID_1));
                cmd.AddParameter("@RefGenDrugCatID_2", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.RefGenDrugCatID_2));

                cmd.AddParameter("@DrugClassID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.DrugClassID));
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.PCOID));
                cmd.AddParameter("@CountryID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Obj.SelectedCountry.CountryID));
                cmd.AddParameter("@Packaging", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Packaging));
                cmd.AddParameter("@UnitID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.SelectedUnit.UnitID));
                cmd.AddParameter("@UnitUseID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.SelectedUnitUse.UnitID));
                cmd.AddParameter("@UnitPackaging", SqlDbType.Int, ConvertNullObjectToDBNull(Obj.UnitPackaging));
                cmd.AddParameter("@Description", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Description));
                cmd.AddParameter("@V_RouteOfAdministration", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.RouteOfAdministration != null ? Obj.RouteOfAdministration.LookupID : 0));
                cmd.AddParameter("@Administration", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Administration));
                cmd.AddParameter("@InsuranceCover", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.InsuranceCover));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.V_MedProductType));
                //▼===== #010
                cmd.AddParameter("@V_CatDrugType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.V_CatDrugType));
                cmd.AddParameter("@DrugCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.DrugCode));
                //▲===== #010
                cmd.AddParameter("@NumberOfEstimatedMonths", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(Obj.NumberOfEstimatedMonths_F));
                cmd.AddParameter("@FactorSafety", SqlDbType.Int, ConvertNullObjectToDBNull(Obj.FactorSafety));
                cmd.AddParameter("@ProductCodeRefNum", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(Obj.ProductCodeRefNum));
                cmd.AddParameter("@HosID", SqlDbType.Int, ConvertNullObjectToDBNull(Obj.HosID));
                cmd.AddParameter("@WinningHospitals", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.WinningHospitals));
                cmd.AddParameter("@ShelfName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.ShelfName));
                cmd.AddParameter("@IsActive", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsActive));
                cmd.AddParameter("@IsNotShow", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsNotShow));

                cmd.AddParameter("@DispenseVolume", SqlDbType.Float, ConvertNullObjectToDBNull(Obj.DispenseVolume));

                cmd.AddParameter("@V_MedicalMaterial", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.V_MedicalMaterial));

                //KMx: Chỉ sử dụng HICode, không dùng HICode2 (31/08/2015 15:35).
                //cmd.AddParameter("@HICode2", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.HICode2));

                cmd.AddParameter("@HIPaymentPercent", SqlDbType.Float, ConvertNullObjectToDBNull(Obj.HIPaymentPercent));

                cmd.AddParameter("@BiddingHospital", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.BiddingHospital));

                cmd.AddParameter("@ReportBrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.ReportBrandName));

                cmd.AddParameter("@BidDecisionNumAndOrdinalNum", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.BidDecisionNumAndOrdinalNum));

                cmd.AddParameter("@BidDecisionNumAndEffectiveDate", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.BidDecisionNumAndEffectiveDate));

                cmd.AddParameter("@BidEffectiveDate", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.BidEffectiveDate));

                cmd.AddParameter("@BidExpirationDate", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.BidExpirationDate));

                cmd.AddParameter("@OtherDecisionNumAndEffectiveDate", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.OtherDecisionNumAndEffectiveDate));

                cmd.AddParameter("@IsHighTechService", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsHighTechService));

                cmd.AddParameter("@TechServiceCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.TechServiceCode));

                cmd.AddParameter("@IsStamp", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsStamp));

                cmd.AddParameter("@NumOfUse", SqlDbType.Float, ConvertNullObjectToDBNull(Obj.NumOfUse));

                cmd.AddParameter("@MaxHIPay", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.MaxHIPay));

                cmd.AddParameter("@Note", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Note));

                cmd.AddParameter("@HIProductCode5084", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.HIProductCode5084));

                cmd.AddParameter("@IsWatchOutQty", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsWatchOutQty));

                cmd.AddParameter("@LimitedOutQty", SqlDbType.Int, ConvertNullObjectToDBNull(Obj.LimitedOutQty));

                cmd.AddParameter("@RemainWarningLevel1", SqlDbType.Int, ConvertNullObjectToDBNull(Obj.RemainWarningLevel1));

                cmd.AddParameter("@RemainWarningLevel2", SqlDbType.Int, ConvertNullObjectToDBNull(Obj.RemainWarningLevel2));

                cmd.AddParameter("@IsDonatedGoods", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsDonatedGoods));

                cmd.AddParameter("@TLThanhToan", SqlDbType.Decimal, ConvertNullObjectToDBNull(Obj.TLThanhToan));
                cmd.AddParameter("@HIReportGroupCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.HIReportGroupCode));

                cmd.AddParameter("@AppliedMedItemFollow04Cer", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.AppliedMedItemFollow04Cer));
                /*▼====: #005*/
                cmd.AddParameter("@Volume", SqlDbType.Float, ConvertNullObjectToDBNull(Obj.Volume));
                /*▲====: #005*/

                //Thuốc
                if (Obj.RefGenMedDrugDetails == null)
                {
                    Obj.RefGenMedDrugDetails = new RefGenMedDrugDetails();
                }
                cmd.AddParameter("@RefGenDrugBHYT_CatID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.RefGenDrugBHYT_CatID));

                cmd.AddParameter("@Content", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Content));
                cmd.AddParameter("@Dosage", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Dosage));

                cmd.AddParameter("@Composition", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Composition));
                cmd.AddParameter("@ActiveIngredient", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.ActiveIngredient));
                cmd.AddParameter("@Indication", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Indication));
                cmd.AddParameter("@Contraindication", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Contraindication));
                cmd.AddParameter("@Precaution_Warn", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Precaution_Warn));
                cmd.AddParameter("@SideEffects", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.SideEffects));
                cmd.AddParameter("@Interaction", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.Interaction));
                cmd.AddParameter("@AdvTimeBeforeExpire", SqlDbType.Int,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.AdvTimeBeforeExpire));
                cmd.AddParameter("@IsConsult", SqlDbType.Bit,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.IsConsult));
                cmd.AddParameter("@KeepRefrigerated", SqlDbType.Bit,
                                 ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.KeepRefrigerated));
                cmd.AddParameter("@MaxDayPrescribed", SqlDbType.SmallInt,
                                ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.MaxDayPrescribed));

                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Obj.ConvertDetailsListToXml()));
                /*▼====: #006*/
                cmd.AddParameter("@XMLForService", SqlDbType.Xml, ConvertNullObjectToDBNull(Obj.ConvertDetailsListToXmlForService()));
                /*▲====: #006*/
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.StaffID));

                cmd.AddParameter("@V_GroupTypeForReport20", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.V_GroupTypeForReport20));

                cmd.AddParameter("@TCKTAndTCCNGroup", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.TCKTAndTCCNGroup));

                cmd.AddParameter("@DosageForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.DosageForm));

                cmd.AddParameter("@DrugForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.DrugForm));

                cmd.AddParameter("@VidalGroup", SqlDbType.VarChar, ConvertNullObjectToDBNull(Obj.RefGenMedDrugDetails.VidalGroup));

                cmd.AddParameter("@BidCode", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.BidCode));
                cmd.AddParameter("@V_ProductScope", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.V_ProductScope));
                cmd.AddParameter("@HITTypeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.HITTypeID));
                /*▼====: #012*/
                cmd.AddParameter("@GenericID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.SelectedGeneric.DrugClassID));
                /*▲====: #012*/
                cmd.AddParameter("@Res", SqlDbType.NVarChar, 100, ParameterDirection.Output);
                SqlParameter pareID = new SqlParameter("@idOutput", SqlDbType.BigInt);
                pareID.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(pareID);
                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Res"].Value != null)
                    Res = cmd.Parameters["@Res"].Value.ToString();
                if (pareID.Value != DBNull.Value)
                {
                    GenMedProductID = (long)pareID.Value;
                }
            }
        }
        //▲====== #010

        public override void RefGenMedProductDetails_MarkDelete(
            Int64 GenMedProductID, out string Res)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Res = "";

                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_MarkDelete", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(GenMedProductID));

                cmd.AddParameter("@Res", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Res"].Value != null)
                    Res = cmd.Parameters["@Res"].Value.ToString();
            }
        }

        //CRUD

        public override bool DrugDeptEstimationForPO_Delete(long DrugDeptEstimatePoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptEstimationForPO_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptEstimatePoID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(DrugDeptEstimatePoID));

                cn.Open();
                int count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        #endregion

        #region 24.1 DrugClasses

        public override List<DrugClass> DrugClasses_SearchPaging(DrugClassSearchCriteria criteria, int pageIndex,
                                                                 int pageSize, bool bCountTotal, out int totalCount)
        {
            totalCount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugClasses_SearchPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@FaName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(criteria.FaName));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, (long)criteria.V_MedProductType);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, bCountTotal);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, ConvertNullObjectToDBNull(criteria.OrderBy));
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<DrugClass> retVal = null;

                IDataReader reader = ExecuteReader(cmd);

                retVal = GetDrugClassCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    totalCount = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    totalCount = -1;

                return retVal;
            }
        }

        public override List<DrugClass> DrugDeptClasses_SearchPaging(DrugClassSearchCriteria criteria, int pageIndex,
                                                                int pageSize, bool bCountTotal, out int totalCount)
        {
            totalCount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptClasses_SearchPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@FaName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(criteria.FaName));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, (long)criteria.V_MedProductType);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, bCountTotal);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, ConvertNullObjectToDBNull(criteria.OrderBy));
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<DrugClass> retVal = null;

                IDataReader reader = ExecuteReader(cmd);

                retVal = GetDrugClassCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    totalCount = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    totalCount = -1;

                return retVal;
            }
        }
        #endregion

        #region 24.2 RefCountries

        public override List<RefCountry> RefCountries_SearchPaging(RefCountrySearchCriteria criteria, int pageIndex,
                                                                   int pageSize, bool bCountTotal, out int totalCount)
        {
            totalCount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefCountries_SearchPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@CountryName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(criteria.CountryName));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, bCountTotal);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, ConvertNullObjectToDBNull(criteria.OrderBy));
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<RefCountry> retVal = null;

                IDataReader reader = ExecuteReader(cmd);

                retVal = GetCountryCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    totalCount = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    totalCount = -1;

                return retVal;
            }
        }

        #endregion

        #region 24.3 RefUnits

        public override List<RefUnit> RefUnits_SearchPaging(RefUnitSearchCriteria criteria, int pageIndex, int pageSize,
                                                            bool bCountTotal, out int totalCount)
        {
            totalCount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefUnits_SearchPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@UnitName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(criteria.UnitName));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, bCountTotal);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, ConvertNullObjectToDBNull(criteria.OrderBy));
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<RefUnit> retVal = null;

                IDataReader reader = ExecuteReader(cmd);

                retVal = GetUnitCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    totalCount = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    totalCount = -1;

                return retVal;
            }
        }

        public override List<RefUnit> DrugDeptRefUnits_SearchPaging(RefUnitSearchCriteria criteria, int pageIndex, int pageSize,
                                                            bool bCountTotal, out int totalCount)
        {
            totalCount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptRefUnits_SearchPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@UnitName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(criteria.UnitName));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, bCountTotal);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, ConvertNullObjectToDBNull(criteria.OrderBy));
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<RefUnit> retVal = null;

                IDataReader reader = ExecuteReader(cmd);

                retVal = GetUnitCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    totalCount = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    totalCount = -1;

                return retVal;
            }
        }
        #endregion

        #region 24.6 DrugDept Purchase Order Member

        public override List<DrugDeptPurchaseOrder> DrugDeptPurchaseOrder_BySupplierID(long SupplierID,
                                                                                       long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_BySupplierID", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, SupplierID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cn.Open();
                List<DrugDeptPurchaseOrder> drugs = null;
                IDataReader reader = ExecuteReader(cmd);

                drugs = GetDrugDeptPurchaseOrderCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }

        }

        public override List<DrugDeptPurchaseOrderDetail> DrugDeptPurchaseOrderDetail_ByParentID(long ID, byte IsInput)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrderDetails_ByIDParent", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptPoID", SqlDbType.BigInt, ID);
                cmd.AddParameter("@IsInput", SqlDbType.TinyInt, IsInput);
                cn.Open();
                List<DrugDeptPurchaseOrderDetail> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetDrugDeptPurchaseOrderDetailCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<DrugDeptPurchaseOrder> DrugDeptPurchaseOrder_Search(RequestSearchCriteria Criteria,
                                                                                 long V_MedProductType, int pageIndex,
                                                                                 int pageSize, bool bCount,
                                                                                 out int totalcount)
        {
            totalcount = 0;
            if (Criteria == null)
            {
                return null;
            }
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PONumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(Criteria.Code));
                cmd.AddParameter("@EstimationCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(Criteria.Code1));
                cmd.AddParameter("@fromdate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.FromDate));
                cmd.AddParameter("@todate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.ToDate));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));

                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, bCount);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<DrugDeptPurchaseOrder> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetDrugDeptPurchaseOrderCollectionFromReader(reader);
                reader.Close();

                if (bCount && paramTotal.Value != null)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return drugs;
            }
        }

        public override List<DrugDeptPurchaseOrderDetail> DrugDeptPurchaseOrderDetail_GetFirst(
            long? DrugDeptEstimatePoID, long? SupplierID, long? PCOID, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_EstimateAndSupplier", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptEstimatePoID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(DrugDeptEstimatePoID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SupplierID));
                cmd.AddParameter("@IsPrimary", SqlDbType.Bit, ConvertNullObjectToDBNull(null));
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PCOID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<DrugDeptPurchaseOrderDetail> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetDrugDeptPurchaseOrderDetailCollectionFromReader(reader);
                reader.Close();
                return objList;
            }
        }

        public override bool DrugDeptPurchaseOrder_FullOperator(DrugDeptPurchaseOrder PurchaseOrder, out long id)
        {
            try
            {
                id = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_Save", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@DrugDeptPoID", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(PurchaseOrder.DrugDeptPoID));
                    cmd.AddParameter("@PONumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(PurchaseOrder.PONumber));
                    cmd.AddParameter("@DrugDeptEstimatePoID", SqlDbType.BigInt,
                                     ConvertNullToZero(PurchaseOrder.DrugDeptEstimatePoID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PurchaseOrder.SupplierID));
                    cmd.AddParameter("@OrderDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(PurchaseOrder.OrderDate));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PurchaseOrder.StaffID));
                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PurchaseOrder.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(PurchaseOrder.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(PurchaseOrder.IsForeign));
                    cmd.AddParameter("@VAT", SqlDbType.Float, ConvertNullObjectToDBNull(PurchaseOrder.VAT));
                    cmd.AddParameter("@PoNotes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(PurchaseOrder.PoNotes));
                    cmd.AddParameter("@V_PurchaseOrderStatus", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(PurchaseOrder.V_PurchaseOrderStatus));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(PurchaseOrder.V_MedProductType));
                    cmd.AddParameter("@V_PaymentMode", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(PurchaseOrder.V_PaymentMode));
                    cmd.AddParameter("@DeliveryDayNo", SqlDbType.Int, ConvertNullObjectToDBNull(PurchaseOrder.DeliveryDayNo));
                    cmd.AddParameter("@DeliveryMoneyDayNo", SqlDbType.Int,
                                     ConvertNullObjectToDBNull(PurchaseOrder.DeliveryMoneyDayNo));
                    cmd.AddParameter("@XML", SqlDbType.Xml,
                                     ConvertNullObjectToDBNull(PurchaseOrder.ConvertDetailsListToXml()));
                    SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                    pareID.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(pareID);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    if (count != 0)
                    {
                        if (pareID.Value != DBNull.Value)
                        {
                            id = (long)pareID.Value;
                        }
                    }
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override DrugDeptPurchaseOrder DrugDeptPurchaseOrder_ByID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptPoID", SqlDbType.BigInt, ID);
                cn.Open();
                DrugDeptPurchaseOrder invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    invoicedrug = GetDrugDeptPurchaseOrderFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<RefGenMedProductDetails> RefGenMedProductDetails_AutoPurchaseOrder(string BrandName,
                                                                                                long? DrugDeptEstimatePoID,
                                                                                                long V_MedProductType,
                                                                                                long? SupplierID,
                                                                                                int PageIndex,
                                                                                                int PageSize,
                                                                                                out int totalcount,
                                                                                                bool? IsCode)
        {
            totalcount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_AutoPurchaseOrder", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@DrugDeptEstimatePoID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(DrugDeptEstimatePoID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SupplierID));
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != DBNull.Value)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return drugs;
            }
        }

        public override List<RefGenMedProductDetails> RefGenMedProductDetails_WarningOrder(long V_MedProductType,
                                                                                           int PageIndex, int PageSize, long? SupplierID, bool IsAll,
                                                                                           out int totalcount)
        {
            totalcount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_WarningOrder", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SupplierID));
                cmd.AddParameter("@IsAll", SqlDbType.Bit, ConvertNullObjectToDBNull(IsAll));
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;

                return drugs;
            }
        }

        public override bool DrugDeptPurchaseOrders_Delete(long DrugDeptPoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptPoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DrugDeptPoID));
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        public override bool DrugDeptPurchaseOrderDetail_UpdateNoWaiting(long DrugDeptPoDetailID, bool? NoWaiting)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrderDetails_UpdateNoWaiting", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt, DrugDeptPoDetailID);
                cmd.AddParameter("@NoWaiting", SqlDbType.Bit, ConvertNullObjectToDBNull(NoWaiting));
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        public override bool DrugDeptPurchaseOrders_UpdateStatus(long ID, long V_PurchaseOrderStatus)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_UpdateStatus", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptPoID", SqlDbType.BigInt, ID);
                cmd.AddParameter("@V_PurchaseOrderStatus", SqlDbType.BigInt, V_PurchaseOrderStatus);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        #endregion

        public override bool MedDeptInvoice_UpdateInvoicePayed(OutwardDrugMedDeptInvoice Outward, out long outiID, out long PaymentID,
                                              out string StrError)
        {
            outiID = 0;
            PaymentID = 0;
            StrError = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugMedDeptInvoices_UpdateInvoicePayed", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.outiID));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.StoreID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.StaffID));
                cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.TypID));
                cmd.AddParameter("@FullName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.FullName));
                cmd.AddParameter("@NumberPhone", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.NumberPhone));
                cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.Address));
                cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.V_OutDrugInvStatus));
                cmd.AddParameter("@V_OutputTo", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.V_OutputTo));
                cmd.AddParameter("@OutputToID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.OutputToID));
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.ReqDrugInClinicDeptID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.V_MedProductType));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.RefGenDrugCatID_1));
                cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.Notes));
                cmd.AddParameter("@V_ByOutPriceMedDept", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.V_ByOutPriceMedDept));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Outward.ConvertDetailsListToXml()));

                cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Outward.OutDate));

                cmd.AddParameter("@V_RegistrationType", SqlDbType.BigInt, ConvertNullObjectToDBNull((long)AllLookupValues.RegistrationType.NOI_TRU));

                SqlParameter paramTotal = new SqlParameter("@id", SqlDbType.BigInt);
                paramTotal.Direction = ParameterDirection.Output;
                SqlParameter paremail = new SqlParameter("@PaymentID", SqlDbType.BigInt);
                paremail.Direction = ParameterDirection.Output;
                SqlParameter pareStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1000);
                pareStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cmd.Parameters.Add(paremail);
                cmd.Parameters.Add(pareStrError);
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                cmd = null;
                if (paramTotal.Value != DBNull.Value)
                {
                    outiID = (long)paramTotal.Value;
                }
                else
                {
                    outiID = -1;
                }
                if (paremail.Value != DBNull.Value)
                {
                    PaymentID = (long)paremail.Value;
                }
                else
                {
                    PaymentID = -1;
                }
                if (pareStrError.Value != DBNull.Value)
                {
                    StrError = pareStrError.Value.ToString();
                }
                else
                {
                    StrError = "";
                }
                return count > 0;
            }

        }

        public override bool MedDeptInvoice_UpdateInvoiceInfo(OutwardDrugMedDeptInvoice Outward)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spOutwardDrugMedDeptInvoice_UpdateInfo", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.outiID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.StaffID));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.TypID));
                    cmd.AddParameter("@FullName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.FullName));
                    cmd.AddParameter("@NumberPhone", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.NumberPhone));
                    cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.Address));
                    cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt, ConvertZeroObjectToDBNull(Outward.V_OutDrugInvStatus));
                    cmd.AddParameter("@V_OutputTo", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.V_OutputTo));
                    cmd.AddParameter("@OutputToID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.OutputToID));
                    cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.ReqDrugInClinicDeptID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.V_MedProductType));
                    cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.RefGenDrugCatID_1));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Outward.Notes));
                    cmd.AddParameter("@V_ByOutPriceMedDept", SqlDbType.BigInt, ConvertNullObjectToDBNull(Outward.V_ByOutPriceMedDept));
                    cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Outward.OutDate));
                    cmd.AddParameter("@VAT", SqlDbType.Float, ConvertNullObjectToDBNull(Outward.VAT));
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    cmd.Dispose();
                    cmd = null;
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

        }

        #region 24.8 MedDeptInStock
        public override List<InwardDrugMedDept> InStock_MedDept(string BrandName, long StoreID, bool IsDetail, long V_MedProductType, int PageIndex,
                                                    int PageSize, out int TotalCount, out decimal TotalMoney)
        {
            TotalCount = 0;
            TotalMoney = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInStock_MedDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@IsDetail", SqlDbType.Bit, IsDetail);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                SqlParameter paramTotal = new SqlParameter("@TotalCount", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                SqlParameter paramTotalMoney = new SqlParameter("@TotalMoney", SqlDbType.Money);
                paramTotalMoney.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cmd.Parameters.Add(paramTotalMoney);
                cn.Open();
                List<InwardDrugMedDept> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != DBNull.Value)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                if (paramTotalMoney.Value != DBNull.Value)
                {
                    TotalMoney = Convert.ToDecimal(paramTotalMoney.Value);
                }
                else
                    TotalMoney = 0;
                return objList;
            }
        }

        #endregion

        #region 24.9 Adjust Out Price
        public override List<InwardDrugMedDept> GetInwardDrugMedDeptForAdjustOutPrice(long StoreID, bool IsCode, string BrandName, long V_MedProductType)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spGetInwardDrugMedDeptForAdjustOutPrice", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                    cmd.AddParameter("@IsCode", SqlDbType.Bit, IsCode);
                    cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);

                    cn.Open();
                    List<InwardDrugMedDept> objList = null;
                    IDataReader reader = ExecuteReader(cmd);
                    objList = GetInwardDrugMedDeptCollectionFromReader(reader);
                    reader.Close();

                    return objList;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool MedDeptAdjustOutPrice(ObservableCollection<InwardDrugMedDept> InwardDrugMedDeptList)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spMedDeptAdjustOutPrice", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InwardXML", SqlDbType.Xml, ConvertNullObjectToDBNull(ConvertInwardDrugMedDeptToXml(InwardDrugMedDeptList)));

                    cmd.CommandTimeout = int.MaxValue;

                    cn.Open();

                    int count = ExecuteNonQuery(cmd);

                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        //KMx: Hàm này được copy và rút gọn từ hàm ConvertDetailInvoiceInputTempToXml (18/05/2015 10:20).
        private string ConvertInwardDrugMedDeptToXml(IEnumerable<InwardDrugMedDept> items)
        {
            if (items != null)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<InwardDrugMedDept>");
                foreach (InwardDrugMedDept details in items)
                {
                    sb.Append("<Info>");
                    sb.AppendFormat("<InID>{0}</InID>", details.InID);
                    sb.AppendFormat("<NormalPrice>{0}</NormalPrice>", details.NormalPrice);
                    sb.AppendFormat("<HIPatientPrice>{0}</HIPatientPrice>", details.HIPatientPrice);
                    sb.AppendFormat("<HIAllowedPrice>{0}</HIAllowedPrice>", details.HIAllowedPrice);
                    sb.Append("</Info>");
                }
                sb.Append("</InwardDrugMedDept>");
                return sb.ToString();
            }
            else
            {
                return null;
            }
        }


        #endregion
        #endregion

        #region 25. Estimation For Pharmacy

        public override List<PharmacyEstimationForPODetail> GetEstimationForMonthPharmacy(long V_MedProductType, DateTime EstimateDate, long? V_EstimateType, bool IsHIStorage)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spEstimation_ForPharmacy", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@EstimationDate", SqlDbType.DateTime, EstimateDate);
                cmd.AddParameter("@V_EstimateType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_EstimateType));
                cmd.AddParameter("@IsHIStorage", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIStorage));
                cn.Open();
                List<PharmacyEstimationForPODetail> objList = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null && reader.Read())
                {
                    objList = GetPharmacyEstimationForPODetailCollectionFromReader(reader);
                }

                reader.Close();
                return objList;
            }
        }

        public override long PharmacyEstimationForPO_FullOperator(long V_MedProductType,
                                                                  PharmacyEstimationForPO Estimate, bool IsHIStorage, out long id)
        {
            id = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyEstimationForPO_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyEstimatePoID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Estimate.PharmacyEstimatePoID));
                cmd.AddParameter("@EstimationCode", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(Estimate.EstimationCode));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullToZero(Estimate.StaffID));
                cmd.AddParameter("@DateOfEstimation", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(Estimate.DateOfEstimation));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@EstRemark", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Estimate.EstRemark));
                cmd.AddParameter("@V_EstimateType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Estimate.V_EstimateType));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Estimate.ConvertDetailsListToXml()));
                cmd.AddParameter("@IsHIStorage", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIStorage));
                SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                pareID.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(pareID);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    if (pareID.Value != DBNull.Value)
                    {
                        id = (long)pareID.Value;
                    }
                }
                cmd.Dispose();
                return id;
            }
        }

        public override bool PharmacyEstimationForPO_CheckExists(long V_EstimateType, DateTime DateOfEstimation, bool IsHIStorage)
        {
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyEstimationForPO_CheckExists", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_EstimateType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_EstimateType));
                cmd.AddParameter("@DateOfEstimation", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(DateOfEstimation.ToString("yyyy/MM/dd")));
                cmd.AddParameter("@IsHIStorage", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIStorage));
                SqlParameter paramID = new SqlParameter("@IsChecked", SqlDbType.Bit);
                paramID.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramID);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                if (paramID.Value != DBNull.Value)
                {
                    results = (bool)paramID.Value;
                }
                cmd.Dispose();
                return results;
            }
        }


        public override PharmacyEstimationForPO PharmacyEstimationForPO_ByID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyEstimationForPO_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyEstimatePoID", SqlDbType.BigInt, ID);
                cn.Open();
                PharmacyEstimationForPO invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetPharmacyEstimationForPOFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<PharmacyEstimationForPODetail> PharmacyEstimationForPODetail_ByParentID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyEstimationForPODetails_ByIDParent", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyEstimatePoID", SqlDbType.BigInt, ID);
                cn.Open();
                List<PharmacyEstimationForPODetail> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetPharmacyEstimationForPODetailCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<List<string>> ExportToExcel_EstimationForPODetail(ReportParameters criteria)
        {
            if (criteria == null || criteria.EstimatePoID <= 0)
            {
                return null;
            }

            DataSet dsExportToExcelAll = new DataSet();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = null;
                cmd = new SqlCommand("spPharmacyEstimationForPoDetails_ByIDParent_Excel", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyEstimatePoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.EstimatePoID));

                cmd.CommandTimeout = int.MaxValue;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dsExportToExcelAll);
                List<List<string>> returnAllExcelData = new List<List<string>>();

                //Add the below 4 lines to add the column names to show on the Excel file
                List<string> colname = new List<string>();
                for (int i = 0; i <= dsExportToExcelAll.Tables[0].Columns.Count - 1; i++)
                {
                    colname.Add(dsExportToExcelAll.Tables[0].Columns[i].ToString().Trim());
                }

                returnAllExcelData.Add(colname);

                for (int i = 0; i <= dsExportToExcelAll.Tables[0].Rows.Count - 1; i++)
                {
                    List<string> rowData = new List<string>();
                    for (int j = 0; j <= dsExportToExcelAll.Tables[0].Columns.Count - 1; j++)
                    {
                        rowData.Add(Convert.ToString(dsExportToExcelAll.Tables[0].Rows[i][j]).Replace("<", "&lt;").Replace(">", "&gt;"));
                    }
                    returnAllExcelData.Add(rowData);
                }

                return returnAllExcelData;

            }
        }


        public override List<PharmacyEstimationForPO> PharmacyEstimationForPO_Search(RequestSearchCriteria Criteria,
                                                                                     long V_MedProductType,
                                                                                     int pageIndex, int pageSize,
                                                                                     bool bCount, bool IsHIStorage, out int totalcount)
        {
            totalcount = 0;
            if (Criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyEstimationForPO_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramCode = new SqlParameter("@EstimationCode", SqlDbType.VarChar, 128);
                paramCode.Value = ConvertNullObjectToDBNull(Criteria.Code);
                SqlParameter paramStaffID = new SqlParameter("@StaffID", SqlDbType.BigInt);
                paramStaffID.Value = ConvertNullObjectToDBNull(Criteria.StaffID);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(Criteria.FromDate);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(Criteria.ToDate);
                SqlParameter paramTypeID = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramTypeID.Value = ConvertNullObjectToDBNull(V_MedProductType);
                SqlParameter paramIsNotOrder = new SqlParameter("@IsNotOrder", SqlDbType.BigInt);
                paramIsNotOrder.Value = ConvertNullObjectToDBNull(Criteria.IsNotOrder);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(Criteria.SupplierID);
                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCount;
                SqlParameter paramIsHIStorage = new SqlParameter("@IsHIStorage", SqlDbType.Bit);
                paramIsHIStorage.Value = IsHIStorage;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramCode);
                cmd.Parameters.Add(paramStaffID);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramTypeID);
                cmd.Parameters.Add(paramIsNotOrder);
                cmd.Parameters.Add(paramSupplierID);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramIsHIStorage);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<PharmacyEstimationForPO> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetPharmacyEstimationForPOCollectionFromReader(reader);
                reader.Close();

                if (bCount && paramTotal.Value != null)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return drugs;
            }
        }

        public override List<PharmacyEstimationForPO> PharmacyEstimationForPO_Load(long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyEstimationForPO_Load", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cn.Open();
                List<PharmacyEstimationForPO> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetPharmacyEstimationForPOCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override PharmacyEstimationForPODetail PharmacyEstimationForPODetail_ByDrugID(DateTime EstimationDate,long DrugID,string DrugCode,long? V_EstimateType,bool IsHIStorage)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spEstimation_ForDrugID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DrugID));
                cmd.AddParameter("@DrugCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(DrugCode));
                cmd.AddParameter("@EstimationDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(EstimationDate));
                cmd.AddParameter("@V_EstimateType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_EstimateType));
                cmd.AddParameter("@IsHIStorage", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIStorage));
                cn.Open();
                PharmacyEstimationForPODetail invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetPharmacyEstimationForPODetailFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<PharmacyEstimationForPODetail> PharmacyEstimationForPODetail_AllDrugAuto(
            long V_MedProductType, DateTime EstimationDate, long? V_EstimateType, string BrandName, int pageIndex,
            int pageSize, out int totalcount, bool? IsCode)
        {
            totalcount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spEstimation_ForAllDrug", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, BrandName);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@EstimationDate", SqlDbType.DateTime, EstimationDate);
                cmd.AddParameter("@V_EstimateType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_EstimateType));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cn.Open();
                List<PharmacyEstimationForPODetail> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetPharmacyEstimationForPODetailCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return invoicedrug;
            }
        }

        public override bool PharmacyEstimationForPO_Delete(long PharmacyEstimatePoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyEstimationForPO_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyEstimatePoID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PharmacyEstimatePoID));

                cn.Open();
                int count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        #endregion

        #region 26. RefGenMedProductSellingPrices "Giá this is template"

        public override List<RefGenMedProductSellingPrices> RefGenMedProductSellingPrices_ByGenMedProductID_Paging(
            RefGenMedProductSellingPricesSearchCriteria Criteria,

            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenMedProductSellingPrices_ByGenMedProductID_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Criteria.GenMedProductID));
                cmd.AddParameter("@PriceType", SqlDbType.Int, ConvertNullObjectToDBNull(Criteria.PriceType));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.ToDate));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<RefGenMedProductSellingPrices> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetRefGenMedProductSellingPricesCollectionFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }

        public override void RefGenMedProductSellingPrices_CheckCanEditCanDelete(
            Int64 GenMedSellPriceID,
            out bool CanEdit,
            out bool CanDelete,
            out string PriceType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                CanEdit = false;
                CanDelete = false;
                PriceType = "";

                SqlCommand cmd = new SqlCommand("spRefGenMedProductSellingPrices_CheckCanEditCanDelete", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@GenMedSellPriceID", SqlDbType.BigInt, GenMedSellPriceID);
                cmd.AddParameter("@CanEdit", SqlDbType.Bit, DBNull.Value, ParameterDirection.Output);
                cmd.AddParameter("@CanDelete", SqlDbType.Bit, DBNull.Value, ParameterDirection.Output);
                cmd.AddParameter("@PriceType", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@CanEdit"].Value != null)
                    CanEdit = Convert.ToBoolean(cmd.Parameters["@CanEdit"].Value);
                if (cmd.Parameters["@CanDelete"].Value != null)
                    CanDelete = Convert.ToBoolean(cmd.Parameters["@CanDelete"].Value);
                if (cmd.Parameters["@PriceType"].Value != null)
                    PriceType = cmd.Parameters["@PriceType"].Value.ToString();
            }
        }

        public override void RefGenMedProductSellingPrices_Save(RefGenMedProductSellingPrices Obj, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spRefGenMedProductSellingPrices_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@GenMedSellPriceID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Obj.GenMedSellPriceID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.GenMedProductID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.StaffID));
                cmd.AddParameter("@ApprovedStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.ApprovedStaffID));
                cmd.AddParameter("@VATRate", SqlDbType.Float, ConvertNullObjectToDBNull(Obj.VATRate));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.NormalPrice));
                cmd.AddParameter("@PriceForHIPatient", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.PriceForHIPatient));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.HIAllowedPrice));
                cmd.AddParameter("@EffectiveDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Obj.EffectiveDate));
                cmd.AddParameter("@Remark", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Remark));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }

        public override void RefGenMedProductSellingPrices_MarkDelete(Int64 GenMedSellPriceID, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spRefGenMedProductSellingPrices_MarkDelete", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@GenMedSellPriceID", SqlDbType.BigInt, ConvertNullObjectToDBNull(GenMedSellPriceID));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }

        //Đọc by ID
        public override RefGenMedProductSellingPrices RefGenMedProductSellingPrices_ByGenMedSellPriceID(
            Int64 GenMedSellPriceID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenMedProductSellingPrices_ByGenMedSellPriceID", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramDeptID = new SqlParameter("@GenMedSellPriceID", SqlDbType.BigInt);
                paramDeptID.Value = GenMedSellPriceID;

                cmd.Parameters.Add(paramDeptID);

                cn.Open();

                RefGenMedProductSellingPrices ObjRefGenMedProductSellingPrices = null;

                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    ObjRefGenMedProductSellingPrices = GetRefGenMedProductSellingPricesFromReader(reader);
                }

                reader.Close();
                return ObjRefGenMedProductSellingPrices;
            }
        }

        //Đọc by ID

        #endregion

        #region 27. Supplier Product Member

        public override List<Supplier> SearchSupplierAutoPaging(SupplierSearchCriteria Criteria, int PageSize,
                                                                int PageIndex, bool bcount, out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplier_SearchPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupplierName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.SupplierName));
                cmd.AddParameter("@V_SupplierType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Criteria.V_SupplierType));
                cmd.AddParameter("@PharmacyEstimatePoID", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Criteria.PharmacyEstimatePoID));
                cmd.AddParameter("@IsMain", SqlDbType.TinyInt, ConvertNullObjectToDBNull(Criteria.IsMain));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, bcount);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<Supplier> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetSupplierCollectionFromReader(reader);
                reader.Close();
                if (bcount && paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return objList;
            }
        }

        #region 27.0 Supplier Med Product

        public override int SupplierGenMedProduct_Insert(SupplierGenMedProduct Supplier)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenMedProducts_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Supplier.SupplierID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Supplier.GenMedProductID));
                cmd.AddParameter("@SupplierPriorityOrderNum", SqlDbType.TinyInt,
                                 ConvertNullObjectToDBNull(Supplier.SupplierPriorityOrderNum));
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cmd.AddParameter("@IsMain", SqlDbType.Bit, ConvertNullObjectToDBNull(Supplier.IsMain));
                cmd.AddParameter("@UnitPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Supplier.UnitPrice));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(Supplier.PackagePrice));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Supplier.StaffID));

                cn.Open();
                cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
            }
            return results;
        }

        public override int SupplierGenMedProduct_Update(SupplierGenMedProduct Supplier)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenMedProducts_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupGenMedID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Supplier.SupGenMedID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Supplier.SupplierID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Supplier.GenMedProductID));
                cmd.AddParameter("@SupplierPriorityOrderNum", SqlDbType.TinyInt,
                                 ConvertNullObjectToDBNull(Supplier.SupplierPriorityOrderNum));
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cmd.AddParameter("@IsMain", SqlDbType.Bit, ConvertNullObjectToDBNull(Supplier.IsMain));
                cmd.AddParameter("@UnitPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Supplier.UnitPrice));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(Supplier.PackagePrice));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Supplier.StaffID));
                cn.Open();
                cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
            }
            return results;
        }

        public override bool SupplierGenMedProduct_Delete(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenMedProducts_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupGenMedID", SqlDbType.BigInt, ConvertNullObjectToDBNull(ID));
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                cmd.Dispose();
                return count > 0;
            }
        }

        public override List<SupplierGenMedProduct> SupplierGenMedProduct_LoadDrugIDNotPaging(long GenMedProductID, out List<RefMedicalServiceItem> ServiceList)
        {
            /*▼====: #006*/
            ServiceList = null;
            /*▲====: #006*/
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenMedProducts_LoadDrugIDNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, GenMedProductID);
                cn.Open();
                List<SupplierGenMedProduct> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetSupplierGenMedProductCollectionFromReader(reader);
                /*▼====: #006*/
                if (reader.NextResult())
                {
                    ServiceList = GetServiceGenMedProductCollectionFromReader(reader);
                }
                /*▲====: #006*/
                reader.Close();
                return objList;
            }
        }

        public override List<DrugDeptSupplier> DrugDeptSupplier_LoadDrugIDNotPaging(long GenMedProductID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptSupplier_LoadDrugIDNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, GenMedProductID);
                //cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cn.Open();
                List<DrugDeptSupplier> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetDrugDeptSupplierCollectionFromReader(reader);
                reader.Close();
                return objList;
            }
        }
        public override List<SupplierGenMedProduct> SupplierGenMedProduct_LoadDrugID(long GenMedProductID, int PageSize,
                                                                                     int PageIndex, bool bcount,
                                                                                     out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenMedProducts_LoadDrugID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, GenMedProductID);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, bcount);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<SupplierGenMedProduct> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetSupplierGenMedProductCollectionFromReader(reader);
                reader.Close();
                if (bcount && paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return objList;
            }
        }

        public override List<SupplierGenMedProduct> SupplierGenMedProduct_LoadSupplierID(long SupplierID, int PageSize,
                                                                                         int PageIndex, bool bcount,
                                                                                         out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenMedProducts_LoadSupplierID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, SupplierID);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, bcount);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<SupplierGenMedProduct> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetSupplierGenMedProductCollectionFromReader(reader);
                reader.Close();
                if (bcount && paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return objList;
            }
        }

        #endregion

        #region 27.1 Supplier Drug

        public override int SupplierGenericDrug_Insert(SupplierGenericDrug Supplier)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugs_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Supplier.SupplierID));
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Supplier.DrugID));
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cmd.AddParameter("@IsMain", SqlDbType.Bit, ConvertNullObjectToDBNull(Supplier.IsMain));
                cn.Open();
                ExecuteReader(cmd);
                cmd.Dispose();
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
            }
            return results;
        }

        public override int SupplierGenericDrug_Update(SupplierGenericDrug Supplier)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugs_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupGenDrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Supplier.SupGenDrugID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Supplier.SupplierID));
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Supplier.DrugID));
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cmd.AddParameter("@IsMain", SqlDbType.Bit, ConvertNullObjectToDBNull(Supplier.IsMain));
                cn.Open();
                ExecuteReader(cmd);
                cmd.Dispose();
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
            }
            return results;
        }

        public override bool SupplierGenericDrug_Delete(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugs_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupGenDrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(ID));

                cn.Open();
                int count = cmd.ExecuteNonQuery();
                cmd.Dispose();
                return count > 0;
            }
        }

        public override List<SupplierGenericDrug> SupplierGenericDrug_LoadDrugIDNotPaging(long DrugID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugs_LoadDrugIDNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, DrugID);
                cn.Open();
                List<SupplierGenericDrug> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetSupplierGenericDrugCollectionFromReader(reader);
                reader.Close();
                return objList;
            }
        }

        //▼===== 25072018 TTM

        public override List<SupplierGenericDrug> SupplierGenericDrug_LoadDrugIDNotPaging_New(long DrugID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugs_LoadDrugIDNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, DrugID);
                cn.Open();
                List<SupplierGenericDrug> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetSupplierGenericDrugCollectionFromReader(reader);
                reader.Close();
                return objList;
            }
        }
        //▲===== 25072018 TTM


        public override List<SupplierGenericDrug> SupplierGenericDrug_LoadDrugID(long DrugID, int PageSize,
                                                                                 int PageIndex, bool bcount,
                                                                                 out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugs_LoadDrugID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, DrugID);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, bcount);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<SupplierGenericDrug> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetSupplierGenericDrugCollectionFromReader(reader);
                reader.Close();
                if (bcount && paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return objList;
            }
        }

        public override List<SupplierGenericDrug> SupplierGenericDrug_LoadSupplierID(long SupplierID, int PageSize,
                                                                                     int PageIndex, bool bcount,
                                                                                     out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugs_LoadSupplierID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, SupplierID);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, bcount);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<SupplierGenericDrug> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetSupplierGenericDrugCollectionFromReader(reader);
                reader.Close();
                if (bcount && paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return objList;
            }
        }

        #endregion

        #region 27.2 SupplierGenericDrugPrice "Giá this is template"

        public override List<Supplier> SupplierGenericDrugPrice_GetListSupplier_Paging(
            SupplierGenericDrugPriceSearchCriteria Criteria,

            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugPrice_GetListSupplier_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@SupplierName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.SupplierName));
                cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.Address));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.BrandName));
                cmd.AddParameter("@GenericName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.GenericName));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<Supplier> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetSupplierCollectionFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }

        public override List<SupplierGenericDrugPrice> SupplierGenericDrugPrice_ListDrugBySupplierID_Paging(
            SupplierGenericDrugPriceSearchCriteria Criteria,

            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugPrice_ListDrugBySupplierID_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Criteria.SupplierID));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.BrandName));
                cmd.AddParameter("@GenericName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.GenericName));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<SupplierGenericDrugPrice> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetSupplierGenericDrugPriceCollectionFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }


        //Quản lý giá

        public override List<SupplierGenericDrugPrice> SupplierGenericDrugPrice_ListPrice_Paging(
            SupplierGenericDrugPriceSearchCriteria Criteria,

            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugPrice_ListPrice_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Criteria.SupplierID));
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Criteria.DrugID));

                cmd.AddParameter("@PriceType", SqlDbType.Int, ConvertNullObjectToDBNull(Criteria.PriceType));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.ToDate));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<SupplierGenericDrugPrice> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetSupplierGenericDrugPriceCollectionFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }

        public override void SupplierGenericDrugPrice_CheckCanEditCanDelete(
            Int64 PKID,
            out bool CanEdit,
            out bool CanDelete,
            out string PriceType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                CanEdit = false;
                CanDelete = false;
                PriceType = "";

                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugPrice_CheckCanEditCanDelete", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PKID", SqlDbType.BigInt, PKID);
                cmd.AddParameter("@CanEdit", SqlDbType.Bit, DBNull.Value, ParameterDirection.Output);
                cmd.AddParameter("@CanDelete", SqlDbType.Bit, DBNull.Value, ParameterDirection.Output);
                cmd.AddParameter("@PriceType", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@CanEdit"].Value != null)
                    CanEdit = Convert.ToBoolean(cmd.Parameters["@CanEdit"].Value);
                if (cmd.Parameters["@CanDelete"].Value != null)
                    CanDelete = Convert.ToBoolean(cmd.Parameters["@CanDelete"].Value);
                if (cmd.Parameters["@PriceType"].Value != null)
                    PriceType = cmd.Parameters["@PriceType"].Value.ToString();
            }
        }

        public override void SupplierGenericDrugPrice_Save(SupplierGenericDrugPrice Obj, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugPrice_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PKID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.PKID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.SupplierID));
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.DrugID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.StaffID));
                cmd.AddParameter("@ApprovedStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.ApprovedStaffID));
                cmd.AddParameter("@UnitPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.UnitPrice));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.PackagePrice));
                cmd.AddParameter("@VAT", SqlDbType.Float, ConvertNullObjectToDBNull(Obj.VAT));
                cmd.AddParameter("@EffectiveDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Obj.EffectiveDate));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }

        public override void SupplierGenericDrugPrice_MarkDelete(Int64 PKID, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugPrice_MarkDelete", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PKID", SqlDbType.BigInt, ConvertNullObjectToDBNull(@PKID));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }

        public override SupplierGenericDrugPrice SupplierGenericDrugPrice_ByPKID(Int64 PKID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenericDrugPrice_ByPKID", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramDeptID = new SqlParameter("@PKID", SqlDbType.BigInt);
                paramDeptID.Value = PKID;

                cmd.Parameters.Add(paramDeptID);

                cn.Open();

                SupplierGenericDrugPrice ObjSupplierGenericDrugPrice = null;

                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    ObjSupplierGenericDrugPrice = GetSupplierGenericDrugPriceFromReader(reader);
                }

                reader.Close();
                return ObjSupplierGenericDrugPrice;
            }
        }

        //Quản lý giá


        public override bool SupplierGenericDrugPrice_XMLSave(IList<SupplierGenericDrugPrice> ObjCollect)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd1 = new SqlCommand("spSupplierGenericDrugPrice_XMLSave", cn);
                cmd1.CommandType = CommandType.StoredProcedure;
                cmd1.AddParameter("@DataXML", SqlDbType.Xml, ConvertListSupplierGenericDrugPriceToXml(ObjCollect));
                cn.Open();
                return ExecuteNonQuery(cmd1) > 1;

            }
        }


        #endregion

        #region 27.3 SupplierGenMedProductsPrice "Giá this is template"

        public override List<Supplier> SupplierGenMedProductsPrice_GetListSupplier_Paging(
            SupplierGenMedProductsPriceSearchCriteria Criteria,

            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenMedProductsPrice_GetListSupplier_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Criteria.V_MedProductType));
                cmd.AddParameter("@SupplierName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.SupplierName));
                cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.Address));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.BrandName));
                cmd.AddParameter("@GenericName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.GenericName));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<Supplier> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetSupplierCollectionFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }

        public override List<SupplierGenMedProductsPrice>
            SupplierGenMedProductsPrice_ListGenMedProductIDBySupplierID_Paging(
            SupplierGenMedProductsPriceSearchCriteria Criteria,

            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenMedProductsPrice_ListGenMedProductIDBySupplierID_Paging",
                                                cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Criteria.V_MedProductType));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Criteria.SupplierID));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.BrandName));
                cmd.AddParameter("@GenericName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.GenericName));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<SupplierGenMedProductsPrice> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetSupplierGenMedProductsPriceCollectionFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }


        //Quản lý giá

        public override List<SupplierGenMedProductsPrice> SupplierGenMedProductsPrice_ListPrice_Paging(
            SupplierGenMedProductsPriceSearchCriteria Criteria,

            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenMedProductsPrice_ListPrice_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Criteria.SupplierID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Criteria.GenMedProductID));

                cmd.AddParameter("@PriceType", SqlDbType.Int, ConvertNullObjectToDBNull(Criteria.PriceType));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.ToDate));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<SupplierGenMedProductsPrice> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetSupplierGenMedProductsPriceCollectionFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }

        public override void SupplierGenMedProductsPrice_CheckCanEditCanDelete(
            Int64 PKID,
            out bool CanEdit,
            out bool CanDelete,
            out string PriceType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                CanEdit = false;
                CanDelete = false;
                PriceType = "";

                SqlCommand cmd = new SqlCommand("spSupplierGenMedProductsPrice_CheckCanEditCanDelete", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PKID", SqlDbType.BigInt, PKID);
                cmd.AddParameter("@CanEdit", SqlDbType.Bit, DBNull.Value, ParameterDirection.Output);
                cmd.AddParameter("@CanDelete", SqlDbType.Bit, DBNull.Value, ParameterDirection.Output);
                cmd.AddParameter("@PriceType", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@CanEdit"].Value != null)
                    CanEdit = Convert.ToBoolean(cmd.Parameters["@CanEdit"].Value);
                if (cmd.Parameters["@CanDelete"].Value != null)
                    CanDelete = Convert.ToBoolean(cmd.Parameters["@CanDelete"].Value);
                if (cmd.Parameters["@PriceType"].Value != null)
                    PriceType = cmd.Parameters["@PriceType"].Value.ToString();
            }
        }

        public override void SupplierGenMedProductsPrice_Save(SupplierGenMedProductsPrice Obj, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spSupplierGenMedProductsPrice_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PKID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.PKID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.SupplierID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.GenMedProductID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.StaffID));
                cmd.AddParameter("@ApprovedStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.ApprovedStaffID));
                cmd.AddParameter("@UnitPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.UnitPrice));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.PackagePrice));
                cmd.AddParameter("@VAT", SqlDbType.Float, ConvertNullObjectToDBNull(Obj.VAT));
                cmd.AddParameter("@EffectiveDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Obj.EffectiveDate));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }

        public override void SupplierGenMedProductsPrice_MarkDelete(Int64 PKID, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spSupplierGenMedProductsPrice_MarkDelete", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PKID", SqlDbType.BigInt, ConvertNullObjectToDBNull(@PKID));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }

        public override SupplierGenMedProductsPrice SupplierGenMedProductsPrice_ByPKID(Int64 PKID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierGenMedProductsPrice_ByPKID", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramDeptID = new SqlParameter("@PKID", SqlDbType.BigInt);
                paramDeptID.Value = PKID;

                cmd.Parameters.Add(paramDeptID);

                cn.Open();

                SupplierGenMedProductsPrice ObjSupplierGenMedProductsPrice = null;

                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    ObjSupplierGenMedProductsPrice = GetSupplierGenMedProductsPriceFromReader(reader);
                }

                reader.Close();
                return ObjSupplierGenMedProductsPrice;
            }
        }

        //Quản lý giá

        #endregion

        #region 27.4 DrugDept Supplier

        public override List<DrugDeptSupplier> DrugDeptSupplier_SearchAutoPaging(SupplierSearchCriteria Criteria,
                                                                                 int PageSize, int PageIndex,
                                                                                 bool bcount, out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptSupplier_SearchPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupplierName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.SupplierName));
                cmd.AddParameter("@V_SupplierType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Criteria.V_SupplierType));
                cmd.AddParameter("@DrugDeptEstimatePoID", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(Criteria.PharmacyEstimatePoID));
                cmd.AddParameter("@IsMain", SqlDbType.TinyInt, ConvertNullObjectToDBNull(Criteria.IsMain));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, bcount);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<DrugDeptSupplier> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetDrugDeptSupplierCollectionFromReader(reader);
                reader.Close();
                if (bcount && paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return objList;
            }
        }


        //NCC cua phieu tam
        public override List<DrugDeptSupplier> DrugDeptSupplierXapNhapPXTemp_SearchPaging(
            SupplierSearchCriteria Criteria, int PageIndex, int PageSize, bool CountTotal, out int Total)
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptSupplierXapNhapPXTemp_SearchPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupplierName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Criteria.SupplierName));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Criteria.V_MedProductType));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, ConvertNullObjectToDBNull(CountTotal));

                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<DrugDeptSupplier> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetDrugDeptSupplierCollectionFromReader(reader);
                reader.Close();

                if (CountTotal && paramTotal.Value != null)
                {
                    Total = (int)paramTotal.Value;
                }
                else
                    Total = -1;
                return objList;
            }
        }

        //NCC cua phieu tam

        public override bool DeleteDrugDeptSupplierByID(long supplierID)
        {
            bool results = false;
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spDrugDeptSupplier_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, supplierID);
                    cmd.AddParameter("@Active", SqlDbType.Bit, false);

                    cn.Open();
                    int count = 0;
                    count = cmd.ExecuteNonQuery();
                    if (count != 0)
                    {
                        results = true;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool UpdateDrugDeptSupplier(DrugDeptSupplier supplier, out string StrError)
        {
            StrError = "";
            bool results = false;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptSupplier_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupplierID", SqlDbType.NVarChar, supplier.SupplierID);
                cmd.AddParameter("@SupplierName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.SupplierName));
                cmd.AddParameter("@SupplierCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(supplier.SupplierCode));
                cmd.AddParameter("@TelephoneNumber", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.TelephoneNumber));
                cmd.AddParameter("@WebSiteAddress", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.WebSiteAddress));
                cmd.AddParameter("@SupplierDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.SupplierDescription));
                cmd.AddParameter("@PAHEmailAddress", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.PAHEmailAddress));
                cmd.AddParameter("@FaxNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.FaxNumber));
                cmd.AddParameter("@ContactPerson", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.ContactPerson));
                cmd.AddParameter("@CityStateZipCode", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.CityStateZipCode));
                cmd.AddParameter("@CertificateAgency", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.CertificateAgency));
                cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.Address));
                cmd.AddParameter("@AccountNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(supplier.AccountNumber));
                cmd.AddParameter("@BankName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.BankName));
                cmd.AddParameter("@Active", SqlDbType.Bit, true);
                cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(supplier.IsForeign));
                cmd.AddParameter("@SupplierDrugDeptPharmOthers", SqlDbType.TinyInt, ConvertNullObjectToDBNull(supplier.SupplierDrugDeptPharmOthers));
                SqlParameter paramStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1024);
                paramStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramStrError);
                cn.Open();
                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    results = true;
                    if (paramStrError.Value != DBNull.Value)
                    {
                        StrError = paramStrError.Value.ToString();
                    }
                }
                cmd.Dispose();
            }
            return results;
        }

        public override bool AddNewDrugDeptSupplier(DrugDeptSupplier supplier, out long SupplierID, out string StrError)
        {
            bool results = false;
            StrError = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptSupplier_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupplierName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.SupplierName));
                cmd.AddParameter("@SupplierCode", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.SupplierCode));
                cmd.AddParameter("@SupplierType", SqlDbType.BigInt, supplier.SupplierType);
                cmd.AddParameter("@TelephoneNumber", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.TelephoneNumber));
                cmd.AddParameter("@WebSiteAddress", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.WebSiteAddress));
                cmd.AddParameter("@SupplierDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.SupplierDescription));
                cmd.AddParameter("@PAHEmailAddress", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.PAHEmailAddress));
                cmd.AddParameter("@FaxNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.FaxNumber));
                cmd.AddParameter("@ContactPerson", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.ContactPerson));
                cmd.AddParameter("@CityStateZipCode", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.CityStateZipCode));
                cmd.AddParameter("@CertificateAgency", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(supplier.CertificateAgency));
                cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.Address));
                cmd.AddParameter("@Active", SqlDbType.Bit, true);
                cmd.AddParameter("@AccountNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(supplier.AccountNumber));
                cmd.AddParameter("@BankName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(supplier.BankName));
                //cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(supplier.IsForeign));
                cmd.AddParameter("@TaxCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(supplier.TaxCode));
                cmd.AddParameter("@SupplierDrugDeptPharmOthers", SqlDbType.TinyInt, ConvertNullObjectToDBNull(supplier.SupplierDrugDeptPharmOthers));
                SqlParameter paramTotal = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramTotal.Direction = ParameterDirection.Output;
                SqlParameter paramStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1024);
                paramStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cmd.Parameters.Add(paramStrError);
                cn.Open();

                int count = 0;
                count = cmd.ExecuteNonQuery();
                if (paramTotal.Value != null)
                {
                    SupplierID = (long)paramTotal.Value;
                }
                else
                    SupplierID = -1;
                if (paramStrError.Value != DBNull.Value)
                {
                    StrError = paramStrError.Value.ToString();
                }
                if (count != 0)
                {
                    results = true;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override List<DrugDeptSupplier> DrugDeptSupplier_GetCbx(int supplierType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptSupplier_AllCbx", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@SupplierType", SqlDbType.BigInt, (long)supplierType);
                cn.Open();
                List<DrugDeptSupplier> suppliers = null;

                IDataReader reader = ExecuteReader(cmd);

                suppliers = GetDrugDeptSupplierCollectionFromReader(reader);
                reader.Close();
                return suppliers;
            }
        }



        #endregion

        #endregion

        #region 28. Purchase Order For Drug

        public override List<PharmacyPurchaseOrderDetail> PharmacyPurchaseOrderDetail_GetFirst(
            long? PharmacyEstimatePoID, long? SupplierID, long? PCOID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyPurchaseOrders_EstimateAndSupplier", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyEstimatePoID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PharmacyEstimatePoID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SupplierID));
                cmd.AddParameter("@IsPrimary", SqlDbType.Bit, ConvertNullObjectToDBNull(null));
                cmd.AddParameter("@PCOID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PCOID));
                cn.Open();
                List<PharmacyPurchaseOrderDetail> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetPharmacyPurchaseOrderDetailCollectionFromReader(reader);
                reader.Close();
                return objList;
            }
        }

        public override bool PharmacyPurchaseOrderDetail_UpdateNoWaiting(long PharmacyPoDetailID, bool? NoWaiting)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyPurchaseOrderDetails_UpdateNoWaiting", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyPoDetailID", SqlDbType.BigInt, PharmacyPoDetailID);
                cmd.AddParameter("@NoWaiting", SqlDbType.Bit, ConvertNullObjectToDBNull(NoWaiting));
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        public override bool PharmacyPurchaseOrder_UpdateStatus(long ID, long V_PurchaseOrderStatus)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyPurchaseOrders_UpdateStatus", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyPoID", SqlDbType.BigInt, ID);
                cmd.AddParameter("@V_PurchaseOrderStatus", SqlDbType.BigInt, V_PurchaseOrderStatus);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        public override bool PharmacyPurchaseOrder_FullOperator(PharmacyPurchaseOrder PurchaseOrder, out long id)
        {
            id = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyPurchaseOrders_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyPoID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PurchaseOrder.PharmacyPoID));
                cmd.AddParameter("@PONumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(PurchaseOrder.PONumber));
                cmd.AddParameter("@PharmacyEstimatePoID", SqlDbType.BigInt,
                                 ConvertNullToZero(PurchaseOrder.PharmacyEstimatePoID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PurchaseOrder.SupplierID));
                cmd.AddParameter("@OrderDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(PurchaseOrder.OrderDate));
                cmd.AddParameter("@ExpectedDeliveryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(PurchaseOrder.ExpectedDeliveryDate));
                cmd.AddParameter("@DeliveryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(PurchaseOrder.DeliveryDate));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PurchaseOrder.StaffID));
                cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PurchaseOrder.CurrencyID));
                cmd.AddParameter("@ExchangeRates", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(PurchaseOrder.ExchangeRates));
                cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(PurchaseOrder.IsForeign));
                cmd.AddParameter("@VAT", SqlDbType.Float, ConvertNullObjectToDBNull(PurchaseOrder.VAT));
                cmd.AddParameter("@PoNotes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(PurchaseOrder.PoNotes));
                cmd.AddParameter("@V_PurchaseOrderStatus", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(PurchaseOrder.V_PurchaseOrderStatus));
                cmd.AddParameter("@V_PaymentMode", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PurchaseOrder.V_PaymentMode));
                cmd.AddParameter("@DeliveryDayNo", SqlDbType.Int, ConvertNullObjectToDBNull(PurchaseOrder.DeliveryDayNo));
                cmd.AddParameter("@DeliveryMoneyDayNo", SqlDbType.Int,
                                 ConvertNullObjectToDBNull(PurchaseOrder.DeliveryMoneyDayNo));
                cmd.AddParameter("@XML", SqlDbType.Xml,
                                 ConvertNullObjectToDBNull(PurchaseOrder.ConvertDetailsListToXml()));
                SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                pareID.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(pareID);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    if (pareID.Value != DBNull.Value)
                    {
                        id = (long)pareID.Value;
                    }
                }
                cmd.Dispose();
                return count > 0;
            }
        }

        public override PharmacyPurchaseOrder PharmacyPurchaseOrder_ByID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyPurchaseOrders_ByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyPoID", SqlDbType.BigInt, ID);
                cn.Open();
                PharmacyPurchaseOrder invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetPharmacyPurchaseOrderFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<PharmacyPurchaseOrderDetail> PharmacyPurchaseOrderDetail_ByParentID(long ID, byte IsInput)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyPurchaseOrderDetails_ByIDParent", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyPoID", SqlDbType.BigInt, ID);
                cmd.AddParameter("@IsInput", SqlDbType.TinyInt, IsInput);
                cn.Open();
                List<PharmacyPurchaseOrderDetail> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetPharmacyPurchaseOrderDetailCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<PharmacyPurchaseOrder> PharmacyPurchaseOrder_Search(RequestSearchCriteria Criteria,
                                                                                 int pageIndex, int pageSize,
                                                                                 bool bCount, out int totalcount)
        {
            totalcount = 0;
            if (Criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyPurchaseOrders_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PONumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(Criteria.Code));
                cmd.AddParameter("@EstimationCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(Criteria.Code1));
                cmd.AddParameter("@fromdate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.FromDate));
                cmd.AddParameter("@todate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.ToDate));
                cmd.AddParameter("@PageSize", SqlDbType.Int, pageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, pageIndex);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, bCount);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<PharmacyPurchaseOrder> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetPharmacyPurchaseOrderCollectionFromReader(reader);
                reader.Close();

                if (bCount && paramTotal.Value != null)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return drugs;
            }
        }

        public override bool PharmacyPurchaseOrders_Delete(long PharmacyPoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyPurchaseOrders_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyPoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PharmacyPoID));
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        public override List<RefGenericDrugDetail> RefGenericDrugDetail_AutoRequest(string BrandName,
                                                                                    long? PharmacyEstimatePoID,
                                                                                    long? SupplierID, int PageIndex,
                                                                                    int PageSize, out int totalcount,
                                                                                    bool? IsCode)
        {
            totalcount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetDrugForAutoCompleteForPurchaseOrder", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@PharmacyEstimatePoID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PharmacyEstimatePoID));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SupplierID));
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cn.Open();
                List<RefGenericDrugDetail> drugs = null;
                IDataReader reader = ExecuteReader(cmd);

                drugs = GetRefGenericDrugForShowCollectionFromReader(reader);
                reader.Close();

                if (paramTotal.Value != DBNull.Value)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;

                return drugs;
            }
        }

        public override List<RefGenericDrugDetail> RefGenericDrugDetail_WarningOrder(int PageIndex, int PageSize, long? SupplierID, bool IsAll, out int totalcount)
        {
            totalcount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetails_WarningOrder", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SupplierID));
                cmd.AddParameter("@IsAll", SqlDbType.Bit, ConvertNullObjectToDBNull(IsAll));
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<RefGenericDrugDetail> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenericDrugForShowCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != DBNull.Value)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;

                return drugs;
            }
        }

        #endregion

        #region 29. Report member

        public override List<List<string>> ExportExcel_RemainInward(ReportParameters criteria)
        {
            DataSet dsExportToExcelAll = new DataSet();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand();
                switch (criteria.FromDepartment)
                {
                    case DepartmentReport.NHA_THUOC:
                        cmd = new SqlCommand("spInwardDrugs_TonKho_ExportToExcel", cn);
                        break;
                    case DepartmentReport.KHOA_DUOC:
                        cmd = new SqlCommand("spInStock_MedDept_ExportToExcel", cn);
                        cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.V_MedProductType));
                        break;
                    default:
                        return null;
                }

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(criteria.BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.StoreID));
                cmd.AddParameter("@IsDetail", SqlDbType.Bit, ConvertNullObjectToDBNull(criteria.IsDetail));
                
                cmd.CommandTimeout = int.MaxValue;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsExportToExcelAll);
                List<List<string>> returnAllExcelData = new List<List<string>>();

                //Add the below 4 lines to add the column names to show on the Excel file
                List<string> colname = new List<string>();
                for (int i = 0; i <= dsExportToExcelAll.Tables[0].Columns.Count - 1; i++)
                {
                    colname.Add(dsExportToExcelAll.Tables[0].Columns[i].ToString().Trim());
                }

                returnAllExcelData.Add(colname);

                for (int i = 0; i <= dsExportToExcelAll.Tables[0].Rows.Count - 1; i++)
                {
                    List<string> rowData = new List<string>();
                    for (int j = 0; j <= dsExportToExcelAll.Tables[0].Columns.Count - 1; j++)
                    {
                        rowData.Add(Convert.ToString(dsExportToExcelAll.Tables[0].Rows[i][j]).Replace("<", "&lt;").Replace(">", "&gt;"));
                    }
                    returnAllExcelData.Add(rowData);
                }

                return returnAllExcelData;
            }
        }


        public override List<InwardDrug> InwardDrugs_TonKho(string BrandName, long StoreID, bool IsDetail, int PageIndex,
                                                            int PageSize, out int TotalCount, out decimal TotalMoney)
        {
            TotalCount = 0;
            TotalMoney = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugs_TonKho", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@IsDetail", SqlDbType.Bit, IsDetail);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                SqlParameter paramTotal = new SqlParameter("@TotalCount", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                SqlParameter paramTotalMoney = new SqlParameter("@TotalMoney", SqlDbType.Money);
                paramTotalMoney.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cmd.Parameters.Add(paramTotalMoney);
                cn.Open();
                List<InwardDrug> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetspInwardDrugThongKeCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != DBNull.Value)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                if (paramTotalMoney.Value != DBNull.Value)
                {
                    TotalMoney = Convert.ToDecimal(paramTotalMoney.Value);
                }
                else
                    TotalMoney = 0;
                return objList;
            }
        }

        public override List<OutwardDrug> OutwardDrugs_SellOnDate(string BrandName, long StoreID, DateTime FromDate,
                                                                  DateTime ToDate, bool IsDetail, int PageIndex,
                                                                  int PageSize, out int TotalCount,
                                                                  out decimal TotalMoney)
        {
            TotalCount = 0;
            TotalMoney = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugs_SellOnDate", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 999999999;
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(ToDate));
                cmd.AddParameter("@IsDetail", SqlDbType.Bit, ConvertNullObjectToDBNull(IsDetail));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                SqlParameter paramTotal = new SqlParameter("@TotalCount", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                SqlParameter paramTotalMoney = new SqlParameter("@TotalMoney", SqlDbType.Money);
                paramTotalMoney.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cmd.Parameters.Add(paramTotalMoney);
                cn.Open();
                List<OutwardDrug> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetOutWardDrugDetailThongKeCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != DBNull.Value)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                if (paramTotalMoney.Value != DBNull.Value)
                {
                    TotalMoney = Convert.ToDecimal(paramTotalMoney.Value);
                }
                else
                    TotalMoney = 0;
                return objList;
            }
        }

        #endregion

        #region 30. StockTakes member

        public override List<PharmacyStockTakes> PharmacyStockTakes_Search(
            PharmacyStockTakesSearchCriteria SearchCriteria, int PageIndex, int PageSize, out int TotalCount)
        {
            TotalCount = 0;
            if (SearchCriteria == null)
            {
                return null;
            }
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyStockTakes_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyStockTakeID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(SearchCriteria.PharmacyStockTakeID));
                cmd.AddParameter("@StoreID", SqlDbType.VarChar, ConvertNullObjectToDBNull(SearchCriteria.StoreID));
                cmd.AddParameter("@StockTakePeriodName", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.StockTakePeriodName));
                cmd.AddParameter("@fromdate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.FromDate));
                cmd.AddParameter("@todate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.ToDate));
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<PharmacyStockTakes> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetPharmacyStockTakesCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return drugs;
            }
        }

        public override List<PharmacyStockTakeDetails> PharmacyStockTakeDetails_Get(long StoreID, DateTime StockTakeDate)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyStockTakes_Get", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@StockTakeDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(StockTakeDate));
                cn.Open();
                List<PharmacyStockTakeDetails> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetPharmacyStockTakeDetailsCollectionFromReader(reader);
                reader.Close();
                return objList;
            }
        }

        public override List<PharmacyStockTakeDetails> PharmacyStockTakeDetails_Load(long PharmacyStockTakeID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyStockTakeDetails_Load", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacyStockTakeID", SqlDbType.BigInt, PharmacyStockTakeID);
                cn.Open();
                List<PharmacyStockTakeDetails> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetPharmacyStockTakeDetailsCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<PharmacyStockTakeDetails> GetDrugForAutoCompleteStockTake(string BrandName, long StoreID, bool IsCode)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetDrugForAutoCompleteStockTake", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cn.Open();
                List<PharmacyStockTakeDetails> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetPharmacyStockTakeDetailsCollectionFromReader(reader);
                reader.Close();
                return objList;
            }
        }

        public override bool PharmacyStockTake_Save(PharmacyStockTakes StockTake, out long ID, out string StrError)
        {
            try
            {
                ID = 0;
                StrError = "";
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spPharmacyStockTakes_Insert", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StockTake.StaffID));
                    cmd.AddParameter("@StockTakingDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(StockTake.StockTakingDate));
                    cmd.AddParameter("@StockTakePeriodName", SqlDbType.NVarChar,
                                     ConvertNullObjectToDBNull(StockTake.StockTakePeriodName));
                    cmd.AddParameter("@StockTakeNotes", SqlDbType.NVarChar,
                                     ConvertNullObjectToDBNull(StockTake.StockTakeNotes));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StockTake.StoreID));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(StockTake.ConvertDetailsListToXml()));
                    SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                    pareID.Direction = ParameterDirection.Output;
                    SqlParameter pareStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1024);
                    pareStrError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(pareID);
                    cmd.Parameters.Add(pareStrError);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    if (count != 0)
                    {
                        if (pareID.Value != DBNull.Value)
                        {
                            ID = (long)pareID.Value;
                        }
                        if (pareStrError.Value != DBNull.Value)
                        {
                            StrError = pareStrError.Value.ToString();
                        }
                    }
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool KetChuyenTonKho(long StoreID, long StaffID, string CheckPointName)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spKetChuyenTonDauKy", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@CheckPointName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(CheckPointName));
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                cmd.Dispose();
                return count > 0;
            }
        }

        #endregion

        #region 30.1 DrugDept StockTakes member

        public override List<DrugDeptStockTakes> DrugDeptStockTakes_Search(
            DrugDeptStockTakesSearchCriteria SearchCriteria, int PageIndex, int PageSize, out int TotalCount)
        {
            TotalCount = 0;
            if (SearchCriteria == null)
            {
                return null;
            }
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptStockTakes_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptStockTakeID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(SearchCriteria.DrugDeptStockTakeID));
                cmd.AddParameter("@StoreID", SqlDbType.VarChar, ConvertNullObjectToDBNull(SearchCriteria.StoreID));
                cmd.AddParameter("@StockTakePeriodName", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.StockTakePeriodName));
                cmd.AddParameter("@fromdate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.FromDate));
                cmd.AddParameter("@todate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.ToDate));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(SearchCriteria.V_MedProductType));
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<DrugDeptStockTakes> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetDrugDeptStockTakesCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return drugs;
            }
        }

        public override List<DrugDeptStockTakeDetails> DrugDeptStockTakeDetails_Get(long StoreID, long V_MedProductType, DateTime StockTakeDate)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptStockTakes_Get", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@StockTakeDate", SqlDbType.DateTime, StockTakeDate);
                cn.Open();
                List<DrugDeptStockTakeDetails> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetDrugDeptStockTakeDetailsCollectionFromReader(reader);
                reader.Close();
                return objList;
            }
        }

        public override List<DrugDeptStockTakeDetails> DrugDeptStockTakeDetails_Load(long DrugDeptStockTakeID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptStockTakeDetails_Load", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptStockTakeID", SqlDbType.BigInt, DrugDeptStockTakeID);
                cn.Open();
                List<DrugDeptStockTakeDetails> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetDrugDeptStockTakeDetailsCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<DrugDeptStockTakeDetails> GetProductForDrugDeptStockTake(string BrandName, long StoreID, bool IsCode, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetProductForDrugDeptStockTake", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@IsCode", SqlDbType.Bit, IsCode);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cn.Open();
                List<DrugDeptStockTakeDetails> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetDrugDeptStockTakeDetailsCollectionFromReader(reader);
                reader.Close();
                return objList;
            }
        }

        public override bool DrugDeptStockTake_Save(DrugDeptStockTakes StockTake, bool IsConfirmFinished, out long ID, out string StrError)
        {
            try
            {
                ID = 0;
                StrError = "";
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spDrugDeptStockTakes_Insert", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = int.MaxValue;
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StockTake.StaffID));
                    cmd.AddParameter("@StockTakingDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(StockTake.StockTakingDate));
                    cmd.AddParameter("@StockTakePeriodName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(StockTake.StockTakePeriodName));
                    cmd.AddParameter("@StockTakeNotes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(StockTake.StockTakeNotes));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StockTake.StoreID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(StockTake.V_MedProductType));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(StockTake.ConvertDetailsListToXml()));
                    cmd.AddParameter("@V_StockTakeType", SqlDbType.BigInt, ConvertNullObjectToDBNull(StockTake.V_StockTakeType));
                    cmd.AddParameter("@DrugDeptStockTakeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StockTake.DrugDeptStockTakeID));
                    cmd.AddParameter("@IsConfirmFinished", SqlDbType.Bit, ConvertNullObjectToDBNull(IsConfirmFinished));
                    SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                    pareID.Direction = ParameterDirection.Output;
                    SqlParameter pareStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1024);
                    pareStrError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(pareID);
                    cmd.Parameters.Add(pareStrError);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    if (count != 0)
                    {
                        if (pareID.Value != DBNull.Value)
                        {
                            ID = (long)pareID.Value;
                        }
                        if (pareStrError.Value != DBNull.Value)
                        {
                            StrError = pareStrError.Value.ToString();
                        }
                    }
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
        public override bool DrugDeptStockTake_Remove(long DrugDeptStockTakeID, long StaffID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spDrugDeptStockTakes_Remove", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@DrugDeptStockTakeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DrugDeptStockTakeID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                    cn.Open();
                    return cmd.ExecuteNonQuery() > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool KetChuyenTonKho_DrugDept(long StoreID, long StaffID, string CheckPointName,
                                                      long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spKetChuyenTonDauKy_DrugDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@CheckPointName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(CheckPointName));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                cmd.Dispose();
                return count > 0;
            }
        }

        public override List<List<string>> ExportExcelStockTake(ReportParameters criteria)
        {
            DataSet dsExportToExcelAll = new DataSet();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand();
                switch (criteria.StockTake.StockTakeType)
                {
                    case StockTakeType.KIEM_KE_NHA_THUOC:
                        cmd = new SqlCommand("spPharmacyStockTakeDetails_ExportToExcel", cn);
                        cmd.AddParameter("@PharmacyStockTakeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.StockTake.StockTakeID));
                        cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.StoreID));
                        break;
                    case StockTakeType.KIEM_KE_KHOA_DUOC:
                        cmd = new SqlCommand("spDrugDeptStockTakeDetails_ExportToExcel", cn);
                        cmd.AddParameter("@DrugDeptStockTakeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.StockTake.StockTakeID));
                        cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.StoreID));
                        cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.StockTake.V_MedProductType));
                        cmd.AddParameter("@StockTakeDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(criteria.StockTake.StockTakeDate));
                        break;
                    case StockTakeType.KIEM_KE_KHO_NOI_TRU:
                        cmd = new SqlCommand("spClinicDeptStockTakeDetails_ExportToExcel", cn);
                        cmd.AddParameter("@ClinicDeptStockTakeID", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.StockTake.StockTakeID));
                        cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.StoreID));
                        cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.StockTake.V_MedProductType));
                        cmd.AddParameter("@StockTakeDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(criteria.StockTake.StockTakeDate));
                        break;
                }

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = int.MaxValue;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsExportToExcelAll);
                List<List<string>> returnAllExcelData = new List<List<string>>();

                //Add the below 4 lines to add the column names to show on the Excel file
                List<string> colname = new List<string>();
                for (int i = 0; i <= dsExportToExcelAll.Tables[0].Columns.Count - 1; i++)
                {
                    colname.Add(dsExportToExcelAll.Tables[0].Columns[i].ToString().Trim());
                }

                returnAllExcelData.Add(colname);

                for (int i = 0; i <= dsExportToExcelAll.Tables[0].Rows.Count - 1; i++)
                {
                    List<string> rowData = new List<string>();
                    for (int j = 0; j <= dsExportToExcelAll.Tables[0].Columns.Count - 1; j++)
                    {
                        rowData.Add(Convert.ToString(dsExportToExcelAll.Tables[0].Rows[i][j]).Replace("<", "&lt;").Replace(">", "&gt;"));
                    }
                    returnAllExcelData.Add(rowData);
                }

                return returnAllExcelData;
            }
        }


        #endregion

        #region 30.2 ClinicDept StockTakes member

        public override List<ClinicDeptStockTakes> ClinicDeptStockTakes_Search(
            ClinicDeptStockTakesSearchCriteria SearchCriteria, int PageIndex, int PageSize, out int TotalCount)
        {
            TotalCount = 0;
            if (SearchCriteria == null)
            {
                return null;
            }
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spClinicDeptStockTakes_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ClinicDeptStockTakeID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(SearchCriteria.ClinicDeptStockTakeID));
                cmd.AddParameter("@StoreID", SqlDbType.VarChar, ConvertNullObjectToDBNull(SearchCriteria.StoreID));
                cmd.AddParameter("@StockTakePeriodName", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.StockTakePeriodName));
                cmd.AddParameter("@fromdate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.FromDate));
                cmd.AddParameter("@todate", SqlDbType.DateTime, ConvertNullObjectToDBNull(SearchCriteria.ToDate));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(SearchCriteria.V_MedProductType));
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<ClinicDeptStockTakes> Clinics = null;
                IDataReader reader = ExecuteReader(cmd);
                Clinics = GetClinicDeptStockTakesCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return Clinics;
            }
        }

        public override List<ClinicDeptStockTakeDetails> ClinicDeptStockTakeDetails_Get(long StoreID,
                                                                                        long V_MedProductType,
                                                                                        DateTime StockTakeDate)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spClinicDeptStockTakes_Get", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                    cmd.AddParameter("@StockTakeDate", SqlDbType.DateTime, StockTakeDate);
                    cn.Open();
                    List<ClinicDeptStockTakeDetails> objList = null;
                    IDataReader reader = ExecuteReader(cmd);
                    objList = GetClinicDeptStockTakeDetailsCollectionFromReader(reader);
                    reader.Close();
                    return objList;
            }
                }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool ClinicDeptLockAndUnlockStore(long StoreID, long V_MedProductType, bool IsLock)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spLockAndUnlockStore", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                    cmd.AddParameter("@IsLock", SqlDbType.Bit, IsLock);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
   
                    cmd.Dispose();
                    return count > 0;

                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override List<ClinicDeptStockTakeDetails> ClinicDeptStockTakeDetails_Load(long ClinicDeptStockTakeID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spClinicDeptStockTakeDetails_Load", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ClinicDeptStockTakeID", SqlDbType.BigInt, ClinicDeptStockTakeID);
                cn.Open();
                List<ClinicDeptStockTakeDetails> invoiceClinic = null;
                IDataReader reader = ExecuteReader(cmd);
                invoiceClinic = GetClinicDeptStockTakeDetailsCollectionFromReader(reader);
                reader.Close();
                return invoiceClinic;
            }
        }

        public override List<ClinicDeptStockTakeDetails> GetProductForClinicDeptStockTake(string BrandName, long StoreID, bool IsCode, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetProductForClinicDeptStockTake", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@IsCode", SqlDbType.Bit, IsCode);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cn.Open();
                List<ClinicDeptStockTakeDetails> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetClinicDeptStockTakeDetailsCollectionFromReader(reader);
                reader.Close();
                return objList;
            }
        }

        public override bool ClinicDeptStockTake_Save(ClinicDeptStockTakes StockTake, out long ID, out string StrError)
        {
            try
            {
                ID = 0;
                StrError = "";
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spClinicDeptStockTakes_Insert", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StockTake.StaffID));
                    cmd.AddParameter("@StockTakingDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(StockTake.StockTakingDate));
                    cmd.AddParameter("@StockTakePeriodName", SqlDbType.NVarChar,
                                     ConvertNullObjectToDBNull(StockTake.StockTakePeriodName));
                    cmd.AddParameter("@StockTakeNotes", SqlDbType.NVarChar,
                                     ConvertNullObjectToDBNull(StockTake.StockTakeNotes));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StockTake.StoreID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(StockTake.V_MedProductType));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(StockTake.ConvertDetailsListToXml()));
                    cmd.AddParameter("@V_StockTakeType", SqlDbType.BigInt, ConvertNullObjectToDBNull(StockTake.V_StockTakeType));
                    SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                    pareID.Direction = ParameterDirection.Output;
                    SqlParameter pareStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1024);
                    pareStrError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(pareID);
                    cmd.Parameters.Add(pareStrError);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    if (count != 0)
                    {
                        if (pareID.Value != DBNull.Value)
                        {
                            ID = (long)pareID.Value;
                        }
                        if (pareStrError.Value != DBNull.Value)
                        {
                            StrError = pareStrError.Value.ToString();
                        }
                    }
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool KetChuyenTonKho_ClinicDept(long StoreID, long StaffID, string CheckPointName,
                                                        long V_MedProductType, DateTime CheckPointDate)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spCheckAndSaveCheckPoint_ClinicDept", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                    cmd.AddParameter("@CheckPointName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(CheckPointName));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                    cmd.AddParameter("@CheckPointDate", SqlDbType.DateTime, CheckPointDate);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch(Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        #endregion

        #region 31. Request Form Drug For Pharmacy

        public override bool FullOperatorRequestDrugInward(RequestDrugInward Request, out long id)
        {
            bool results = false;
            id = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInward_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInID", SqlDbType.BigInt, Request.ReqDrugInID);
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, Request.SelectedStaff.StaffID);
                cmd.AddParameter("@DeptID", SqlDbType.BigInt, ConvertNullToZero(Request.DeptID));
                cmd.AddParameter("@ReqDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(Request.ReqDate.ToString("yyyy-MM-dd")));
                cmd.AddParameter("@ReqNumCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(Request.ReqNumCode));
                cmd.AddParameter("@OutFromStoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Request.OutFromStoreID));
                cmd.AddParameter("@InDeptStoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Request.InDeptStoreID));
                cmd.AddParameter("@Comment", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Request.Comment));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Request.ConvertDetailsListToXml()));
                SqlParameter paramid = new SqlParameter("@id", SqlDbType.BigInt);
                paramid.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramid);

                cn.Open();
                int count = ExecuteNonQuery(cmd);
                if (count > 0 && paramid.Value != DBNull.Value)
                {
                    id = (long)paramid.Value;
                }
                cmd.Dispose();
                return results;
            }
        }

        public override RequestDrugInward GetRequestDrugInwardByID(long ReqDrugInID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInward_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInID", SqlDbType.BigInt, ReqDrugInID);
                cn.Open();
                RequestDrugInward invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    invoicedrug = GetRequestDrugInwardFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<RequestDrugInwardDetail> GetRequestDrugInwardDetailByID(long ReqDrugInID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardDetail_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInID", SqlDbType.BigInt, ReqDrugInID);
                cn.Open();
                List<RequestDrugInwardDetail> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetRequestDrugInwardDetailCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<RequestDrugInwardDetail> GetRequestDrugInwardDetailByRequestID(long ReqDrugInID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardDetail_ByRequestID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInID", SqlDbType.BigInt, ReqDrugInID);
                cn.Open();
                List<RequestDrugInwardDetail> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetRequestDrugInwardDetailCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<OutwardDrug> GetRequestDrugInwardDetailByRequestIDNew(long ReqDrugInID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardDetail_ByRequestID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInID", SqlDbType.BigInt, ReqDrugInID);
                cn.Open();
                List<OutwardDrug> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetOutWardDrugDetailCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<RequestDrugInward> SearchRequestDrugInward(RequestSearchCriteria Criteria, int pageIndex,
                                                                        int pageSize, bool bCount, out int totalcount)
        {
            totalcount = 0;
            if (Criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInward_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramCode = new SqlParameter("@ReqNumCode", SqlDbType.VarChar, 128);
                paramCode.Value = ConvertNullObjectToDBNull(Criteria.Code);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(Criteria.FromDate);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(Criteria.ToDate);
                SqlParameter paramStaffID = new SqlParameter("@StaffID", SqlDbType.BigInt);
                paramStaffID.Value = ConvertNullObjectToDBNull(Criteria.StaffID);
                SqlParameter paramNhanHang = new SqlParameter("@DaNhanHang", SqlDbType.Bit);
                paramNhanHang.Value = ConvertNullObjectToDBNull(Criteria.DaNhanHang);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCount;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramCode);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramStaffID);
                cmd.Parameters.Add(paramNhanHang);
                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<RequestDrugInward> drugs = null;
                IDataReader reader = ExecuteReader(cmd);

                drugs = GetRequestDrugInwardCollectionFromReader(reader);
                reader.Close();

                if (bCount && paramTotal.Value != DBNull.Value)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return drugs;
            }
        }

        public override bool DeleteRequestDrugInward(long ReqDrugInID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInward_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReqDrugInID", SqlDbType.BigInt, ReqDrugInID);
                cn.Open();
                int results = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return results > 0;
            }
        }

        public override List<OutwardDrug> spGetInBatchNumberAndPrice_ByRequestPharmacy(bool? IsCost, long RequestID,
                                                                                       long StoreID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetInBatchNumberAndPrice_ForRequestPharmacy", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.Bit, IsCost);
                cmd.AddParameter("@ReqDrugInID", SqlDbType.BigInt, RequestID);
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);

                cn.Open();
                List<OutwardDrug> drugs = null;

                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutWardDrugDetailCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }


        public override List<GetDrugForSellVisitor> GetDrugForSellVisitorAutoComplete_ForRequestPharmacy(bool? IsCost,
                                                                                                         string
                                                                                                             BrandName,
                                                                                                         long StoreID,
                                                                                                         long? RequestID,
                                                                                                         bool? IsCode)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetDrugForAutoCompleteForRequestPharmacy", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCost));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@ReqDrugInID", SqlDbType.BigInt, ConvertNullObjectToDBNull(RequestID));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cn.Open();
                List<GetDrugForSellVisitor> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetDrugForSellVisitorCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override DateTime? OutwardDrug_GetMaxDayBuyInsurance(long PatientID, long outiID)
        {
            DateTime? Results = null;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrug_GetMaxDayBuyInsurance", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PatientID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PatientID));
                cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(outiID));
                SqlParameter pareID = new SqlParameter("@OutDate", SqlDbType.DateTime);
                pareID.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(pareID);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                if (pareID.Value != DBNull.Value)
                {
                    Results = pareID.Value as DateTime?;
                }
                return Results;
            }
        }

        public override bool OutwardDrugInvoice_SaveByType(OutwardDrugInvoice Invoice, out long ID, out string StrError)
        {
            ID = 0;
            StrError = "";
            if (Invoice.outiID == 0 && (Invoice.TypID == (int)AllLookupValues.RefOutputType.BANTHEOTOA || Invoice.TypID == (int)AllLookupValues.RefOutputType.BANLE) && !Invoice.IsUpdate.GetValueOrDefault(false))
            {
                try
                {
                    var numProvider = new ServiceSequenceNumberProvider();
                    PharmacyInvType type = PharmacyInvType.KHONG_BAO_HIEM;
                    if (Invoice.IsHICount.GetValueOrDefault(false))
                    {
                        type = PharmacyInvType.CO_BAO_HIEM;
                    }
                    byte seqNumType;
                    uint seqNum;
                    numProvider.GetPharmacyOutDrugInvSeqNum(out seqNumType, type, out seqNum);
                    Invoice.ColectDrugSeqNum = (int)seqNum;
                    Invoice.ColectDrugSeqNumType = seqNumType;
                }
                catch
                {
                    Invoice.ColectDrugSeqNum = 0;
                    Invoice.ColectDrugSeqNumType = 0;
                }

            }
            else
            {
                Invoice.ColectDrugSeqNum = 0;
                Invoice.ColectDrugSeqNumType = 0;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugList_SaveByType", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.outiID));
                cmd.AddParameter("@PatientID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.SelectedPrescription != null ? Invoice.SelectedPrescription.PatientID : 0));
                cmd.AddParameter("@PrescriptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.PrescriptID));
                cmd.AddParameter("@IssueID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.IssueID));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StoreID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StaffID));
                cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.TypID));

                cmd.AddParameter("@OutInvID", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(Invoice.OutInvID));
                cmd.AddParameter("@OutInvoiceNumber", SqlDbType.VarChar,
                                ConvertNullObjectToDBNull(Invoice.OutInvoiceNumber));
                cmd.AddParameter("@FullName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.FullName));
                cmd.AddParameter("@NumberPhone", SqlDbType.VarChar, ConvertNullObjectToDBNull(Invoice.NumberPhone));
                cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Address));
                cmd.AddParameter("@DOB", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.DOBString));
                cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Invoice.V_OutDrugInvStatus));
                cmd.AddParameter("@ToStoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.ToStoreID));
                cmd.AddParameter("@ToStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.ToStaffID));
                cmd.AddParameter("@HosID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.HosID));
                cmd.AddParameter("@ReqDrugInID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.ReqDrugInID));
                cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Notes));
                cmd.AddParameter("@V_ByOutPrice", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_ByOutPrice));
                cmd.AddParameter("@ColectDrugSeqNum", SqlDbType.Int,
                                 ConvertNullObjectToDBNull(Invoice.ColectDrugSeqNum));
                cmd.AddParameter("@ColectDrugSeqNumType", SqlDbType.TinyInt,
                                 ConvertNullObjectToDBNull(Invoice.ColectDrugSeqNumType));
                cmd.AddParameter("@IsHICount", SqlDbType.Bit,
                                ConvertNullObjectToDBNull(Invoice.IsHICount));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Invoice.ConvertDetailsListToXml()));
                cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Invoice.OutDate));

                SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                pareID.Direction = ParameterDirection.Output;
                SqlParameter pareStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1024);
                pareStrError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(pareID);
                cmd.Parameters.Add(pareStrError);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                if (pareID.Value != DBNull.Value)
                {
                    ID = (long)pareID.Value;
                }
                if (pareStrError.Value != DBNull.Value)
                {
                    StrError = pareStrError.Value.ToString();
                }
                cmd.Dispose();
                return count > 0;
            }
        }

        #endregion

        #region 32. SupplierPharmacyPaymentReqs Member

        public override List<InwardDrugInvoice> SupplierPharmacyPaymentReqs_Details(InwardInvoiceSearchCriteria criteria)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugInvoices_PaymentReqID", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInvoice = new SqlParameter("@FromDate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramDateInput = new SqlParameter("@ToDate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);

                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramDateInput);

                cn.Open();
                List<InwardDrugInvoice> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetspInwardDrugInvoiceCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override bool SupplierPharmacyPaymentReqs_Save(SupplierPharmacyPaymentReqs PaymentReqs, out long id)
        {
            bool results = false;
            id = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierPharmacyPaymentReqs_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacySupplierPaymentReqID", SqlDbType.BigInt,
                                 PaymentReqs.PharmacySupplierPaymentReqID);
                cmd.AddParameter("@SequenceNum", SqlDbType.VarChar, ConvertNullObjectToDBNull(PaymentReqs.SequenceNum));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullToZero(PaymentReqs.SupplierID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, PaymentReqs.StaffID);
                cmd.AddParameter("@RequestedDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(PaymentReqs.RequestedDate));
                cmd.AddParameter("@SupplierInvDateFrom", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(PaymentReqs.SupplierInvDateFrom));
                cmd.AddParameter("@SupplierInvDateTo", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(PaymentReqs.SupplierInvDateTo));
                cmd.AddParameter("@V_PaymentMode", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PaymentReqs.V_PaymentMode));
                cmd.AddParameter("@SupplierAccountNum", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(PaymentReqs.SupplierAccountNum));
                cmd.AddParameter("@SupplierBank", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(PaymentReqs.SupplierBank));
                cmd.AddParameter("@V_PaymentReqStatus", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PaymentReqs.V_PaymentReqStatus));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(PaymentReqs.ConvertDetailsListToXml()));
                SqlParameter paramid = new SqlParameter("@id", SqlDbType.BigInt);
                paramid.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramid);

                cn.Open();
                int count = ExecuteNonQuery(cmd);
                if (count > 0 && paramid.Value != DBNull.Value)
                {
                    id = (long)paramid.Value;
                }
                cmd.Dispose();
                return results;
            }
        }

        public override List<InwardDrugInvoice> SupplierPharmacyPaymentReqs_DetailsByReqID(
            long PharmacySupplierPaymentReqID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierPharmacyPaymentReqDetails_ID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacySupplierPaymentReqID", SqlDbType.BigInt, PharmacySupplierPaymentReqID);
                cn.Open();
                List<InwardDrugInvoice> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetspInwardDrugInvoiceCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override SupplierPharmacyPaymentReqs SupplierPharmacyPaymentReqs_ID(long PharmacySupplierPaymentReqID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierPharmacyPaymentReqs_ID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacySupplierPaymentReqID", SqlDbType.BigInt, PharmacySupplierPaymentReqID);
                cn.Open();
                SupplierPharmacyPaymentReqs invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    invoicedrug = GetSupplierPharmacyPaymentReqsFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<SupplierPharmacyPaymentReqs> SupplierPharmacyPaymentReqs_Search(
            RequestSearchCriteria Criteria, int PageSize, int PageIndex, bool bcount, out int TotalCount)
        {
            TotalCount = 0;
            if (Criteria == null)
            {
                return null;
            }
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierPharmacyPaymentReqs_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramCode = new SqlParameter("@SequenceNum", SqlDbType.VarChar, 128);
                paramCode.Value = ConvertNullObjectToDBNull(Criteria.Code);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(Criteria.FromDate);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(Criteria.ToDate);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(Criteria.SupplierID);
                SqlParameter paramLookupID = new SqlParameter("@V_PaymentReqStatus", SqlDbType.BigInt);
                paramLookupID.Value = ConvertNullObjectToDBNull(Criteria.V_LookupID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = PageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = PageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bcount;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramCode);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramLookupID);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<SupplierPharmacyPaymentReqs> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetSupplierPharmacyPaymentReqsCollectionFromReader(reader);
                reader.Close();
                if (bcount && paramTotal.Value != DBNull.Value)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return drugs;
            }
        }

        public override bool SupplierPharmacyPaymentReqs_UpdateStatus(long ID, long V_PaymentReqStatus, long? StaffID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierPharmacyPaymentReqs_UpdateStatus", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacySupplierPaymentReqID", SqlDbType.BigInt, ID);
                cmd.AddParameter("@V_PaymentReqStatus", SqlDbType.BigInt, V_PaymentReqStatus);
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        public override bool SupplierPharmacyPaymentReqs_Delete(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierPharmacyPaymentReqs_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@PharmacySupplierPaymentReqID", SqlDbType.BigInt, ID);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        #endregion

        #region 32.0 SupplierDrugDeptPaymentReqs Member

        public override List<InwardDrugMedDeptInvoice> SupplierDrugDeptPaymentReqs_Details(
            InwardInvoiceSearchCriteria criteria, long? V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugMedDeptInvoices_PaymentReqID", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInvoice = new SqlParameter("@FromDate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramDateInput = new SqlParameter("@ToDate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);
                SqlParameter paramMedDeptType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramMedDeptType.Value = ConvertNullObjectToDBNull(V_MedProductType);

                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramMedDeptType);

                cn.Open();
                List<InwardDrugMedDeptInvoice> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetInwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override bool SupplierDrugDeptPaymentReqs_Save(SupplierDrugDeptPaymentReqs PaymentReqs, out long id)
        {
            bool results = false;
            id = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierDrugDeptPaymentReqs_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptSupplierPaymentReqID", SqlDbType.BigInt,
                                 PaymentReqs.DrugDeptSupplierPaymentReqID);
                cmd.AddParameter("@SequenceNum", SqlDbType.VarChar, ConvertNullObjectToDBNull(PaymentReqs.SequenceNum));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullToZero(PaymentReqs.SupplierID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, PaymentReqs.StaffID);
                cmd.AddParameter("@RequestedDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(PaymentReqs.RequestedDate));
                cmd.AddParameter("@SupplierInvDateFrom", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(PaymentReqs.SupplierInvDateFrom));
                cmd.AddParameter("@SupplierInvDateTo", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(PaymentReqs.SupplierInvDateTo));
                cmd.AddParameter("@V_PaymentMode", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PaymentReqs.V_PaymentMode));
                cmd.AddParameter("@SupplierAccountNum", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(PaymentReqs.SupplierAccountNum));
                cmd.AddParameter("@SupplierBank", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(PaymentReqs.SupplierBank));
                cmd.AddParameter("@V_PaymentReqStatus", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PaymentReqs.V_PaymentReqStatus));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PaymentReqs.V_MedProductType));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(PaymentReqs.ConvertDetailsListToXml()));
                SqlParameter paramid = new SqlParameter("@id", SqlDbType.BigInt);
                paramid.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramid);

                cn.Open();
                int count = ExecuteNonQuery(cmd);
                if (count > 0 && paramid.Value != DBNull.Value)
                {
                    id = (long)paramid.Value;
                }
                cmd.Dispose();
                return results;
            }
        }

        public override List<InwardDrugMedDeptInvoice> SupplierDrugDeptPaymentReqs_DetailsByReqID(
            long DrugDeptSupplierPaymentReqID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierDrugDeptPaymentReqDetails_ID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptSupplierPaymentReqID", SqlDbType.BigInt, DrugDeptSupplierPaymentReqID);
                cn.Open();
                List<InwardDrugMedDeptInvoice> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override SupplierDrugDeptPaymentReqs SupplierDrugDeptPaymentReqs_ID(long DrugDeptSupplierPaymentReqID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierDrugDeptPaymentReqs_ID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptSupplierPaymentReqID", SqlDbType.BigInt, DrugDeptSupplierPaymentReqID);
                cn.Open();
                SupplierDrugDeptPaymentReqs invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    invoicedrug = GetSupplierDrugDeptPaymentReqsFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<SupplierDrugDeptPaymentReqs> SupplierDrugDeptPaymentReqs_Search(
            RequestSearchCriteria Criteria, long? V_MedProductType, int PageSize, int PageIndex, bool bcount,
            out int TotalCount)
        {
            TotalCount = 0;
            if (Criteria == null)
            {
                return null;
            }
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierDrugDeptPaymentReqs_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramCode = new SqlParameter("@SequenceNum", SqlDbType.VarChar, 128);
                paramCode.Value = ConvertNullObjectToDBNull(Criteria.Code);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(Criteria.FromDate);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(Criteria.ToDate);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(Criteria.SupplierID);
                SqlParameter paramLookupID = new SqlParameter("@V_PaymentReqStatus", SqlDbType.BigInt);
                paramLookupID.Value = ConvertNullObjectToDBNull(Criteria.V_LookupID);

                SqlParameter paramMedProductType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramMedProductType.Value = ConvertNullObjectToDBNull(V_MedProductType);


                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = PageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = PageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bcount;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramCode);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramLookupID);
                cmd.Parameters.Add(paramMedProductType);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<SupplierDrugDeptPaymentReqs> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetSupplierDrugDeptPaymentReqsCollectionFromReader(reader);
                reader.Close();
                if (bcount && paramTotal.Value != DBNull.Value)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return drugs;
            }
        }

        public override bool SupplierDrugDeptPaymentReqs_UpdateStatus(long ID, long V_PaymentReqStatus, long? StaffID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierDrugDeptPaymentReqs_UpdateStatus", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptSupplierPaymentReqID", SqlDbType.BigInt, ID);
                cmd.AddParameter("@V_PaymentReqStatus", SqlDbType.BigInt, V_PaymentReqStatus);
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        public override bool SupplierDrugDeptPaymentReqs_Delete(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSupplierDrugDeptPaymentReqs_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptSupplierPaymentReqID", SqlDbType.BigInt, ID);
                cn.Open();
                int count = cmd.ExecuteNonQuery();
                return count > 0;
            }
        }

        #endregion

        #region 33. Hopital member

        public override List<Hospital> Hopital_IsFriends()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spHopital_IsFriend", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                List<Hospital> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetHospitalCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        #endregion

        //Nytest
        public override string NytestXML()
        {
            string xml = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spTest_XML", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                using (IDataReader idr = cmd.ExecuteReader())
                {
                    if (idr.Read())
                    {
                        xml = idr[0].ToString();
                    }
                    idr.Close();
                }
                return xml;
            }
        }

        //<Giá Nhà Thuốc>

        #region 34. Giá Bán Thuốc Của Nhà Thuốc PharmacySellingItemPrices

        public override List<RefGenericDrugDetail> RefGenericDrugDetailsAndPriceIsActive_Paging(
            DrugSearchCriteria criteria, int IsMedDept, int pageIndex, int pageSize, bool bCountTotal,
            out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenericDrugDetailsAndPriceIsActive_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramBrandName = new SqlParameter("@brandname", SqlDbType.NVarChar, 128);
                paramBrandName.Value = ConvertNullObjectToDBNull(criteria.BrandName);
                SqlParameter paramFaID = new SqlParameter("@faid", SqlDbType.BigInt);
                paramFaID.Value = ConvertNullObjectToDBNull(criteria.FaID);

                SqlParameter paramIsinsurance = new SqlParameter("@isinsurance", SqlDbType.TinyInt);
                paramIsinsurance.Value = criteria.IsInsurance;
                SqlParameter paramIsconsult = new SqlParameter("@isconsult", SqlDbType.TinyInt);
                paramIsconsult.Value = criteria.IsConsult;

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramIsMedDept = new SqlParameter("@IsMedDept", SqlDbType.TinyInt);
                paramIsMedDept.Value = ConvertNullObjectToDBNull(IsMedDept);

                cmd.Parameters.Add(paramBrandName);
                cmd.Parameters.Add(paramFaID);
                cmd.Parameters.Add(paramIsinsurance);
                cmd.Parameters.Add(paramIsconsult);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);
                cmd.Parameters.Add(paramIsMedDept);

                cn.Open();
                List<RefGenericDrugDetail> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetRefDrugGenericCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != DBNull.Value)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }

        }

        public override List<PharmacySellingItemPrices> PharmacySellingItemPrices_ByDrugID_Paging(
            PharmacySellingItemPricesSearchCriteria Criteria,

            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacySellingItemPrices_ByDrugID_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Criteria.DrugID));
                cmd.AddParameter("@PriceType", SqlDbType.Int, ConvertNullObjectToDBNull(Criteria.PriceType));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.ToDate));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<PharmacySellingItemPrices> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetPharmacySellingItemPricesColectionsFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }

        //KMx: Sau khi kiểm tra, thấy hàm này không cần dùng nữa. Mỗi lần xem lại bảng giá cũ, có bao nhiêu thuốc là về Database bấy nhiêu lần (31/05/2014 17:55).
        //public override void PharmacySellingItemPrices_CheckCanEditCanDelete(
        //    Int64 PharmacySellingItemPriceID,
        //    out bool CanEdit,
        //    out bool CanDelete,
        //    out string PriceType)
        //{
        //    using (SqlConnection cn = new SqlConnection(this.ConnectionString))
        //    {
        //        CanEdit = false;
        //        CanDelete = false;
        //        PriceType = "";

        //        SqlCommand cmd = new SqlCommand("spPharmacySellingItemPrices_CheckCanEditCanDelete", cn);
        //        cmd.CommandType = CommandType.StoredProcedure;

        //        cmd.AddParameter("@PharmacySellingItemPriceID", SqlDbType.BigInt, PharmacySellingItemPriceID);
        //        cmd.AddParameter("@CanEdit", SqlDbType.Bit, DBNull.Value, ParameterDirection.Output);
        //        cmd.AddParameter("@CanDelete", SqlDbType.Bit, DBNull.Value, ParameterDirection.Output);
        //        cmd.AddParameter("@PriceType", SqlDbType.NVarChar, 100, ParameterDirection.Output);

        //        cn.Open();

        //        ExecuteNonQuery(cmd);

        //        if (cmd.Parameters["@CanEdit"].Value != null)
        //            CanEdit = Convert.ToBoolean(cmd.Parameters["@CanEdit"].Value);
        //        if (cmd.Parameters["@CanDelete"].Value != null)
        //            CanDelete = Convert.ToBoolean(cmd.Parameters["@CanDelete"].Value);
        //        if (cmd.Parameters["@PriceType"].Value != null)
        //            PriceType = cmd.Parameters["@PriceType"].Value.ToString();
        //    }
        //}


        public override void PharmacySellingItemPrices_Save(PharmacySellingItemPrices Obj, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spPharmacySellingItemPrices_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PharmacySellingItemPriceID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Obj.PharmacySellingItemPriceID));
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.DrugID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.StaffID));
                cmd.AddParameter("@ApprovedStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.ApprovedStaffID));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.NormalPrice));
                cmd.AddParameter("@PriceForHIPatient", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.PriceForHIPatient));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.HIAllowedPrice));
                cmd.AddParameter("@EffectiveDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Obj.EffectiveDate));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }

        public override void PharmacySellingItemPrices_Item_Save(PharmacySellingItemPrices Obj, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spPharmacySellingItemPrices_Item_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PharmacySellingItemPriceID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Obj.PharmacySellingItemPriceID));
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.DrugID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.StaffID));
                cmd.AddParameter("@ApprovedStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.ApprovedStaffID));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.NormalPrice));
                cmd.AddParameter("@PriceForHIPatient", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.PriceForHIPatient));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.HIAllowedPrice));
                cmd.AddParameter("@EffectiveDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Obj.EffectiveDate));
                cmd.AddParameter("@StaffNotes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.StaffNotes));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }

        public override bool PharmacySellingItemPrices_SaveRow(PharmacySellingItemPrices Obj)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacySellingItemPrices_SaveRow", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PharmacySellingItemPriceID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Obj.PharmacySellingItemPriceID));
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.DrugID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.StaffID));
                cmd.AddParameter("@ApprovedStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.ApprovedStaffID));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.NormalPrice));
                cmd.AddParameter("@PriceForHIPatient", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.PriceForHIPatient));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.HIAllowedPrice));
                cmd.AddParameter("@EffectiveDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Obj.EffectiveDate));
                cn.Open();
                return ExecuteNonQuery(cmd) > 0;
            }
        }


        public override void PharmacySellingItemPrices_MarkDelete(Int64 PharmacySellingItemPriceID, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spPharmacySellingItemPrices_MarkDelete", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PharmacySellingItemPriceID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PharmacySellingItemPriceID));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }

        //KMx: Sau khi kiểm tra, thấy hàm này không còn sử dụng nữa (31/05/2014 17:18)
        //public override PharmacySellingItemPrices PharmacySellingItemPrices_ByPharmacySellingItemPriceID(
        //    Int64 PharmacySellingItemPriceID)
        //{
        //    using (SqlConnection cn = new SqlConnection(this.ConnectionString))
        //    {
        //        SqlCommand cmd = new SqlCommand("spPharmacySellingItemPrices_ByPharmacySellingItemPriceID", cn);
        //        cmd.CommandType = CommandType.StoredProcedure;

        //        SqlParameter paramDeptID = new SqlParameter("@PharmacySellingItemPriceID", SqlDbType.BigInt);
        //        paramDeptID.Value = PharmacySellingItemPriceID;

        //        cmd.Parameters.Add(paramDeptID);

        //        cn.Open();

        //        PharmacySellingItemPrices ObjPharmacySellingItemPrices = null;

        //        IDataReader reader = ExecuteReader(cmd);

        //        if (reader.Read())
        //        {
        //            ObjPharmacySellingItemPrices = GetPharmacySellingItemPricesFromReader(reader);
        //        }

        //        reader.Close();
        //        return ObjPharmacySellingItemPrices;
        //    }
        //}


        #endregion

        #region 35. Bảng Giá Bán Thuốc Của Nhà Thuốc PharmacySellingPriceList

        public override List<PharmacyReferenceItemPrice> PharmacyRefPriceList_AutoCreate()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                string Result = "";
                SqlCommand cmd = new SqlCommand("spPharmacyRefPriceList_AutoCreate", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 200, ParameterDirection.Output);

                cn.Open();

                List<PharmacyReferenceItemPrice> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetPharmacyReferenceItemPriceColectionsFromReader(reader);
                }
                reader.Close();

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();

                return lst;
            }
        }

        public override bool PharmacyRefPriceList_AddNew(PharmacyReferencePriceList Obj, out long ReferencePriceListID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                ReferencePriceListID = 0;
                SqlCommand cmd = new SqlCommand("spPharmacyRefPriceList_AddNew", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@Title", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.Title));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.CreatedStaff != null ? Obj.CreatedStaff.StaffID : 0));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Obj.ConvertRefItemPriceToXml()));

                SqlParameter outputID = new SqlParameter("@outputID", SqlDbType.BigInt);
                outputID.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(outputID);

                cn.Open();
                int count = cmd.ExecuteNonQuery();
                if (count != 0)
                {
                    if (outputID.Value != DBNull.Value)
                    {
                        ReferencePriceListID = Convert.ToInt64(outputID.Value);
                    }
                }
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool PharmacyRefPriceList_Update(PharmacyReferencePriceList Obj)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyRefPriceList_Update", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@ReferencePriceListID", SqlDbType.BigInt, Obj.ReferencePriceListID);
                cmd.AddParameter("@Title", SqlDbType.NVarChar, Obj.Title);
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.CreatedStaff != null ? Obj.CreatedStaff.StaffID : 0));

                cmd.AddParameter("@DataXML", SqlDbType.Xml,
                                  ConvertNullObjectToDBNull(Obj.ConvertRefItemPriceToXml()));

                cn.Open();
                int count = cmd.ExecuteNonQuery();
                cmd.Dispose();
                return count > 0;
            }
        }

        public override List<PharmacyReferencePriceList> GetReferencePriceList(PharmacySellingPriceListSearchCriteria SearchCriteria, int PageIndex, int PageSize, string OrderBy, bool CountTotal, out int Total)
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetReferencePriceList_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PriceListTitle", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.PriceListTitle));
                cmd.AddParameter("@Month", SqlDbType.Int, ConvertNullObjectToDBNull(SearchCriteria.Month));
                cmd.AddParameter("@Year", SqlDbType.Int, ConvertNullObjectToDBNull(SearchCriteria.Year));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<PharmacyReferencePriceList> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetPharmacyReferencePriceListColectionsFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }

        public override List<PharmacyReferenceItemPrice> GetPharmacyRefItemPrice(Int64 ReferencePriceListID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetPharmacyRefItemPrice", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@ReferencePriceListID", SqlDbType.BigInt, ConvertNullObjectToDBNull(ReferencePriceListID));

                cn.Open();

                List<PharmacyReferenceItemPrice> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetPharmacyReferenceItemPriceColectionsFromReader(reader);
                }
                reader.Close();

                return lst;
            }
        }


        public override void PharmacySellingPriceList_CheckCanAddNew(out bool CanAddNew)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                CanAddNew = false;

                SqlCommand cmd = new SqlCommand("spPharmacySellingPriceList_CheckCanAddNew", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@CanAddNew", SqlDbType.Bit, DBNull.Value, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@CanAddNew"].Value != null)
                    CanAddNew = Convert.ToBoolean(cmd.Parameters["@CanAddNew"].Value);
            }
        }

        public override List<PharmacySellingItemPrices> PharmacySellingPriceList_AutoCreate(out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spPharmacySellingPriceList_AutoCreate", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 200, ParameterDirection.Output);

                cn.Open();

                List<PharmacySellingItemPrices> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetPharmacySellingItemPricesColectionsFromReader(reader);
                }
                reader.Close();

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();

                return lst;
            }
        }

        public override List<PharmacySellingItemPrices> PharmacySellingPriceList_AutoCreate_V2(out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spPharmacySellingPriceList_AutoCreate_V2", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 200, ParameterDirection.Output);

                cn.Open();

                List<PharmacySellingItemPrices> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetPharmacySellingItemPricesColectionsFromReader(reader);
                }
                reader.Close();

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();

                return lst;
            }
        }

        public override void PharmacySellingPriceList_AddNew(PharmacySellingPriceList Obj, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spPharmacySellingPriceList_AddNew", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PriceListTitle", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.PriceListTitle));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.StaffID));
                cmd.AddParameter("@ApprovedStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.ApprovedStaffID));
                cmd.AddParameter("@EffectiveDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Obj.EffectiveDate));
                //cmd.AddParameter("@DataXML", SqlDbType.Xml,
                //                 ConvertNullObjectToDBNull(Obj.ConvertDetailsListToXml(Obj.ObjPharmacySellingItemPrices)));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 200, ParameterDirection.Output);
                cmd.AddParameter("@IDENTITY", SqlDbType.BigInt, 200, ParameterDirection.Output);
                cmd.AddParameter("@IsActive_Save", SqlDbType.Bit, sizeof(bool), ParameterDirection.Output);

                cmd.CommandTimeout = int.MaxValue;
                //SqlTransaction transaction;
                cn.Open();
                //transaction = cn.BeginTransaction();
                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
                long PharmacySellingPriceListID = 0;
                bool IsActive_Save = false;
                if (cmd.Parameters["@IDENTITY"].Value != null)
                    PharmacySellingPriceListID = (long)cmd.Parameters["@IDENTITY"].Value;
                if (cmd.Parameters["@IsActive_Save"].Value != null)
                    IsActive_Save = (bool)cmd.Parameters["@IsActive_Save"].Value;
                if (PharmacySellingPriceListID > 0)
                {
                    try
                    {
                        //chuyen qua table
                        DataTable multiData = new DataTable();
                        multiData = ConvertPharmacyDetailsListToDataTable(IsActive_Save, PharmacySellingPriceListID, Obj.EffectiveDate
                            , Obj.StaffID
                            , Obj.ApprovedStaffID
                            , Obj.ObjPharmacySellingItemPrices);
                        //bulkcopy data to DrugDeptSellingItemPrices
                        InsertViaSqlBulkCopyWithInternalTransaction(multiData, "PharmacySellingItemPrices");
                    }
                    catch (Exception ex)
                    {
                        AxLogger.Instance.LogError(ex);
                        throw new Exception(ex.Message);
                    }
                }
            }
        }
        public DataTable ConvertPharmacyDetailsListToDataTable(bool IsActive_Save, long PharmacySellingPriceListID
            , DateTime EffectiveDate
            , long StaffID
            , long? ApprovedStaffID
            , ObservableCollection<PharmacySellingItemPrices> ObjDrugDeptSellingItemPrices)
        {
            DataTable multiData = new DataTable();
            multiData.Columns.Add("PharmacySellingItemPriceID", Type.GetType("System.Int64"));
            multiData.Columns.Add("DrugID", Type.GetType("System.Int64"));
            multiData.Columns.Add("PharmacySellingPriceListID", Type.GetType("System.Int64"));
            multiData.Columns.Add("RecCreatedDate", Type.GetType("System.DateTime"));
            multiData.Columns.Add("StaffID", Type.GetType("System.Int64"));
            multiData.Columns.Add("ApprovedStaffID", Type.GetType("System.Int64"));
            //multiData.Columns.Add("InCost", Type.GetType("System.Double"));
            multiData.Columns.Add("NormalPrice", Type.GetType("System.Double"));
            multiData.Columns.Add("PriceForHIPatient", Type.GetType("System.Double"));
            multiData.Columns.Add("HIAllowedPrice", Type.GetType("System.Double"));
            multiData.Columns.Add("EffectiveDate", Type.GetType("System.DateTime"));
            multiData.Columns["EffectiveDate"].AllowDBNull = true;
            multiData.Columns.Add("EndDate", Type.GetType("System.DateTime"));
            multiData.Columns["EndDate"].AllowDBNull = true;
            multiData.Columns.Add("IsActive", Type.GetType("System.Boolean"));
            multiData.Columns.Add("IsDeleted", Type.GetType("System.Boolean"));
            multiData.Columns.Add("inviIDBefore", Type.GetType("System.Int64"));
            multiData.Columns.Add("inviID", Type.GetType("System.Int64"));
            multiData.Columns.Add("StaffNotes", Type.GetType("System.String"));
            multiData.Columns.Add("InCostBefore", Type.GetType("System.Double"));
            multiData.Columns.Add("InCost", Type.GetType("System.Double"));
            multiData.Columns.Add("InBuyingPrice", Type.GetType("System.Double"));
            multiData.Columns.Add("SupplierID", Type.GetType("System.Int64"));
            multiData.Columns.Add("ContractPriceBeforeVAT", Type.GetType("System.Double"));
            multiData.Columns.Add("ContractPriceAfterVAT", Type.GetType("System.Double"));
            multiData.Columns.Add("RefHIAllowedPrice", Type.GetType("System.Double"));

            foreach (var item in ObjDrugDeptSellingItemPrices)
            {

                DataRow dcRow = multiData.NewRow();

                dcRow["PharmacySellingPriceListID"] = ConvertNullObjectToDBNull(PharmacySellingPriceListID);
                dcRow["PharmacySellingItemPriceID"] = ConvertNullObjectToDBNull(item.PharmacySellingItemPriceID);
                dcRow["DrugID"] = item.DrugID;

                dcRow["StaffID"] = ConvertNullObjectToDBNull(item.StaffID);
                dcRow["ApprovedStaffID"] = ConvertNullObjectToDBNull(ApprovedStaffID);
                //dcRow["InCost"] =  item.InCost;
                dcRow["NormalPrice"] = item.NormalPrice;
                dcRow["PriceForHIPatient"] = item.PriceForHIPatient;
                dcRow["HIAllowedPrice"] = item.HIAllowedPrice;
                dcRow["EffectiveDate"] = EffectiveDate;//.ToString("MM-dd-yyyy HH:mm:ss");
                dcRow["RecCreatedDate"] = DateTime.Now;
                if (item.EndDate == null)
                {
                    dcRow["EndDate"] = DBNull.Value;
                }
                else
                {
                    dcRow["EndDate"] = item.EndDate;
                }

                dcRow["IsActive"] = IsActive_Save;
                dcRow["IsDeleted"] = item.IsDeleted;
                dcRow["inviIDBefore"] = item.inviIDBefore;
                dcRow["inviID"] = item.inviID;
                dcRow["StaffNotes"] = item.StaffNotes;
                dcRow["InCostBefore"] = item.InCostBefore;
                dcRow["InCost"] = item.InCost;
                dcRow["InBuyingPrice"] = item.InBuyingPrice;
                dcRow["SupplierID"] = item.Drug.SupplierMain == null ? 0:item.Drug.SupplierMain.SupplierID;
                dcRow["ContractPriceBeforeVAT"] = item.ContractPriceBeforeVAT;
                dcRow["ContractPriceAfterVAT"] = item.ContractPriceAfterVAT;
                dcRow["RefHIAllowedPrice"] = item.RefHIAllowedPrice;

                multiData.Rows.Add(dcRow);
                multiData.AcceptChanges();
            }
            return multiData;
        }
        public override Nullable<DateTime> PharmacySellingItemPrices_EffectiveDateMax()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacySellingItemPrices_EffectiveDateMax", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                //cmd.AddParameter("@RscrMaintLogID", SqlDbType.BigInt, RscrMaintLogID);

                cn.Open();

                DataTable dt = ExecuteDataTable(cmd);

                //if (dt != null && dt.Rows.Count > 0)
                //{
                try
                {
                    return Convert.ToDateTime(dt.Rows[0]["EffectiveDate"]);
                }
                catch
                {
                    return null;
                }
                //}
                //return null;
            }
        }

        public override List<PharmacySellingPriceList> PharmacySellingPriceList_GetList_Paging(
            PharmacySellingPriceListSearchCriteria SearchCriteria,

            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            , out DateTime curDate
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacySellingPriceList_GetList_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PriceListTitle", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.PriceListTitle));
                cmd.AddParameter("@Month", SqlDbType.Int, ConvertNullObjectToDBNull(SearchCriteria.Month));
                cmd.AddParameter("@Year", SqlDbType.Int, ConvertNullObjectToDBNull(SearchCriteria.Year));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<PharmacySellingPriceList> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetPharmacySellingPriceListColectionsFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                curDate = DateTime.Now;
                return lst;
            }
        }

        public override void PharmacySellingPriceList_Delete(Int64 PharmacySellingPriceListID, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spPharmacySellingPriceList_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PharmacySellingPriceListID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PharmacySellingPriceListID));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 200, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }


        public override List<PharmacySellingItemPrices> PharmacySellingPriceList_Detail(Int64 PharmacySellingPriceListID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacySellingPriceList_Detail", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PharmacySellingPriceListID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PharmacySellingPriceListID));

                cn.Open();

                List<PharmacySellingItemPrices> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetPharmacySellingItemPricesColectionsFromReader(reader);
                }
                reader.Close();

                return lst;
            }
        }

        public override List<PharmacySellingItemPrices> PharmacySellingPriceList_Detail_V2(Int64 PharmacySellingPriceListID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacySellingPriceList_Detail_V2", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PharmacySellingPriceListID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PharmacySellingPriceListID));

                cn.Open();

                List<PharmacySellingItemPrices> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetPharmacySellingItemPricesColectionsFromReader(reader);
                }
                reader.Close();

                return lst;
            }
        }


        public override void PharmacySellingPriceList_Update(PharmacySellingPriceList Obj, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd1 = new SqlCommand("spPharmacySellingPriceList_Update", cn);
                cmd1.CommandType = CommandType.StoredProcedure;
                cmd1.AddParameter("@PharmacySellingPriceListID", SqlDbType.BigInt, Obj.PharmacySellingPriceListID);
                cmd1.AddParameter("@PriceListTitle", SqlDbType.NVarChar, Obj.PriceListTitle);
                cmd1.AddParameter("@StaffID", SqlDbType.BigInt, Obj.StaffID);
                cmd1.AddParameter("@ApprovedStaffID", SqlDbType.BigInt, Obj.ApprovedStaffID);
                cmd1.AddParameter("@EffectiveDate", SqlDbType.DateTime, Obj.EffectiveDate);

                cmd1.AddParameter("@DataXML", SqlDbType.Xml,
                                  ConvertNullObjectToDBNull(Obj.ConvertDetailsListToXml(Obj.ObjPharmacySellingItemPrices)));

                cmd1.AddParameter("@Result", SqlDbType.NVarChar, 200, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd1);

                if (cmd1.Parameters["@Result"].Value != null)
                    Result = cmd1.Parameters["@Result"].Value.ToString();

            }

        }

        public override List<List<string>> ExportToExcelAllItemsPriceList(Int64 PriceListID, int PriceListType)
        {
            DataSet dsExportToExcelAll = new DataSet();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand();
                switch (PriceListType)
                {
                    case (int)AllLookupValues.PriceListType.BANG_GIA_THUOC:
                        cmd = new SqlCommand("spPharmacySellingPriceList_Detail_ExportToExcel", cn);
                        break;
                    case (int)AllLookupValues.PriceListType.BANG_GIA_DV:
                        cmd = new SqlCommand("spMedServicePriceList_Detail_ExportToExcel", cn);
                        break;
                    case (int)AllLookupValues.PriceListType.BANG_GIA_PCL:
                        cmd = new SqlCommand("spPCLExamTypePriceList_Detail_ExportToExcel", cn);
                        break;
                }

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PriceListID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PriceListID));

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsExportToExcelAll);
                List<List<string>> returnAllExcelData = new List<List<string>>();

                //Add the below 4 lines to add the column names to show on the Excel file
                List<string> colname = new List<string>();
                for (int i = 0; i <= dsExportToExcelAll.Tables[0].Columns.Count - 1; i++)
                {
                    colname.Add(dsExportToExcelAll.Tables[0].Columns[i].ToString().Trim());
                }

                returnAllExcelData.Add(colname);

                for (int i = 0; i <= dsExportToExcelAll.Tables[0].Rows.Count - 1; i++)
                {
                    List<string> rowData = new List<string>();
                    for (int j = 0; j <= dsExportToExcelAll.Tables[0].Columns.Count - 1; j++)
                    {
                        rowData.Add(Convert.ToString(dsExportToExcelAll.Tables[0].Rows[i][j]).Replace("<", "&lt;").Replace(">", "&gt;"));
                    }
                    returnAllExcelData.Add(rowData);
                }

                return returnAllExcelData;
            }
        }

        public override List<List<string>> ExportToExcelAllItemsPriceList_New(ReportParameters criteria)
        {
            DataSet dsExportToExcelAll = new DataSet();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand();
                switch (criteria.PriceList.PriceListType)
                {
                    case PriceListType.BANG_GIA_NHA_THUOC:
                        cmd = new SqlCommand("spPharmacySellingPriceList_Detail_ExportToExcel", cn);
                        break;
                    case PriceListType.BANG_GIA_DV:
                        cmd = new SqlCommand("spMedServicePriceList_Detail_ExportToExcel", cn);
                        break;
                    case PriceListType.BANG_GIA_PCL:
                        cmd = new SqlCommand("spPCLExamTypePriceList_Detail_ExportToExcel", cn);
                        break;
                    case PriceListType.BANG_GIA_KHOA_DUOC:
                        cmd = new SqlCommand("spDrugDeptSellingPriceList_Detail_ExportToExcel", cn);
                        break;
                }

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PriceListID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(criteria.PriceList.PriceListID));

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsExportToExcelAll);
                List<List<string>> returnAllExcelData = new List<List<string>>();

                //Add the below 4 lines to add the column names to show on the Excel file
                List<string> colname = new List<string>();
                for (int i = 0; i <= dsExportToExcelAll.Tables[0].Columns.Count - 1; i++)
                {
                    colname.Add(dsExportToExcelAll.Tables[0].Columns[i].ToString().Trim());
                }

                returnAllExcelData.Add(colname);

                for (int i = 0; i <= dsExportToExcelAll.Tables[0].Rows.Count - 1; i++)
                {
                    List<string> rowData = new List<string>();
                    for (int j = 0; j <= dsExportToExcelAll.Tables[0].Columns.Count - 1; j++)
                    {
                        rowData.Add(Convert.ToString(dsExportToExcelAll.Tables[0].Rows[i][j]).Replace("<", "&lt;").Replace(">", "&gt;"));
                    }
                    returnAllExcelData.Add(rowData);
                }

                return returnAllExcelData;
            }
        }


        #endregion

        #region 36. Thang Giá Bán Thuốc Của Nhà Thuốc PharmacySellPriceProfitScale

        public override IList<PharmacySellPriceProfitScale> PharmacySellPriceProfitScale_GetList_Paging(
            bool IsActive,

            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacySellPriceProfitScale_GetList_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@IsActive", SqlDbType.Bit, IsActive);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<PharmacySellPriceProfitScale> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetPharmacySellPriceProfitScaleColectionFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }


        public override void PharmacySellPriceProfitScale_AddEdit(PharmacySellPriceProfitScale Obj, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spPharmacySellPriceProfitScale_AddEdit", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PharmacySellPriceProfitScaleID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Obj.PharmacySellPriceProfitScaleID));
                cmd.AddParameter("@BuyingCostFrom", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.BuyingCostFrom));
                cmd.AddParameter("@BuyingCostTo", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.BuyingCostTo));
                cmd.AddParameter("@NormalProfitPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(Obj.NormalProfitPercent));
                cmd.AddParameter("@HIAllowProfitPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(Obj.HIAllowProfitPercent));
                cmd.AddParameter("@IsActive", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsActive));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }


        public override void PharmacySellPriceProfitScale_IsActive(Int64 PharmacySellPriceProfitScaleID,
                                                                   Boolean IsActive, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spPharmacySellPriceProfitScale_IsActive", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@PharmacySellPriceProfitScaleID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(PharmacySellPriceProfitScaleID));
                cmd.AddParameter("@IsActive", SqlDbType.Bit, ConvertNullObjectToDBNull(IsActive));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }


        #endregion

        //</Giá Nhà Thuốc>

        #region 37. RefGenDrugBHYT_Category

        public override List<RefGenDrugBHYT_Category> RefGenDrugBHYT_Category_Load(bool? IsClassification, bool? IsCombined)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenDrugBHYT_Category_Load", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsClassication", SqlDbType.Bit, ConvertNullObjectToDBNull(IsClassification));
                cmd.AddParameter("@IsCombined", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCombined));
                cn.Open();
                List<RefGenDrugBHYT_Category> lst = null;
                IDataReader reader = ExecuteReader(cmd);
                lst = GetRefGenDrugBHYT_CategoryCollectionFromReader(reader);
                reader.Close();
                return lst;
            }
        }


        public override bool Combine_RefGenDrugBHYT_Category(string CategoryCheckedListXml, out List<RefGenDrugBHYT_Category> RefGenDrugBHYT_Category_Out)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spCombine_RefGenDrugBHYT_Category", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@CategoryCheckedListXml", SqlDbType.Xml, ConvertNullObjectToDBNull(CategoryCheckedListXml));
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);

                    RefGenDrugBHYT_Category_Out = null;
                    if (count > 0)
                    {
                        RefGenDrugBHYT_Category_Out = RefGenDrugBHYT_Category_Load(false, true);
                    }
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        public override bool DeleteRefGenDrugBHYT_CategoryCombine(long RefGenDrugBHYT_CatID, out List<RefGenDrugBHYT_Category> RefGenDrugBHYT_Category_Out)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spDeleteRefGenDrugBHYT_CategoryCombine", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@RefGenDrugBHYT_CatID", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugBHYT_CatID));
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);

                    RefGenDrugBHYT_Category_Out = null;
                    if (count > 0)
                    {
                        RefGenDrugBHYT_Category_Out = RefGenDrugBHYT_Category_Load(false, true);
                    }
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        #endregion

        //<Giá Khoa Dược>

        #region 38. Giá Bán Thuốc Của Nhà Thuốc DrugDeptSellingItemPrices

        public override List<DrugDeptSellingItemPrices> DrugDeptSellingItemPrices_ByDrugID_Paging(
            DrugDeptSellingItemPricesSearchCriteria Criteria,

            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptSellingItemPrices_ByDrugID_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Criteria.GenMedProductID));
                cmd.AddParameter("@PriceType", SqlDbType.Int, ConvertNullObjectToDBNull(Criteria.PriceType));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Criteria.ToDate));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<DrugDeptSellingItemPrices> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetDrugDeptSellingItemPricesColectionsFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }

        //KMx: Sau khi kiểm tra, thấy hàm này không cần dùng nữa. Mỗi lần xem lại bảng giá cũ, có bao nhiêu thuốc là về Database bấy nhiêu lần (22/06/2014 16:08).
        //public override void DrugDeptSellingItemPrices_CheckCanEditCanDelete(
        //    Int64 DrugDeptSellingItemPriceID,
        //    out bool CanEdit,
        //    out bool CanDelete,
        //    out string PriceType)
        //{
        //    using (SqlConnection cn = new SqlConnection(this.ConnectionString))
        //    {
        //        CanEdit = false;
        //        CanDelete = false;
        //        PriceType = "";

        //        SqlCommand cmd = new SqlCommand("spDrugDeptSellingItemPrices_CheckCanEditCanDelete", cn);
        //        cmd.CommandType = CommandType.StoredProcedure;

        //        cmd.AddParameter("@DrugDeptSellingItemPriceID", SqlDbType.BigInt, DrugDeptSellingItemPriceID);
        //        cmd.AddParameter("@CanEdit", SqlDbType.Bit, DBNull.Value, ParameterDirection.Output);
        //        cmd.AddParameter("@CanDelete", SqlDbType.Bit, DBNull.Value, ParameterDirection.Output);
        //        cmd.AddParameter("@PriceType", SqlDbType.NVarChar, 100, ParameterDirection.Output);

        //        cn.Open();

        //        ExecuteNonQuery(cmd);

        //        if (cmd.Parameters["@CanEdit"].Value != null)
        //            CanEdit = Convert.ToBoolean(cmd.Parameters["@CanEdit"].Value);
        //        if (cmd.Parameters["@CanDelete"].Value != null)
        //            CanDelete = Convert.ToBoolean(cmd.Parameters["@CanDelete"].Value);
        //        if (cmd.Parameters["@PriceType"].Value != null)
        //            PriceType = cmd.Parameters["@PriceType"].Value.ToString();
        //    }
        //}


        public override void DrugDeptSellingItemPrices_Save(DrugDeptSellingItemPrices Obj, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spDrugDeptSellingItemPrices_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@DrugDeptSellingItemPriceID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Obj.DrugDeptSellingItemPriceID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.GenMedProductID));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.StaffID));
                cmd.AddParameter("@ApprovedStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.ApprovedStaffID));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.NormalPrice));
                cmd.AddParameter("@PriceForHIPatient", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.PriceForHIPatient));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.HIAllowedPrice));
                cmd.AddParameter("@EffectiveDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Obj.EffectiveDate));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }


        public override void DrugDeptSellingItemPrices_MarkDelete(Int64 DrugDeptSellingItemPriceID, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spDrugDeptSellingItemPrices_MarkDelete", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@DrugDeptSellingItemPriceID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(DrugDeptSellingItemPriceID));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }

        public override DrugDeptSellingItemPrices DrugDeptSellingItemPrices_ByDrugDeptSellingItemPriceID(
            Int64 DrugDeptSellingItemPriceID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptSellingItemPrices_ByDrugDeptSellingItemPriceID", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramDeptID = new SqlParameter("@DrugDeptSellingItemPriceID", SqlDbType.BigInt);
                paramDeptID.Value = DrugDeptSellingItemPriceID;

                cmd.Parameters.Add(paramDeptID);

                cn.Open();

                DrugDeptSellingItemPrices ObjDrugDeptSellingItemPrices = null;

                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    ObjDrugDeptSellingItemPrices = GetDrugDeptSellingItemPricesFromReader(reader);
                }

                reader.Close();
                return ObjDrugDeptSellingItemPrices;
            }
        }


        #endregion

        #region 39. Bảng Giá Thuốc Khoa Dược DrugDeptSellingPriceList

        public override void DrugDeptSellingPriceList_CheckCanAddNew(out bool CanAddNew)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                CanAddNew = false;

                SqlCommand cmd = new SqlCommand("spDrugDeptSellingPriceList_CheckCanAddNew", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@CanAddNew", SqlDbType.Bit, DBNull.Value, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@CanAddNew"].Value != null)
                    CanAddNew = Convert.ToBoolean(cmd.Parameters["@CanAddNew"].Value);
            }
        }

        public override List<DrugDeptSellingItemPrices> DrugDeptSellingPriceList_AutoCreate(long V_MedProductType,
                                                                                            out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spDrugDeptSellingPriceList_AutoCreate", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 200, ParameterDirection.Output);

                cn.Open();

                List<DrugDeptSellingItemPrices> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetDrugDeptSellingItemPricesColectionsFromReader(reader);
                }
                reader.Close();

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();

                return lst;
            }
        }

        public override void DrugDeptSellingPriceList_AddNew(DrugDeptSellingPriceList Obj, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";
                SqlCommand cmd = new SqlCommand("spDrugDeptSellingPriceList_AddNew", cn);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.V_MedProductType));
                cmd.AddParameter("@PriceListTitle", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Obj.PriceListTitle));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.StaffID));
                cmd.AddParameter("@ApprovedStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.ApprovedStaffID));
                cmd.AddParameter("@EffectiveDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Obj.EffectiveDate));
                //khong can cai XML nay nua,nen ko can phai dua truyen vao chi cho nang
                //cmd.AddParameter("@DataXML", SqlDbType.Xml,
                //                 ConvertNullObjectToDBNull(Obj.ConvertDetailsListToXml(Obj.ObjDrugDeptSellingItemPrices)));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 200, ParameterDirection.Output);
                cmd.AddParameter("@IDENTITY", SqlDbType.BigInt, 200, ParameterDirection.Output);
                cmd.AddParameter("@IsActive_Save", SqlDbType.Bit, sizeof(bool), ParameterDirection.Output);

                cmd.CommandTimeout = 999999999;
                //SqlTransaction transaction;
                cn.Open();
                //transaction = cn.BeginTransaction();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
                long DrugDeptSellingPriceListID = 0;
                bool IsActive_Save = false;
                if (cmd.Parameters["@IDENTITY"].Value != null)
                    DrugDeptSellingPriceListID = (long)cmd.Parameters["@IDENTITY"].Value;
                if (cmd.Parameters["@IsActive_Save"].Value != null)
                    IsActive_Save = (bool)cmd.Parameters["@IsActive_Save"].Value;
                if (DrugDeptSellingPriceListID > 0)
                {
                    try
                    {
                        //chuyen qua table
                        DataTable multiData = new DataTable();
                        multiData = ConvertDetailsListToDataTable(IsActive_Save, DrugDeptSellingPriceListID, Obj.EffectiveDate
                            , Obj.StaffID
                            , Obj.ApprovedStaffID
                            , Obj.ObjDrugDeptSellingItemPrices);
                        //bulkcopy data to DrugDeptSellingItemPrices
                        InsertViaSqlBulkCopyWithInternalTransaction(multiData, "DrugDeptSellingItemPrices");
                    }
                    catch (Exception ex)
                    {
                        AxLogger.Instance.LogError(ex);
                    }
                }
            }
        }
        public DataTable ConvertDetailsListToDataTable(bool IsActive_Save, long DrugDeptSellingPriceListID
            , DateTime EffectiveDate
            , long StaffID
            , long? ApprovedStaffID
            , ObservableCollection<DrugDeptSellingItemPrices> ObjDrugDeptSellingItemPrices)
        {
            DataTable multiData = new DataTable();
            multiData.Columns.Add("DrugDeptSellingItemPriceID", Type.GetType("System.Int64"));
            multiData.Columns.Add("GenMedProductID", Type.GetType("System.Int64"));
            multiData.Columns.Add("DrugDeptSellingPriceListID", Type.GetType("System.Int64"));
            multiData.Columns.Add("RecCreatedDate", Type.GetType("System.DateTime"));
            //multiData.Columns["RecCreatedDate"].AllowDBNull = true;
            multiData.Columns.Add("StaffID", Type.GetType("System.Int64"));
            multiData.Columns.Add("ApprovedStaffID", Type.GetType("System.Int64"));
            multiData.Columns.Add("NormalPrice", Type.GetType("System.Double"));
            multiData.Columns.Add("PriceForHIPatient", Type.GetType("System.Double"));
            multiData.Columns.Add("HIAllowedPrice", Type.GetType("System.Double"));
            multiData.Columns.Add("EffectiveDate", Type.GetType("System.DateTime"));
            multiData.Columns["EffectiveDate"].AllowDBNull = true;
            multiData.Columns.Add("EndDate", Type.GetType("System.DateTime"));
            multiData.Columns["EndDate"].AllowDBNull = true;
            multiData.Columns.Add("IsActive", Type.GetType("System.Boolean"));
            multiData.Columns.Add("IsDeleted", Type.GetType("System.Boolean"));
            multiData.Columns.Add("inviIDBefore", Type.GetType("System.Int64"));
            multiData.Columns.Add("inviID", Type.GetType("System.Int64"));
            multiData.Columns.Add("StaffNotes", Type.GetType("System.String"));
            multiData.Columns.Add("InCostBefore", Type.GetType("System.Double"));
            multiData.Columns.Add("InCost", Type.GetType("System.Double"));

            foreach (var item in ObjDrugDeptSellingItemPrices)
            {

                DataRow dcRow = multiData.NewRow();

                dcRow["DrugDeptSellingPriceListID"] = DrugDeptSellingPriceListID;
                dcRow["DrugDeptSellingItemPriceID"] = item.DrugDeptSellingItemPriceID;
                dcRow["GenMedProductID"] = item.GenMedProductID;

                dcRow["StaffID"] = item.StaffID;
                dcRow["ApprovedStaffID"] = ApprovedStaffID;
                //dcRow["InCost"] =  item.InCost;
                dcRow["NormalPrice"] = item.NormalPrice;
                dcRow["PriceForHIPatient"] = item.PriceForHIPatient;
                dcRow["HIAllowedPrice"] = item.HIAllowedPrice;
                dcRow["EffectiveDate"] = EffectiveDate;//.ToString("MM-dd-yyyy HH:mm:ss");
                dcRow["RecCreatedDate"] = DateTime.Now;
                if (item.EndDate == null)
                {
                    dcRow["EndDate"] = DBNull.Value;
                }
                else
                {
                    dcRow["EndDate"] = item.EndDate;
                }

                dcRow["IsActive"] = IsActive_Save;
                dcRow["IsDeleted"] = item.IsDeleted;
                dcRow["inviIDBefore"] = item.inviIDBefore;
                dcRow["inviID"] = item.inviID;
                dcRow["StaffNotes"] = item.StaffNotes;
                dcRow["InCostBefore"] = item.InCostBefore;
                dcRow["InCost"] = item.InCost;


                multiData.Rows.Add(dcRow);
                multiData.AcceptChanges();
            }
            return multiData;
        }
        private bool InsertViaSqlBulkCopyWithInternalTransaction(DataTable excelData, string TableName)
        {
            bool Res = true;
            SqlConnection oledbConn = new SqlConnection(ConnectionString);
            oledbConn.Open();
            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.UseInternalTransaction))
            {
                bulkCopy.DestinationTableName = TableName;

                //Define column mappings
                foreach (DataColumn col in excelData.Columns)
                {
                    bulkCopy.ColumnMappings.Add(col.ColumnName, col.ColumnName);
                }

                //When using an internal transaction, a new transaction is created for each BatchSize number of records.
                //(If BatchSize = 0 (the default) then the entire bulk operation occurs under a single transaction)
                //bulkCopy.BatchSize = 100

                try
                {
                    bulkCopy.WriteToServer(excelData);
                }
                catch (Exception ex)
                {
                    AxLogger.Instance.LogError(ex);
                    Res = false;
                    throw new Exception(ex.Message);
                }
            }
            oledbConn.Close();
            return Res;
        }

        public override Nullable<DateTime> DrugDeptSellingItemPrices_EffectiveDateMax()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptSellingItemPrices_EffectiveDateMax", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                //cmd.AddParameter("@RscrMaintLogID", SqlDbType.BigInt, RscrMaintLogID);

                cn.Open();

                DataTable dt = ExecuteDataTable(cmd);

                //if (dt != null && dt.Rows.Count > 0)
                //{
                try
                {
                    return Convert.ToDateTime(dt.Rows[0]["EffectiveDate"]);
                }
                catch
                {
                    return null;
                }
                //}
                //return null;
            }
        }

        public override List<DrugDeptSellingPriceList> DrugDeptSellingPriceList_GetList_Paging(
            DrugDeptSellingPriceListSearchCriteria SearchCriteria,

            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            , out DateTime curDate
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptSellingPriceList_GetList_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(SearchCriteria.V_MedProductType));
                cmd.AddParameter("@PriceListTitle", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(SearchCriteria.PriceListTitle));
                cmd.AddParameter("@Month", SqlDbType.Int, ConvertNullObjectToDBNull(SearchCriteria.Month));
                cmd.AddParameter("@Year", SqlDbType.Int, ConvertNullObjectToDBNull(SearchCriteria.Year));

                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<DrugDeptSellingPriceList> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetDrugDeptSellingPriceListColectionsFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                curDate = DateTime.Now;
                return lst;
            }
        }

        public override void DrugDeptSellingPriceList_Delete(Int64 DrugDeptSellingPriceListID, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spDrugDeptSellingPriceList_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@DrugDeptSellingPriceListID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(DrugDeptSellingPriceListID));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 200, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }


        public override List<DrugDeptSellingItemPrices> DrugDeptSellingPriceList_Detail(Int64 DrugDeptSellingPriceListID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptSellingPriceList_Detail", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@DrugDeptSellingPriceListID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(DrugDeptSellingPriceListID));

                cn.Open();

                List<DrugDeptSellingItemPrices> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetDrugDeptSellingItemPricesColectionsFromReader(reader);
                }
                reader.Close();

                return lst;
            }
        }


        public override void DrugDeptSellingPriceList_Update(DrugDeptSellingPriceList Obj, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd1 = new SqlCommand("spDrugDeptSellingPriceList_Update", cn);
                cmd1.CommandType = CommandType.StoredProcedure;
                cmd1.AddParameter("@DrugDeptSellingPriceListID", SqlDbType.BigInt, Obj.DrugDeptSellingPriceListID);
                cmd1.AddParameter("@PriceListTitle", SqlDbType.NVarChar, Obj.PriceListTitle);
                cmd1.AddParameter("@StaffID", SqlDbType.BigInt, Obj.StaffID);
                cmd1.AddParameter("@ApprovedStaffID", SqlDbType.BigInt, Obj.ApprovedStaffID);
                cmd1.AddParameter("@EffectiveDate", SqlDbType.DateTime, Obj.EffectiveDate);

                cmd1.AddParameter("@DataXML", SqlDbType.Xml,
                                  ConvertNullObjectToDBNull(Obj.ConvertDetailsListToXml(Obj.ObjDrugDeptSellingItemPrices)));

                cmd1.AddParameter("@Result", SqlDbType.NVarChar, 200, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd1);

                if (cmd1.Parameters["@Result"].Value != null)
                    Result = cmd1.Parameters["@Result"].Value.ToString();

            }

        }

        #endregion

        #region "40. Thang Giá Bán Của Khoa Dược DrugDeptSellPriceProfitScale"

        public override IList<DrugDeptSellPriceProfitScale> DrugDeptSellPriceProfitScale_GetList_Paging(
            long V_MedProductType,
            bool IsActive,
            int PageIndex,
            int PageSize,
            string OrderBy,
            bool CountTotal,
            out int Total
            )
        {
            Total = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptSellPriceProfitScale_GetList_Paging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cmd.AddParameter("@IsActive", SqlDbType.Bit, IsActive);
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@OrderBy", SqlDbType.NVarChar, "");
                cmd.AddParameter("@CountTotal", SqlDbType.Bit, CountTotal);
                cmd.AddParameter("@Total", SqlDbType.Int, DBNull.Value, ParameterDirection.Output);

                cn.Open();
                List<DrugDeptSellPriceProfitScale> lst = null;

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetDrugDeptSellPriceProfitScaleColectionFromReader(reader);
                }
                reader.Close();

                if (CountTotal && cmd.Parameters["@Total"].Value != null)
                {
                    Total = (int)cmd.Parameters["@Total"].Value;
                }
                else
                    Total = -1;
                return lst;
            }
        }


        public override void DrugDeptSellPriceProfitScale_AddEdit(DrugDeptSellPriceProfitScale Obj, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spDrugDeptSellPriceProfitScale_AddEdit", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@DrugDeptSellPriceProfitScaleID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Obj.DrugDeptSellPriceProfitScaleID));
                cmd.AddParameter("@BuyingCostFrom", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.BuyingCostFrom));
                cmd.AddParameter("@BuyingCostTo", SqlDbType.Money, ConvertNullObjectToDBNull(Obj.BuyingCostTo));
                cmd.AddParameter("@NormalProfitPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(Obj.NormalProfitPercent));
                cmd.AddParameter("@HIAllowProfitPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(Obj.HIAllowProfitPercent));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Obj.V_MedProductType));
                cmd.AddParameter("@IsActive", SqlDbType.Bit, ConvertNullObjectToDBNull(Obj.IsActive));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }


        public override void DrugDeptSellPriceProfitScale_IsActive(Int64 DrugDeptSellPriceProfitScaleID,
                                                                   Boolean IsActive, out string Result)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                Result = "";

                SqlCommand cmd = new SqlCommand("spDrugDeptSellPriceProfitScale_IsActive", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@DrugDeptSellPriceProfitScaleID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(DrugDeptSellPriceProfitScaleID));
                cmd.AddParameter("@IsActive", SqlDbType.Bit, ConvertNullObjectToDBNull(IsActive));

                cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                cn.Open();

                ExecuteNonQuery(cmd);

                if (cmd.Parameters["@Result"].Value != null)
                    Result = cmd.Parameters["@Result"].Value.ToString();
            }
        }

        #endregion

        //</Giá Khoa Dược>

        #region 39.CostTableForMedDeptInvoice Member

        public override bool CostTableMedDept_Insert(CostTableMedDept Item, out long CoID, out string StrCoNumber)
        {
            bool results = false;
            CoID = 0;
            StrCoNumber = "";
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spCostTableMedDept_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@CoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Item.CoID));
                cmd.AddParameter("@CoNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(Item.CoNumber));
                cmd.AddParameter("@InvoiceNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(Item.InvoiceNumber));
                cmd.AddParameter("@InvoiceDate", SqlDbType.DateTime, ConvertNullToZero(Item.InvoiceDate));
                cmd.AddParameter("@VAT", SqlDbType.Float, Item.VAT);
                cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Item.CurrencyID));
                cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(Item.ExchangeRates));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Item.SupplierID));
                cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Item.Notes));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Item.StaffID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(Item.V_MedProductType));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Item.ConvertDetailsListToXml()));
                cmd.AddParameter("@XMLInvoice", SqlDbType.Xml,
                                 ConvertNullObjectToDBNull(Item.ConvertDetailsListToXmlInvoice()));
                SqlParameter paramid = new SqlParameter("@id", SqlDbType.BigInt);
                paramid.Direction = ParameterDirection.Output;
                SqlParameter paramStrCoNumber = new SqlParameter("@StrCoNumber", SqlDbType.VarChar, 50);
                paramStrCoNumber.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramid);
                cmd.Parameters.Add(paramStrCoNumber);
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                if (count > 0 && paramid.Value != DBNull.Value)
                {
                    CoID = (long)paramid.Value;
                    StrCoNumber = paramStrCoNumber.Value.ToString();
                }
                cmd.Dispose();
                return results;
            }
        }

        public override IList<CostTableMedDept> CostTableMedDept_Search(InwardInvoiceSearchCriteria criteria,
                                                                        long? V_MedProductType, int pageIndex,
                                                                        int pageSize, bool bCountTotal,
                                                                        out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spCostTableMedDept_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramInwardID = new SqlParameter("@CoNumber", SqlDbType.VarChar, 128);
                paramInwardID.Value = ConvertNullObjectToDBNull(criteria.InwardID);
                SqlParameter paramInvoiveNumber = new SqlParameter("@InvoiceNumber", SqlDbType.VarChar, 128);
                paramInvoiveNumber.Value = ConvertNullObjectToDBNull(criteria.InvoiceNumber);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);
                SqlParameter paramMedProductType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramMedProductType.Value = ConvertNullObjectToDBNull(V_MedProductType);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramInwardID);
                cmd.Parameters.Add(paramInvoiveNumber);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramMedProductType);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                IList<CostTableMedDept> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetCostTableMedDeptCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != DBNull.Value)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        public override IList<CostTableMedDeptList> CostTableMedDeptList_ByID(long CoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spCostTableMedDeptList_ByCoID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@CoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(CoID));
                cn.Open();
                List<CostTableMedDeptList> invoicedrug = new List<CostTableMedDeptList>();
                using (IDataReader reader = cmd.ExecuteReader())
                {
                    invoicedrug = GetCostTableMedDeptListCollectionFromReader(reader);
                }

                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDeptInvoice> CostTableForMedDeptInvoice_ByCoID(long CoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spCostTableForMedDeptInvoice_CoListID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@CoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(CoID));
                cn.Open();
                List<InwardDrugMedDeptInvoice> invoicedrug = null;
                using (IDataReader reader = cmd.ExecuteReader())
                {
                    invoicedrug = GetInwardDrugMedDeptInvoiceCollectionFromReader(reader);
                }

                return invoicedrug;
            }
        }

        public override IList<CostTableMedDeptList> InwardDrugMedDeptInvoice_GetListCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugMedDeptInvoice_GetListCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                List<CostTableMedDeptList> invoicedrug = new List<CostTableMedDeptList>();
                using (IDataReader reader = cmd.ExecuteReader())
                {
                    invoicedrug = GetCostTableMedDeptListCollectionFromReader(reader);
                }
                return invoicedrug;
            }
        }

        #endregion

        #region 40. Return MedDept Member

        public override bool OutWardDrugMedDeptInvoiceReturn_Insert(OutwardDrugMedDeptInvoice InvoiceDrug,
                                                                    out long outwardid)
        {
            try
            {
                outwardid = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spOutwardDrugMedDeptInvoicesReturn_InsertVisitor", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(InvoiceDrug.StoreID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@ReturnID", SqlDbType.BigInt, InvoiceDrug.outiID);
                    cmd.AddParameter("@FullName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.FullName));
                    cmd.AddParameter("@NumberPhone", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.NumberPhone));
                    cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Address));
                    cmd.AddParameter("@V_OutputTo", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.V_OutputTo));
                    cmd.AddParameter("@OutputToID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.OutputToID));
                    cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(InvoiceDrug.V_OutDrugInvStatus));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));
                    cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(InvoiceDrug.RefGenDrugCatID_1));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));

                    cmd.AddParameter("@OutDate", SqlDbType.DateTime,
                                    ConvertNullObjectToDBNull(null));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime, ConvertNullObjectToDBNull(null));

                    cmd.AddParameter("@Amount", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalInvoicePrice));
                    cmd.AddParameter("@AmountCoPay", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalCoPayment));
                    cmd.AddParameter("@HealthInsuranceRebate", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalHIPayment));
                    cmd.AddParameter("@PriceDifference", SqlDbType.Money, ConvertNullToZero(InvoiceDrug.TotalPriceDifference));
                    cmd.AddParameter("@Qty", SqlDbType.Float, 1);
                    cmd.AddParameter("@TranRefID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                    cmd.AddParameter("@V_TranRefType", SqlDbType.BigInt, ConvertNullObjectToDBNull((long)AllLookupValues.V_TranRefType.DRUG_NOITRU_KHODUOC));
                    cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.PtRegistrationID));

                    cmd.AddParameter("@XML", SqlDbType.Xml, InvoiceDrug.ConvertDetailsListToXml());
                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramID);
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    cmd.Dispose();
                    cmd = null;
                    if (paramID.Value != DBNull.Value)
                    {
                        outwardid = (long)paramID.Value;
                    }
                    else
                    {
                        outwardid = -1;
                    }
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }


        #endregion

        #region "41 Rpt Khoa Dược Xuất Đến khoa phòng"

        public override DataTable OutwardDrugMedDeptInvoices_ListOutToKhoKhoaPhong(long V_MedProductType,
                                                                                   DateTime FromDate, DateTime ToDate,
                                                                                   long StoreID, long? StoreClinicID, bool? IsShowHave)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {

                SqlCommand cmd = new SqlCommand("spOutwardDrugMedDeptInvoices_ListOutToKhoKhoaPhong", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = int.MaxValue;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(ToDate));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@StoreIDClinic", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreClinicID));
                cmd.AddParameter("@IsShowHave", SqlDbType.Bit, ConvertNullObjectToDBNull(IsShowHave));
                cn.Open();

                DataTable dt = ExecuteDataTable(cmd);
                return dt;
            }
        }

        public override DataTable OutwardDrugMedDeptInvoices_ListGenMedProductIDNhap_Ton(long V_MedProductType,
                                                                                         DateTime FromDate,
                                                                                         DateTime ToDate, long StoreID, bool? IsShowHaveMedProduct)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {

                SqlCommand cmd = new SqlCommand("spRpt_DrugDept_InOutStocks", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = int.MaxValue;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@datebegin", SqlDbType.DateTime, ConvertNullObjectToDBNull(FromDate));
                cmd.AddParameter("@dateend", SqlDbType.DateTime, ConvertNullObjectToDBNull(ToDate));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@IsShowHaveMedProduct", SqlDbType.Bit, ConvertNullObjectToDBNull(IsShowHaveMedProduct));
                cn.Open();

                DataTable dt = ExecuteDataTable(cmd);
                return dt;
            }
        }


        public string ConvertOutputToIDToXml(List<long> items)
        {
            if (items != null)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<OutputToIDList>");
                foreach (long details in items)
                {
                    sb.Append("<RecInfo>");
                    sb.AppendFormat("<OutputToID>{0}</OutputToID>", details);
                    sb.Append("</RecInfo>");
                }
                sb.Append("</OutputToIDList>");
                return sb.ToString();
            }
            else
            {
                return null;
            }
        }

        public override DataTable OutwardDrugMedDept_OutToClinicDept(long V_MedProductType, DateTime FromDate, DateTime ToDate, long StoreID, List<long> OutputToID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {

                SqlCommand cmd = new SqlCommand("spOutwardDrugMedDept_OutToClinicDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = int.MaxValue;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(ToDate));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@OutputToID_XML", SqlDbType.Xml, ConvertNullObjectToDBNull(ConvertOutputToIDToXml(OutputToID)));
                cn.Open();

                DataTable dt = ExecuteDataTable(cmd);
                return dt;
            }
        }

        public override double SLXuatByOutputToID(long V_MedProductType, DateTime FromDate, DateTime ToDate,
                                                  long StoreID, long OutputToID, long GenMedProductID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugMedDept_QtyByOutputToID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = int.MaxValue;
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(ToDate));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@OutputToID", SqlDbType.BigInt, ConvertNullObjectToDBNull(OutputToID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(GenMedProductID));

                cn.Open();

                DataTable dt = ExecuteDataTable(cmd);
                double Qty = 0;
                double.TryParse(dt.Rows[0][0].ToString(), out Qty);

                return Qty;
            }

        }

        #endregion

        #region 42 Xuất Hàng Ký Gởi


        public override bool OutwardDrugMedDeptInvoice_SaveByType_HangKyGoi(OutwardDrugMedDeptInvoice Invoice, List<OutwardDrugMedDept> NewOutwardDrugMedDepts,
                                                    List<OutwardDrugMedDept> UpdateOutwardDrugMedDepts, List<OutwardDrugMedDept> DeleteOutwardDrugMedDepts,
                                                    out long ID, out string StrError)
        {
            try
            {
                ID = 0;
                StrError = "";
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spOutwardDrugMedDeptInvoices_Save_HangKyGoi", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.outiID));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StoreID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StaffID));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.TypID));
                    cmd.AddParameter("@FullName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.FullName));
                    cmd.AddParameter("@NumberPhone", SqlDbType.VarChar, ConvertNullObjectToDBNull(Invoice.NumberPhone));
                    cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Address));
                    cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(Invoice.V_OutDrugInvStatus));
                    cmd.AddParameter("@V_OutputTo", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_OutputTo));
                    cmd.AddParameter("@OutDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Invoice.OutDate));
                    cmd.AddParameter("@OutputToID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.OutputToID));
                    cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(Invoice.ReqDrugInClinicDeptID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(Invoice.V_MedProductType));
                    cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(Invoice.RefGenDrugCatID_1));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Notes));
                    cmd.AddParameter("@V_ByOutPriceMedDept", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_ByOutPriceMedDept));
                    
                    cmd.AddParameter("@NewOutwardDrugMedDeptsXML", SqlDbType.Xml, ConvertNullObjectToDBNull(ConvertDetailsListToXml(NewOutwardDrugMedDepts)));
                    cmd.AddParameter("@UpdateOutwardDrugMedDeptsXML", SqlDbType.Xml, ConvertNullObjectToDBNull(ConvertDetailsListToXml(UpdateOutwardDrugMedDepts)));
                    cmd.AddParameter("@DeleteOutwardDrugMedDeptsXML", SqlDbType.Xml, ConvertNullObjectToDBNull(ConvertDetailsListToXml(DeleteOutwardDrugMedDepts)));

                    SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
                    pareID.Direction = ParameterDirection.Output;
                    SqlParameter pareStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1024);
                    pareStrError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(pareID);
                    cmd.Parameters.Add(pareStrError);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    if (count != 0)
                    {
                        if (pareID.Value != DBNull.Value)
                        {
                            ID = (long)pareID.Value;
                        }
                        if (pareStrError.Value != DBNull.Value)
                        {
                            StrError = pareStrError.Value.ToString();
                        }
                    }
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool OutwardDrugMedDeptInvoices_HangKyGoi_Delete(long id)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spOutwardDrugMedDeptInvoices_HangKyGoi_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, id);
                    cn.Open();
                    int count = cmd.ExecuteNonQuery();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        //KMx: Không sử dụng hàm này nữa. Truyền hết dữ liệu xuống stored xử lý (27/09/2014 10:18).
        //public override bool OutwardDrugMedDeptInvoice_SaveByType_HangKyGoi(OutwardDrugMedDeptInvoice Invoice, List<OutwardDrugMedDept> NewOutwardDrugMedDepts,
        //                                                    List<OutwardDrugMedDept> UpdateOutwardDrugMedDepts, List<OutwardDrugMedDept> DeleteOutwardDrugMedDepts,
        //                                                    out long ID, out string StrError)
        //{
        //    ID = 0;
        //    StrError = "";

        //    //KMx: Khi cập nhật phiếu xuất thì kiểm tra xem Kho phòng đã nhập hàng chưa. Nếu kho phòng nhập rồi thì không được cập nhật (26/07/2014 14:13).
        //    if (Invoice != null && Invoice.outiID > 0)
        //    {
        //        bool result = CheckInwardAlreadyImported(Invoice.outiID);
        //        if (result)
        //        {
        //            StrError = "Phiếu xuất này đã được kho phòng nhập rồi, không được phép cập nhật!";
        //            return false;
        //        }
        //    }

        //    DataTable dtInID_inviID_GenMedProductID = CreatedtInID_inviID_GenMedProductID();

        //    //Group lại theo NCC
        //    var supplierGroup = from p in Invoice.OutwardDrugMedDepts
        //                        group p by p.ObjSupplierID.SupplierID
        //                            into g
        //                            select g;

        //    List<OutwardDrugMedDeptInvoice> InvoiceList = new List<OutwardDrugMedDeptInvoice>();

        //    foreach (var sup in supplierGroup)
        //    {
        //        OutwardDrugMedDeptInvoice InvoiceCreate = new OutwardDrugMedDeptInvoice();

        //        var olist = from x in Invoice.OutwardDrugMedDepts
        //                    where x.ObjSupplierID.SupplierID == sup.Key
        //                    select x;
        //        InvoiceCreate.OutwardDrugMedDepts = new ObservableCollection<OutwardDrugMedDept>(olist);

        //        InvoiceList.Add(InvoiceCreate);
        //    }
        //    //Group lại theo NCC

        //    try
        //    {
        //        //Thực hiện nhập tạm
        //        foreach (var oitem in InvoiceList)
        //        {
        //            InwardDrugMedDeptInvoice InvoiceSave = new InwardDrugMedDeptInvoice();
        //            InvoiceSave.StaffID = Invoice.StaffID;
        //            InvoiceSave.SupplierID = oitem.OutwardDrugMedDepts[0].ObjSupplierID.SupplierID;
        //            InvoiceSave.InvInvoiceNumber = "NHKG-" + Guid.NewGuid().ToString();
        //            InvoiceSave.InvDateInvoice = Invoice.OutDate.Value;
        //            InvoiceSave.TempRequireUpdate = false;
        //            InvoiceSave.CustomTax = 0;
        //            InvoiceSave.VAT = 0;
        //            InvoiceSave.StoreIDOut = null;
        //            InvoiceSave.StoreID = Invoice.StoreID.Value;
        //            InvoiceSave.IsInputTemp = true;
        //            InvoiceSave.TypID = (long)AllLookupValues.RefOutputType.NHAP_HANGKYGOI;
        //            InvoiceSave.V_MedProductType = Invoice.V_MedProductType;

        //            long inviID = 0;

        //            //KMx: Mỗi lần nhập tạm thì phải tạo ra phiếu nhập tạm khác nhau, không được để chung phiếu (12/07/2014 10:05)
        //            //Check tồn tại NCC này đã xuất tạm chưa. Có rồi thì độn thêm vào.
        //            //inviID = CheckExistsIsInputTempBySupplierID(InvoiceSave.SupplierID.Value, InvoiceSave.StoreID, Invoice.V_MedProductType);

        //            int ErrorCreateInwardInvoice = 0;

        //            if (inviID <= 0)
        //            {
        //                ErrorCreateInwardInvoice = AddInwardDrugMedDeptInvoice(InvoiceSave, out inviID);
        //            }


        //            if (ErrorCreateInwardInvoice == 0)
        //            {

        //                //Nhập InvoiceDrugMedDept Detail
        //                ObservableCollection<DrugDeptPurchaseOrderDetail> DrugDeptPurchaseOrderDetailList = new ObservableCollection<DrugDeptPurchaseOrderDetail>();
        //                foreach (var items in oitem.OutwardDrugMedDepts)
        //                {
        //                    DrugDeptPurchaseOrderDetail InvoiceDrugMedDeptDetail = new DrugDeptPurchaseOrderDetail();
        //                    InvoiceDrugMedDeptDetail.SdlID = null;
        //                    InvoiceDrugMedDeptDetail.GenMedProductID = items.GenMedProductID.Value;
        //                    InvoiceDrugMedDeptDetail.InBatchNumber = null;
        //                    InvoiceDrugMedDeptDetail.InProductionDate = null;
        //                    InvoiceDrugMedDeptDetail.InExpiryDate = items.InExpiryDate;
        //                    InvoiceDrugMedDeptDetail.InQuantity =Convert.ToDouble(items.OutQuantity);
        //                    InvoiceDrugMedDeptDetail.UnitPrice = items.OutPrice; /*chua biet gia mua*/
        //                    InvoiceDrugMedDeptDetail.V_GoodsType = new Lookup();
        //                    InvoiceDrugMedDeptDetail.V_GoodsType.LookupID = (long)AllLookupValues.V_GoodsType.HANGMUA;
        //                    InvoiceDrugMedDeptDetail.DrugDeptPoDetailID = 0; /*phieu dat hang ko co*/
        //                    InvoiceDrugMedDeptDetail.SdlDescription = null;
        //                    /*hien tai khong xai thuoc tinh nay trong he thong*/
        //                    InvoiceDrugMedDeptDetail.Discounting = 0;
        //                    InvoiceDrugMedDeptDetail.DiscountingByPercent = 0;
        //                    InvoiceDrugMedDeptDetail.IsPercent = false;
        //                    InvoiceDrugMedDeptDetail.NoPrint = null;
        //                    if (items.RefGenericDrugDetail.UnitPackaging.GetValueOrDefault() > 0)
        //                    {
        //                        InvoiceDrugMedDeptDetail.PackageQuantity =(double) (items.OutQuantity / items.RefGenericDrugDetail.UnitPackaging).Value;
        //                    }
        //                    else
        //                    {
        //                        InvoiceDrugMedDeptDetail.PackageQuantity =(double) items.OutQuantity;
        //                    }
        //                    InvoiceDrugMedDeptDetail.PackagePrice = 0;
        //                    InvoiceDrugMedDeptDetail.IsUnitPackage = false; /*là đơn vị đóng gói để khi in*/
        //                    InvoiceDrugMedDeptDetail.TotalPriceNotVAT = items.OutPrice * items.OutQuantity;

        //                    DrugDeptPurchaseOrderDetailList.Add(InvoiceDrugMedDeptDetail);
        //                }


        //                long InID = 0;

        //                for (int i = 0; i < DrugDeptPurchaseOrderDetailList.Count; i++)
        //                {
        //                    InID = InwardDrugMedDept_Insert_HangKyGoi(DrugDeptPurchaseOrderDetailList[i], inviID);

        //                    if (InID > 0)
        //                    {
        //                        //Add vô Table
        //                        AddRowdtInID_inviID_GenMedProductID(dtInID_inviID_GenMedProductID, inviID, DrugDeptPurchaseOrderDetailList[i].GenMedProductID, InvoiceSave.SupplierID.Value, InID);
        //                        //Add vô Table
        //                    }
        //                    else
        //                    {
        //                        return false;
        //                    }
        //                }

        //                long? DrugDeptPoID = 0;
        //                InwardDrugMedDeptInvoice_UpdateCost(inviID);

        //                if (DrugDeptPoID != null && DrugDeptPoID > 0)
        //                {
        //                    UpdateStatusDrugDeptPurchaseOrder(DrugDeptPoID.GetValueOrDefault());
        //                }
        //                //Nhập InvoiceDrugMedDept Detail

        //            }
        //            else
        //            {
        //                StrError = "AddInwardDrugMedDeptInvoice-Error";
        //                return false;
        //            }

        //        }
        //        //Thực hiện nhập tạm

        //        //DataTable dtInwardDrugMedDept_VuaNhapTemp = GetInIDInwardDrugMedDept_VuaNhapTemp(str_inviID.Substring(0, str_inviID.Length-1));

        //        //Xuất
        //        using (SqlConnection cn = new SqlConnection(this.ConnectionString))
        //        {
        //            SqlCommand cmd = new SqlCommand("spOutwardDrugMedDeptInvoices_SaveByType", cn);
        //            cmd.CommandType = CommandType.StoredProcedure;
        //            cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.outiID));
        //            cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StoreID));
        //            cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.StaffID));
        //            cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.TypID));
        //            cmd.AddParameter("@FullName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.FullName));
        //            cmd.AddParameter("@NumberPhone", SqlDbType.VarChar, ConvertNullObjectToDBNull(Invoice.NumberPhone));
        //            cmd.AddParameter("@Address", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Address));
        //            cmd.AddParameter("@V_OutDrugInvStatus", SqlDbType.BigInt,
        //                             ConvertNullObjectToDBNull(Invoice.V_OutDrugInvStatus));
        //            cmd.AddParameter("@V_OutputTo", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_OutputTo));
        //            cmd.AddParameter("@OutputToID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.OutputToID));
        //            cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt,
        //                             ConvertNullObjectToDBNull(Invoice.ReqDrugInClinicDeptID));
        //            cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
        //                             ConvertNullObjectToDBNull(Invoice.V_MedProductType));
        //            cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt,
        //                             ConvertNullObjectToDBNull(Invoice.RefGenDrugCatID_1));
        //            cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Invoice.Notes));
        //            cmd.AddParameter("@V_ByOutPriceMedDept", SqlDbType.BigInt, ConvertNullObjectToDBNull(Invoice.V_ByOutPriceMedDept));

        //            cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(ConvertListXuatHangToXml(dtInID_inviID_GenMedProductID, Invoice.OutwardDrugMedDepts)));

        //            SqlParameter pareID = new SqlParameter("@id", SqlDbType.BigInt);
        //            pareID.Direction = ParameterDirection.Output;
        //            SqlParameter pareStrError = new SqlParameter("@StrError", SqlDbType.NVarChar, 1024);
        //            pareStrError.Direction = ParameterDirection.Output;
        //            cmd.Parameters.Add(pareID);
        //            cmd.Parameters.Add(pareStrError);
        //            cn.Open();
        //            int count = cmd.ExecuteNonQuery();
        //            if (count != 0)
        //            {
        //                if (pareID.Value != DBNull.Value)
        //                {
        //                    ID = (long)pareID.Value;
        //                }
        //                if (pareStrError.Value != DBNull.Value)
        //                {
        //                    StrError = pareStrError.Value.ToString();
        //                }
        //            }
        //            cmd.Dispose();
        //        }
        //        //Xuất

        //        return true;
        //    }
        //    catch (Exception ex)
        //    {
        //        StrError = ex.ToString();
        //        return false;
        //    }
        //    //Thực hiện nhập tạm
        //}



        private long CheckExistsIsInputTempBySupplierID(long SupplierID, long StoreID, long V_MedProductType)
        {
            long Res = 0;
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spCheckExistsIsInputTempBySupplierID", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SupplierID));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));

                    SqlParameter paraminviID = new SqlParameter("@inviID", SqlDbType.BigInt);
                    paraminviID.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paraminviID);

                    cn.Open();

                    ExecuteNonQuery(cmd);

                    if (cmd.Parameters["@inviID"].Value != null)
                        Res = Convert.ToInt64(cmd.Parameters["@inviID"].Value);
                }
            }
            catch (Exception)
            {

            }
            return Res;
        }

        //KMx: Kiểm tra xem kho phòng đã nhập phiếu xuất của Khoa Dược chưa? (26/07/2014 14:07)
        private bool CheckInwardAlreadyImported(long outiID)
        {
            bool Res = false;
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spCheckInwardAlreadyImported", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(outiID));


                    SqlParameter paraminviID = new SqlParameter("@result", SqlDbType.Bit);
                    paraminviID.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paraminviID);

                    cn.Open();

                    ExecuteNonQuery(cmd);

                    if (cmd.Parameters["@result"].Value != null)
                    {
                        Res = Convert.ToBoolean(cmd.Parameters["@result"].Value);
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

            return Res;
        }

        private DataTable CreatedtInID_inviID_GenMedProductID()
        {
            DataTable dt = new DataTable();

            dt.Columns.Add("InID", typeof(Int64));
            dt.Columns.Add("inviID", typeof(Int64));
            dt.Columns.Add("GenMedProductID", typeof(Int64));
            dt.Columns.Add("SupplierID", typeof(Int64));
            return dt;
        }

        private void AddRowdtInID_inviID_GenMedProductID(DataTable dt, long inviID, long GenMedProductID, long SupplierID, long InID)
        {
            DataRow dr = dt.NewRow();
            dr["InID"] = InID;
            dr["inviID"] = inviID;
            dr["GenMedProductID"] = GenMedProductID;
            dr["SupplierID"] = SupplierID;
            dt.Rows.Add(dr);
        }

        private string ConvertListXuatHangToXml(DataTable dtInID, IEnumerable<OutwardDrugMedDept> items)
        {
            if (items != null)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<OutDrugDetails>");
                foreach (OutwardDrugMedDept details in items)
                {
                    if (details.RefGenericDrugDetail != null && details.GenMedProductID > 0)
                    {
                        int EntityState = (int)details.EntityState;
                        sb.Append("<RecInfo>");
                        sb.AppendFormat("<OutID>{0}</OutID>", details.OutID);
                        sb.AppendFormat("<outiID>{0}</outiID>", details.outiID);
                        sb.AppendFormat("<GenMedProductID>{0}</GenMedProductID>", details.RefGenericDrugDetail.GenMedProductID);
                        sb.AppendFormat("<InID>{0}</InID>", GetInID(dtInID, details.GenMedProductID.Value, details.ObjSupplierID == null ? 0 : details.ObjSupplierID.SupplierID));
                        sb.AppendFormat("<OutQuantity>{0}</OutQuantity>", details.OutQuantity);
                        sb.AppendFormat("<OutPrice>{0}</OutPrice>", details.OutPrice);
                        sb.AppendFormat("<OutNotes>{0}</OutNotes>", details.OutNotes);
                        sb.AppendFormat("<ReqDrugInDetailID>{0}</ReqDrugInDetailID>", details.ReqDrugInDetailID);
                        sb.AppendFormat("<EntityState>{0}</EntityState>", EntityState);
                        sb.AppendFormat("<RequestQty>{0}</RequestQty>", details.RequestQty);

                        sb.AppendFormat("<OutQuantityReturn>{0}</OutQuantityReturn>", details.OutQuantityReturn);
                        sb.AppendFormat("<OutHIRebate>{0}</OutHIRebate>", details.OutHIRebate);
                        sb.AppendFormat("<OutPriceDifference>{0}</OutPriceDifference>", details.PriceDifference);
                        sb.AppendFormat("<OutHIAllowedPrice>{0}</OutHIAllowedPrice>", details.HIAllowedPrice);
                        sb.AppendFormat("<IsDeleted>{0}</IsDeleted>", details.IsDeleted);

                        sb.Append("</RecInfo>");
                    }
                }
                sb.Append("</OutDrugDetails>");
                return sb.ToString();
            }
            else
            {
                return null;
            }
        }


        private long GetInID(DataTable dtinviID, long GenMedProductID, long SupplierID)
        {
            long InID = 0;
            DataRow[] row = dtinviID.Select("GenMedProductID='" + GenMedProductID.ToString() + "' And SupplierID='" + SupplierID.ToString() + "'");
            if (row.Count() > 0)
            {
                InID = Convert.ToInt64(row[0]["InID"]);
            }
            return InID;
        }

        public override IList<InwardDrugMedDept> InwardDrugMedDeptIsInputTemp_BySupplierID(long SupplierID, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugMedDeptIsInputTemp_BySupplierID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, SupplierID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);

                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override bool InwardDrugInvoices_XapNhapInputTemp_Save(long inviIDJoin, IEnumerable<InwardDrugMedDept> ObjInwardDrugMedDeptList, out string Result)
        {
            Result = "";

            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardDrugInvoices_XapNhapInputTemp_Save", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@inviIDJoin", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviIDJoin));
                    cmd.AddParameter("@XMLInputTemp", SqlDbType.Xml, ConvertNullObjectToDBNull(ConvertDetailInvoiceInputTempToXml(ObjInwardDrugMedDeptList)));

                    cmd.AddParameter("@Result", SqlDbType.NVarChar, 100, ParameterDirection.Output);

                    cmd.CommandTimeout = 1000;

                    cn.Open();

                    ExecuteNonQuery(cmd);

                    if (cmd.Parameters["@Result"].Value != null)
                        Result = cmd.Parameters["@Result"].Value.ToString();

                    if (Result == "OK")
                        return true;
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        private string ConvertDetailInvoiceInputTempToXml(IEnumerable<InwardDrugMedDept> items)
        {
            if (items != null)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<InwardDrugMedDept>");
                foreach (InwardDrugMedDept details in items)
                {
                    sb.Append("<Info>");
                    sb.AppendFormat("<InID>{0}</InID>", details.InID);
                    sb.AppendFormat("<inviID>{0}</inviID>", details.inviID);
                    sb.AppendFormat("<GenMedProductID>{0}</GenMedProductID>", details.GenMedProductID);
                    sb.AppendFormat("<InBatchNumber>{0}</InBatchNumber>", details.InBatchNumber);
                    sb.AppendFormat("<InProductionDate>{0}</InProductionDate>", details.InProductionDate != null ? details.InProductionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null);
                    sb.AppendFormat("<InExpiryDate>{0}</InExpiryDate>", details.InExpiryDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff"));
                    sb.AppendFormat("<InQuantity>{0}</InQuantity>", (int)details.InQuantity);
                    sb.AppendFormat("<InBuyingPrice>{0}</InBuyingPrice>", details.RefGenMedProductDetails.UnitPrice);
                    sb.AppendFormat("<TotalPriceNotVAT>{0}</TotalPriceNotVAT>", details.TotalPriceNotVAT);
                    sb.AppendFormat("<InCost>{0}</InCost>", 0);
                    sb.AppendFormat("<NormalPrice>{0}</NormalPrice>", details.RefGenMedProductDetails.NormalPrice);
                    sb.AppendFormat("<HIPatientPrice>{0}</HIPatientPrice>", details.RefGenMedProductDetails.HIPatientPrice);
                    sb.AppendFormat("<HIAllowedPrice>{0}</HIAllowedPrice>", details.RefGenMedProductDetails.HIAllowedPrice);
                    sb.AppendFormat("<Remaining>{0}</Remaining>", details.Remaining);
                    //KMx: Khi sáp nhập hàng ký gởi, trên giao diện binding ObjV_GoodsType nên khi lưu cũng phải sử dụng ObjV_GoodsType, không dùng V_GoodsType (15/05/2015 09:03).
                    //sb.AppendFormat("<V_GoodsType>{0}</V_GoodsType>", details.V_GoodsType);
                    sb.AppendFormat("<V_GoodsType>{0}</V_GoodsType>", details.ObjV_GoodsType.LookupID);
                    sb.AppendFormat("<DrugDeptPoID>{0}</DrugDeptPoID>", details.DrugDeptPoID);
                    sb.AppendFormat("<DrugDeptPoDetailID>{0}</DrugDeptPoDetailID>", details.DrugDeptPoDetailID);
                    sb.AppendFormat("<Discounting>{0}</Discounting>", details.Discounting);
                    sb.AppendFormat("<DiscountByPercent>{0}</DiscountByPercent>", details.DiscountingByPercent);
                    sb.AppendFormat("<IsPercent>{0}</IsPercent>", details.IsPercent);
                    sb.AppendFormat("<IsBeginStockTakePeriod>{0}</IsBeginStockTakePeriod>", 0);
                    sb.AppendFormat("<IsEndStockTakePeriod>{0}</IsEndStockTakePeriod>", 0);
                    sb.AppendFormat("<PackageQuantity>{0}</PackageQuantity>", details.PackageQuantity);
                    sb.AppendFormat("<PackagePrice>{0}</PackagePrice>", details.PackagePrice);
                    sb.AppendFormat("<IsUnitPackage>{0}</IsUnitPackage>", details.IsUnitPackage);
                    sb.Append("</Info>");
                }
                sb.Append("</InwardDrugMedDept>");
                return sb.ToString();
            }
            else
            {
                return null;
            }
        }

        #endregion

        #region 43. PharmacyOutwardDrugReport Member

        public override IList<PharmacyOutwardDrugReportDetail> PharmacyOutwardDrugReportDetail_GetReport(PharmacyOutwardDrugReport para, long loggedStaffID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("BaoCao_BangKeChiTietPhatThuoc_New", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 999999999;
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(para.RepDateFrom));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(para.RepDateTo));
                cmd.AddParameter("@V_PharmacyOutRepType", SqlDbType.BigInt, ConvertNullObjectToDBNull(para.V_PharmacyOutRepType));
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(para.RepStaffID));
                cmd.AddParameter("@LoggedStaffID", SqlDbType.BigInt, loggedStaffID);
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(para.StoreID));
                cn.Open();
                IList<PharmacyOutwardDrugReportDetail> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetPharmacyOutwardDrugReportDetailCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override bool PharmacyOutwardDrugReport_Save(PharmacyOutwardDrugReport para, out long id)
        {
            id = 0;
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spPharmacyOutwardDrugReports_Insert", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = 999999999;
                    cmd.AddParameter("@ReportDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(para.ReportDate));
                    cmd.AddParameter("@RepStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(para.RepStaffID));
                    cmd.AddParameter("@V_PharmacyOutRepType", SqlDbType.BigInt, ConvertNullObjectToDBNull(para.V_PharmacyOutRepType));
                    cmd.AddParameter("@RepDateFrom", SqlDbType.DateTime, ConvertNullObjectToDBNull(para.RepDateFrom));
                    cmd.AddParameter("@RepDateTo", SqlDbType.DateTime, ConvertNullObjectToDBNull(para.RepDateTo));
                    cmd.AddParameter("@Title", SqlDbType.NVarChar, ConvertNullObjectToDBNull(para.Title));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(para.ConvertDetailsListToXml()));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(para.StoreID));
                    SqlParameter paramid = new SqlParameter("@id", SqlDbType.BigInt);
                    paramid.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramid);
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    if (paramid.Value != DBNull.Value)
                    {
                        id = (long)paramid.Value;
                    }
                    cmd.Dispose();
                    return count > 0;

                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override IList<PharmacyOutwardDrugReport> PharmacyOutwardDrugReport_Search(SearchOutwardReport para, long loggedStaffID, int PageIndex, int PageSize, out int TotalCount)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyOutwardDrugReports_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 999999999;
                cmd.AddParameter("@fromdate", SqlDbType.DateTime, ConvertNullObjectToDBNull(para.fromdate));
                cmd.AddParameter("@todate", SqlDbType.DateTime, ConvertNullObjectToDBNull(para.todate));
                cmd.AddParameter("@RepStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(para.StaffID));
                cmd.AddParameter("@V_PharmacyOutRepType", SqlDbType.BigInt, ConvertNullObjectToDBNull(para.V_PharmacyOutRepType));
                cmd.AddParameter("@PharmacyOutRepID", SqlDbType.BigInt, ConvertNullObjectToDBNull(para.V_PharmacyOutRepType));
                cmd.AddParameter("@LoggedStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(loggedStaffID));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(para.StoreID));
                cmd.AddParameter("@PageSize", SqlDbType.Int, ConvertNullObjectToDBNull(PageSize));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, ConvertNullObjectToDBNull(PageIndex));
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                IList<PharmacyOutwardDrugReport> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetPharmacyOutwardDrugReportCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                return invoicedrug;
            }
        }

        public override IList<PharmacyOutwardDrugReportDetail> PharmacyOutwardDrugReportDetail_GetID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyOutwardDrugReportDetails_GetParentID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = int.MaxValue;
                cmd.AddParameter("@PharmacyOutRepID", SqlDbType.BigInt, ConvertNullObjectToDBNull(ID));
                cmd.AddParameter("@IsInsurance", SqlDbType.Bit, ConvertNullObjectToDBNull(false));
                cn.Open();
                IList<PharmacyOutwardDrugReportDetail> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetPharmacyOutwardDrugReportDetailCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }


        #endregion

        public override List<DrugDeptPurchaseCheckOrder> DrugDeptPurchaseOrderDetails_CheckOrder(long GenMedProductID, DateTime FromDate, DateTime ToDate, out List<DrugDeptPurchaseCheckOrderInward> InwardList)
        {
            InwardList = null;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrderDetails_CheckOrder", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 999999999;
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt, ConvertNullObjectToDBNull(GenMedProductID));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(ToDate));
                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                List<DrugDeptPurchaseCheckOrder> CheckOrder = null;
                CheckOrder = GetDrugDeptPurchaseCheckOrderCollectionFromReader(reader);
                reader.NextResult();
                InwardList = GetDrugDeptPurchaseCheckOrderInwardCollectionFromReader(reader);
                return CheckOrder;
            }
        }

        public override List<PharmacyPurchaseCheckOrder> PharmacyPurchaseOrderDetails_CheckOrder(long DrugID, DateTime FromDate, DateTime ToDate, out List<PharmacyPurchaseCheckOrderInward> InwardList)
        {
            InwardList = null;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spPharmacyPurchaseOrderDetails_CheckOrder", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 999999999;
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DrugID));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(ToDate));
                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                List<PharmacyPurchaseCheckOrder> CheckOrder = null;
                CheckOrder = GetPharmacyPurchaseCheckOrderCollectionFromReader(reader);
                reader.NextResult();
                InwardList = GetPharmacyPurchaseCheckOrderInwardCollectionFromReader(reader);
                return CheckOrder;
            }
        }

        public override List<OutwardDrugInvoice> OutwardDrugInvoice_CollectMultiDrug(int top, DateTime FromDate, DateTime ToDate, long StoreID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoices_CollectMultiDrug", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 999999999;
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(ToDate));
                cmd.AddParameter("@Top", SqlDbType.Int, ConvertNullObjectToDBNull(top));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                List<OutwardDrugInvoice> CheckOrder = null;
                CheckOrder = GetOutwardDrugInvoiceCollectionFromReader(reader);
                return CheckOrder;
            }
        }
        public override bool OutwardDrugInvoice_UpdateCollectMulti(IEnumerable<OutwardDrugInvoice> lst)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugInvoice_UpdateMultiCollect", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = int.MaxValue;
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(ConvertOutwardDrugCollectionToXml(lst)));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                return count > 0;
            }
        }

        private List<List<string>> getPharmacyReportString(string storeName, ReportParameters criteria)
        {
            DataSet dsExportToExcellAll = new DataSet();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = null;
                cmd = new SqlCommand(storeName, cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(criteria.FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(criteria.ToDate));

                cmd.AddParameter("@Quarter", SqlDbType.Int, ConvertNullObjectToDBNull(criteria.Quarter));
                cmd.AddParameter("@Month", SqlDbType.Int, ConvertNullObjectToDBNull(criteria.Month));
                cmd.AddParameter("@Year", SqlDbType.Int, ConvertNullObjectToDBNull(criteria.Year));
                cmd.AddParameter("@flag", SqlDbType.Int, ConvertNullObjectToDBNull(criteria.Flag));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(criteria.StoreID));

                cmd.CommandTimeout = int.MaxValue;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsExportToExcellAll);
                List<List<string>> returnAllExcelData = new List<List<string>>();

                //Add the below 4 lines to add the column names to show on the Excel file
                List<string> colname = new List<string>();
                for (int i = 0; i <= dsExportToExcellAll.Tables[0].Columns.Count - 1; i++)
                {
                    colname.Add(dsExportToExcellAll.Tables[0].Columns[i].ToString().Trim());
                }

                returnAllExcelData.Add(colname);

                for (int i = 0; i <= dsExportToExcellAll.Tables[0].Rows.Count - 1; i++)
                {
                    List<string> rowData = new List<string>();
                    for (int j = 0; j <= dsExportToExcellAll.Tables[0].Columns.Count - 1; j++)
                    {
                        rowData.Add(Convert.ToString(dsExportToExcellAll.Tables[0].Rows[i][j]).Replace("<", "&lt;").Replace(">", "&gt;"));
                    }
                    returnAllExcelData.Add(rowData);
                }

                return returnAllExcelData;
            }
        }

        public override List<List<string>> ExportToExcel_PharmacyReports(ReportParameters criteria)
        {
            switch (criteria.reportName)
            {
                case ReportName.PHARMACY_SOKIEMNHAPTHUOC:
                    return getPharmacyReportString("spRpt_PharmacyInwardDetail_ExportToExcel", criteria);
                default: return null;
            }

        }
        /*▼====: #002*/
        public override List<Bid> GetAllBids()
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetAllBids", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                List<Bid> lst = null;
                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetBidCollectionFromReader(reader);
                }
                reader.Close();
                return lst;
            }
        }
        public override List<BidDetail> GetBidDetails(long BidID, string DrugCode, bool IsMedDept)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetAllBidDetails", cn);
                cmd.AddParameter("@BidID", SqlDbType.BigInt, BidID);
                cmd.AddParameter("@DrugCode", SqlDbType.VarChar, DrugCode);
                cmd.AddParameter("@IsMedDept", SqlDbType.Bit, IsMedDept);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                List<BidDetail> lst = null;
                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    lst = GetBidDetailCollectionFromReader(reader);
                }
                reader.Close();
                return lst;
            }
        }
        public override bool SaveBidDetails(long BidID, List<BidDetail> ModBidDetails, List<BidDetail> RemovedBidDetails, bool IsMedDept)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spSaveBidDetails", cn);
                cmd.AddParameter("@BidID", SqlDbType.BigInt, BidID);
                cmd.AddParameter("@AddBidDetails", SqlDbType.NVarChar, BidDetailCollectionToXML(ModBidDetails.Where(x => x.BidID == 0).ToList()).ToString());
                cmd.AddParameter("@RemovedBidDetails", SqlDbType.NVarChar, BidDetailCollectionToXML(RemovedBidDetails).ToString());
                cmd.AddParameter("@IsMedDept", SqlDbType.Bit, IsMedDept);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                return ExecuteNonQuery(cmd) > 0;
            }
        }
        public override bool RemoveBidDetails(long BidID, long DrugID, bool IsMedDept)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRemoveBidDetails", cn);
                cmd.AddParameter("@BidID", SqlDbType.BigInt, BidID);
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, DrugID);
                cmd.AddParameter("@IsMedDept", SqlDbType.Bit, IsMedDept);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                return ExecuteNonQuery(cmd) > 0;
            }
        }

        //▼===== 25072018 TTM
        public override bool RemoveBidDetails_New(long BidID, long DrugID, bool IsMedDept)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRemoveBidDetails", cn);
                cmd.AddParameter("@BidID", SqlDbType.BigInt, BidID);
                cmd.AddParameter("@DrugID", SqlDbType.BigInt, DrugID);
                cmd.AddParameter("@IsMedDept", SqlDbType.Bit, IsMedDept);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                return ExecuteNonQuery(cmd) > 0;
            }
        }
        //▼===== 25072018 TTM
        public override bool EditDrugBid(Bid aBid, out long? BidIDOut)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spEditDrugBid", cn);
                cmd.AddParameter("@BidID", SqlDbType.BigInt, ConvertNullObjectToDBNull(aBid.BidID));
                cmd.AddParameter("@BidName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(aBid.BidName));
                cmd.AddParameter("@PermitNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(aBid.PermitNumber));
                cmd.AddParameter("@ValidDateFrom", SqlDbType.DateTime, ConvertNullObjectToDBNull(aBid.ValidDateFrom.Date));
                cmd.AddParameter("@ValidDateTo", SqlDbType.DateTime, ConvertNullObjectToDBNull(aBid.ValidDateTo.Date));
                cmd.AddParameter("@BidIDOut", SqlDbType.BigInt, DBNull.Value, ParameterDirection.Output);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();
                var ReVal = ExecuteNonQuery(cmd) > 0;
                if (cmd.Parameters["@BidIDOut"].Value != null)
                    BidIDOut = (long)cmd.Parameters["@BidIDOut"].Value;
                else
                    BidIDOut = null;
                return ReVal;
            }
        }
        /*▲====: #002*/
        /*▼====: #003*/
        #region Adjust In Clinic Price
        public override List<InwardDrugClinicDept> GetInwardDrugClinicDeptForAdjustOutPrice(long StoreID, bool IsCode, string BrandName, long V_MedProductType)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spGetInwardDrugClinicDeptForAdjustOutPrice", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                    cmd.AddParameter("@IsCode", SqlDbType.Bit, IsCode);
                    cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                    cn.Open();
                    List<InwardDrugClinicDept> objList = null;
                    IDataReader reader = ExecuteReader(cmd);
                    objList = GetInwardDrugClinicDeptCollectionFromReader(reader);
                    reader.Close();
                    return objList;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
        public override bool ClinicDeptAdjustOutPrice(IList<InwardDrugClinicDept> InwardDrugMedDeptList, long? StaffID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spClinicDeptAdjustOutPrice", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InwardXML", SqlDbType.Xml, ConvertNullObjectToDBNull(ConvertInwardDrugToXml(InwardDrugMedDeptList)));
                    cmd.AddParameter("@UpdatedStaffID", SqlDbType.BigInt, StaffID);
                    cmd.CommandTimeout = int.MaxValue;
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
        private string ConvertInwardDrugToXml(IEnumerable<InwardDrugClinicDept> items)
        {
            if (items != null)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<InwardDrugClinicDept>");
                foreach (InwardDrugClinicDept details in items)
                {
                    sb.Append("<Info>");
                    sb.AppendFormat("<InID>{0}</InID>", details.InID);
                    sb.AppendFormat("<NormalPrice>{0}</NormalPrice>", details.NormalPrice);
                    sb.AppendFormat("<HIPatientPrice>{0}</HIPatientPrice>", details.HIPatientPrice);
                    sb.AppendFormat("<HIAllowedPrice>{0}</HIAllowedPrice>", details.HIAllowedPrice);
                    sb.Append("</Info>");
                }
                sb.Append("</InwardDrugClinicDept>");
                return sb.ToString();
            }
            else
            {
                return null;
            }
        }
        #endregion
        /*▲====: #003*/

        //▼====== #014
        public override List<OutwardDrugInvoice> OutwardPharmacyDeptInvoice_Cbx(long? StoreID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugPharmacy_InMedDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cn.Open();
                List<OutwardDrugInvoice> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetOutwardDrugInvoiceCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override List<OutwardDrug> GetOutwardDrugDetailsByOutwardInvoiceForDrugDept(long OutiID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugPharmacy_ByOutID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@outiID", SqlDbType.BigInt, OutiID);
                cn.Open();
                List<OutwardDrug> drugs = null;

                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutWardDrugDetailCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }
        //▲====== #014

        //▼====== #015
        public override int InwardDrugInvoice_SaveXML(InwardDrugClinicDeptInvoice InvoiceDrug, out long id)
        {
            try
            {
                int results = 0;
                id = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardDrugInvoice_SaveXML", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice.ToString("yyyy/MM/dd")));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(InvoiceDrug.ConvertDetailsListToXml()));
                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramID);

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        id = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override List<OutwardDrugMedDeptInvoice> OutwardDrugMedDeptInvoice_Cbx_V2(long? StoreID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spOutwardDrugMedDeptInvoices_InPharmacy", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cn.Open();
                List<OutwardDrugMedDeptInvoice> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetOutwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugClinicDeptInvoice> SearchInwardDrugInvoiceForPharmacy(InwardInvoiceSearchCriteria criteria, long? TypID, int pageIndex, int pageSize,bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugInvoices_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramInwardID = new SqlParameter("@InwardID", SqlDbType.VarChar, 128);
                paramInwardID.Value = ConvertNullObjectToDBNull(criteria.InwardID);
                SqlParameter paramInvoiveNumber = new SqlParameter("@InvoiceNumber", SqlDbType.VarChar, 128);
                paramInvoiveNumber.Value = ConvertNullObjectToDBNull(criteria.InvoiceNumber);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);
                SqlParameter paramIsInwardOther = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramIsInwardOther.Value = ConvertNullObjectToDBNull(TypID);
                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;
                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);
                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramInwardID);
                cmd.Parameters.Add(paramInvoiveNumber);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramIsInwardOther);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                IList<InwardDrugClinicDeptInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetInwardDrugClinicDeptInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }
        public override IList<InwardDrugClinicDept> GetInwardDrugPharmacy_ByIDInvoiceNotPaging(long inviID
                                                                                                , out decimal TongTienSPChuaVAT
                                                                                                , out decimal CKTrenSP
                                                                                                , out decimal TongTienTrenSPDaTruCK
                                                                                                , out decimal TongCKTrenHoaDon
                                                                                                , out decimal TongTienHoaDonCoVAT)
        {
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoVAT = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardDrugPharmacy_ByIDInvoiceNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;


                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cn.Open();
                IList<InwardDrugClinicDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugPharmacyCollectionFromReader(reader);
                reader.Close();

                try
                {
                    TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                    CKTrenSP = (decimal)paramCKTrenSP.Value;
                    TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                    TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                    TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                }
                catch
                {
                    TongTienSPChuaVAT = 0;
                    CKTrenSP = 0;
                    TongTienTrenSPDaTruCK = 0;
                    TongCKTrenHoaDon = 0;
                    TongTienHoaDonCoVAT = 0;
                }
                return invoicedrug;
            }
        }
        //▲====== #015
        //▼====== #016
        public override bool RequestDrugInwardHIStore_Save(RequestDrugInwardForHiStore Request,
                                                                  long V_MedProductType, out long id)
        {
            bool results = false;
            id = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardStoreHI_Save", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@RequestDrugInwardHiStoreID", SqlDbType.BigInt, Request.RequestDrugInwardHiStoreID);
                cmd.AddParameter("@StaffID", SqlDbType.BigInt, Request.SelectedStaff.StaffID);
                cmd.AddParameter("@DeptID", SqlDbType.BigInt, ConvertNullToZero(Request.DeptID));
                cmd.AddParameter("@ReqDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Request.ReqDate));
                cmd.AddParameter("@ReqNumCode", SqlDbType.VarChar, ConvertNullObjectToDBNull(Request.ReqNumCode));
                cmd.AddParameter("@OutFromStoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Request.OutFromStoreID));
                cmd.AddParameter("@InDeptStoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Request.InDeptStoreID));
                cmd.AddParameter("@Comment", SqlDbType.NVarChar, ConvertNullObjectToDBNull(Request.Comment));
                cmd.AddParameter("@ReqStatus", SqlDbType.BigInt, ConvertNullObjectToDBNull(Request.ReqStatus));

                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(Request.RefGenDrugCatID_1));
                cmd.AddParameter("@FromDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Request.FromDate));
                cmd.AddParameter("@ToDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(Request.ToDate));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Request.ConvertOutwardDetailsListToXml()));
                cmd.AddParameter("@id", SqlDbType.BigInt, ParameterDirection.Output);

                cmd.CommandTimeout = int.MaxValue;

                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                if (reader.Read())
                {
                    results = true;
                    id = (long)reader["ID"];
                }
                reader.Close();
                return results;
            }
        }

        public override RequestDrugInwardForHiStore GetRequestDrugInwardHIStoreByID(long ReqDrugHIStoreID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardHIStore_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@RequestDrugInwardHiStoreID", SqlDbType.BigInt, ReqDrugHIStoreID);
                cn.Open();
                RequestDrugInwardForHiStore invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetRequestDrugInwardHIStoreFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }
        public override List<RequestDrugInwardForHiStoreDetails> GetRequestDrugInwardHIStoreDetailByID(long RequestDrugInwardHiStoreID, bool bGetExistingReqToCreateNew)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spReqOutwardDrugHIStoreDetails_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@RequestDrugInwardHiStoreID", SqlDbType.BigInt, RequestDrugInwardHiStoreID);
                cmd.AddParameter("@bGetExistingReqToCreateNew", SqlDbType.Bit, bGetExistingReqToCreateNew);
                cn.Open();
                List<RequestDrugInwardForHiStoreDetails> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetReqOutwardDrugHIStoreDetailsCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }
        public override List<RequestDrugInwardForHiStore> SearchRequestDrugInwardHIStore(
           RequestSearchCriteria Criteria, long V_MedProductType, int pageIndex, int pageSize, bool bCount,
           out int totalcount)
        {
            totalcount = 0;
            if (Criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardHIStore_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramCode = new SqlParameter("@ReqNumCode", SqlDbType.VarChar, 128);
                paramCode.Value = ConvertNullObjectToDBNull(Criteria.Code);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(Criteria.FromDate);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(Criteria.ToDate);
                SqlParameter paramStaffID = new SqlParameter("@StaffID", SqlDbType.BigInt);
                paramStaffID.Value = ConvertNullObjectToDBNull(Criteria.StaffID);
                SqlParameter paramTypeID = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramTypeID.Value = ConvertNullObjectToDBNull(V_MedProductType);
                SqlParameter paramNhanHang = new SqlParameter("@DaNhanHang", SqlDbType.Bit);
                paramNhanHang.Value = ConvertNullObjectToDBNull(Criteria.DaNhanHang);
                SqlParameter paramIsApproved = new SqlParameter("@IsApproved", SqlDbType.Bit);
                paramIsApproved.Value = ConvertNullObjectToDBNull(Criteria.IsApproved);

                SqlParameter paramPtRegistrationID = new SqlParameter("@PtRegistrationID", SqlDbType.BigInt);
                paramPtRegistrationID.Value = ConvertNullObjectToDBNull(Criteria.PtRegistrationID);

                SqlParameter paramRequestStoreID = new SqlParameter("@RequestStoreID", SqlDbType.BigInt);
                paramRequestStoreID.Value = ConvertNullObjectToDBNull(Criteria.RequestStoreID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull("");

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCount;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramCode);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramStaffID);
                cmd.Parameters.Add(paramTypeID);
                cmd.Parameters.Add(paramNhanHang);
                cmd.Parameters.Add(paramIsApproved);
                cmd.AddParameter("@FindByApprovedDate", SqlDbType.Bit, ConvertNullObjectToDBNull(Criteria.FindByApprovedDate));
                cmd.Parameters.Add(paramRequestStoreID);

                cmd.Parameters.Add(paramPtRegistrationID);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                List<RequestDrugInwardForHiStore> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetRequestDrugInwardHIStoreCollectionFromReader(reader);
                reader.Close();

                if (bCount && paramTotal.Value != DBNull.Value)
                {
                    totalcount = (int)paramTotal.Value;
                }
                else
                    totalcount = -1;
                return drugs;
            }
        }

        public override bool RequestDrugInwardHIStore_Approved(RequestDrugInwardForHiStore Request)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardHIStore_Approved", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@RequestDrugInwardHiStoreID", SqlDbType.BigInt, Request.RequestDrugInwardHiStoreID);
                cmd.AddParameter("@ApprovedStaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(Request.ApprovedStaffID));
                cmd.AddParameter("@ApprovedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(Request.ApprovedDate));
                cmd.AddParameter("@IsApproved", SqlDbType.Bit, ConvertNullObjectToDBNull(Request.IsApproved));
                cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(Request.ConvertOutwardDetailsListToXml()));
                cn.Open();
                return cmd.ExecuteNonQuery() > 0;
            }
        }

        public override List<OutwardDrugMedDept> GetInBatchNumberAndPrice_ListForRequest(bool? IsCost,
                                                                                          long RequestDrugInwardHiStoreID,
                                                                                          long StoreID,
                                                                                          long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetInBatchNumberAndPriceHIStore_ForRequestDrugDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.BigInt, ConvertNullObjectToDBNull(IsCost));
                cmd.AddParameter("@RequestDrugInwardHiStoreID", SqlDbType.BigInt, RequestDrugInwardHiStoreID);
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, StoreID);
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, V_MedProductType);
                cn.Open();
                List<OutwardDrugMedDept> drugs = null;

                IDataReader reader = ExecuteReader(cmd);
                drugs = GetOutwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override List<RefGenMedProductDetails> RefGenMedProductDetails_SearchAutoPaging_ForHIStore(bool? IsCode,
            string BrandName,
            long? SupplierID,
            long V_MedProductType,
            long? RefGenDrugCatID_1,
            int PageSize,
            int PageIndex,
            out int TotalCount,
            long? RefGenDrugCatID_2 = null)
        {
            TotalCount = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRefGenMedProductDetails_SearchAutoPaging_ForHIStore", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(SupplierID));
                cmd.AddParameter("@PageIndex", SqlDbType.Int, PageIndex);
                cmd.AddParameter("@PageSize", SqlDbType.Int, PageSize);
                cmd.AddParameter("@RefGenDrugCatID_2", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_2));
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramTotal);
                cn.Open();
                List<RefGenMedProductDetails> objList = null;
                IDataReader reader = ExecuteReader(cmd);
                objList = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                if (paramTotal.Value != null)
                {
                    TotalCount = (int)paramTotal.Value;
                }
                else
                    TotalCount = -1;
                return objList;
            }
        }
        public override bool DeleteRequestDrugInwardHIStore(long RequestDrugInwardHiStoreID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardHIStore_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@RequestDrugInwardHiStoreID", SqlDbType.BigInt, RequestDrugInwardHiStoreID);
                cn.Open();
                int results = ExecuteNonQuery(cmd);
                return results > 0;
            }
        }
        //▲====== #016

        #region 45. Inward VTYTTH Med Dept
        public override List<OutwardDrugMedDeptInvoice> OutwardVTYTTHMedDeptInvoice_Cbx(long? StoreID, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                // k tìm thấy store cũ spOutwardDrugMedDeptInvoices_InMedDept
                SqlCommand cmd = new SqlCommand("spOutwardVTYTTHMedDeptInvoices_InMedDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<OutwardDrugMedDeptInvoice> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetOutwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDeptInvoice> SearchInwardVTYTTHMedDeptInvoice(
            InwardInvoiceSearchCriteria criteria, long? TypID, long? V_MedProductType, int pageIndex, int pageSize,
            bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDeptInvoice_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramInwardID = new SqlParameter("@InwardID", SqlDbType.VarChar, 128);
                paramInwardID.Value = ConvertNullObjectToDBNull(criteria.InwardID);
                SqlParameter paramInvoiveNumber = new SqlParameter("@InvoiceNumber", SqlDbType.VarChar, 128);
                paramInvoiveNumber.Value = ConvertNullObjectToDBNull(criteria.InvoiceNumber);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);
                SqlParameter paramV_MedProductType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramV_MedProductType.Value = ConvertNullObjectToDBNull(V_MedProductType);

                SqlParameter paramIsInwardOther = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramIsInwardOther.Value = ConvertNullObjectToDBNull(TypID);


                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramInwardID);
                cmd.Parameters.Add(paramInvoiveNumber);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramV_MedProductType);
                cmd.Parameters.Add(paramIsInwardOther);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                IList<InwardDrugMedDeptInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetInwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        public override InwardDrugMedDeptInvoice GetInwardVTYTTHMedDeptInvoice_ByID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDeptInvoice_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ID);
                cn.Open();
                InwardDrugMedDeptInvoice invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetInwardDrugMedDeptInvoiceFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardVTYTTHMedDept_ByIDInvoice(long inviID, int pageSize
            , int pageIndex, bool bCountTotal
            , out int totalCount
            , out decimal TongTienSPChuaVAT
            , out decimal CKTrenSP
            , out decimal TongTienTrenSPDaTruCK
            , out decimal TongCKTrenHoaDon
            , out decimal TongTienHoaDonCoThueNK
            , out decimal TongTienHoaDonCoVAT
            , out decimal TotalVATDifferenceAmount)
        {
            totalCount = 0;
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;
            TotalVATDifferenceAmount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDept_ByIDInvoice", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = " ";

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, 5, DBNull.Value, ParameterDirection.Output);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal)
                {
                    try
                    {
                        totalCount = (int)paramTotal.Value;
                        TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                        CKTrenSP = (decimal)paramCKTrenSP.Value;
                        TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                        TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                        TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                        TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                        TotalVATDifferenceAmount = (decimal)cmd.Parameters.Cast<SqlParameter>().Where(x => x.ParameterName == "@TotalVATDifferenceAmount").FirstOrDefault().Value;
                    }
                    catch
                    {
                        totalCount = -1;
                        TongTienSPChuaVAT = 0;
                        CKTrenSP = 0;
                        TongTienTrenSPDaTruCK = 0;
                        TongCKTrenHoaDon = 0;
                        TongTienHoaDonCoThueNK = 0;
                        TongTienHoaDonCoVAT = 0;
                        TotalVATDifferenceAmount = 0;
                    }
                }
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardVTYTTHMedDept_ByIDInvoiceNotPaging(long inviID
              , out decimal TongTienSPChuaVAT
              , out decimal CKTrenSP
              , out decimal TongTienTrenSPDaTruCK
              , out decimal TongCKTrenHoaDon
              , out decimal TongTienHoaDonCoThueNK
              , out decimal TongTienHoaDonCoVAT)
        {
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDept_ByIDInvoiceNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                try
                {
                    TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                    CKTrenSP = (decimal)paramCKTrenSP.Value;
                    TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                    TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                    TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                    TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                }
                catch
                {
                    TongTienSPChuaVAT = 0;
                    CKTrenSP = 0;
                    TongTienTrenSPDaTruCK = 0;
                    TongCKTrenHoaDon = 0;
                    TongTienHoaDonCoThueNK = 0;
                    TongTienHoaDonCoVAT = 0;
                }
                return invoicedrug;
            }
        }

        public override int AddInwardVTYTTHMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug, out long inwardid)
        {
            try
            {
                int results = 0;
                inwardid = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDeptInvoice_Insert", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));


                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));

                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));

                    cmd.AddParameter("@IsCheckBuyingPrice", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsCheckBuyingPrice));

                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));

                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramID);
                    cmd.Parameters.Add(paramError);

                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        inwardid = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardVTYTTHMedDept(long invoicedrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDept_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, invoicedrug);
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    return results;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool DeleteInwardVTYTTHMedDeptTemp(long InID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDeptTemp_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, InID);
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardVTYTTHMedDeptInvoice(long ID)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDeptInvoice_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InvID", SqlDbType.BigInt, ID);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int UpdateInwardVTYTTHMedDept(InwardDrugMedDept invoicedrug, long StaffID)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDept_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.InID));
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.inviID));
                    cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                    cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                    cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                    cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                    cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                    cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                    cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InBuyingPrice));
                    cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                     ConvertNullToZero(invoicedrug.DrugDeptPoDetailID));
                    cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                    cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.V_GoodsType));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                    cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                    cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                    cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                    cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                    cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                     ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                    cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.NormalPrice : 0));
                    cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIPatientPrice : 0));
                    cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIAllowedPrice : 0));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int UpdateInwardVTYTTHMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDeptInvoice_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    //cmd.AddParameter("@Deliverer", SqlDbType.NVarChar,ConvertNullObjectToDBNull(InvoiceDrug.Deliverer));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, InvoiceDrug.SupplierID);
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));
                    cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.TotalVATDifferenceAmount));
                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool AddInwardVTYTTHMedDept(DrugDeptPurchaseOrderDetail invoicedrug, long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDept_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
                cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
                cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.DrugDeptPoDetailID));
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                 ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.NormalPrice : 0));
                cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIPatientPrice : 0));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIAllowedPrice : 0));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        //private long InwardDrugMedDept_Insert_HangKyGoi(DrugDeptPurchaseOrderDetail invoicedrug, long inviID)
        //{
        //    long Res = 0;

        //    using (SqlConnection cn = new SqlConnection(this.ConnectionString))
        //    {
        //        SqlCommand cmd = new SqlCommand("spInwardDrugMedDept_Insert_HangKyGoi", cn);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
        //        cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
        //        cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
        //                         ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
        //        cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
        //                         ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
        //        cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
        //                         ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
        //        cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
        //                         ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
        //        cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
        //        cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
        //        cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
        //                         ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
        //        cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
        //                         ConvertNullObjectToDBNull(invoicedrug.DrugDeptPoDetailID));
        //        cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
        //                         ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
        //        cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
        //        cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
        //                         ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
        //        cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
        //        cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
        //        cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
        //                         ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
        //        cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
        //        cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
        //        cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
        //        cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.NormalPrice : 0));
        //        cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIPatientPrice : 0));
        //        cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIAllowedPrice : 0));
        //        SqlParameter paramInID = new SqlParameter("@InID", SqlDbType.BigInt);
        //        paramInID.Direction = ParameterDirection.Output;
        //        cmd.Parameters.Add(paramInID);

        //        cn.Open();
        //        ExecuteNonQuery(cmd);
        //        if (cmd.Parameters["@InID"].Value != null)
        //            Res = Convert.ToInt64(cmd.Parameters["@InID"].Value);

        //        return Res;
        //    }
        //}

        public override bool InwardVTYTTHMedDeptInvoice_UpdateCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDept_UpdateinCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool UpdateStatusVTYTTHMedDeptPurchaseOrder(long DrugDeptPoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_UpdateStatusByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptPoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DrugDeptPoID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override int InwardVTYTTHMedDeptInvoice_SaveXML(InwardDrugMedDeptInvoice InvoiceDrug, out long id)
        {
            try
            {
                int results = 0;
                id = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDeptInvoice_SaveXML", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@InvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice.ToString("yyyy/MM/dd")));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));
                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(InvoiceDrug.ConvertDetailsListToXml()));
                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramID);

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        id = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        //public override IList<InwardDrugMedDeptInvoice> CostTableForMedDeptInvoice_ByCoID(long CoID)
        //{
        //    using (SqlConnection cn = new SqlConnection(this.ConnectionString))
        //    {
        //        SqlCommand cmd = new SqlCommand("spCostTableForMedDeptInvoice_CoListID", cn);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.AddParameter("@CoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(CoID));
        //        cn.Open();
        //        List<InwardDrugMedDeptInvoice> invoicedrug = null;
        //        using (IDataReader reader = cmd.ExecuteReader())
        //        {
        //            invoicedrug = GetInwardDrugMedDeptInvoiceCollectionFromReader(reader);
        //        }

        //        return invoicedrug;
        //    }
        //}

        public override IList<CostTableMedDeptList> InwardVTYTTHMedDeptInvoice_GetListCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTYTTHMedDeptInvoice_GetListCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                List<CostTableMedDeptList> invoicedrug = new List<CostTableMedDeptList>();
                using (IDataReader reader = cmd.ExecuteReader())
                {
                    invoicedrug = GetCostTableMedDeptListCollectionFromReader(reader);
                }
                return invoicedrug;
            }
        }
        #endregion

        #region 46. Inward Vaccine Med Dept
        public override List<OutwardDrugMedDeptInvoice> OutwardTiemNguaMedDeptInvoice_Cbx(long? StoreID, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                // k tìm thấy store cũ spOutwardDrugMedDeptInvoices_InMedDept
                SqlCommand cmd = new SqlCommand("spOutwardVaccineMedDeptInvoices_InMedDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<OutwardDrugMedDeptInvoice> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetOutwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDeptInvoice> SearchInwardTiemNguaMedDeptInvoice(
            InwardInvoiceSearchCriteria criteria, long? TypID, long? V_MedProductType, int pageIndex, int pageSize,
            bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVaccineMedDeptInvoice_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramInwardID = new SqlParameter("@InwardID", SqlDbType.VarChar, 128);
                paramInwardID.Value = ConvertNullObjectToDBNull(criteria.InwardID);
                SqlParameter paramInvoiveNumber = new SqlParameter("@InvoiceNumber", SqlDbType.VarChar, 128);
                paramInvoiveNumber.Value = ConvertNullObjectToDBNull(criteria.InvoiceNumber);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);
                SqlParameter paramV_MedProductType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramV_MedProductType.Value = ConvertNullObjectToDBNull(V_MedProductType);

                SqlParameter paramIsInwardOther = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramIsInwardOther.Value = ConvertNullObjectToDBNull(TypID);


                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramInwardID);
                cmd.Parameters.Add(paramInvoiveNumber);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramV_MedProductType);
                cmd.Parameters.Add(paramIsInwardOther);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                IList<InwardDrugMedDeptInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetInwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        public override InwardDrugMedDeptInvoice GetInwardTiemNguaMedDeptInvoice_ByID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVaccineMedDeptInvoice_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ID);
                cn.Open();
                InwardDrugMedDeptInvoice invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetInwardDrugMedDeptInvoiceFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardTiemNguaMedDept_ByIDInvoice(long inviID, int pageSize
            , int pageIndex, bool bCountTotal
            , out int totalCount
            , out decimal TongTienSPChuaVAT
            , out decimal CKTrenSP
            , out decimal TongTienTrenSPDaTruCK
            , out decimal TongCKTrenHoaDon
            , out decimal TongTienHoaDonCoThueNK
            , out decimal TongTienHoaDonCoVAT
            , out decimal TotalVATDifferenceAmount)
        {
            totalCount = 0;
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;
            TotalVATDifferenceAmount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVaccineMedDept_ByIDInvoice", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = " ";

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, 5, DBNull.Value, ParameterDirection.Output);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal)
                {
                    try
                    {
                        totalCount = (int)paramTotal.Value;
                        TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                        CKTrenSP = (decimal)paramCKTrenSP.Value;
                        TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                        TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                        TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                        TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                        TotalVATDifferenceAmount = (decimal)cmd.Parameters.Cast<SqlParameter>().Where(x => x.ParameterName == "@TotalVATDifferenceAmount").FirstOrDefault().Value;
                    }
                    catch
                    {
                        totalCount = -1;
                        TongTienSPChuaVAT = 0;
                        CKTrenSP = 0;
                        TongTienTrenSPDaTruCK = 0;
                        TongCKTrenHoaDon = 0;
                        TongTienHoaDonCoThueNK = 0;
                        TongTienHoaDonCoVAT = 0;
                        TotalVATDifferenceAmount = 0;
                    }
                }
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardTiemNguaMedDept_ByIDInvoiceNotPaging(long inviID
              , out decimal TongTienSPChuaVAT
              , out decimal CKTrenSP
              , out decimal TongTienTrenSPDaTruCK
              , out decimal TongCKTrenHoaDon
              , out decimal TongTienHoaDonCoThueNK
              , out decimal TongTienHoaDonCoVAT)
        {
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVaccineMedDept_ByIDInvoiceNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                try
                {
                    TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                    CKTrenSP = (decimal)paramCKTrenSP.Value;
                    TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                    TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                    TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                    TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                }
                catch
                {
                    TongTienSPChuaVAT = 0;
                    CKTrenSP = 0;
                    TongTienTrenSPDaTruCK = 0;
                    TongCKTrenHoaDon = 0;
                    TongTienHoaDonCoThueNK = 0;
                    TongTienHoaDonCoVAT = 0;
                }
                return invoicedrug;
            }
        }

        public override int AddInwardTiemNguaMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug, out long inwardid)
        {
            try
            {
                int results = 0;
                inwardid = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVaccineMedDeptInvoice_Insert", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));


                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));

                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));

                    cmd.AddParameter("@IsCheckBuyingPrice", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsCheckBuyingPrice));

                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));

                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramID);
                    cmd.Parameters.Add(paramError);

                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        inwardid = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardTiemNguaMedDept(long invoicedrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVaccineMedDept_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, invoicedrug);
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    return results;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool DeleteInwardTiemNguaMedDeptTemp(long InID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVaccineMedDeptTemp_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, InID);
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardTiemNguaMedDeptInvoice(long ID)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVaccineMedDeptInvoice_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InvID", SqlDbType.BigInt, ID);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int UpdateInwardTiemNguaMedDept(InwardDrugMedDept invoicedrug, long StaffID)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVaccineMedDept_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.InID));
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.inviID));
                    cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                    cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                    cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                    cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                    cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                    cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                    cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InBuyingPrice));
                    cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                     ConvertNullToZero(invoicedrug.DrugDeptPoDetailID));
                    cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                    cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.V_GoodsType));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                    cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                    cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                    cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                    cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                    cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                     ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                    cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.NormalPrice : 0));
                    cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIPatientPrice : 0));
                    cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIAllowedPrice : 0));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int UpdateInwardTiemNguaMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVaccineMedDeptInvoice_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    //cmd.AddParameter("@Deliverer", SqlDbType.NVarChar,ConvertNullObjectToDBNull(InvoiceDrug.Deliverer));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, InvoiceDrug.SupplierID);
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));
                    cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.TotalVATDifferenceAmount));

                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool AddInwardTiemNguaMedDept(DrugDeptPurchaseOrderDetail invoicedrug, long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVaccineMedDept_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
                cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
                cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.DrugDeptPoDetailID));
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                 ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.NormalPrice : 0));
                cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIPatientPrice : 0));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIAllowedPrice : 0));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        //private long InwardDrugMedDept_Insert_HangKyGoi(DrugDeptPurchaseOrderDetail invoicedrug, long inviID)
        //{
        //    long Res = 0;

        //    using (SqlConnection cn = new SqlConnection(this.ConnectionString))
        //    {
        //        SqlCommand cmd = new SqlCommand("spInwardDrugMedDept_Insert_HangKyGoi", cn);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
        //        cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
        //        cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
        //                         ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
        //        cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
        //                         ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
        //        cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
        //                         ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
        //        cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
        //                         ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
        //        cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
        //        cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
        //        cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
        //                         ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
        //        cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
        //                         ConvertNullObjectToDBNull(invoicedrug.DrugDeptPoDetailID));
        //        cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
        //                         ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
        //        cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
        //        cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
        //                         ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
        //        cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
        //        cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
        //        cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
        //                         ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
        //        cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
        //        cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
        //        cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
        //        cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.NormalPrice : 0));
        //        cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIPatientPrice : 0));
        //        cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIAllowedPrice : 0));
        //        SqlParameter paramInID = new SqlParameter("@InID", SqlDbType.BigInt);
        //        paramInID.Direction = ParameterDirection.Output;
        //        cmd.Parameters.Add(paramInID);

        //        cn.Open();
        //        ExecuteNonQuery(cmd);
        //        if (cmd.Parameters["@InID"].Value != null)
        //            Res = Convert.ToInt64(cmd.Parameters["@InID"].Value);

        //        return Res;
        //    }
        //}

        public override bool InwardTiemNguaMedDeptInvoice_UpdateCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVaccineMedDept_UpdateinCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool UpdateStatusTiemNguaMedDeptPurchaseOrder(long DrugDeptPoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_UpdateStatusByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptPoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DrugDeptPoID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override int InwardTiemNguaMedDeptInvoice_SaveXML(InwardDrugMedDeptInvoice InvoiceDrug, out long id)
        {
            try
            {
                int results = 0;
                id = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVaccineMedDeptInvoice_SaveXML", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@InvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice.ToString("yyyy/MM/dd")));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));
                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(InvoiceDrug.ConvertDetailsListToXml()));
                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramID);

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        id = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override IList<CostTableMedDeptList> InwardTiemNguaMedDeptInvoice_GetListCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVaccineMedDeptInvoice_GetListCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                List<CostTableMedDeptList> invoicedrug = new List<CostTableMedDeptList>();
                using (IDataReader reader = cmd.ExecuteReader())
                {
                    invoicedrug = GetCostTableMedDeptListCollectionFromReader(reader);
                }
                return invoicedrug;
            }
        }
        #endregion

        #region 46. Inward Chemical Med Dept
        public override List<OutwardDrugMedDeptInvoice> OutwardChemicalMedDeptInvoice_Cbx(long? StoreID, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                // k tìm thấy store cũ spOutwardDrugMedDeptInvoices_InMedDept
                SqlCommand cmd = new SqlCommand("spOutwardChemicalMedDeptInvoices_InMedDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<OutwardDrugMedDeptInvoice> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetOutwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDeptInvoice> SearchInwardChemicalMedDeptInvoice(
            InwardInvoiceSearchCriteria criteria, long? TypID, long? V_MedProductType, int pageIndex, int pageSize,
            bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardChemicalMedDeptInvoice_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramInwardID = new SqlParameter("@InwardID", SqlDbType.VarChar, 128);
                paramInwardID.Value = ConvertNullObjectToDBNull(criteria.InwardID);
                SqlParameter paramInvoiveNumber = new SqlParameter("@InvoiceNumber", SqlDbType.VarChar, 128);
                paramInvoiveNumber.Value = ConvertNullObjectToDBNull(criteria.InvoiceNumber);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);
                SqlParameter paramV_MedProductType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramV_MedProductType.Value = ConvertNullObjectToDBNull(V_MedProductType);

                SqlParameter paramIsInwardOther = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramIsInwardOther.Value = ConvertNullObjectToDBNull(TypID);


                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramInwardID);
                cmd.Parameters.Add(paramInvoiveNumber);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramV_MedProductType);
                cmd.Parameters.Add(paramIsInwardOther);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                IList<InwardDrugMedDeptInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetInwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        public override InwardDrugMedDeptInvoice GetInwardChemicalMedDeptInvoice_ByID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardChemicalMedDeptInvoice_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ID);
                cn.Open();
                InwardDrugMedDeptInvoice invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetInwardDrugMedDeptInvoiceFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardChemicalMedDept_ByIDInvoice(long inviID, int pageSize
            , int pageIndex, bool bCountTotal
            , out int totalCount
            , out decimal TongTienSPChuaVAT
            , out decimal CKTrenSP
            , out decimal TongTienTrenSPDaTruCK
            , out decimal TongCKTrenHoaDon
            , out decimal TongTienHoaDonCoThueNK
            , out decimal TongTienHoaDonCoVAT
            , out decimal TotalVATDifferenceAmount)
        {
            totalCount = 0;
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;
            TotalVATDifferenceAmount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardChemicalMedDept_ByIDInvoice", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = " ";

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, 5, DBNull.Value, ParameterDirection.Output);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal)
                {
                    try
                    {
                        totalCount = (int)paramTotal.Value;
                        TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                        CKTrenSP = (decimal)paramCKTrenSP.Value;
                        TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                        TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                        TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                        TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                        TotalVATDifferenceAmount = (decimal)cmd.Parameters.Cast<SqlParameter>().Where(x => x.ParameterName == "@TotalVATDifferenceAmount").FirstOrDefault().Value;
                    }
                    catch
                    {
                        totalCount = -1;
                        TongTienSPChuaVAT = 0;
                        CKTrenSP = 0;
                        TongTienTrenSPDaTruCK = 0;
                        TongCKTrenHoaDon = 0;
                        TongTienHoaDonCoThueNK = 0;
                        TongTienHoaDonCoVAT = 0;
                        TotalVATDifferenceAmount = 0;
                    }
                }
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardChemicalMedDept_ByIDInvoiceNotPaging(long inviID
              , out decimal TongTienSPChuaVAT
              , out decimal CKTrenSP
              , out decimal TongTienTrenSPDaTruCK
              , out decimal TongCKTrenHoaDon
              , out decimal TongTienHoaDonCoThueNK
              , out decimal TongTienHoaDonCoVAT)
        {
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardChemicalMedDept_ByIDInvoiceNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                try
                {
                    TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                    CKTrenSP = (decimal)paramCKTrenSP.Value;
                    TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                    TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                    TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                    TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                }
                catch
                {
                    TongTienSPChuaVAT = 0;
                    CKTrenSP = 0;
                    TongTienTrenSPDaTruCK = 0;
                    TongCKTrenHoaDon = 0;
                    TongTienHoaDonCoThueNK = 0;
                    TongTienHoaDonCoVAT = 0;
                }
                return invoicedrug;
            }
        }

        public override int AddInwardChemicalMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug, out long inwardid)
        {
            try
            {
                int results = 0;
                inwardid = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardChemicalMedDeptInvoice_Insert", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));


                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));

                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));

                    cmd.AddParameter("@IsCheckBuyingPrice", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsCheckBuyingPrice));
                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));


                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramID);
                    cmd.Parameters.Add(paramError);

                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        inwardid = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardChemicalMedDept(long invoicedrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardChemicalMedDept_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, invoicedrug);
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    return results;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool DeleteInwardChemicalMedDeptTemp(long InID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardChemicalMedDeptTemp_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, InID);
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardChemicalMedDeptInvoice(long ID)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardChemicalMedDeptInvoice_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InvID", SqlDbType.BigInt, ID);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int UpdateInwardChemicalMedDept(InwardDrugMedDept invoicedrug, long StaffID)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardChemicalMedDept_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.InID));
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.inviID));
                    cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                    cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                    cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                    cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                    cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                    cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                    cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InBuyingPrice));
                    cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                     ConvertNullToZero(invoicedrug.DrugDeptPoDetailID));
                    cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                    cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.V_GoodsType));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                    cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                    cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                    cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                    cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                    cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                     ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                    cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.NormalPrice : 0));
                    cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIPatientPrice : 0));
                    cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIAllowedPrice : 0));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int UpdateInwardChemicalMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardChemicalMedDeptInvoice_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    //cmd.AddParameter("@Deliverer", SqlDbType.NVarChar,ConvertNullObjectToDBNull(InvoiceDrug.Deliverer));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, InvoiceDrug.SupplierID);
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));
                    cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.TotalVATDifferenceAmount));

                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool AddInwardChemicalMedDept(DrugDeptPurchaseOrderDetail invoicedrug, long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardChemicalMedDept_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
                cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
                cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.DrugDeptPoDetailID));
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                 ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.NormalPrice : 0));
                cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIPatientPrice : 0));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIAllowedPrice : 0));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        //private long InwardDrugMedDept_Insert_HangKyGoi(DrugDeptPurchaseOrderDetail invoicedrug, long inviID)
        //{
        //    long Res = 0;

        //    using (SqlConnection cn = new SqlConnection(this.ConnectionString))
        //    {
        //        SqlCommand cmd = new SqlCommand("spInwardDrugMedDept_Insert_HangKyGoi", cn);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
        //        cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
        //        cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
        //                         ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
        //        cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
        //                         ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
        //        cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
        //                         ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
        //        cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
        //                         ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
        //        cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
        //        cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
        //        cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
        //                         ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
        //        cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
        //                         ConvertNullObjectToDBNull(invoicedrug.DrugDeptPoDetailID));
        //        cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
        //                         ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
        //        cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
        //        cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
        //                         ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
        //        cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
        //        cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
        //        cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
        //                         ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
        //        cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
        //        cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
        //        cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
        //        cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.NormalPrice : 0));
        //        cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIPatientPrice : 0));
        //        cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIAllowedPrice : 0));
        //        SqlParameter paramInID = new SqlParameter("@InID", SqlDbType.BigInt);
        //        paramInID.Direction = ParameterDirection.Output;
        //        cmd.Parameters.Add(paramInID);

        //        cn.Open();
        //        ExecuteNonQuery(cmd);
        //        if (cmd.Parameters["@InID"].Value != null)
        //            Res = Convert.ToInt64(cmd.Parameters["@InID"].Value);

        //        return Res;
        //    }
        //}

        public override bool InwardChemicalMedDeptInvoice_UpdateCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardChemicalMedDept_UpdateinCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool UpdateStatusChemicalMedDeptPurchaseOrder(long DrugDeptPoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_UpdateStatusByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptPoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DrugDeptPoID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override int InwardChemicalMedDeptInvoice_SaveXML(InwardDrugMedDeptInvoice InvoiceDrug, out long id)
        {
            try
            {
                int results = 0;
                id = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardChemicalMedDeptInvoice_SaveXML", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@InvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice.ToString("yyyy/MM/dd")));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));
                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(InvoiceDrug.ConvertDetailsListToXml()));
                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramID);

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        id = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override IList<CostTableMedDeptList> InwardChemicalMedDeptInvoice_GetListCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardChemicalMedDeptInvoice_GetListCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                List<CostTableMedDeptList> invoicedrug = new List<CostTableMedDeptList>();
                using (IDataReader reader = cmd.ExecuteReader())
                {
                    invoicedrug = GetCostTableMedDeptListCollectionFromReader(reader);
                }
                return invoicedrug;
            }
        }
        #endregion

        #region 48. Inward Blood Med Dept
        public override List<OutwardDrugMedDeptInvoice> OutwardBloodMedDeptInvoice_Cbx(long? StoreID, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                // k tìm thấy store cũ spOutwardDrugMedDeptInvoices_InMedDept
                SqlCommand cmd = new SqlCommand("spOutwardBloodMedDeptInvoices_InMedDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<OutwardDrugMedDeptInvoice> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetOutwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDeptInvoice> SearchInwardBloodMedDeptInvoice(
            InwardInvoiceSearchCriteria criteria, long? TypID, long? V_MedProductType, int pageIndex, int pageSize,
            bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardBloodMedDeptInvoice_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramInwardID = new SqlParameter("@InwardID", SqlDbType.VarChar, 128);
                paramInwardID.Value = ConvertNullObjectToDBNull(criteria.InwardID);
                SqlParameter paramInvoiveNumber = new SqlParameter("@InvoiceNumber", SqlDbType.VarChar, 128);
                paramInvoiveNumber.Value = ConvertNullObjectToDBNull(criteria.InvoiceNumber);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);
                SqlParameter paramV_MedProductType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramV_MedProductType.Value = ConvertNullObjectToDBNull(V_MedProductType);

                SqlParameter paramIsInwardOther = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramIsInwardOther.Value = ConvertNullObjectToDBNull(TypID);


                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramInwardID);
                cmd.Parameters.Add(paramInvoiveNumber);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramV_MedProductType);
                cmd.Parameters.Add(paramIsInwardOther);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                IList<InwardDrugMedDeptInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetInwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        public override InwardDrugMedDeptInvoice GetInwardBloodMedDeptInvoice_ByID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardBloodMedDeptInvoice_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ID);
                cn.Open();
                InwardDrugMedDeptInvoice invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetInwardDrugMedDeptInvoiceFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardBloodMedDept_ByIDInvoice(long inviID, int pageSize
            , int pageIndex, bool bCountTotal
            , out int totalCount
            , out decimal TongTienSPChuaVAT
            , out decimal CKTrenSP
            , out decimal TongTienTrenSPDaTruCK
            , out decimal TongCKTrenHoaDon
            , out decimal TongTienHoaDonCoThueNK
            , out decimal TongTienHoaDonCoVAT
            , out decimal TotalVATDifferenceAmount)
        {
            totalCount = 0;
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;
            TotalVATDifferenceAmount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardBloodMedDept_ByIDInvoice", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = " ";

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, 5, DBNull.Value, ParameterDirection.Output);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal)
                {
                    try
                    {
                        totalCount = (int)paramTotal.Value;
                        TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                        CKTrenSP = (decimal)paramCKTrenSP.Value;
                        TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                        TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                        TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                        TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                        TotalVATDifferenceAmount = (decimal)cmd.Parameters.Cast<SqlParameter>().Where(x => x.ParameterName == "@TotalVATDifferenceAmount").FirstOrDefault().Value;
                    }
                    catch
                    {
                        totalCount = -1;
                        TongTienSPChuaVAT = 0;
                        CKTrenSP = 0;
                        TongTienTrenSPDaTruCK = 0;
                        TongCKTrenHoaDon = 0;
                        TongTienHoaDonCoThueNK = 0;
                        TongTienHoaDonCoVAT = 0;
                        TotalVATDifferenceAmount = 0;
                    }
                }
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardBloodMedDept_ByIDInvoiceNotPaging(long inviID
              , out decimal TongTienSPChuaVAT
              , out decimal CKTrenSP
              , out decimal TongTienTrenSPDaTruCK
              , out decimal TongCKTrenHoaDon
              , out decimal TongTienHoaDonCoThueNK
              , out decimal TongTienHoaDonCoVAT)
        {
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardBloodMedDept_ByIDInvoiceNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                try
                {
                    TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                    CKTrenSP = (decimal)paramCKTrenSP.Value;
                    TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                    TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                    TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                    TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                }
                catch
                {
                    TongTienSPChuaVAT = 0;
                    CKTrenSP = 0;
                    TongTienTrenSPDaTruCK = 0;
                    TongCKTrenHoaDon = 0;
                    TongTienHoaDonCoThueNK = 0;
                    TongTienHoaDonCoVAT = 0;
                }
                return invoicedrug;
            }
        }

        public override int AddInwardBloodMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug, out long inwardid)
        {
            try
            {
                int results = 0;
                inwardid = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardBloodMedDeptInvoice_Insert", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));


                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));

                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));

                    cmd.AddParameter("@IsCheckBuyingPrice", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsCheckBuyingPrice));

                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));

                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramID);
                    cmd.Parameters.Add(paramError);

                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        inwardid = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardBloodMedDept(long invoicedrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardBloodMedDept_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, invoicedrug);
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    return results;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool DeleteInwardBloodMedDeptTemp(long InID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardBloodMedDeptTemp_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, InID);
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardBloodMedDeptInvoice(long ID)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardBloodMedDeptInvoice_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InvID", SqlDbType.BigInt, ID);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int UpdateInwardBloodMedDept(InwardDrugMedDept invoicedrug, long StaffID)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardBloodMedDept_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.InID));
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.inviID));
                    cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                    cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                    cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                    cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                    cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                    cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                    cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InBuyingPrice));
                    cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                     ConvertNullToZero(invoicedrug.DrugDeptPoDetailID));
                    cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                    cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.V_GoodsType));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                    cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                    cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                    cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                    cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                    cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                     ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                    cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.NormalPrice : 0));
                    cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIPatientPrice : 0));
                    cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIAllowedPrice : 0));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int UpdateInwardBloodMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardBloodMedDeptInvoice_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    //cmd.AddParameter("@Deliverer", SqlDbType.NVarChar,ConvertNullObjectToDBNull(InvoiceDrug.Deliverer));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, InvoiceDrug.SupplierID);
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));
                    cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.TotalVATDifferenceAmount));
                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));
                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool AddInwardBloodMedDept(DrugDeptPurchaseOrderDetail invoicedrug, long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardBloodMedDept_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
                cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
                cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.DrugDeptPoDetailID));
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                 ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.NormalPrice : 0));
                cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIPatientPrice : 0));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIAllowedPrice : 0));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool InwardBloodMedDeptInvoice_UpdateCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardBloodMedDept_UpdateinCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool UpdateStatusBloodMedDeptPurchaseOrder(long DrugDeptPoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_UpdateStatusByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptPoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DrugDeptPoID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override int InwardBloodMedDeptInvoice_SaveXML(InwardDrugMedDeptInvoice InvoiceDrug, out long id)
        {
            try
            {
                int results = 0;
                id = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardBloodMedDeptInvoice_SaveXML", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@InvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice.ToString("yyyy/MM/dd")));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));
                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(InvoiceDrug.ConvertDetailsListToXml()));
                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramID);

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        id = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override IList<CostTableMedDeptList> InwardBloodMedDeptInvoice_GetListCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardBloodMedDeptInvoice_GetListCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                List<CostTableMedDeptList> invoicedrug = new List<CostTableMedDeptList>();
                using (IDataReader reader = cmd.ExecuteReader())
                {
                    invoicedrug = GetCostTableMedDeptListCollectionFromReader(reader);
                }
                return invoicedrug;
            }
        }
        #endregion

        #region 49. Inward ThanhTrung Med Dept
        public override List<OutwardDrugMedDeptInvoice> OutwardThanhTrungMedDeptInvoice_Cbx(long? StoreID, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                // k tìm thấy store cũ spOutwardDrugMedDeptInvoices_InMedDept
                SqlCommand cmd = new SqlCommand("spOutwardVaccineMedDeptInvoices_InMedDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<OutwardDrugMedDeptInvoice> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetOutwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDeptInvoice> SearchInwardThanhTrungMedDeptInvoice(
            InwardInvoiceSearchCriteria criteria, long? TypID, long? V_MedProductType, int pageIndex, int pageSize,
            bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDeptInvoice_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramInwardID = new SqlParameter("@InwardID", SqlDbType.VarChar, 128);
                paramInwardID.Value = ConvertNullObjectToDBNull(criteria.InwardID);
                SqlParameter paramInvoiveNumber = new SqlParameter("@InvoiceNumber", SqlDbType.VarChar, 128);
                paramInvoiveNumber.Value = ConvertNullObjectToDBNull(criteria.InvoiceNumber);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);
                SqlParameter paramV_MedProductType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramV_MedProductType.Value = ConvertNullObjectToDBNull(V_MedProductType);

                SqlParameter paramIsInwardOther = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramIsInwardOther.Value = ConvertNullObjectToDBNull(TypID);


                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramInwardID);
                cmd.Parameters.Add(paramInvoiveNumber);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramV_MedProductType);
                cmd.Parameters.Add(paramIsInwardOther);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                IList<InwardDrugMedDeptInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetInwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        public override InwardDrugMedDeptInvoice GetInwardThanhTrungMedDeptInvoice_ByID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDeptInvoice_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ID);
                cn.Open();
                InwardDrugMedDeptInvoice invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetInwardDrugMedDeptInvoiceFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardThanhTrungMedDept_ByIDInvoice(long inviID, int pageSize
            , int pageIndex, bool bCountTotal
            , out int totalCount
            , out decimal TongTienSPChuaVAT
            , out decimal CKTrenSP
            , out decimal TongTienTrenSPDaTruCK
            , out decimal TongCKTrenHoaDon
            , out decimal TongTienHoaDonCoThueNK
            , out decimal TongTienHoaDonCoVAT
            , out decimal TotalVATDifferenceAmount)
        {
            totalCount = 0;
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;
            TotalVATDifferenceAmount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDept_ByIDInvoice", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = " ";

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, 5, DBNull.Value, ParameterDirection.Output);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal)
                {
                    try
                    {
                        totalCount = (int)paramTotal.Value;
                        TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                        CKTrenSP = (decimal)paramCKTrenSP.Value;
                        TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                        TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                        TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                        TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                        TotalVATDifferenceAmount = (decimal)cmd.Parameters.Cast<SqlParameter>().Where(x => x.ParameterName == "@TotalVATDifferenceAmount").FirstOrDefault().Value;
                    }
                    catch
                    {
                        totalCount = -1;
                        TongTienSPChuaVAT = 0;
                        CKTrenSP = 0;
                        TongTienTrenSPDaTruCK = 0;
                        TongCKTrenHoaDon = 0;
                        TongTienHoaDonCoThueNK = 0;
                        TongTienHoaDonCoVAT = 0;
                        TotalVATDifferenceAmount = 0;
                    }
                }
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardThanhTrungMedDept_ByIDInvoiceNotPaging(long inviID
              , out decimal TongTienSPChuaVAT
              , out decimal CKTrenSP
              , out decimal TongTienTrenSPDaTruCK
              , out decimal TongCKTrenHoaDon
              , out decimal TongTienHoaDonCoThueNK
              , out decimal TongTienHoaDonCoVAT)
        {
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDept_ByIDInvoiceNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                try
                {
                    TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                    CKTrenSP = (decimal)paramCKTrenSP.Value;
                    TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                    TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                    TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                    TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                }
                catch
                {
                    TongTienSPChuaVAT = 0;
                    CKTrenSP = 0;
                    TongTienTrenSPDaTruCK = 0;
                    TongCKTrenHoaDon = 0;
                    TongTienHoaDonCoThueNK = 0;
                    TongTienHoaDonCoVAT = 0;
                }
                return invoicedrug;
            }
        }

        public override int AddInwardThanhTrungMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug, out long inwardid)
        {
            try
            {
                int results = 0;
                inwardid = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDeptInvoice_Insert", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));


                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));

                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));

                    cmd.AddParameter("@IsCheckBuyingPrice", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsCheckBuyingPrice));

                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));

                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramID);
                    cmd.Parameters.Add(paramError);

                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        inwardid = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardThanhTrungMedDept(long invoicedrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDept_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, invoicedrug);
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    return results;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool DeleteInwardThanhTrungMedDeptTemp(long InID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDeptTemp_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, InID);
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardThanhTrungMedDeptInvoice(long ID)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDeptInvoice_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InvID", SqlDbType.BigInt, ID);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int UpdateInwardThanhTrungMedDept(InwardDrugMedDept invoicedrug, long StaffID)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDept_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.InID));
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.inviID));
                    cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                    cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                    cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                    cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                    cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                    cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                    cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InBuyingPrice));
                    cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                     ConvertNullToZero(invoicedrug.DrugDeptPoDetailID));
                    cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                    cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.V_GoodsType));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                    cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                    cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                    cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                    cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                    cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                     ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                    cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.NormalPrice : 0));
                    cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIPatientPrice : 0));
                    cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIAllowedPrice : 0));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int UpdateInwardThanhTrungMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDeptInvoice_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    //cmd.AddParameter("@Deliverer", SqlDbType.NVarChar,ConvertNullObjectToDBNull(InvoiceDrug.Deliverer));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, InvoiceDrug.SupplierID);
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));
                    cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.TotalVATDifferenceAmount));

                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool AddInwardThanhTrungMedDept(DrugDeptPurchaseOrderDetail invoicedrug, long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDept_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
                cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
                cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.DrugDeptPoDetailID));
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                 ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.NormalPrice : 0));
                cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIPatientPrice : 0));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIAllowedPrice : 0));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool InwardThanhTrungMedDeptInvoice_UpdateCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDept_UpdateinCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool UpdateStatusThanhTrungMedDeptPurchaseOrder(long DrugDeptPoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_UpdateStatusByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptPoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DrugDeptPoID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override int InwardThanhTrungMedDeptInvoice_SaveXML(InwardDrugMedDeptInvoice InvoiceDrug, out long id)
        {
            try
            {
                int results = 0;
                id = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDeptInvoice_SaveXML", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@InvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice.ToString("yyyy/MM/dd")));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));
                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(InvoiceDrug.ConvertDetailsListToXml()));
                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramID);

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        id = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override IList<CostTableMedDeptList> InwardThanhTrungMedDeptInvoice_GetListCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardThanhTrungMedDeptInvoice_GetListCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                List<CostTableMedDeptList> invoicedrug = new List<CostTableMedDeptList>();
                using (IDataReader reader = cmd.ExecuteReader())
                {
                    invoicedrug = GetCostTableMedDeptListCollectionFromReader(reader);
                }
                return invoicedrug;
            }
        }
        #endregion
        #region 50. Inward VPP Med Dept
        public override List<OutwardDrugMedDeptInvoice> OutwardVPPMedDeptInvoice_Cbx(long? StoreID, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                // k tìm thấy store cũ spOutwardDrugMedDeptInvoices_InMedDept
                SqlCommand cmd = new SqlCommand("spOutwardVaccineMedDeptInvoices_InMedDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<OutwardDrugMedDeptInvoice> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetOutwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDeptInvoice> SearchInwardVPPMedDeptInvoice(
            InwardInvoiceSearchCriteria criteria, long? TypID, long? V_MedProductType, int pageIndex, int pageSize,
            bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVPPMedDeptInvoice_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramInwardID = new SqlParameter("@InwardID", SqlDbType.VarChar, 128);
                paramInwardID.Value = ConvertNullObjectToDBNull(criteria.InwardID);
                SqlParameter paramInvoiveNumber = new SqlParameter("@InvoiceNumber", SqlDbType.VarChar, 128);
                paramInvoiveNumber.Value = ConvertNullObjectToDBNull(criteria.InvoiceNumber);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);
                SqlParameter paramV_MedProductType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramV_MedProductType.Value = ConvertNullObjectToDBNull(V_MedProductType);

                SqlParameter paramIsInwardOther = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramIsInwardOther.Value = ConvertNullObjectToDBNull(TypID);


                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramInwardID);
                cmd.Parameters.Add(paramInvoiveNumber);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramV_MedProductType);
                cmd.Parameters.Add(paramIsInwardOther);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                IList<InwardDrugMedDeptInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetInwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        public override InwardDrugMedDeptInvoice GetInwardVPPMedDeptInvoice_ByID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVPPMedDeptInvoice_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ID);
                cn.Open();
                InwardDrugMedDeptInvoice invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetInwardDrugMedDeptInvoiceFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardVPPMedDept_ByIDInvoice(long inviID, int pageSize
            , int pageIndex, bool bCountTotal
            , out int totalCount
            , out decimal TongTienSPChuaVAT
            , out decimal CKTrenSP
            , out decimal TongTienTrenSPDaTruCK
            , out decimal TongCKTrenHoaDon
            , out decimal TongTienHoaDonCoThueNK
            , out decimal TongTienHoaDonCoVAT
            , out decimal TotalVATDifferenceAmount)
        {
            totalCount = 0;
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;
            TotalVATDifferenceAmount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVPPMedDept_ByIDInvoice", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = " ";

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, 5, DBNull.Value, ParameterDirection.Output);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal)
                {
                    try
                    {
                        totalCount = (int)paramTotal.Value;
                        TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                        CKTrenSP = (decimal)paramCKTrenSP.Value;
                        TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                        TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                        TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                        TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                        TotalVATDifferenceAmount = (decimal)cmd.Parameters.Cast<SqlParameter>().Where(x => x.ParameterName == "@TotalVATDifferenceAmount").FirstOrDefault().Value;
                    }
                    catch
                    {
                        totalCount = -1;
                        TongTienSPChuaVAT = 0;
                        CKTrenSP = 0;
                        TongTienTrenSPDaTruCK = 0;
                        TongCKTrenHoaDon = 0;
                        TongTienHoaDonCoThueNK = 0;
                        TongTienHoaDonCoVAT = 0;
                        TotalVATDifferenceAmount = 0;
                    }
                }
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardVPPMedDept_ByIDInvoiceNotPaging(long inviID
              , out decimal TongTienSPChuaVAT
              , out decimal CKTrenSP
              , out decimal TongTienTrenSPDaTruCK
              , out decimal TongCKTrenHoaDon
              , out decimal TongTienHoaDonCoThueNK
              , out decimal TongTienHoaDonCoVAT)
        {
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVPPMedDept_ByIDInvoiceNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                try
                {
                    TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                    CKTrenSP = (decimal)paramCKTrenSP.Value;
                    TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                    TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                    TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                    TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                }
                catch
                {
                    TongTienSPChuaVAT = 0;
                    CKTrenSP = 0;
                    TongTienTrenSPDaTruCK = 0;
                    TongCKTrenHoaDon = 0;
                    TongTienHoaDonCoThueNK = 0;
                    TongTienHoaDonCoVAT = 0;
                }
                return invoicedrug;
            }
        }

        public override int AddInwardVPPMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug, out long inwardid)
        {
            try
            {
                int results = 0;
                inwardid = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVPPMedDeptInvoice_Insert", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));


                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));

                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));

                    cmd.AddParameter("@IsCheckBuyingPrice", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsCheckBuyingPrice));


                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));


                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramID);
                    cmd.Parameters.Add(paramError);

                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        inwardid = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardVPPMedDept(long invoicedrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVPPMedDept_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, invoicedrug);
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    return results;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool DeleteInwardVPPMedDeptTemp(long InID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVPPMedDeptTemp_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, InID);
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardVPPMedDeptInvoice(long ID)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVPPMedDeptInvoice_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InvID", SqlDbType.BigInt, ID);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int UpdateInwardVPPMedDept(InwardDrugMedDept invoicedrug, long StaffID)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVPPMedDept_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.InID));
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.inviID));
                    cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                    cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                    cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                    cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                    cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                    cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                    cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InBuyingPrice));
                    cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                     ConvertNullToZero(invoicedrug.DrugDeptPoDetailID));
                    cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                    cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.V_GoodsType));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                    cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                    cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                    cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                    cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                    cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                     ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                    cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.NormalPrice : 0));
                    cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIPatientPrice : 0));
                    cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIAllowedPrice : 0));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int UpdateInwardVPPMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVPPMedDeptInvoice_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    //cmd.AddParameter("@Deliverer", SqlDbType.NVarChar,ConvertNullObjectToDBNull(InvoiceDrug.Deliverer));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, InvoiceDrug.SupplierID);
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));
                    cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.TotalVATDifferenceAmount));


                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));


                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool AddInwardVPPMedDept(DrugDeptPurchaseOrderDetail invoicedrug, long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVPPMedDept_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
                cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
                cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.DrugDeptPoDetailID));
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                 ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.NormalPrice : 0));
                cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIPatientPrice : 0));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIAllowedPrice : 0));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool InwardVPPMedDeptInvoice_UpdateCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVPPMedDept_UpdateinCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool UpdateStatusVPPMedDeptPurchaseOrder(long DrugDeptPoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_UpdateStatusByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptPoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DrugDeptPoID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override int InwardVPPMedDeptInvoice_SaveXML(InwardDrugMedDeptInvoice InvoiceDrug, out long id)
        {
            try
            {
                int results = 0;
                id = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVPPMedDeptInvoice_SaveXML", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@InvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice.ToString("yyyy/MM/dd")));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));
                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(InvoiceDrug.ConvertDetailsListToXml()));
                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramID);

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        id = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override IList<CostTableMedDeptList> InwardVPPMedDeptInvoice_GetListCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVPPMedDeptInvoice_GetListCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                List<CostTableMedDeptList> invoicedrug = new List<CostTableMedDeptList>();
                using (IDataReader reader = cmd.ExecuteReader())
                {
                    invoicedrug = GetCostTableMedDeptListCollectionFromReader(reader);
                }
                return invoicedrug;
            }
        }
        #endregion
        #region AutoComplete Xuất hàng
        public override List<RefGenMedProductDetails> GetVTYTTHForSellVisitorAutoComplete_ForRequestClinicDept(bool? IsCost, string BrandName, long StoreID, long V_MedProductTyp, long? RefGenDrugCatID_1, List<RequestDrugInwardClinicDept> RequestDrugList, bool? IsCode, long? PtRegistrationID, bool? IsHIPatient)
        {
            string strRequestDrugList = ConvertDetailsListRequestToXml(RequestDrugList);

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetVTYTTHForAutoCompleteForRequestClinicDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCost));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductTyp));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.Xml, ConvertNullObjectToDBNull(strRequestDrugList));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PtRegistrationID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }
        public override List<RefGenMedProductDetails> GetBloodForSellVisitorAutoComplete_ForRequestClinicDept(bool? IsCost, string BrandName, long StoreID, long V_MedProductTyp, long? RefGenDrugCatID_1, List<RequestDrugInwardClinicDept> RequestDrugList, bool? IsCode, long? PtRegistrationID, bool? IsHIPatient)
        {
            string strRequestDrugList = ConvertDetailsListRequestToXml(RequestDrugList);

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetBloodForAutoCompleteForRequestClinicDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCost));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductTyp));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.Xml, ConvertNullObjectToDBNull(strRequestDrugList));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PtRegistrationID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }
        public override List<RefGenMedProductDetails> GetThanhTrungForSellVisitorAutoComplete_ForRequestClinicDept(bool? IsCost, string BrandName, long StoreID, long V_MedProductTyp, long? RefGenDrugCatID_1, List<RequestDrugInwardClinicDept> RequestDrugList, bool? IsCode, long? PtRegistrationID, bool? IsHIPatient)
        {
            string strRequestDrugList = ConvertDetailsListRequestToXml(RequestDrugList);

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetThanhTrungForAutoCompleteForRequestClinicDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCost));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductTyp));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                //cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(RequestID));
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.Xml, ConvertNullObjectToDBNull(strRequestDrugList));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PtRegistrationID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }
        public override List<RefGenMedProductDetails> GetChemicalForSellVisitorAutoComplete_ForRequestClinicDept(bool? IsCost, string BrandName, long StoreID, long V_MedProductTyp, long? RefGenDrugCatID_1, List<RequestDrugInwardClinicDept> RequestDrugList, bool? IsCode, long? PtRegistrationID, bool? IsHIPatient)
        {
            string strRequestDrugList = ConvertDetailsListRequestToXml(RequestDrugList);

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetChemicalForAutoCompleteForRequestClinicDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCost));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductTyp));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                //cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(RequestID));
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.Xml, ConvertNullObjectToDBNull(strRequestDrugList));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PtRegistrationID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }
        public override List<RefGenMedProductDetails> GetVPPForSellVisitorAutoComplete_ForRequestClinicDept(bool? IsCost, string BrandName, long StoreID, long V_MedProductTyp, long? RefGenDrugCatID_1, List<RequestDrugInwardClinicDept> RequestDrugList, bool? IsCode, long? PtRegistrationID, bool? IsHIPatient)
        {
            string strRequestDrugList = ConvertDetailsListRequestToXml(RequestDrugList);

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetVPPForAutoCompleteForRequestClinicDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCost));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductTyp));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                //cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(RequestID));
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.Xml, ConvertNullObjectToDBNull(strRequestDrugList));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PtRegistrationID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }
        public override List<RefGenMedProductDetails> GetTiemNguaForSellVisitorAutoComplete_ForRequestClinicDept(bool? IsCost, string BrandName, long StoreID, long V_MedProductTyp, long? RefGenDrugCatID_1, List<RequestDrugInwardClinicDept> RequestDrugList, bool? IsCode, long? PtRegistrationID, bool? IsHIPatient)
        {
            string strRequestDrugList = ConvertDetailsListRequestToXml(RequestDrugList);

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetVaccineForAutoCompleteForRequestClinicDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCost));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductTyp));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                //cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.BigInt, ConvertNullObjectToDBNull(RequestID));
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.Xml, ConvertNullObjectToDBNull(strRequestDrugList));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PtRegistrationID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }

        public override List<RefGenMedProductDetails> GetVTTHForSellVisitorAutoComplete_ForRequestClinicDept(bool? IsCost, string BrandName, long StoreID, long V_MedProductTyp, long? RefGenDrugCatID_1, List<RequestDrugInwardClinicDept> RequestDrugList, bool? IsCode, long? PtRegistrationID, bool? IsHIPatient)
        {
            string strRequestDrugList = ConvertDetailsListRequestToXml(RequestDrugList);

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetVTTHForAutoCompleteForRequestClinicDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@IsCost", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCost));
                cmd.AddParameter("@BrandName", SqlDbType.NVarChar, ConvertNullObjectToDBNull(BrandName));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductTyp));
                cmd.AddParameter("@RefGenDrugCatID_1", SqlDbType.BigInt, ConvertNullObjectToDBNull(RefGenDrugCatID_1));
                cmd.AddParameter("@ReqDrugInClinicDeptID", SqlDbType.Xml, ConvertNullObjectToDBNull(strRequestDrugList));
                cmd.AddParameter("@IsCode", SqlDbType.Bit, ConvertNullObjectToDBNull(IsCode));
                cmd.AddParameter("@PtRegistrationID", SqlDbType.BigInt, ConvertNullObjectToDBNull(PtRegistrationID));
                cmd.AddParameter("@IsHIPatient", SqlDbType.Bit, ConvertNullObjectToDBNull(IsHIPatient));
                cn.Open();
                List<RefGenMedProductDetails> drugs = null;
                IDataReader reader = ExecuteReader(cmd);
                drugs = GetRefGenMedProductDetailsCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }
        #endregion

        #region 48. Inward VTTH Med Dept
        public override List<OutwardDrugMedDeptInvoice> OutwardVTTHMedDeptInvoice_Cbx(long? StoreID, long V_MedProductType)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                // k tìm thấy store cũ spOutwardDrugMedDeptInvoices_InMedDept
                SqlCommand cmd = new SqlCommand("spOutwardVTTHMedDeptInvoices_InMedDept", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));
                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cn.Open();
                List<OutwardDrugMedDeptInvoice> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetOutwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDeptInvoice> SearchInwardVTTHMedDeptInvoice(
            InwardInvoiceSearchCriteria criteria, long? TypID, long? V_MedProductType, int pageIndex, int pageSize,
            bool bCountTotal, out int totalCount)
        {
            totalCount = 0;
            if (criteria == null)
            {
                return null;
            }

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTTHMedDeptInvoice_Search", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter paramInwardID = new SqlParameter("@InwardID", SqlDbType.VarChar, 128);
                paramInwardID.Value = ConvertNullObjectToDBNull(criteria.InwardID);
                SqlParameter paramInvoiveNumber = new SqlParameter("@InvoiceNumber", SqlDbType.VarChar, 128);
                paramInvoiveNumber.Value = ConvertNullObjectToDBNull(criteria.InvoiceNumber);
                SqlParameter paramDateInvoice = new SqlParameter("@fromdate", SqlDbType.DateTime);
                paramDateInvoice.Value = ConvertNullObjectToDBNull(criteria.FromDate);
                SqlParameter paramSupplierID = new SqlParameter("@SupplierID", SqlDbType.BigInt);
                paramSupplierID.Value = ConvertNullObjectToDBNull(criteria.SupplierID);
                SqlParameter paramDateInput = new SqlParameter("@todate", SqlDbType.DateTime);
                paramDateInput.Value = ConvertNullObjectToDBNull(criteria.ToDate);
                SqlParameter paramV_MedProductType = new SqlParameter("@V_MedProductType", SqlDbType.BigInt);
                paramV_MedProductType.Value = ConvertNullObjectToDBNull(V_MedProductType);

                SqlParameter paramIsInwardOther = new SqlParameter("@TypID", SqlDbType.BigInt);
                paramIsInwardOther.Value = ConvertNullObjectToDBNull(TypID);


                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = ConvertNullObjectToDBNull(criteria.OrderBy);

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramInwardID);
                cmd.Parameters.Add(paramInvoiveNumber);
                cmd.Parameters.Add(paramDateInvoice);
                cmd.Parameters.Add(paramSupplierID);
                cmd.Parameters.Add(paramDateInput);
                cmd.Parameters.Add(paramV_MedProductType);
                cmd.Parameters.Add(paramIsInwardOther);

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cn.Open();
                IList<InwardDrugMedDeptInvoice> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetInwardDrugMedDeptInvoiceCollectionFromReader(reader);
                reader.Close();

                if (bCountTotal && paramTotal.Value != null)
                {
                    totalCount = (int)paramTotal.Value;
                }
                else
                    totalCount = -1;
                return drugs;
            }
        }

        public override InwardDrugMedDeptInvoice GetInwardVTTHMedDeptInvoice_ByID(long ID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTTHMedDeptInvoice_GetByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ID);
                cn.Open();
                InwardDrugMedDeptInvoice invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);

                if (reader.Read())
                {
                    invoicedrug = GetInwardDrugMedDeptInvoiceFromReader(reader);
                }
                reader.Close();
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardVTTHMedDept_ByIDInvoice(long inviID, int pageSize
            , int pageIndex, bool bCountTotal
            , out int totalCount
            , out decimal TongTienSPChuaVAT
            , out decimal CKTrenSP
            , out decimal TongTienTrenSPDaTruCK
            , out decimal TongCKTrenHoaDon
            , out decimal TongTienHoaDonCoThueNK
            , out decimal TongTienHoaDonCoVAT
            , out decimal TotalVATDifferenceAmount)
        {
            totalCount = 0;
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;
            TotalVATDifferenceAmount = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTTHMedDept_ByIDInvoice", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramPageSize = new SqlParameter("@PageSize", SqlDbType.Int);
                paramPageSize.Value = pageSize;
                SqlParameter paramPageIndex = new SqlParameter("@PageIndex", SqlDbType.Int);
                paramPageIndex.Value = pageIndex;

                SqlParameter paramOrderBy = new SqlParameter("@OrderBy", SqlDbType.NVarChar);
                paramOrderBy.Value = " ";

                SqlParameter paramCountTotal = new SqlParameter("@CountTotal", SqlDbType.Bit);
                paramCountTotal.Value = bCountTotal;
                SqlParameter paramTotal = new SqlParameter("@Total", SqlDbType.Int);
                paramTotal.Direction = ParameterDirection.Output;

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramPageSize);
                cmd.Parameters.Add(paramPageIndex);
                cmd.Parameters.Add(paramOrderBy);
                cmd.Parameters.Add(paramCountTotal);
                cmd.Parameters.Add(paramTotal);

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, 5, DBNull.Value, ParameterDirection.Output);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                if (bCountTotal)
                {
                    try
                    {
                        totalCount = (int)paramTotal.Value;
                        TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                        CKTrenSP = (decimal)paramCKTrenSP.Value;
                        TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                        TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                        TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                        TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                        TotalVATDifferenceAmount = (decimal)cmd.Parameters.Cast<SqlParameter>().Where(x => x.ParameterName == "@TotalVATDifferenceAmount").FirstOrDefault().Value;
                    }
                    catch
                    {
                        totalCount = -1;
                        TongTienSPChuaVAT = 0;
                        CKTrenSP = 0;
                        TongTienTrenSPDaTruCK = 0;
                        TongCKTrenHoaDon = 0;
                        TongTienHoaDonCoThueNK = 0;
                        TongTienHoaDonCoVAT = 0;
                        TotalVATDifferenceAmount = 0;
                    }
                }
                return invoicedrug;
            }
        }

        public override IList<InwardDrugMedDept> GetInwardVTTHMedDept_ByIDInvoiceNotPaging(long inviID
              , out decimal TongTienSPChuaVAT
              , out decimal CKTrenSP
              , out decimal TongTienTrenSPDaTruCK
              , out decimal TongCKTrenHoaDon
              , out decimal TongTienHoaDonCoThueNK
              , out decimal TongTienHoaDonCoVAT)
        {
            TongTienSPChuaVAT = 0;
            CKTrenSP = 0;
            TongTienTrenSPDaTruCK = 0;
            TongCKTrenHoaDon = 0;
            TongTienHoaDonCoThueNK = 0;
            TongTienHoaDonCoVAT = 0;

            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTTHMedDept_ByIDInvoiceNotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, inviID);

                SqlParameter paramTongTienSPChuaVAT = new SqlParameter("@TongTienSPChuaVAT", SqlDbType.Money);
                paramTongTienSPChuaVAT.Direction = ParameterDirection.Output;
                SqlParameter paramCKTrenSP = new SqlParameter("@CKTrenSP", SqlDbType.Money);
                paramCKTrenSP.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienTrenSPDaTruCK = new SqlParameter("@TongTienTrenSPDaTruCK", SqlDbType.Money);
                paramTongTienTrenSPDaTruCK.Direction = ParameterDirection.Output;
                SqlParameter paramTongCKTrenHoaDon = new SqlParameter("@TongCKTrenHoaDon", SqlDbType.Money);
                paramTongCKTrenHoaDon.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoThueNK = new SqlParameter("@TongTienHoaDonCoThueNK", SqlDbType.Money);
                paramTongTienHoaDonCoThueNK.Direction = ParameterDirection.Output;
                SqlParameter paramTongTienHoaDonCoVAT = new SqlParameter("@TongTienHoaDonCoVAT", SqlDbType.Money);
                paramTongTienHoaDonCoVAT.Direction = ParameterDirection.Output;

                cmd.Parameters.Add(paramTongTienSPChuaVAT);
                cmd.Parameters.Add(paramCKTrenSP);
                cmd.Parameters.Add(paramTongTienTrenSPDaTruCK);
                cmd.Parameters.Add(paramTongCKTrenHoaDon);
                cmd.Parameters.Add(paramTongTienHoaDonCoThueNK);
                cmd.Parameters.Add(paramTongTienHoaDonCoVAT);
                cn.Open();
                IList<InwardDrugMedDept> invoicedrug = null;
                IDataReader reader = ExecuteReader(cmd);
                invoicedrug = GetInwardDrugMedDeptCollectionFromReader(reader);
                reader.Close();
                try
                {
                    TongTienSPChuaVAT = (decimal)paramTongTienSPChuaVAT.Value;
                    CKTrenSP = (decimal)paramCKTrenSP.Value;
                    TongTienTrenSPDaTruCK = (decimal)paramTongTienTrenSPDaTruCK.Value;
                    TongCKTrenHoaDon = (decimal)paramTongCKTrenHoaDon.Value;
                    TongTienHoaDonCoThueNK = (decimal)paramTongTienHoaDonCoThueNK.Value;
                    TongTienHoaDonCoVAT = (decimal)paramTongTienHoaDonCoVAT.Value;
                }
                catch
                {
                    TongTienSPChuaVAT = 0;
                    CKTrenSP = 0;
                    TongTienTrenSPDaTruCK = 0;
                    TongCKTrenHoaDon = 0;
                    TongTienHoaDonCoThueNK = 0;
                    TongTienHoaDonCoVAT = 0;
                }
                return invoicedrug;
            }
        }

        public override int AddInwardVTTHMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug, out long inwardid)
        {
            try
            {
                int results = 0;
                inwardid = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVTTHMedDeptInvoice_Insert", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));


                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));

                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));

                    cmd.AddParameter("@IsCheckBuyingPrice", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsCheckBuyingPrice));

                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));


                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramID);
                    cmd.Parameters.Add(paramError);

                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        inwardid = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardVTTHMedDept(long invoicedrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVTTHMedDept_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, invoicedrug);
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    return results;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool DeleteInwardVTTHMedDeptTemp(long InID)
        {
            try
            {
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVTTHMedDeptTemp_Delete", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, InID);
                    cn.Open();
                    int count = ExecuteNonQuery(cmd);
                    cmd.Dispose();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int DeleteInwardVTTHMedDeptInvoice(long ID)
        {
            int results = 0;
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTTHMedDeptInvoice_Delete", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@InvID", SqlDbType.BigInt, ID);
                SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                paramError.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(paramError);
                cn.Open();
                ExecuteReader(cmd);
                if (paramError.Value != DBNull.Value)
                {
                    results = (int)paramError.Value;
                }
                cmd.Dispose();
            }
            return results;
        }

        public override int UpdateInwardVTTHMedDept(InwardDrugMedDept invoicedrug, long StaffID)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVTTHMedDept_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.InID));
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.inviID));
                    cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                    cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                     ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                    cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                    cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                    cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                    cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                    cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InBuyingPrice));
                    cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                     ConvertNullToZero(invoicedrug.DrugDeptPoDetailID));
                    cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                     ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                    cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt, ConvertNullObjectToDBNull(invoicedrug.V_GoodsType));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                    cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                    cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                    cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                    cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                    cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                     ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                    cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.NormalPrice : 0));
                    cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIPatientPrice : 0));
                    cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetails != null ? invoicedrug.RefGenMedProductDetails.HIAllowedPrice : 0));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StaffID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);
                    cn.Open();
                    cmd.ExecuteNonQuery();
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override int UpdateInwardVTTHMedDeptInvoice(InwardDrugMedDeptInvoice InvoiceDrug)
        {
            try
            {
                int results = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVTTHMedDeptInvoice_Update", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@InviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    //cmd.AddParameter("@Deliverer", SqlDbType.NVarChar,ConvertNullObjectToDBNull(InvoiceDrug.Deliverer));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, InvoiceDrug.SupplierID);
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime,
                                     ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit,
                                     ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));
                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                     ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@DifferenceValue", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.DifferenceValue));
                    cmd.AddParameter("@TotalVATDifferenceAmount", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.TotalVATDifferenceAmount));

                    cmd.AddParameter("@SerialNumber", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.SerialNumber));

                    cmd.AddParameter("@InvoiceForm", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvoiceForm));


                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override bool AddInwardVTTHMedDept(DrugDeptPurchaseOrderDetail invoicedrug, long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTTHMedDept_Insert", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@SdlID", SqlDbType.BigInt, ConvertZeroObjectToDBNull(invoicedrug.SdlID));
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cmd.AddParameter("@GenMedProductID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.GenMedProductID));
                cmd.AddParameter("@InBatchNumber", SqlDbType.VarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.InBatchNumber));
                cmd.AddParameter("@InProductionDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InProductionDate));
                cmd.AddParameter("@InExpiryDate", SqlDbType.DateTime,
                                 ConvertNullObjectToDBNull(invoicedrug.InExpiryDate));
                cmd.AddParameter("@InQuantity", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.InQuantity));
                cmd.AddParameter("@InBuyingPrice", SqlDbType.Decimal, ConvertNullToZero(invoicedrug.UnitPrice));
                cmd.AddParameter("@V_GoodsType", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.V_GoodsType.LookupID));
                cmd.AddParameter("@DrugDeptPoDetailID", SqlDbType.BigInt,
                                 ConvertNullObjectToDBNull(invoicedrug.DrugDeptPoDetailID));
                cmd.AddParameter("@SdlDescription", SqlDbType.NVarChar,
                                 ConvertNullObjectToDBNull(invoicedrug.SdlDescription));
                cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.Discounting));
                cmd.AddParameter("@DiscountByPercent", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.DiscountingByPercent));
                cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsPercent));
                cmd.AddParameter("@NoPrint", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.NoPrint));
                cmd.AddParameter("@PackageQuantity", SqlDbType.Float,
                                 ConvertNullObjectToDBNull(invoicedrug.PackageQuantity));
                cmd.AddParameter("@PackagePrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.PackagePrice));
                cmd.AddParameter("@IsUnitPackage", SqlDbType.Bit, ConvertNullObjectToDBNull(invoicedrug.IsUnitPackage));
                cmd.AddParameter("@TotalPriceNotVAT", SqlDbType.Money,
                                 ConvertNullObjectToDBNull(invoicedrug.TotalPriceNotVAT));
                cmd.AddParameter("@NormalPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.NormalPrice : 0));
                cmd.AddParameter("@HIPatientPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIPatientPrice : 0));
                cmd.AddParameter("@HIAllowedPrice", SqlDbType.Money, ConvertNullObjectToDBNull(invoicedrug.RefGenMedProductDetail != null ? invoicedrug.RefGenMedProductDetail.HIAllowedPrice : 0));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool InwardVTTHMedDeptInvoice_UpdateCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTTHMedDept_UpdateinCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override bool UpdateStatusVTTHMedDeptPurchaseOrder(long DrugDeptPoID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spDrugDeptPurchaseOrders_UpdateStatusByID", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@DrugDeptPoID", SqlDbType.BigInt, ConvertNullObjectToDBNull(DrugDeptPoID));
                cn.Open();
                int count = ExecuteNonQuery(cmd);
                cmd.Dispose();
                return count > 0;
            }
        }

        public override int InwardVTTHMedDeptInvoice_SaveXML(InwardDrugMedDeptInvoice InvoiceDrug, out long id)
        {
            try
            {
                int results = 0;
                id = 0;
                using (SqlConnection cn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand("spInwardVTTHMedDeptInvoice_SaveXML", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.inviID));
                    cmd.AddParameter("@InvID", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvID));
                    cmd.AddParameter("@StaffID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StaffID));
                    cmd.AddParameter("@SupplierID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.SupplierID));
                    cmd.AddParameter("@InvInvoiceNumber", SqlDbType.VarChar, ConvertNullObjectToDBNull(InvoiceDrug.InvInvoiceNumber));
                    cmd.AddParameter("@InvDateInvoice", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.InvDateInvoice.ToString("yyyy/MM/dd")));
                    cmd.AddParameter("@DSPTModifiedDate", SqlDbType.DateTime, ConvertNullObjectToDBNull(InvoiceDrug.DSPTModifiedDate));
                    cmd.AddParameter("@TempRequireUpdate", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.TempRequireUpdate));
                    cmd.AddParameter("@CustomTax", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.CustomTax));
                    cmd.AddParameter("@VAT", SqlDbType.Decimal, ConvertNullObjectToDBNull(InvoiceDrug.VAT));
                    cmd.AddParameter("@StoreIDOut", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreIDOut));
                    cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.StoreID));

                    SqlParameter paramError = new SqlParameter("@IDError", SqlDbType.Int);
                    paramError.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramError);

                    cmd.AddParameter("@CurrencyID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.CurrencyID));
                    cmd.AddParameter("@ExchangeRates", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.ExchangeRates));
                    cmd.AddParameter("@IsForeign", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsForeign));
                    cmd.AddParameter("@Notes", SqlDbType.NVarChar, ConvertNullObjectToDBNull(InvoiceDrug.Notes));
                    cmd.AddParameter("@Discounting", SqlDbType.Money, ConvertNullObjectToDBNull(InvoiceDrug.Discounting));
                    cmd.AddParameter("@DiscountByPercent", SqlDbType.Float, ConvertNullObjectToDBNull(InvoiceDrug.DiscountingByPercent));
                    cmd.AddParameter("@IsPercent", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsPercent));
                    cmd.AddParameter("@TypID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.TypID));
                    cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.V_MedProductType));
                    cmd.AddParameter("@IsInputTemp", SqlDbType.Bit, ConvertNullObjectToDBNull(InvoiceDrug.IsInputTemp));
                    cmd.AddParameter("@outiID", SqlDbType.BigInt, ConvertNullObjectToDBNull(InvoiceDrug.outiID));
                    cmd.AddParameter("@XML", SqlDbType.Xml, ConvertNullObjectToDBNull(InvoiceDrug.ConvertDetailsListToXml()));
                    SqlParameter paramID = new SqlParameter("@id", SqlDbType.BigInt);
                    paramID.Direction = ParameterDirection.Output;

                    cmd.Parameters.Add(paramID);

                    cn.Open();
                    ExecuteReader(cmd);
                    if (paramError.Value != DBNull.Value)
                    {
                        results = (int)paramError.Value;
                    }
                    if (paramID.Value != DBNull.Value)
                    {
                        id = (long)paramID.Value;
                    }
                    cmd.Dispose();
                }
                return results;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override IList<CostTableMedDeptList> InwardVTTHMedDeptInvoice_GetListCost(long inviID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spInwardVTTHMedDeptInvoice_GetListCost", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.AddParameter("@inviID", SqlDbType.BigInt, ConvertNullObjectToDBNull(inviID));
                cn.Open();
                List<CostTableMedDeptList> invoicedrug = new List<CostTableMedDeptList>();
                using (IDataReader reader = cmd.ExecuteReader())
                {
                    invoicedrug = GetCostTableMedDeptListCollectionFromReader(reader);
                }
                return invoicedrug;
            }
        }
        #endregion
        #region Other Function
        public override List<RequestDrugInwardClinicDept> SearchRequestDrugInwardClinicDept_NotPaging(long V_MedProductType, long StoreID)
        {
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spRequestDrugInwardClinicDept_Search_NotPaging", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.AddParameter("@V_MedProductType", SqlDbType.BigInt, ConvertNullObjectToDBNull(V_MedProductType));
                cmd.AddParameter("@StoreID", SqlDbType.BigInt, ConvertNullObjectToDBNull(StoreID));

                cn.Open();
                List<RequestDrugInwardClinicDept> drugs = null;

                IDataReader reader = ExecuteReader(cmd);

                drugs = GetRequestDrugInwardClinicDeptCollectionFromReader(reader);
                reader.Close();
                return drugs;
            }
        }
        #endregion
    }
}