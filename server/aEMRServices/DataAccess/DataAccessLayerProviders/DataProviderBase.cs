using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.IO;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.Data.SqlClient;
using DataEntities;
using eHCMS.Services.Core;
using Service.Core.Common;
using System.Text;
using eHCMS.Configurations;
using System.Collections;
using System.Threading;
using System.Globalization;
using System.Text.RegularExpressions;
using AxLogging;
using eHCMSLanguage;
using System.Diagnostics;
using DataEntities.MedicalInstruction;
/*
* 20161228 #001 CMN:   Add database for RefShelves
* 20161231 #002 CMN:   Add variable for VAT
* 20170218 #003 CMN:   Add Checkbox AllDept for InPtBills
* 20170308 #004 CMN:   Add HIStore Service
* 20170414 #005 CMN:   Added more ImagingResult Attribute
* 20170522 #006 CMN:   Added variable to check InPt 5 year HI without paid enough
* 20170810 #008 CMN:   Added Bid Service
* 20170821 #009 CMN:   Added AdjustClinicPrice Service
* 20170917 #010 CMN:   Add TotalInPtRevenue Report
* 20170927 #011 CMN:   Added DeadReason
* 20171020 #012 CMN:   Fixed Cast Type of INT
* 20171214 #013 CMN:   Added AgeString for display on form
* 20180102 #014 CMN:   Added properties for 4210 file
* 20180409 #015 TTM:   Added properties to update certificates of staffs
* 20180413 #016 TBLD:  Add reader cho HIBedCode
* 20180419 #017 TTM:   Add reader cho Volume
* 20180419 #018 TTM:   Add IntravenousCatID 
* 20180505 #019 TBLD:  Add reader cho list RefMedicalServiceItem
* 20180508 #020 TBLD:  Add reader cho HIApproved va V_AppointmentType
* 20180524 #021 TBLD:  Add reader cho V_ExamRegStatus
* 20180606 #022 CMN:   Added enum for LabSoft API
* 20180613 #023 TBLD:  Add reader cho HIRepResourceCode
* 20180728 #024 TTM:   Add V_CatDrugType for GetRefDrugGenericDetailFromReader.
* 20180801 #025 TTM:   Add V_CatDrugType & DrugCode for GetRefGenMedProductDetailsCollectionFromReader.
* 20180815 #026 TBL:   Add BNTKSauXV for GetPatientRegistrationFromReader
* 20180829 #027 TBL:   Add DoctorStaffID, MedInstructionDate for ConvertPatientRegistrationDetailsToXml
* 20180908 #028 TBL:   Add CertificateNumber
* 20180921 #029 TNHX:  Add Um_ModuleFunctionOperations
* 20181002 #030 TTM:   Add IsAllowSearchingPtByName: cấu hình cho biết có cho người dùng tìm đăng ký bằng tên bệnh nhân hay không. 
* 20181004 #031 TTM:   Thêm hàm đọc chi tiết thuốc.
* 20181004 #032 TBL:   Add IsAllowCopyDiagTrmt: cau hinh tao chan doan moi dua tren cu cho phep duoc copy bao nhieu truong
* 20181005 #033 TBL:   Add MinNumOfChar: cau hinh rang buoc so chu cho cac truong cua chan doan
* 20181005 #034 TNHX:  [BM0000034] Add config Mode for Printting&Show PhieuChiDinh Report
* 20181015 #035 TBL:   Add IsAllowInputDiagTrmt: cau hinh cac truong phai nhap cua chan doan
* 20181023 #036 TNHX:  [BM0003221] Add config for Report (HospitalName, HospitalAddress, DepartmentOfHealth, LogoUrl)
* 20181025 #037 TTM:   BM 0002173: Đọc thêm PtRegistration và V_RegistrationType.
* 20181027 #038 TBL:   BM 0000130: Added V_TreatmentType
* 20181027 #039 TTM:   BM 0004202: Đọc thêm IsEmptyPrescription (PreNoDrug) và IsOutCatConfirmed.
* 20181101 #040 TTM:   BM 0004220: Đọc thêm RefPharmacyDrugCatID và RefGenDrugCatID_1.
* 20181101 #041 TBL:   BM 0003228: Added GenericID
* 20181102 #042 TBL:   BM 0004212: Added PrescriptionIssueCode
* 20181103 #043 TTM:   BM 0005228: Lấy dữ liệu của WardNames trong Patients và HealthInsurance
* 20181201 #044 TNHX:  [BM0005312] Add config For PrintingMode of PhieuMienGiam
* 20181204 #045 TTM:   BM 0005324: Đọc dữ liệu cho phiếu nhập kho BHYT.
* 20181207 #046 TTM:   BM 0005339: Đọc dữ liệu BS thực hiện, ngày thực hiện và họ tên bác sĩ thực hiện CLS hình ảnh
* 20181211 #047 TTM:   BM 0004207: Đọc danh sách định dạng thẻ BHYT.
* 20181219 #048 TTM:   BM 0005443: Đọc dữ liệu cho phiếu lĩnh kho BHYT - nhà thuốc
* 20190329 #049 TTM:   BM 0006668: Fix lỗi tick bỏ tính BH, giá DV không hiện, khi tick vào tính BH trở lại, tiền BN âm, dẫn đến có thể ko lưu bill được do tổng bntt < 0
* 20190520 #050 TNHX:  [BM0006874] Add config For PrintingReceiptWithDrugBill
* 20190522 #051 TNHX:  [BM0006500] Add config For PrintingPhieuChiDinhForService
* 20190522 #052 TNHX:  [BM0010766] Thêm trường ngày xuất của phiếu xuất để nhập vào kho
* 20190603 #053 TNHX:  [BM0011782] Add reader cho RefPurposeForAccountant
* 20190608 #054 TTM:   BM 0011800: Bổ sung thêm 3 trường DQG: Tên, code, hàm lượng cập nhật và thêm mới.
* 20190608 #055 TNHX:  [BM0006826]: Add config For AllowTimeUpdatePrescription
* 20190620 #056 TTM:   BM 0011857: Đọc dữ liệu cho màn hình thông tin thuốc.
* 20190704 #057 TNHX:  [BM0011926] Add Config for DQGUnitname
* 20190725 #058 TNHX:  [BM0012981] Add DiagnosisFinal
* 20190908 #059 TNHX:  [BM0013263] Add field of SmallProcedure
* 20190917 #060 TNHX:  [BM0013247]: Add config For AllowSearchInReport
* 20190924 #061 TNHX:  BM 0014358: Extend Drug Information
* 20190925 #062 TTM:   Bổ sung thêm tên nhân viên và ICD cho những ca không có đăng ký khám.
* 20191010 #063 TTM:   BM 0017443: [Kiểm soát nhiễm khuẩn]: Bổ sung màn hình hội chẩn.
* 20191011 #064 TTM:   BM 0017421: Đọc dữ liệu cho thư ký y khoa theo cách mới.
* 20191014 #065 TTM:   BM 0017415: Bổ sung thêm trường hàm lượng nội bộ và cờ làm tròn cho danh mục thuốc.
* 20191109 #066 TNHX: [BM 0013015] Add config For BlockPaymentWhenNotSettlement
* 20191203 #067 TTM:   BM 0019688: [Tìm kiếm] Bổ sung popup tìm kiếm đăng ký cho khám sức khoẻ để tìm được đăng ký theo công ty trong hợp đồng.
* 20200328 #068 TNHX:   BM: Add config For BlockAddictiveAndPsychotropicDrugRequest + SecondExportBlockFormTheRequestForm
* 20200519 #069 TNHX:   BM: Add config For PrescriptionOutPtVersion + PrescriptionInPtVersion
* 20200717 #070 TNHX: [BM ] Add config For BlockPrescriptionMaxHIPay
* 20200717 #071 TTM:   BM 0039385: Lấy ngày RecCreateDate làm ngày y lệnh cho dịch vụ nếu như dịch vụ không có ngày y lệnh.
* 20200728 #072 TTM:    BM: 0039419: Fix lỗi không lưu VAT khi xuất hàng loạt.
* 20200807 #073 TNHX:   BM  Add config for AllowConfirmEmergencyOutPt
* 20200811 #074 TNHX:   BM  Add config for PhieuNhanThuocPrintingModeInConfirmHIView
* 20200812 #075 TTM:    BM: ?      : Fix lỗi khi cập nhật bill không kiểm tra dịch vụ CLS giãn cách
* 20200903 #076 TNHX:   BM  Add config for PharmacySearchByGenericName + PrintingWithoutExportPDF
* 20200925 #077 TNHX:   BM  Add reader cho FilterPrescriptionsHasHIPay
* 20201019 #078 TNHX:   BM  Thêm nơi làm việc = Tên đơn vị của HDDT + Thêm các trường theo yêu cầu XN để gửi Labconn cho Createnin
* 20201110 #079 TNHX:   BM  Add config for  WhichHospitalUseThisApp
* 20201117 #080 TNHX:   BM  Add config for  NumDayHIAgreeToPayAfterHIExpiresInPt
* 20201127 #081 TNHX:   BM  Add config for  AutoGetHICardDataFromHIPortal
* 20201211 #082 TNHX:   BM  Add config AutoCreatePACWorklist + PACSAPIAddress + PACUserName + PACPassword 
* + BlockInteractionSeverityLevelInPt + FilterDoctorByDeptResponsibilitiesInPt; Thêm biến cho đẩy dữ liệu qua PAC
* 20210122 #083 TNHX:   BM  Tách danh sách thêm/xóa/sửa + ghi log user cập nhật
* 20210206 #084 TNHX:   BM  Add config NgayNhapLaiTDK
* 20210220 #085 TNHX:   214  Add config ThuocDuocXuatThapPhan
* 20210228 #086 TNHX: 219 Add config AllowFirstHIExaminationWithoutPay
* 20210308 #087 TNHX:   225  Lấy ReqFromDeptID để kiếm tra trong tạo bill/ cập nhật bill
* 20210323 #088 TNHX:   240  Add config b21010961
* 20210324 #089 TNHX:   240  Add NotBeMain
* 20210308 #088 BaoLQ:   237  Lấy thông tin MedicalFile
* 20210323 #089 BaoLQ:   243  Lấy V_CheckMedicalFilesStatus theo đăng ký
* 20210411 #090 TNHX:     AllowReSelectRoomWhenLeaveDept
* 20210411 #091 BLQ:     Thêm các trường cho HistoryAndPhysicalExaminationInfo
* 20210527 #092 TNHX:    317 Thêm HIRepResourceCode cho từng test con
* 20210611 #093 TNHX:    346 Thêm RuleDiseasesReferences
* 20210620 #094 TNHX:    359 Thêm SocialInsuranceNumber
* 20210621 #095 TNHX:    329 Lấy danh sách CLS cần chỉ định lại
* 20210701 #096 TNHX:    260 truyền xuống user bsi mượn
* 20210710 #097 TNHX:    260 thêm cấu hình AllowToBorrowDoctorAccount
* 20210712 #098 TNHX:    260 thêm trường bsi tính tiền cho SmallProcedures
* 20210722 #099 TNHX: thêm cấu hình AgeMustHasDHST
* 20210805 #100 TNHX:  428 thêm cấu hình RefGenDrugCatID_2ForDrug
* 20210918 #101 TNHX:  436 thêm biến BedPatientID + IsNotBedService cho dịch vụ giường
* 20210923 #102 TNHX:  571 Quản lý điều dưỡng thực hiện y lệnh
* 20210923 #102 QTD:   Thêm cấu hình bật/tắt lọc kho nhận màn hình xuất
* 20210927 #103 TNHX:  681 Thêm cột quản lý tiền ngân sách nhà nước chi trả cho BN điều trị COVID
* 20211028 #104 TNHX:  757 Thêm đánh dấu khoa dùng để điều trị COVID
* 20211110 #105 TNHX:  757 Thêm quản lý danh mục gói dvkt
* 20211229 #106 TNHX:  Thêm bsi gây mê 2 tại nhập thông tin thủ thuật/ phẫu thuật
* 20220103 #107 TNHX:  AllowEditDiagnosisFinalForPatientCOVID
* 20220120 #108 TNHX:  848 Lấy mã bill cho màn hình tổng hợp tất cả bill
* 20220125 #109 TNHX:  Lấy thông tin nước tiểu cho DHST
* 20220225 #110 QTD:   Cấu hình thời gian cho phép chỉnh sửa y lệnh + add column NumOfDayAllowMedicalInstruction
* 20220309 #111 QTD:   Thêm trường cho phiếu khám vào viện
* 20220330 #112 QTD:   Thêm cấu hình bật QMS cho CLS/Duyệt toa
* 20220330 #113 DatTB:   Lấy thêm thông tin DLS trả hồ sơ.
* 20220414 #114 TNHX:   Cấu hình thời gian chờ sau khi đánh thuốc ngoại trú
* 20220316 #115 DatTB: Thêm xác nhận loại bệnh nhân trước khi nhập viện, xác nhận hoãn tạm ứng. lý do
* 20220416 #116 DatTB: Thêm cấu hình xác nhận hoãn tạm ứng
* 20220509 #117 DatTB: Chỉnh sửa HSBA RHM: Bệnh chuyên khoa long -> string
* 20220526 #118 DatTB: Lấy thêm các biến xác nhận tạm hoãn tạm ứng
* 20220518 #119 BaoLQ: Lấy thêm thông tin khóa bill
* 20220521 #120 BaoLQ: Thêm cấu hình in toa thuốc khi xem mẫu 12
* 20220530 #121 BLQ: Thêm cấu hình thời gian thao tác của bác sĩ
* 20220602 #122 DattB:  IssueID: 1619 | Thêm các biến kết luận
* 20220508 #123 DatTB: Thêm PrescriptID để lấy thông tin in hướng dẫn dùng thuốc
* 20220604 #124 QTD:   Kiểm tra ĐK ngoại trú đã nhập viện
* 20220609 #125 BLQ: Thêm ghi chú trong danh mục thuốc
* 20220620 #126 DatTB: Thêm filter danh mục xét nghiệm
* 20220622 #126 QTD:  Thêm đánh dấu bệnh nặng y lệnh nội trú
* 20220624 #126 DatTB: Thêm các thông tin: Mã số HSBA, Ngày đẩy cổng, Ngày tổng kết
* 20220625 #127 DatTB: Thêm function lấy loại điều trị ngoại trú
* 20220625 #128 BLQ: Lấy danh sách ICD cấu hình cho đợt điều trị
* 20220628 #129 DatTB: Thêm Ngày đẩy cổng, Ngày tổng kết convert qua datetime.
* 20220708 #130 BLQ: Thêm trường đánh giá ý thức và mức độ đau
* 20220725 #131 DatTB: Thêm thông tin nhịp thở RespiratoryRate vào DiagnosisTreatment_InPt, InPtDiagAndDoctorInstruction
* 20220729 #132 BLQ: Thêm trường phiếu nhập cho hàng ký gửi
* 20220729 #132 QTD: Thêm đánh dấu dịch vụ BH khi tạo bill
* 20220801 #133 DatTB: Lấy thêm ID đề nghị chuyển khoa để chặn tạo y lệnh khi có đề nghị
* 20220823 #134 DatTB: Chỉnh sửa màn hình chờ nhận thuốc
* 20220811 #134 QTD: Thêm thông tin cho Màn hình quản lý hồ sơ
* 20220811 #135 DatTB: Chỉnh sửa màn hình hồ sơ ĐTNT
* 20220813 #136  QTD:  Quản lý danh mục Dãy kệ ngăn
* + Thêm trường Ngày dự kiến tổng kết
* 20220815 #137 BLQ: Thêm cấu hình kiểm tra thông tin bệnh nhân khi lưu toa thuốc
* 20220823 #138 QTD:   Thêm cột Check tình trạng cấp cứu cho màn hình xác nhận BHYT
* 20220830 #139 QTD: Thêm trường cho màn hình thông tin bệnh án
* 20220903 #140 BLQ: Thêm cấu hình in mẫu 12 màn hình duyệt toa
* 20220908 #141 DatTB: Chuẩn bị thuốc trước: chỉnh sửa các mục phản hồi sau khi test
* 20220922 #142 BLQ: Thêm cấu hình số lượng thuốc cho phép khi cấp toa
* * 20220924 #143 BLQ: 
* + Thêm cấu hình tách toa thuốc mua ngoài
* + Thêm cấu hình Số điện thoại Bệnh viện
* 20220929 #144 DatTB:
* + Thêm textbox tìm bệnh nhân theo tên/mã/stt
* + Thêm đối tượng ưu tiên
* 20221001 #145 QTD: Thêm cột đánh dấu mã bệnh mới trong năm
* 20221007 #146 TNHX: Thêm giá trị dvkt cho phép đánh thuốc BH dù không có giá bH cho điều trị dài ngày
* 20221007 #147 TNHX: 2344 Thêm cấu hình load dsach mã thẻ ND70 (TT_5149_List_HIPCode)
* 20221010 #148 QTD:  Thêm cấu hình ẩn tạo mã HSBA nội trú
* 20221018 #149 QTD: Thêm cấu hình in biên lai và phiếu chỉ định khi lưu và trả tiền
* 20221019 #149 DatTB: Thêm biến kiểm tra hồ sơ đang được trả về để kiểm tra điều kiện Ràng buộc mở/khóa các nút Lưu TT XV, Hủy XV, Gửi hồ sơ theo quy trình
* 20221020 #150 QTD:  Thêm cấu hình in mẫu 01/KBCB màn hình Xuất viện/Ra viện
* 20221028 #151 BLQ: Cấu hình triệu chứng không tự đẩy qua màn hình đề nghị nhập viện
* 20221118 #152 QTD: Thêm cột đánh dấu phiếu nhập trả kho ký gửi
* 20221128 #153 TNHX: Thêm cấu hình đường dẫn kết quả xét nghiệm chữ ký số 
* 20221205 #154 QTD: Thêm cấu hình HIAPI và đẩy cổng tự động
*                   + Tách cấu hình Ngoại trú - Nội trú
* 20221212 #155 QTD: Thêm cấu hình cho phép nhập y lệnh diễn tiến không có Thuốc/CLS/DV Nội trú
* 20221216 #156 TNHX: 994 Thêm trường cho bsi sử dụng để đăng nhập đơn thuốc điện tử + Cấu hình đăng nhập của bệnh viện
* 20221224 #157 BLQ: Thêm lấy danh mục cấu hình
* 20230103 #158 QTD  Thêm cấu hình lập phiếu dự trù màn hình Lập phiếu lĩnh VPP/VTTH
* 20230105 #159 QTD  Thêm trường danh sách phiếu lĩnh cho dự trù
* 20230105 #160 DatTB: Thêm các thông tin người thân cho nội trú
* 20230108 #161 THNHX:  944 Thêm cấu hình đẩy đơn thuốc điện tử tự động khi xác nhận BHYT - ngoại trú + 
* 20221228 #162 QTD  Thêm cấu hình chỉ định gói dịch vụ từ màn hình khám bệnh bác sĩ
* 20230201 #163 DatTB: Thêm trường dữ liệu về KSNK trong phần Thông tin chung NB nội trú
* 20230213 #164 QTD  Lấy Thêm trường cho màn hình quản lý DTDT Nhà thuốc
* 20230211 #165 BLQ: Thêm cấu hình số toa thuốc điện tử cho phép xác nhận 1 lần
* 20230314 #166 BLQ: Thêm cấu hình áp dụng xml theo 130
* 20230322 #167 BLQ: Thêm check bệnh dài ngày trong danh mục ICD
* 20230322 #168 BLQ: Thêm trường phương pháp điều trị trong thông tin nhập viện
* 20230327 #169 BLQ: Thêm check pp sinh và check có thiết bị
* 20230330 #170 BLQ: Thêm trường lưu mã ICD10 của mã YHCT
* 20230403 #171 QTD: Lưu danh sách mã máy cho DVKT
* 20230408 #172 QTD: Thêm trường nhóm thầu cho y cụ
* 20230410 #173 TNHX: Lấy ttrạng thái của tự động đẩy cổng BHYT
* 20230503 #174 DatTB: 
* + Viết service get/insert/update tuổi động mạch
* + Viết stored get/insert/update tuổi động mạch
* 20230503 #174 QTD: Thêm dữ liệu sổ sơ kết
* 20230509 #175 DatTB: Thêm trường ghi chú cho danh mục phòngGetInPatientDeptDetailFromReader
* 20230516 #175 DatTB: Lấy thêm thông tin nghề nghiệp, dân tộc, quốc tịch
* 20230513 #176 QTD: Thêm dữ liệu Tab Vật tư kèm DVKT
* 20230518 #177 DatTB: Thêm service cho mẫu bệnh phẩm
* 20230510 #178 DatTB: Thêm điều kiện lấy bệnh nhân đã hoàn thành CLS
* 20230519 #179 DatTB: Thêm cột tên tiếng anh các danh mục xét nghiệm
* 20230531 #180 QTD:   Thêm trường cho Lookup
* 20230603 #181 DatTB: Thêm chức năng song ngữ mẫu kết quả xét nghiệm
* 20230617 #182 DatTB: Thêm biết cấu hình tên BV viết tắt
* 20230619 #183 QTD: Thêm cấu hình URL API cho SMS XN
* 20230622 #184 DatTB: Lấy thêm trường thông tin khoa/phòng đang nằm
* 20230703 #185 DatTB: Thêm service tiền sử sản phụ khoa
* 20230706 #186 DatTB: Thêm cấu hình cho quét QRCode của CCCD
* 20230712 #187 TNHX: 3323 Thêm cấu hình url cho PAC service gateway + lấy dữ liệu cho PAC GE
* 20230712 #188 DatTB: 
* + Thêm trường phân nhóm CLS cho BS đọc kết quả
* + Thêm cấu hình BS đọc KQ, Người thực hiện
* 20230713 #189 DatTB: Thêm trường bắt đầu phẫu thuật/ thủ thuật 
* 20230721 #190 BLQ: Thêm cấu hình thời gian đăng xuất
* 20230727 #191 BLQ: Chỉnh chức năng lịch làm việc
* 20230801 #192 DatTB: Thêm cấu hình version giá trần thuốc
* 20230814 #193 DatTB: Thêm trường vòng đầu
* 20230815 #194 DatTB: Thêm trường Tử vong (Thời điểm)
* 20230817 #195 DatTB: Thêm service:
* + Lấy dữ liệu ds người thân
* + Lấy dữ liệu mẫu bìa bệnh án
*/
namespace aEMR.DataAccessLayer.Providers
{
    public abstract class DataProviderBase : DataAccess
    {
        #region Mr.Tuyen
        protected string SerializeToXml<T>(T obj, bool withNamespace = false)
        {
            var ser = new XmlSerializer(typeof(T));

            var ms = new MemoryStream();
            if (!withNamespace)
            {
                var xmlnsEmpty = new XmlSerializerNamespaces();
                xmlnsEmpty.Add("", "");
                ser.Serialize(ms, obj, xmlnsEmpty);
            }
            else
            {
                ser.Serialize(ms, obj);
            }

            ms.Seek(0, SeekOrigin.Begin);
            string content;
            using (var sr = new StreamReader(ms))
            {
                content = sr.ReadToEnd();
            }
            return content;
        }
        public T DeserializeFromXml<T>(string xmlString)
        {
            if (String.IsNullOrEmpty(xmlString))
            {
                return default(T);
            }
            T result;
            var ser = new XmlSerializer(typeof(T));
            using (TextReader tr = new StringReader(xmlString))
            {
                result = (T)ser.Deserialize(tr);
            }
            return result;
        }
        //▼====: #105
        protected virtual PackageTechnicalServiceDetail GetPackageTechnicalServiceDetailObjFromReader(IDataReader reader)
        {
            PackageTechnicalServiceDetail p = new PackageTechnicalServiceDetail();
            try
            {
                if (reader.HasColumn("PackageTechnicalServiceDetailID") && reader["PackageTechnicalServiceDetailID"] != DBNull.Value)
                {
                    p.PackageTechnicalServiceDetailID = (long)reader["PackageTechnicalServiceDetailID"];
                }
                if (reader.HasColumn("PackageTechnicalServiceID") && reader["PackageTechnicalServiceID"] != DBNull.Value)
                {
                    p.PackageTechnicalServiceID = (long)reader["PackageTechnicalServiceID"];
                }
                if (reader.HasColumn("Qty") && reader["Qty"] != DBNull.Value)
                {
                    p.Qty = Convert.ToInt16(reader["Qty"]);
                }
                if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
                {
                    p.MedServiceID = (long)reader["MedServiceID"];
                    p.ObjRefMedicalServiceItem = new RefMedicalServiceItem();
                    try
                    {
                        if (reader.HasColumn("MedServiceID"))
                        {
                            p.ObjRefMedicalServiceItem.MedServiceID = (long)reader["MedServiceID"];
                        }
                        if (reader.HasColumn("MedServiceName"))
                        {
                            p.ObjRefMedicalServiceItem.MedServiceName = reader["MedServiceName"].ToString();
                        }
                        if (reader.HasColumn("MedServiceCode"))
                        {
                            p.ObjRefMedicalServiceItem.MedServiceCode = reader["MedServiceCode"].ToString();
                        }
                        p.ObjRefMedicalServiceItem = GetMedicalServiceItemFromReader(reader);
                    }
                    catch { }
                }
                if (reader.HasColumn("PCLExamTypeID") && reader["PCLExamTypeID"] != DBNull.Value)
                {
                    p.PCLExamTypeID = (long)reader["PCLExamTypeID"];
                    p.ObjPCLExamType = new PCLExamType();
                    try
                    {
                        if (reader.HasColumn("PCLExamTypeID"))
                        {
                            p.ObjPCLExamType.PCLExamTypeID = (long)reader["PCLExamTypeID"];
                        }
                        if (reader.HasColumn("PCLExamTypeName"))
                        {
                            p.ObjPCLExamType.PCLExamTypeName = reader["PCLExamTypeName"].ToString();
                        }
                        if (reader.HasColumn("PCLExamTypeCode"))
                        {
                            p.ObjPCLExamType.PCLExamTypeCode = reader["PCLExamTypeCode"].ToString();
                        }
                        p.ObjPCLExamType = GetPCLExamTypeFromReader(reader);
                    }
                    catch { }
                }

            }
            catch
            { return null; }
            return p;
        }

        protected virtual List<PackageTechnicalServiceDetail> GetPackageTechnicalServiceDetailCollectionFromReader(IDataReader reader)
        {
            List<PackageTechnicalServiceDetail> lst = new List<PackageTechnicalServiceDetail>();
            while (reader.Read())
            {
                lst.Add(GetPackageTechnicalServiceDetailObjFromReader(reader));
            }
            return lst;
        }

        protected virtual List<PackageTechnicalService> GetPackageTechnicalServiceCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PackageTechnicalService>();
            while (reader.Read())
            {
                var mPackageTechnicalService = new PackageTechnicalService();
                mPackageTechnicalService.FillData(reader);
                retVal.Add(mPackageTechnicalService);
            }
            return retVal;
        }

        protected virtual PackageTechnicalService GetPackageTechnicalServiceFromReader(IDataReader reader)
        {
            var mPackageTechnicalService = new PackageTechnicalService();
            mPackageTechnicalService.FillData(reader);
            return mPackageTechnicalService;
        }
        //▲====: #105
        //▼====: #053
        protected virtual RefPurposeForAccountant GetPurposeForAccountantFromReader(IDataReader reader)
        {
            var p = new RefPurposeForAccountant();
            if (reader.HasColumn("PurposeID") && reader["PurposeID"] != DBNull.Value)
            {
                p.PurposeID = Convert.ToInt16(reader["PurposeID"]);
            }
            if (reader.HasColumn("PurposeName") && reader["PurposeName"] != DBNull.Value)
            {
                p.PurposeName = reader["PurposeName"].ToString();
            }
            if (reader.HasColumn("PurposeCode") && reader["PurposeCode"] != DBNull.Value)
            {
                p.PurposeCode = reader["PurposeCode"].ToString();
            }
            if (reader.HasColumn("PurposeType") && reader["PurposeType"] != DBNull.Value)
            {
                p.PurposeType = Convert.ToInt16(reader["PurposeType"]);
            }
            if (reader.HasColumn("PurposeTypeName") && reader["PurposeTypeName"] != DBNull.Value)
            {
                p.PurposeCode = reader["PurposeTypeName"].ToString();
            }
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = Convert.ToBoolean(reader["IsActive"]);
            }
            if (reader.HasColumn("Descriptions") && reader["Descriptions"] != DBNull.Value)
            {
                p.PurposeCode = reader["Descriptions"].ToString();
            }

            return p;
        }

        protected virtual List<RefPurposeForAccountant> GetPurposeForAccountantCollectionFromReader(IDataReader reader)
        {
            var service = new List<RefPurposeForAccountant>();
            while (reader.Read())
            {
                service.Add(GetPurposeForAccountantFromReader(reader));
            }
            return service;
        }
        //▲====: #053
        //▼====: #077
        protected virtual FilterPrescriptionsHasHIPay GetFilterPrescriptionsHasHIPayFromReader(IDataReader reader)
        {
            var p = new FilterPrescriptionsHasHIPay();
            if (reader.HasColumn("FilterID") && reader["FilterID"] != DBNull.Value)
            {
                p.FilterID = Convert.ToInt64(reader["FilterID"]);
            }
            if (reader.HasColumn("FilterType") && reader["FilterType"] != DBNull.Value)
            {
                p.FilterType = Convert.ToInt16(reader["FilterType"]);
            }
            if (reader.HasColumn("HIPayFrom") && reader["HIPayFrom"] != DBNull.Value)
            {
                p.HIPayFrom = Convert.ToInt32(reader["HIPayFrom"]);
            }
            if (reader.HasColumn("HIPayTo") && reader["HIPayTo"] != DBNull.Value)
            {
                p.HIPayTo = Convert.ToInt32(reader["HIPayTo"]);
            }
            if (reader.HasColumn("IsBlock") && reader["IsBlock"] != DBNull.Value)
            {
                p.IsBlock = Convert.ToBoolean(reader["IsBlock"]);
            }
            if (reader.HasColumn("ListICDSkip") && reader["ListICDSkip"] != DBNull.Value)
            {
                p.ListICDSkip = reader["ListICDSkip"].ToString();
            }
            if (reader.HasColumn("ListPatientCodeSkip") && reader["ListPatientCodeSkip"] != DBNull.Value)
            {
                p.ListPatientCodeSkip = reader["ListPatientCodeSkip"].ToString();
            }
            if (reader.HasColumn("ListDrugCodeSkip") && reader["ListDrugCodeSkip"] != DBNull.Value)
            {
                p.ListDrugCodeSkip = reader["ListDrugCodeSkip"].ToString();
            }
            if (reader.HasColumn("IsUsed") && reader["IsUsed"] != DBNull.Value)
            {
                p.IsUsed = Convert.ToBoolean(reader["IsUsed"]);
            }
            if (reader.HasColumn("AllPrescription") && reader["AllPrescription"] != DBNull.Value)
            {
                p.AllPrescription = Convert.ToBoolean(reader["AllPrescription"]);
            }
            if (reader.HasColumn("Day") && reader["Day"] != DBNull.Value)
            {
                p.Day = Convert.ToInt16(reader["Day"]);
            }
            if (reader.HasColumn("AnotherHIPayFrom") && reader["AnotherHIPayFrom"] != DBNull.Value)
            {
                p.AnotherHIPayFrom = Convert.ToInt32(reader["AnotherHIPayFrom"]);
            }
            if (reader.HasColumn("ListSpecialICD") && reader["ListSpecialICD"] != DBNull.Value)
            {
                p.ListSpecialICD = Convert.ToString(reader["ListSpecialICD"]);
            }
            if (reader.HasColumn("ListSpecialDrugCode") && reader["ListSpecialDrugCode"] != DBNull.Value)
            {
                p.ListSpecialDrugCode = Convert.ToString(reader["ListSpecialDrugCode"]);
            }

            return p;
        }

        protected virtual List<FilterPrescriptionsHasHIPay> GetFilterPrescriptionsHasHIPayCollectionFromReader(IDataReader reader)
        {
            var service = new List<FilterPrescriptionsHasHIPay>();
            while (reader.Read())
            {
                service.Add(GetFilterPrescriptionsHasHIPayFromReader(reader));
            }
            return service;
        }
        //▲====: #077

        protected virtual PatientAppointment GetAppointmentFromReader(IDataReader reader)
        {
            var p = new PatientAppointment
            {
                AppointmentID = (long)reader["AppointmentID"]
            };
            p.Staff = new Staff();
            if (reader.HasColumn("StaffID ") && reader["StaffID "] != DBNull.Value)
            {
                p.StaffID = (long)reader["StaffID"];
                p.Staff.StaffID = (long)reader["StaffID"];
            }
            if (reader.HasColumn("V_ApptStatus") && reader["V_ApptStatus"] != DBNull.Value)
            {
                var appStatus = (long)reader["V_ApptStatus"];

                if (Enum.IsDefined(typeof(AllLookupValues.ApptStatus), appStatus))
                {
                    p.V_ApptStatus = (AllLookupValues.ApptStatus)appStatus;
                }
                else
                {
                    p.V_ApptStatus = AllLookupValues.ApptStatus.UNKNOWN;
                }
                p.ApptStatus = GetLookupFromReader(reader);
            }
            if (reader.HasColumn("StaffName") && reader["StaffName"] != DBNull.Value)
            {
                p.Staff.FullName = reader["StaffName"].ToString();
            }
            p.DoctorStaff = new Staff();
            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.DoctorStaffID = (long)reader["DoctorStaffID"];
            }
            if (reader.HasColumn("DoctorFullName") && reader["DoctorFullName"] != DBNull.Value)
            {
                p.DoctorStaff.FullName = reader["DoctorFullName"].ToString();
            }
            if (reader.HasColumn("RecDateCreated") && reader["RecDateCreated"] != DBNull.Value)
            {
                p.RecDateCreated = (DateTime)reader["RecDateCreated"];
            }
            if (reader.HasColumn("DateModified") && reader["DateModified"] != DBNull.Value)
            {
                p.DateModified = reader["DateModified"] as DateTime?;
            }
            if (reader.HasColumn("WPID") && reader["WPID"] != DBNull.Value)
            {
                p.WPID = reader["WPID"] as int?;
            }
            if (reader.HasColumn("NDay") && reader["NDay"] != DBNull.Value)
            {
                p.NDay = reader["NDay"] as Int32?;
            }
            if (reader.HasColumn("ApptDate") && reader["ApptDate"] != DBNull.Value)
            {
                p.ApptDate = reader["ApptDate"] as DateTime?;
            }
            //p.ApptDate = p.ApptDate == null && p.NDay != null ? DateTime.Now.Date.AddDays((int)p.NDay) as DateTime? : p.ApptDate;
            if (reader.HasColumn("AllowPaperReferralUseNextConsult") && reader["AllowPaperReferralUseNextConsult"] != DBNull.Value)
            {
                p.AllowPaperReferralUseNextConsult = Convert.ToBoolean(reader["AllowPaperReferralUseNextConsult"]);
            }
            if (reader.HasColumn("HasChronicDisease") && reader["HasChronicDisease"] != DBNull.Value)
            {
                p.HasChronicDisease = reader["HasChronicDisease"] as bool?;
            }
            if (reader.HasColumn("ReasonToAllowPaperReferral") && reader["ReasonToAllowPaperReferral"] != DBNull.Value)
            {
                p.ReasonToAllowPaperReferral = reader["ReasonToAllowPaperReferral"].ToString();
            }
            if (reader.HasColumn("IsCanEdit") && reader["IsCanEdit"] != DBNull.Value)
            {
                p.IsCanEdit = Convert.ToBoolean(reader["IsCanEdit"]);
            }
            p.EntityState = EntityState.PERSITED;
            if (reader.HasColumn("IsCanEdit") && reader["IsCanEdit"] != DBNull.Value)
            {
                p.IsCanEdit = Convert.ToBoolean(reader["IsCanEdit"]);
            }
            if (reader.HasColumn("MedServiceNames"))
            {
                p.MedServiceNames = reader["MedServiceNames"] as string;
            }
            if (reader.HasColumn("ServiceRecID"))
            {
                p.ServiceRecID = reader["ServiceRecID"] as long?;
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = (long)reader["PtRegistrationID"];
            }
            if (reader.HasColumn("isHIAppt") && reader["isHIAppt"] != DBNull.Value)
            {
                p.isHIAppt = (bool)reader["isHIAppt"];
            }
            if (reader.HasColumn("CreatedByInPtRegis") && reader["CreatedByInPtRegis"] != DBNull.Value)
            {
                p.CreatedByInPtRegis = (bool)reader["CreatedByInPtRegis"];
            }
            if (reader.HasColumn("IsEmergInPtReExamApp") && reader["IsEmergInPtReExamApp"] != DBNull.Value)
            {
                p.IsEmergInPtReExamApp = (bool)reader["IsEmergInPtReExamApp"];
            }
            if (reader.HasColumn("V_AppointmentType") && reader["V_AppointmentType"] != DBNull.Value)
            {
                p.V_AppointmentType = (long)reader["V_AppointmentType"];
            }
            if (reader.HasColumn("HosClientContractID") && reader["HosClientContractID"] != DBNull.Value)
            {
                p.HosClientContractID = (long)reader["HosClientContractID"];
                p.ClientContract = new HospitalClientContract { HosClientContractID = (long)reader["HosClientContractID"] };
                if (reader.HasColumn("IsPayAddingMoreSvs") && reader["IsPayAddingMoreSvs"] != DBNull.Value)
                {
                    p.ClientContract.IsPayAddingMoreSvs = Convert.ToBoolean(reader["IsPayAddingMoreSvs"]);
                }
                if (reader.HasColumn("ContractNo") && reader["ContractNo"] != DBNull.Value)
                {
                    p.ClientContract.ContractNo = Convert.ToString(reader["ContractNo"]);
                }
                if (reader.HasColumn("ContractName") && reader["ContractName"] != DBNull.Value)
                {
                    p.ClientContract.ContractName = Convert.ToString(reader["ContractName"]);
                }
                if (reader.HasColumn("DiscountPercent") && reader["DiscountPercent"] != DBNull.Value)
                {
                    p.ClientContract.DiscountPercent = Convert.ToByte(reader["DiscountPercent"]);
                }
            }
            if (reader.HasColumn("EndDate") && reader["EndDate"] != DBNull.Value)
            {
                p.EndDate = Convert.ToDateTime(reader["EndDate"]);
            }
            if (reader.HasColumn("OutPtTreatmentProgramID") && reader["OutPtTreatmentProgramID"] != DBNull.Value)
            {
                p.OutPtTreatmentProgramID = Convert.ToInt64(reader["OutPtTreatmentProgramID"]);
            }
            return p;
        }

        protected virtual List<PatientAppointment> GetAppointmentCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientAppointment>();
            while (reader.Read())
            {
                retVal.Add(GetAppointmentFromReader(reader));
            }
            return retVal;
        }

        protected virtual PatientApptTimeSegment GetAppointmentSegmentFromReader(IDataReader reader)
        {
            var p = new PatientApptTimeSegment
            {
                ApptTimeSegmentID = (short)reader["ApptTimeSegmentID"],
                SegmentName = reader["SegmentName"] as string,
                StartTime = (DateTime)reader["StartTime"],
                EndTime = (DateTime)reader["EndTime"],
                V_DayOfWeek = (long)reader["V_DayOfWeek"]
            };

            return p;
        }

        protected virtual List<PatientApptTimeSegment> GetAppointmentSegmentCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientApptTimeSegment>();
            while (reader.Read())
            {
                retVal.Add(GetAppointmentSegmentFromReader(reader));
            }
            return retVal;
        }

        protected virtual PCLTimeSegment GetPclTimeSegmentFromReader(IDataReader reader)
        {
            var p = new PCLTimeSegment
            {
                ParaclinicalTimeSegmentID = (long)reader["ParaclinicalTimeSegmentID"]
            };

            if (reader.HasColumn("SegmentName"))
            {
                p.SegmentName = reader["SegmentName"].ToString();
            }

            if (reader.HasColumn("SegmentDescription"))
            {
                p.SegmentDescription = reader["SegmentDescription"].ToString();
            }

            if (reader.HasColumn("StartTime") && reader["StartTime"] != DBNull.Value)
            {
                p.StartTime = (DateTime)reader["StartTime"];
            }

            if (reader.HasColumn("EndTime") && reader["EndTime"] != DBNull.Value)
            {
                p.EndTime = (DateTime)reader["EndTime"];
            }

            var cat = reader["V_PCLMainCategory"] as long?;
            if (cat.HasValue)
            {
                if (Enum.IsDefined(typeof(AllLookupValues.V_PCLMainCategory), cat.Value))
                {
                    p.V_PCLMainCategory = (AllLookupValues.V_PCLMainCategory)cat.Value;
                }
                else
                {
                    p.V_PCLMainCategory = AllLookupValues.V_PCLMainCategory.Unknown;
                }
            }
            return p;
        }

        protected virtual List<PCLTimeSegment> GetPclTimeSegmentCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PCLTimeSegment>();
            while (reader.Read())
            {
                retVal.Add(GetPclTimeSegmentFromReader(reader));
            }
            return retVal;
        }
        #region
        protected virtual ConsultationRoomTarget GetConsultationRoomTargetObjFromReader(IDataReader reader)
        {
            ConsultationRoomTarget p = new ConsultationRoomTarget();
            try
            {
                p.ConsultationTimeSegments = GetConsultationTimeSegmentsFromReader(reader);
                if (reader.HasColumn("ConsultationTimeSegmentID") && reader["ConsultationTimeSegmentID"] != DBNull.Value)
                {
                    p.ConsultationTimeSegmentID = (long)reader["ConsultationTimeSegmentID"];
                }

                if (reader.HasColumn("ConsultationRoomTargetID") && reader["ConsultationRoomTargetID"] != DBNull.Value)
                {
                    p.ConsultationRoomTargetID = (long)reader["ConsultationRoomTargetID"];
                }

                if (reader.HasColumn("DeptLocationID") && reader["DeptLocationID"] != DBNull.Value)
                {
                    p.DeptLocationID = long.Parse(reader["DeptLocationID"].ToString());
                }

                if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
                {
                    p.RecCreatedDate = (DateTime)(reader["RecCreatedDate"]);
                }

                if (reader.HasColumn("EffectiveDate") && reader["EffectiveDate"] != DBNull.Value)
                {
                    p.EffectiveDate = (DateTime)(reader["EffectiveDate"]);
                }

                if (reader.HasColumn("MondayTargetNumberOfCases") && reader["MondayTargetNumberOfCases"] != DBNull.Value)
                {
                    p.MondayTargetNumberOfCases = Convert.ToInt32(reader["MondayTargetNumberOfCases"]);
                }

                if (reader.HasColumn("MondayMaxNumConsultationAllowed") && reader["MondayMaxNumConsultationAllowed"] != DBNull.Value)
                {
                    p.MondayMaxNumConsultationAllowed = Convert.ToInt32(reader["MondayMaxNumConsultationAllowed"]);
                }

                if (reader.HasColumn("TuesdayTargetNumberOfCases") && reader["TuesdayTargetNumberOfCases"] != DBNull.Value)
                {
                    p.TuesdayTargetNumberOfCases = Convert.ToInt32(reader["TuesdayTargetNumberOfCases"]);
                }

                if (reader.HasColumn("TuesdayMaxNumConsultationAllowed") && reader["TuesdayMaxNumConsultationAllowed"] != DBNull.Value)
                {
                    p.TuesdayMaxNumConsultationAllowed = Convert.ToInt32(reader["TuesdayMaxNumConsultationAllowed"]);
                }

                if (reader.HasColumn("WednesdayTargetNumberOfCases") && reader["WednesdayTargetNumberOfCases"] != DBNull.Value)
                {
                    p.WednesdayTargetNumberOfCases = Convert.ToInt32(reader["WednesdayTargetNumberOfCases"]);
                }

                if (reader.HasColumn("WednesdayMaxNumConsultationAllowed") && reader["WednesdayMaxNumConsultationAllowed"] != DBNull.Value)
                {
                    p.WednesdayMaxNumConsultationAllowed = Convert.ToInt32(reader["WednesdayMaxNumConsultationAllowed"]);
                }

                if (reader.HasColumn("ThursdayTargetNumberOfCases") && reader["ThursdayTargetNumberOfCases"] != DBNull.Value)
                {
                    p.ThursdayTargetNumberOfCases = Convert.ToInt32(reader["ThursdayTargetNumberOfCases"]);
                }

                if (reader.HasColumn("ThursdayMaxNumConsultationAllowed") && reader["ThursdayMaxNumConsultationAllowed"] != DBNull.Value)
                {
                    p.ThursdayMaxNumConsultationAllowed = Convert.ToInt32(reader["ThursdayMaxNumConsultationAllowed"]);
                }

                if (reader.HasColumn("FridayTargetNumberOfCases") && reader["FridayTargetNumberOfCases"] != DBNull.Value)
                {
                    p.FridayTargetNumberOfCases = Convert.ToInt32(reader["FridayTargetNumberOfCases"]);
                }

                if (reader.HasColumn("FridayMaxNumConsultationAllowed") && reader["FridayMaxNumConsultationAllowed"] != DBNull.Value)
                {
                    p.FridayMaxNumConsultationAllowed = Convert.ToInt32(reader["FridayMaxNumConsultationAllowed"]);
                }

                if (reader.HasColumn("SaturdayTargetNumberOfCases") && reader["SaturdayTargetNumberOfCases"] != DBNull.Value)
                {
                    p.SaturdayTargetNumberOfCases = Convert.ToInt32(reader["SaturdayTargetNumberOfCases"]);
                }

                if (reader.HasColumn("SaturdayMaxNumConsultationAllowed") && reader["SaturdayMaxNumConsultationAllowed"] != DBNull.Value)
                {
                    p.SaturdayMaxNumConsultationAllowed = Convert.ToInt32(reader["SaturdayMaxNumConsultationAllowed"]);
                }

                if (reader.HasColumn("SundayTargetNumberOfCases") && reader["SundayTargetNumberOfCases"] != DBNull.Value)
                {
                    p.SundayTargetNumberOfCases = Convert.ToInt32(reader["SundayTargetNumberOfCases"]);
                }

                if (reader.HasColumn("SundayMaxNumConsultationAllowed") && reader["SundayMaxNumConsultationAllowed"] != DBNull.Value)
                {
                    p.SundayMaxNumConsultationAllowed = Convert.ToInt32(reader["SundayMaxNumConsultationAllowed"]);
                }


                //Số hẹn bắt đầu và kết thúc
                if (reader.HasColumn("MondayStartSequenceNumber") && reader["MondayStartSequenceNumber"] != DBNull.Value)
                {
                    p.MondayStartSequenceNumber = Convert.ToInt32(reader["MondayStartSequenceNumber"]);
                }

                if (reader.HasColumn("MondayEndSequenceNumber") && reader["MondayEndSequenceNumber"] != DBNull.Value)
                {
                    p.MondayEndSequenceNumber = Convert.ToInt32(reader["MondayEndSequenceNumber"]);
                }

                if (reader.HasColumn("TuesdayStartSequenceNumber") && reader["TuesdayStartSequenceNumber"] != DBNull.Value)
                {
                    p.TuesdayStartSequenceNumber = Convert.ToInt32(reader["TuesdayStartSequenceNumber"]);
                }

                if (reader.HasColumn("TuesdayEndSequenceNumber") && reader["TuesdayEndSequenceNumber"] != DBNull.Value)
                {
                    p.TuesdayEndSequenceNumber = Convert.ToInt32(reader["TuesdayEndSequenceNumber"]);
                }

                if (reader.HasColumn("WednesdayStartSequenceNumber") && reader["WednesdayStartSequenceNumber"] != DBNull.Value)
                {
                    p.WednesdayStartSequenceNumber = Convert.ToInt32(reader["WednesdayStartSequenceNumber"]);
                }

                if (reader.HasColumn("WednesdayEndSequenceNumber") && reader["WednesdayEndSequenceNumber"] != DBNull.Value)
                {
                    p.WednesdayEndSequenceNumber = Convert.ToInt32(reader["WednesdayEndSequenceNumber"]);
                }

                if (reader.HasColumn("ThursdayStartSequenceNumber") && reader["ThursdayStartSequenceNumber"] != DBNull.Value)
                {
                    p.ThursdayStartSequenceNumber = Convert.ToInt32(reader["ThursdayStartSequenceNumber"]);
                }

                if (reader.HasColumn("ThursdayEndSequenceNumber") && reader["ThursdayEndSequenceNumber"] != DBNull.Value)
                {
                    p.ThursdayEndSequenceNumber = Convert.ToInt32(reader["ThursdayEndSequenceNumber"]);
                }

                if (reader.HasColumn("FridayStartSequenceNumber") && reader["FridayStartSequenceNumber"] != DBNull.Value)
                {
                    p.FridayStartSequenceNumber = Convert.ToInt32(reader["FridayStartSequenceNumber"]);
                }

                if (reader.HasColumn("FridayEndSequenceNumber") && reader["FridayEndSequenceNumber"] != DBNull.Value)
                {
                    p.FridayEndSequenceNumber = Convert.ToInt32(reader["FridayEndSequenceNumber"]);
                }

                if (reader.HasColumn("SaturdayStartSequenceNumber") && reader["SaturdayStartSequenceNumber"] != DBNull.Value)
                {
                    p.SaturdayStartSequenceNumber = Convert.ToInt32(reader["SaturdayStartSequenceNumber"]);
                }

                if (reader.HasColumn("SaturdayEndSequenceNumber") && reader["SaturdayEndSequenceNumber"] != DBNull.Value)
                {
                    p.SaturdayEndSequenceNumber = Convert.ToInt32(reader["SaturdayEndSequenceNumber"]);
                }

                if (reader.HasColumn("SundayStartSequenceNumber") && reader["SundayStartSequenceNumber"] != DBNull.Value)
                {
                    p.SundayStartSequenceNumber = Convert.ToInt32(reader["SundayStartSequenceNumber"]);
                }

                if (reader.HasColumn("SundayEndSequenceNumber") && reader["SundayEndSequenceNumber"] != DBNull.Value)
                {
                    p.SundayEndSequenceNumber = Convert.ToInt32(reader["SundayEndSequenceNumber"]);
                }

                //Số hẹn bắt đầu và kết thúc
                if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
                {
                    p.IsDeleted = (bool)(reader["IsDeleted"]);
                }

            }
            catch (Exception e)
            {
                AxLogger.Instance.LogError(e);
            }


            return p;
        }
        protected virtual List<ConsultationRoomTarget> GetConsultationRoomTargetCollectionFromReader(IDataReader reader)
        {
            List<ConsultationRoomTarget> lst = new List<ConsultationRoomTarget>();
            while (reader.Read())
            {
                lst.Add(GetConsultationRoomTargetObjFromReader(reader));
            }
            return lst;
        }
        #endregion

        //Consultation
        protected virtual ConsultationTimeSegments GetConsultationTimeSegmentsFromReader(IDataReader reader)
        {
            if (reader.HasColumn("ConsultationTimeSegmentID") == false)
                return null;

            if (reader.HasColumn("ConsultationTimeSegmentID") && (reader["ConsultationTimeSegmentID"] == DBNull.Value || (((long)reader["ConsultationTimeSegmentID"]) <= 0)))
                return null;

            var p = new ConsultationTimeSegments();
            if (reader.HasColumn("ConsultationTimeSegmentID"))
            {
                p.ConsultationTimeSegmentID = (long)reader["ConsultationTimeSegmentID"];
            }

            if (reader.HasColumn("SegmentName"))
            {
                p.SegmentName = reader["SegmentName"].ToString();
            }

            if (reader.HasColumn("SegmentDescription"))
            {
                p.SegmentDescription = reader["SegmentDescription"].ToString();
            }

            if (reader.HasColumn("StartTime") && reader["StartTime"] != DBNull.Value)
            {
                p.StartTime = (DateTime)reader["StartTime"];
            }
            else
            {
                var gio = new DateTime(1900, 01, 01, 0, 0, 0);
                p.StartTime = gio;
            }

            if (reader.HasColumn("EndTime") && reader["EndTime"] != DBNull.Value)
            {
                p.EndTime = (DateTime)reader["EndTime"];
            }
            else
            {
                var gio = new DateTime(1900, 01, 01, 0, 0, 0);
                p.EndTime = gio;
            }

            if (reader.HasColumn("StartTime2") && reader["StartTime2"] != DBNull.Value)
            {
                p.StartTime2 = (DateTime)reader["StartTime2"];
            }
            else
            {
                p.StartTime2 = null;
            }

            if (reader.HasColumn("EndTime2") && reader["EndTime2"] != DBNull.Value)
            {
                p.EndTime2 = (DateTime)reader["EndTime2"];
            }
            else
            {
                p.EndTime2 = null;
            }

            if (reader.HasColumn("SegmentNameExt"))
            {
                p.SegmentNameExt = reader["SegmentNameExt"].ToString();
            }

            if (reader.HasColumn("CurrentSeqNumber") && reader["CurrentSeqNumber"] != DBNull.Value)
            {
                p.CurrentSeqNumber = Convert.ToInt16(reader["CurrentSeqNumber"]);
            }

            if (reader.HasColumn("V_TimeSegment") && reader["V_TimeSegment"] != DBNull.Value)
            {
                p.V_TimeSegment = Convert.ToInt32(reader["V_TimeSegment"]);
            }

            if (reader.HasColumn("NumberOfSeq") && reader["NumberOfSeq"] != DBNull.Value)
            {
                p.NumberOfSeq = Convert.ToInt16(reader["NumberOfSeq"]);
            }
            if (reader.HasColumn("ApptdayMaxNumConsultationAllowed") && reader["ApptdayMaxNumConsultationAllowed"] != DBNull.Value)
            {
                p.ApptdayMaxNumConsultationAllowed = Convert.ToInt16(reader["ApptdayMaxNumConsultationAllowed"]);
            }
            if (reader.HasColumn("V_TimeSegmentType") && reader["V_TimeSegmentType"] != DBNull.Value)
            {
                p.V_TimeSegmentType = Convert.ToInt64(reader["V_TimeSegmentType"]);
            }
            if (reader.HasColumn("V_TimeSegmentTypeStr") && reader["V_TimeSegmentTypeStr"] != DBNull.Value)
            {
                p.V_TimeSegmentTypeStr = Convert.ToString(reader["V_TimeSegmentTypeStr"]);
            }
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = Convert.ToBoolean(reader["IsActive"]);
            }
            return p;
        }

        protected virtual ConsultationTimeSegments GetConsultationTimeSegmentsCheckDayOfWeekFromReader(DateTime curDate, IDataReader reader)
        {
            var crt = GetConsultationRoomTargetObjFromReader(reader);
            switch (curDate.DayOfWeek)
            {
                case DayOfWeek.Monday:
                    if (crt.MondayTargetNumberOfCases < 1) return null;
                    break;
                case DayOfWeek.Tuesday:
                    if (crt.TuesdayTargetNumberOfCases < 1) return null;
                    break;
                case DayOfWeek.Wednesday:
                    if (crt.WednesdayTargetNumberOfCases < 1) return null;
                    break;
                case DayOfWeek.Thursday:
                    if (crt.ThursdayTargetNumberOfCases < 1) return null;
                    break;
                case DayOfWeek.Friday:
                    if (crt.FridayTargetNumberOfCases < 1) return null;
                    break;
                case DayOfWeek.Saturday:
                    if (crt.SaturdayTargetNumberOfCases < 1) return null;
                    break;
                case DayOfWeek.Sunday:
                    if (crt.SundayTargetNumberOfCases < 1) return null;
                    break;
            }
            return GetConsultationTimeSegmentsFromReader(reader);
        }

        protected virtual List<ConsultationTimeSegments> GetConsultationTimeSegmentsCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<ConsultationTimeSegments>();
            while (reader.Read())
            {
                var recConObj = GetConsultationTimeSegmentsFromReader(reader);
                if (recConObj != null)
                {
                    retVal.Add(recConObj);
                }
            }
            return retVal;
        }

        protected virtual List<ConsultationTimeSegments> GetConsultationTimeSegmentsCheckDayOfWeekCollectionFromReader(
            DateTime curDate, IDataReader reader)
        {
            var retVal = new List<ConsultationTimeSegments>();
            while (reader.Read())
            {
                var p = GetConsultationTimeSegmentsCheckDayOfWeekFromReader(curDate, reader);
                if (p != null)
                    retVal.Add(p);
            }
            return retVal;
        }

        protected virtual PatientApptServiceDetails GetAppointmentDetailsFromReader(IDataReader reader)
        {
            var p = new PatientApptServiceDetails
            {
                AppointmentID = (long)reader["AppointmentID"],
                ApptSvcDetailID = (long)reader["ApptSvcDetailID"]
            };

            p.MedService = new RefMedicalServiceItem();
            p.DeptLocation = new DeptLocation();

            if (reader.HasColumn("DeptLocationID") && reader["DeptLocationID"] != DBNull.Value)
            {
                p.DeptLocationID = (long)reader["DeptLocationID"];
                p.DeptLocation.DeptLocationID = (long)reader["DeptLocationID"];
            }

            if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
            {
                p.MedServiceID = (long)reader["MedServiceID"];
                p.MedService.MedServiceID = (long)reader["MedServiceID"];
            }

            if (reader.HasColumn("ApptTimeSegmentID") && reader["ApptTimeSegmentID"] != DBNull.Value)
            {
                p.ApptTimeSegmentID = (short)reader["ApptTimeSegmentID"];
            }

            if (reader.HasColumn("DeplocationName") && reader["DeplocationName"] != DBNull.Value)
            {
                p.DeptLocation.Location = new Location { LocationName = reader["DeplocationName"].ToString() };
            }

            if (reader.HasColumn("MedServiceName") && reader["MedServiceName"] != DBNull.Value)
            {
                p.MedService.MedServiceName = reader["MedServiceName"].ToString();
            }

            if (reader.HasColumn("ApptTimeSegmentID") && reader["ApptTimeSegmentID"] != DBNull.Value)
            {
                p.ApptTimeSegmentID = (short)reader["ApptTimeSegmentID"];
            }


            p.EntityState = EntityState.PERSITED;

            if (reader.HasColumn("ServiceSeqNum") && reader["ServiceSeqNum"] != DBNull.Value)
            {
                p.ServiceSeqNum = Convert.ToInt16(reader["ServiceSeqNum"]);
            }

            if (reader.HasColumn("ServiceSeqNumType") && reader["ServiceSeqNumType"] != DBNull.Value)
            {
                p.ServiceSeqNumType = Convert.ToByte(reader["ServiceSeqNumType"]);
            }

            if (reader.HasColumn("V_AppointmentType") && reader["V_AppointmentType"] != DBNull.Value)
            {
                p.V_AppointmentType = (long)reader["V_AppointmentType"];
            }


            if (reader.HasColumn("staffFullName") && reader["staffFullName"] != DBNull.Value)
            {
                p.staffFullName = reader["staffFullName"].ToString();
            }

            try
            {
                p.patient = GetPatientFromReader(reader);
            }
            catch (Exception)
            {

                throw;
            }
            if (reader.HasColumn("ConsultationRoomStaffAllocID") && reader["ConsultationRoomStaffAllocID"] != DBNull.Value)
            {
                p.ConsultationRoomStaffAllocID = Convert.ToInt64(reader["ConsultationRoomStaffAllocID"]);
            }
            if (reader.HasColumn("ApptStartDate") && reader["ApptStartDate"] != DBNull.Value)
            {
                p.ApptStartDate = Convert.ToDateTime(reader["ApptStartDate"]);
            }
            if (reader.HasColumn("ApptEndDate") && reader["ApptEndDate"] != DBNull.Value)
            {
                p.ApptEndDate = Convert.ToDateTime(reader["ApptEndDate"]);
            }
            if (reader.HasColumn("ClientContractSvcPtID") && reader["ClientContractSvcPtID"] != DBNull.Value)
            {
                p.ClientContractSvcPtID = Convert.ToInt64(reader["ClientContractSvcPtID"]);
            }
            if (reader.HasColumn("PackServDetailID") && reader["PackServDetailID"] != DBNull.Value)
            {
                p.PackServDetailID = Convert.ToInt64(reader["PackServDetailID"]);
            }
            return p;
        }
        protected virtual Holiday GetHolidayFromReader(IDataReader reader)
        {
            var p = new Holiday();
            if (reader.HasColumn("HLDID") && reader["HLDID"] != DBNull.Value)
            {
                p.HLDID = (long)reader["HLDID"];
            }
            if (reader.HasColumn("HLYear") && reader["HLYear"] != DBNull.Value)
            {
                p.HLYear = Convert.ToInt16(reader["HLYear"]);
            }
            if (reader.HasColumn("HLMonth") && reader["HLMonth"] != DBNull.Value)
            {
                p.HLMonth = Convert.ToInt16(reader["HLMonth"]);
            }
            if (reader.HasColumn("HLDate") && reader["HLDate"] != DBNull.Value)
            {
                p.HLDate = Convert.ToInt16(reader["HLDate"]);
            }
            if (reader.HasColumn("HLName") && reader["HLName"] != DBNull.Value)
            {
                p.HLName = (reader["HLName"]).ToString();
            }
            return p;
        }

        protected virtual List<PatientApptServiceDetails> GetAppointmentDetailsCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientApptServiceDetails>();
            while (reader.Read())
            {
                retVal.Add(GetAppointmentDetailsFromReader(reader));
            }
            return retVal;
        }

        protected virtual List<Holiday> GetHolidayCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<Holiday>();
            while (reader.Read())
            {
                retVal.Add(GetHolidayFromReader(reader));
            }
            return retVal;
        }


        //Hẹn CLS
        protected virtual PatientApptPCLRequests GetPatientApptPCLRequestsFromReader(IDataReader reader)
        {
            var p = new PatientApptPCLRequests
            {
                PatientPCLReqID = (long)reader["PatientPCLReqID"],
                AppointmentID = (long)reader["AppointmentID"],
                ReqFromDeptLocID = (long)reader["ReqFromDeptLocID"],
                PCLRequestNumID = reader["PCLRequestNumID"].ToString(),
                Diagnosis = reader["Diagnosis"].ToString(),
                EntityState = EntityState.PERSITED,
                ApptPCLNote = reader["ApptPCLNote"].ToString(),
            };
            if (reader.HasColumn("V_PCLMainCategory") && reader["V_PCLMainCategory"] != DBNull.Value)
            {
                p.V_PCLMainCategory = Convert.ToInt16(reader["V_PCLMainCategory"]);
            }
            if (reader.HasColumn("DoctorComments") && reader["DoctorComments"] != DBNull.Value)
            {
                p.DoctorComments = reader["DoctorComments"].ToString();
            }
            if (reader.HasColumn("ICD10List") && reader["ICD10List"] != DBNull.Value)
            {
                p.ICD10List = reader["ICD10List"].ToString();
            }
            return p;
        }

        protected virtual List<PatientApptPCLRequests> GetPatientApptPCLRequestsCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientApptPCLRequests>();
            while (reader.Read())
            {
                retVal.Add(GetPatientApptPCLRequestsFromReader(reader));
            }
            return retVal;
        }

        protected virtual PatientApptPCLRequestDetails GetPatientApptPCLRequestDetailsFromReader(IDataReader reader)
        {
            var p = new PatientApptPCLRequestDetails();

            p.PCLReqItemID = (long)reader["PCLReqItemID"];
            p.PatientPCLReqID = (long)reader["PatientPCLReqID"];
            p.ObjPCLExamTypes = GetPCLExamTypeFromReader(reader);
            p.PCLExamTypeID = (long)reader["PCLExamTypeID"];
            p.ObjDeptLocID = GetDeptLocationFromReader(reader);

            p.ApptTimeSegment = new PCLTimeSegment();

            if (reader["ApptTimeSegmentID"] != DBNull.Value)
            {
                p.ApptTimeSegmentID = (short)reader["ApptTimeSegmentID"];

                if (p.ApptTimeSegmentID > 0)
                {
                    p.ApptTimeSegment = GetPclTimeSegmentFromReader(reader);
                }
                else
                {
                    var firstItem = new PCLTimeSegment();
                    var gio = new DateTime(1900, 01, 01, 0, 0, 0);
                    firstItem.StartTime = gio;
                    firstItem.EndTime = gio;
                    p.ApptTimeSegment = firstItem;
                }
            }
            else
            {
                var firstItem = new PCLTimeSegment();
                var gio = new DateTime(1900, 01, 01, 0, 0, 0);
                firstItem.StartTime = gio;
                firstItem.EndTime = gio;
                p.ApptTimeSegment = firstItem;
            }

            if (reader["ServiceSeqNum"] != DBNull.Value)
            {
                p.ServiceSeqNum = Convert.ToInt16(reader["ServiceSeqNum"]);
            }
            if (reader["ServiceSeqNumType"] != DBNull.Value)
            {
                p.ServiceSeqNumType = Convert.ToByte(reader["ServiceSeqNumType"]);
            }
            if (reader.HasColumn("ClientContractSvcPtID") && reader["ClientContractSvcPtID"] != DBNull.Value)
            {
                p.ClientContractSvcPtID = Convert.ToInt64(reader["ClientContractSvcPtID"]);
            }
            if (reader.HasColumn("IsCountHI") && reader["IsCountHI"] != DBNull.Value)
            {
                p.IsCountHI = Convert.ToBoolean(reader["IsCountHI"]);
            }
            p.EntityState = EntityState.PERSITED;
            return p;
        }

        protected virtual List<PatientApptPCLRequestDetails> GetPatientApptPCLRequestDetailsCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientApptPCLRequestDetails>();
            while (reader.Read())
            {
                retVal.Add(GetPatientApptPCLRequestDetailsFromReader(reader));
            }
            return retVal;
        }

        protected virtual RefMedicalServiceItem GetMedicalServiceItemFromReader(IDataReader reader)
        {
            var p = new RefMedicalServiceItem();

            if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
            {
                p.MedServiceID = (long)reader["MedServiceID"];
            }

            if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
            {
                p.DeptID = reader["DeptID"] as long?;
            }

            if (reader.HasColumn("MedicalServiceTypeID") && reader["MedicalServiceTypeID"] != DBNull.Value)
            {
                p.MedicalServiceTypeID = reader["MedicalServiceTypeID"] as long?;
            }

            if (reader.HasColumn("PartnerShipID") && reader["PartnerShipID"] != DBNull.Value)
            {
                p.PartnerShipID = reader["PartnerShipID"] as long?;
            }

            if (reader.HasColumn("MedServiceCode") && reader["MedServiceCode"] != DBNull.Value)
            {
                p.MedServiceCode = reader["MedServiceCode"] as string;
            }

            if (reader.HasColumn("MedServiceName") && reader["MedServiceName"] != DBNull.Value)
            {
                p.MedServiceName = reader["MedServiceName"] as string;
            }

            if (reader.HasColumn("V_RefMedServiceItemsUnit") && reader["V_RefMedServiceItemsUnit"] != DBNull.Value)
            {
                p.V_RefMedServiceItemsUnit = (long)reader["V_RefMedServiceItemsUnit"];
                p.ObjV_RefMedServiceItemsUnit = new Lookup();
                p.ObjV_RefMedServiceItemsUnit.LookupID = (long)reader["V_RefMedServiceItemsUnit"];

                if (reader.HasColumn("V_RefMedServiceItemsUnitName"))
                {
                    p.ObjV_RefMedServiceItemsUnit.ObjectValue = reader["V_RefMedServiceItemsUnitName"] == null ? "" : reader["V_RefMedServiceItemsUnitName"].ToString().Trim();
                }
            }
            /*TMA*/
            if (reader.HasColumn("V_Surgery_Tips_Type") && reader["V_Surgery_Tips_Type"] != DBNull.Value)
            {
                p.V_Surgery_Tips_Type = (long)reader["V_Surgery_Tips_Type"];
                p.ObjV_Surgery_Tips_Type = new Lookup();
                p.ObjV_Surgery_Tips_Type.LookupID = (long)reader["V_Surgery_Tips_Type"];

                if (reader.HasColumn("V_Surgery_Tips_Type"))
                {
                    p.ObjV_Surgery_Tips_Type.ObjectValue = reader["V_Surgery_Tips_Type"] == null ? "" : reader["V_Surgery_Tips_Type"].ToString().Trim();
                }
                if (reader.HasColumn("V_Surgery_Tips_Type_Value") && reader["V_Surgery_Tips_Type_Value"] != DBNull.Value)
                {
                    p.ObjV_Surgery_Tips_Type.ObjectValue = reader["V_Surgery_Tips_Type_Value"].ToString().Trim();
                }
            }

            if (reader.HasColumn("V_Surgery_Tips_Item") && reader["V_Surgery_Tips_Item"] != DBNull.Value)
            {
                p.V_Surgery_Tips_Item = (long)reader["V_Surgery_Tips_Item"];
                p.ObjV_Surgery_Tips_Item = new Lookup();
                p.ObjV_Surgery_Tips_Item.LookupID = (long)reader["V_Surgery_Tips_Item"];

                if (reader.HasColumn("V_Surgery_Tips_Item"))
                {
                    p.ObjV_Surgery_Tips_Item.ObjectValue = reader["V_Surgery_Tips_Item"] == null ? "" : reader["V_Surgery_Tips_Item"].ToString().Trim();
                }
                if (reader.HasColumn("V_Surgery_Tips_Item_Value") && reader["V_Surgery_Tips_Item_Value"] != DBNull.Value)
                {
                    p.ObjV_Surgery_Tips_Item.ObjectValue = reader["V_Surgery_Tips_Item_Value"].ToString().Trim();
                }
            }
            /*TMA*/

            if (reader.HasColumn("VATRate"))
            {
                p.VATRate = reader["VATRate"] as double?;
            }

            if (reader.HasColumn("NormalPrice"))
            {
                if (reader["NormalPrice"] != DBNull.Value)
                {
                    p.NormalPrice = (decimal)reader["NormalPrice"];
                }
                else
                {
                    p.NormalPrice = 0;
                }
            }

            if (reader.HasColumn("PriceForHIPatient"))
            {
                if (reader["PriceForHIPatient"] != DBNull.Value)
                {
                    p.PriceForHIPatient = (decimal)reader["PriceForHIPatient"];
                }
                else
                {
                    p.PriceForHIPatient = 0;
                }
            }

            p.HIPatientPrice = p.PriceForHIPatient;

            if (reader.HasColumn("PriceDifference"))
            {
                if (reader["PriceDifference"] != DBNull.Value)
                {
                    p.PriceDifference = (decimal)reader["PriceDifference"];
                }
                else
                {
                    p.PriceDifference = 0;
                }
            }

            if (reader.HasColumn("ChildrenUnderSixPrice"))
            {
                if (reader["ChildrenUnderSixPrice"] != DBNull.Value)
                {
                    p.ChildrenUnderSixPrice = (decimal)reader["ChildrenUnderSixPrice"];
                }
                else
                {
                    p.ChildrenUnderSixPrice = 0;
                }
            }

            if (reader.HasColumn("HIAllowedPrice"))
            {
                p.HIAllowedPrice = reader["HIAllowedPrice"] as decimal?;
            }

            if (reader.HasColumn("ExpiryDate") && reader["ExpiryDate"] != DBNull.Value)
            {
                p.ExpiryDate = (DateTime)reader["ExpiryDate"];
            }

            if (reader.HasColumn("IsExpiredDate"))
            {
                p.IsExpiredDate = reader["IsExpiredDate"] as bool?;
            }

            if (reader.HasColumn("IsActive"))
            {
                var isActive = false;
                bool.TryParse(reader["IsActive"].ToString(), out isActive);
                p.IsActive = isActive;
            }

            if (reader.HasColumn("ByRequest"))
            {
                p.ByRequest = reader["ByRequest"] as bool?;
            }

            if (reader.HasColumn("ServiceMainTime"))
            {
                p.ServiceMainTime = reader["ServiceMainTime"] as byte?;
            }

            if (reader.HasColumn("MedicalServiceTypeID") && reader["MedicalServiceTypeID"] != DBNull.Value)
            {
                p.RefMedicalServiceType = GetRefMedicalServiceTypeFromReader(reader);
            }

            if ((reader.HasColumn("Locations.LID") && reader["Locations.LID"] != DBNull.Value) || (reader.HasColumn("LID") && reader["LID"] != DBNull.Value))
            {
                p.ObjLocation = GetLocationFromReader(reader);
            }

            if (reader.HasColumn("HITTypeID") && reader["HITTypeID"] != DBNull.Value)
            {
                p.HITTypeID = (long)reader["HITTypeID"];
                p.ObjHITTypeID = new HITransactionType();
                p.ObjHITTypeID = GetHITransactionTypeFromReader(reader);
            }

            if (reader.HasColumn("V_NewPriceType") && reader["V_NewPriceType"] != DBNull.Value)
            {
                p.V_NewPriceType = Convert.ToInt32(reader["V_NewPriceType"]);
            }

            if (reader.HasColumn("IsPackageService") && reader["IsPackageService"] != DBNull.Value)
            {
                p.IsPackageService = Convert.ToBoolean(reader["IsPackageService"]);
            }

            if (reader.HasColumn("HICode5084") && reader["HICode5084"] != DBNull.Value)
            {
                p.HICode5084 = (reader["HICode5084"]) as string;
            }

            if (reader.HasColumn("IsAllowToPayAfter") && reader["IsAllowToPayAfter"] != DBNull.Value)
            {
                p.IsAllowToPayAfter = (Int16)reader["IsAllowToPayAfter"];
            }
            if (reader.HasColumn("MedServiceName_Ax") && reader["MedServiceName_Ax"] != DBNull.Value)
            {
                p.MedServiceName_Ax = reader["MedServiceName_Ax"].ToString();
            }
            if (reader.HasColumn("HICode") && reader["HICode"] != DBNull.Value)
            {
                p.HICode = reader["HICode"].ToString();
            }
            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                p.PtRegDetailID = (long)reader["PtRegDetailID"];
            }
            if (reader.HasColumn("V_CatastropheType") && reader["V_CatastropheType"] != DBNull.Value)
            {
                p.V_CatastropheType = (long)reader["V_CatastropheType"];
            }
            /*▼====: #020*/
            if (reader.HasColumn("HIApproved") && reader["HIApproved"] != DBNull.Value)
            {
                p.HIApproved = reader["HIApproved"] == null ? false : reader["HIApproved"] as bool?;
            }
            if (reader.HasColumn("V_AppointmentType") && reader["V_AppointmentType"] != DBNull.Value)
            {
                p.V_AppointmentType = Convert.ToInt32(reader["V_AppointmentType"]);
            }
            /*▲====: #020*/
            if (reader.HasColumn("HIPayRatio") && reader["HIPayRatio"] != DBNull.Value)
            {
                p.HIPayRatio = Convert.ToDecimal(reader["HIPayRatio"]);
            }
            if (reader.HasColumn("IsMedicalExamination") && reader["IsMedicalExamination"] != DBNull.Value)
            {
                p.IsMedicalExamination = Convert.ToBoolean(reader["IsMedicalExamination"]);
            }
            if (reader.HasColumn("V_SpecialistType") && reader["V_SpecialistType"] != DBNull.Value)
            {
                p.V_SpecialistType = Convert.ToInt64(reader["V_SpecialistType"]);
            }
            if (reader.HasColumn("IsMedicalExamination") && reader["IsMedicalExamination"] != DBNull.Value)
            {
                p.IsMedicalExamination = Convert.ToBoolean(reader["IsMedicalExamination"]);
            }
            if (reader.HasColumn("GenderType") && reader["GenderType"] != DBNull.Value)
            {
                p.GenderType = reader["GenderType"].ToString();
            }
            else
            {
                p.GenderType = "A";
            }
            if (reader.HasColumn("V_RefMedicalServiceTypes") && reader["V_RefMedicalServiceTypes"] != DBNull.Value)
            {
                p.ObjMedicalServiceTypeID = GetRefMedicalServiceTypeFromReader(reader);
            }
            if (reader.HasColumn("V_DVKTPhanTuyen") && reader["V_DVKTPhanTuyen"] != DBNull.Value)
            {
                p.V_DVKTPhanTuyen = Convert.ToInt64(reader["V_DVKTPhanTuyen"]);
                p.ObjV_DVKTPhanTuyen = new Lookup();
                if (reader.HasColumn("V_DVKTPhanTuyenValue") && reader["V_DVKTPhanTuyenValue"] != DBNull.Value)
                {
                    p.ObjV_DVKTPhanTuyen.ObjectValue = reader["V_DVKTPhanTuyenValue"].ToString();
                }
            }
            if (reader.HasColumn("NgoaiDinhSuat") && reader["NgoaiDinhSuat"] != DBNull.Value)
            {
                p.NgoaiDinhSuat = Convert.ToBoolean(reader["NgoaiDinhSuat"]);
            }
            if (reader.HasColumn("UseAnalgesic") && reader["UseAnalgesic"] != DBNull.Value)
            {
                p.UseAnalgesic = Convert.ToBoolean(reader["UseAnalgesic"]);
            }
            if (reader.HasColumn("InCategoryCOVID") && reader["InCategoryCOVID"] != DBNull.Value)
            {
                p.InCategoryCOVID = Convert.ToBoolean(reader["InCategoryCOVID"]);
            }
            //▼====: #145
            if (reader.HasColumn("IsAllowDrugHIForOutPatient") && reader["IsAllowDrugHIForOutPatient"] != DBNull.Value)
            {
                p.IsAllowDrugHIForOutPatient = Convert.ToBoolean(reader["IsAllowDrugHIForOutPatient"]);
            }
            //▲====: #145 
            //▼====: #169
            if (reader.HasColumn("IsBirthMethod") && reader["IsBirthMethod"] != DBNull.Value)
            {
                p.IsBirthMethod = Convert.ToBoolean(reader["IsBirthMethod"]);
            }
            if (reader.HasColumn("IsHaveEquip") && reader["IsHaveEquip"] != DBNull.Value)
            {
                p.IsHaveEquip = Convert.ToBoolean(reader["IsHaveEquip"]);
            }
            //▲====: #169

            return p;
        }

        protected virtual List<RefMedicalServiceItem> GetMedicalServiceItemCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<RefMedicalServiceItem>();
            while (reader.Read())
            {
                retVal.Add(GetMedicalServiceItemFromReader(reader));
            }
            return retVal;
        }


        protected virtual Location GetLocationFromReader(IDataReader reader)
        {
            if (reader.HasColumn("Locations.LID") == false && reader.HasColumn("LID") == false)
                return null;
            if (reader.HasColumn("Locations.LID") && ((reader["Locations.LID"] == DBNull.Value) || ((long)reader["Locations.LID"] <= 0)))
                return null;
            if (reader.HasColumn("LID") && ((reader["LID"] == DBNull.Value) || ((long)reader["LID"] <= 0)))
                return null;

            var p = new Location();

            if (reader.HasColumn("Locations.LID"))//Cho may cai vu join.
            {
                p.LID = (long)reader["Locations.LID"];
            }
            else if (reader.HasColumn("LID"))
            {
                p.LID = (long)reader["LID"];
            }

            if (reader.HasColumn("LocationName") && reader["LocationName"] != DBNull.Value)
            {
                p.LocationName = reader["LocationName"] as string;
            }

            if (reader.HasColumn("LocationDescription"))
            {
                p.LocationDescription = reader["LocationDescription"] as string;
            }
            //▼==== #175
            if (reader.HasColumn("Notes") && reader["Notes"] != DBNull.Value)
            {
                p.Notes = reader["Notes"].ToString();
            }
            //▲==== #175
            if (reader.HasColumn("RmTypeID"))
            {
                p.RmTypeID = Convert.ToInt64(reader["RmTypeID"]);

                p.RoomType = new RoomType();
                p.RoomType.RmTypeID = Convert.ToInt64(reader["RmTypeID"]);
                if (reader.HasColumn("RmTypeName"))
                {
                    p.RoomType.RmTypeName = reader["RmTypeName"] == null ? "" : reader["RmTypeName"].ToString();
                }
                if (reader.HasColumn("LocationDescription"))
                {
                    p.RoomType.RmTypeDescription = reader["LocationDescription"] == null ? "" : reader["LocationDescription"].ToString();
                }

                if (reader.HasColumn("V_RoomFunction") && reader["V_RoomFunction"] != DBNull.Value)
                {
                    p.RoomType.V_RoomFunction = Convert.ToInt64(reader["V_RoomFunction"]);

                    p.RoomType.ObjV_RoomFunction = new Lookup();
                    p.RoomType.ObjV_RoomFunction.LookupID = Convert.ToInt64(reader["V_RoomFunction"]);
                    if (reader.HasColumn("ObjectValue"))
                    {
                        p.RoomType.ObjV_RoomFunction.ObjectValue = reader["ObjectValue"] == null ? "" : reader["ObjectValue"].ToString();
                    }
                }

            }

            //if (reader.HasColumn("DeptLocationID") && reader["DeptLocationID"] != DBNull.Value)
            //{
            //    p.DeptLocationID = Convert.ToInt64(reader["DeptLocationID"]);
            //}
            if (reader.HasColumn("V_SpecialistClinicType") && reader["V_SpecialistClinicType"] != DBNull.Value)
            {
                p.V_SpecialistClinicType = GetLookupFromReader(reader);
            }
            if (reader.HasColumn("IsOvertimeWorking") && reader["IsOvertimeWorking"] != DBNull.Value)
            {
                p.IsOvertimeWorking = Convert.ToBoolean(reader["IsOvertimeWorking"]);
            }
            return p;

        }

        protected virtual List<Location> GetLocationCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<Location>();
            while (reader.Read())
            {
                var recLoc = GetLocationFromReader(reader);
                if (reader.HasColumn("DeptLocationID") && reader["DeptLocationID"] != DBNull.Value)
                {
                    recLoc.DeptLocationID = Convert.ToInt64(reader["DeptLocationID"]);
                }

                retVal.Add(recLoc);
            }
            return retVal;
        }
        protected virtual List<PromoDiscountProgram> GetPromoDiscountProgramCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PromoDiscountProgram>();
            while (reader.Read())
            {
                var mPromoDiscountProgram = new PromoDiscountProgram { RecordState = RecordState.UNCHANGED };
                mPromoDiscountProgram.FillData(reader);
                retVal.Add(mPromoDiscountProgram);
            }
            return retVal;
        }
        protected virtual PromoDiscountProgram GetPromoDiscountProgramFromReader(IDataReader reader)
        {
            var mPromoDiscountProgram = new PromoDiscountProgram { RecordState = RecordState.UNCHANGED };
            mPromoDiscountProgram.FillData(reader);
            return mPromoDiscountProgram;
        }
        protected virtual List<RefMedicalServiceGroups> GetRefMedicalServiceGroupCollectionFromReader(IDataReader reader)
        {
            List<RefMedicalServiceGroups> mItemCollection = new List<RefMedicalServiceGroups>();
            while (reader.Read())
            {
                var mItem = new RefMedicalServiceGroups();
                mItem.FillData(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        protected virtual List<SmallProcedure> GetSmallProcedureCollectionFromReader(IDataReader reader)
        {
            List<SmallProcedure> mItemCollection = new List<SmallProcedure>();
            while (reader.Read())
            {
                var mItem = new SmallProcedure();
                mItem.FillData(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        protected virtual RefMedicalServiceGroups GetRefMedicalServiceGroupFromReader(IDataReader reader)
        {
            var mItem = new RefMedicalServiceGroups();
            mItem.FillData(reader);
            return mItem;
        }
        protected virtual List<ShortHandDictionary> GetShortHandDictionariesFromReader(IDataReader reader)
        {
            List<ShortHandDictionary> mItemCollection = new List<ShortHandDictionary>();
            while (reader.Read())
            {
                var mItem = new ShortHandDictionary();
                mItem.FillData(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        protected virtual List<RefMedicalServiceGroupItem> GetRefMedicalServiceGroupItemCollectionFromReader(IDataReader reader)
        {
            List<RefMedicalServiceGroupItem> mItemCollection = new List<RefMedicalServiceGroupItem>();
            while (reader.Read())
            {
                var mItem = new RefMedicalServiceGroupItem();
                mItem.FillData(reader);
                if (mItem.MedServiceID.HasValue && mItem.MedServiceID > 0)
                {
                    mItem.RefMedicalServiceItemObj = GetMedicalServiceItemFromReader(reader);
                }
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        protected virtual RefMedicalServiceGroupItem GetRefMedicalServiceGroupItemFromReader(IDataReader reader)
        {
            var mItem = new RefMedicalServiceGroupItem();
            mItem.FillData(reader);
            return mItem;
        }
        protected virtual List<OutPtTransactionFinalization> GetOutPtTransactionFinalizationCollectionFromReader(IDataReader reader)
        {
            List<OutPtTransactionFinalization> mItemCollection = new List<OutPtTransactionFinalization>();
            while (reader.Read())
            {
                var mItem = new OutPtTransactionFinalization();
                mItem.FillData(reader);
                //mItem.Patient = GetPatientFromReader(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        protected virtual List<PatientRegistration_V2> GetPatientRegistration_V2CollectionFromReader(IDataReader reader)
        {
            List<PatientRegistration_V2> mItemCollection = new List<PatientRegistration_V2>();
            while (reader.Read())
            {
                var mItem = new PatientRegistration_V2();
                mItem.FillData(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        protected virtual OutPtTransactionFinalization GetOutPtTransactionFinalizationReader(IDataReader reader)
        {
            var mItem = new OutPtTransactionFinalization();
            mItem.FillData(reader);
            return mItem;
        }
        protected virtual InPatientBillingInvoice GetInPatientBillingInvoiceFromReader(IDataReader reader)
        {
            var p = new InPatientBillingInvoice
            {
                RecordState = RecordState.UNCHANGED,
                InPatientBillingInvID = (long)reader["InPatientBillingInvID"],
                BillingInvNum = reader["BillingInvNum"] as string,
                PtRegistrationID = (long)reader["PtRegistrationID"],
                StaffID = (long)reader["StaffID"],
                InvDate = (DateTime)reader["InvDate"]
            };

            var billingType = (long)reader["V_BillingInvType"];
            if (Enum.IsDefined(typeof(AllLookupValues.V_BillingInvType), billingType))
            {
                p.V_BillingInvType = (AllLookupValues.V_BillingInvType)billingType;
            }
            else
            {
                p.V_BillingInvType = AllLookupValues.V_BillingInvType.TINH_TIEN_NOI_TRU;
            }

            var billingStatus = (long)reader["V_InPatientBillingInvStatus"];
            if (Enum.IsDefined(typeof(AllLookupValues.V_InPatientBillingInvStatus), billingStatus))
            {
                p.V_InPatientBillingInvStatus = (AllLookupValues.V_InPatientBillingInvStatus)billingStatus;
            }
            else
            {
                p.V_InPatientBillingInvStatus = AllLookupValues.V_InPatientBillingInvStatus.NEW;
            }
            p.PaidTime = reader["PaidTime"] as DateTime?;
            p.RefundTime = reader["RefundTime"] as DateTime?;

            //KMx: Chỉnh sửa ngày 11/10/2014 17:13.
            //p.TotalInvoicePrice = (decimal)reader["Amount"];
            //p.TotalHIPayment = (decimal)reader["TotalHIPayment"];
            //p.TotalPatientPayment = p.TotalInvoicePrice - p.TotalHIPayment;

            if (reader.HasColumn("Amount") && reader["Amount"] != DBNull.Value)
            {
                p.TotalInvoicePrice = (decimal)reader["Amount"];
            }
            if (reader.HasColumn("TotalHIPayment") && reader["TotalHIPayment"] != DBNull.Value)
            {
                p.TotalHIPayment = (decimal)reader["TotalHIPayment"];
            }
            if (reader.HasColumn("TotalCoPayment") && reader["TotalCoPayment"] != DBNull.Value)
            {
                p.TotalCoPayment = (decimal)reader["TotalCoPayment"];
            }
            if (reader.HasColumn("TotalPatientPayment") && reader["TotalPatientPayment"] != DBNull.Value)
            {
                p.TotalPatientPayment = (decimal)reader["TotalPatientPayment"];
            }

            if (reader.HasColumn("TotalPatientPaid") && reader["TotalPatientPaid"] != DBNull.Value)
            {
                p.TotalPatientPaid = (decimal)reader["TotalPatientPaid"];
            }

            if (reader.HasColumn("TotalSupportFund") && reader["TotalSupportFund"] != DBNull.Value)
            {
                p.TotalSupportFund = (decimal)reader["TotalSupportFund"];
            }

            if (reader.HasColumn("ModCount") && reader["ModCount"] != DBNull.Value)
            {
                p.ModifiedCount = (byte)reader["ModCount"];
            }

            if (reader.HasColumn("DeptID"))
            {
                p.DeptID = reader["DeptID"] as long?;
                p.Department = GetDepartmentFromReader(reader);
            }

            // TxD 12/05/2015: New Field added to InPatientBillingInvoice mainly to serve USIC-CC department
            if (reader.HasColumn("DeptLocationID"))
            {
                p.DeptLocationID = reader["DeptLocationID"] as long?;
            }

            if (reader.HasColumn("FullName"))
            {
                p.FullName = reader["FullName"].ToString();
            }

            if (reader.HasColumn("BillFromDate"))
            {
                p.BillFromDate = reader["BillFromDate"] as DateTime?;
            }

            if (reader.HasColumn("BillToDate"))
            {
                p.BillToDate = reader["BillToDate"] as DateTime?;
            }

            if (reader.HasColumn("RptPtCashAdvRemID") && reader["RptPtCashAdvRemID"] != DBNull.Value)
            {
                p.RptPtCashAdvRemID = (long)reader["RptPtCashAdvRemID"];
            }

            if (reader.HasColumn("IsHighTechServiceBill") && reader["IsHighTechServiceBill"] != DBNull.Value)
            {
                p.IsHighTechServiceBill = Convert.ToBoolean(reader["IsHighTechServiceBill"]);
            }

            if (reader.HasColumn("NotApplyMaxHIPay") && reader["NotApplyMaxHIPay"] != DBNull.Value)
            {
                p.NotApplyMaxHIPay = Convert.ToBoolean(reader["NotApplyMaxHIPay"]);
            }

            if (reader.HasColumn("MaxHIPay") && reader["MaxHIPay"] != DBNull.Value)
            {
                p.MaxHIPay = Convert.ToDecimal(reader["MaxHIPay"]);
            }
            if (reader.HasColumn("IsAdditionalFee") && reader["IsAdditionalFee"] != DBNull.Value)
            {
                p.IsAdditionalFee = Convert.ToBoolean(reader["IsAdditionalFee"]);
            }
            if (reader.HasColumn("OutPtRegistrationID") && reader["OutPtRegistrationID"] != DBNull.Value)
            {
                p.OutPtRegistrationID = Convert.ToInt64(reader["OutPtRegistrationID"]);
            }
            if (reader.HasColumn("IsValidForBill") && reader["IsValidForBill"] != DBNull.Value)
            {
                p.IsValidForBill = Convert.ToInt16(reader["IsValidForBill"]);
            }
            if (reader.HasColumn("DiscountAmt") && reader["DiscountAmt"] != DBNull.Value)
            {
                p.DiscountAmt = Convert.ToDecimal(reader["DiscountAmt"]);
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.CurrentPatient = new Patient { PatientID = Convert.ToInt64(reader["PatientID"]) };
                if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
                {
                    p.CurrentPatient.PatientCode = Convert.ToString(reader["PatientCode"]);
                }
                if (reader.HasColumn("PatientFullName") && reader["PatientFullName"] != DBNull.Value)
                {
                    p.CurrentPatient.FullName = Convert.ToString(reader["PatientFullName"]);
                }
            }
            if (reader.HasColumn("PtInsuranceBenefit") && reader["PtInsuranceBenefit"] != DBNull.Value)
            {
                p.HIBenefit = Convert.ToDouble(reader["PtInsuranceBenefit"]);
            }
            if (reader.HasColumn("QuotationTitle") && reader["QuotationTitle"] != DBNull.Value)
            {
                p.QuotationTitle = Convert.ToString(reader["QuotationTitle"]);
            }
            //▼====: #103
            if (reader.HasColumn("OtherAmt") && reader["OtherAmt"] != DBNull.Value)
            {
                p.OtherAmt = Convert.ToDecimal(reader["OtherAmt"]);
            }
            //▲====: #103
            //▼====: #119
            if (reader.HasColumn("IsBlock") && reader["IsBlock"] != DBNull.Value)
            {
                p.IsBlock = Convert.ToBoolean(reader["IsBlock"]);
            }
            return p;
            //▲====: #119
        }

        protected virtual List<InPatientRptForm02> GetInPatientRptForm02CollectionFromReader(IDataReader reader)
        {
            var retVal = new List<InPatientRptForm02>();
            while (reader.Read())
            {
                retVal.Add(GetInPatientRptForm02FromReader(reader));
            }
            return retVal;
        }

        protected virtual InPatientRptForm02 GetInPatientRptForm02FromReader(IDataReader reader)
        {
            var p = new InPatientRptForm02();

            if (reader.HasColumn("RptForm02_InPtID") && reader["RptForm02_InPtID"] != DBNull.Value)
            {
                p.RptForm02_InPtID = Convert.ToInt64(reader["RptForm02_InPtID"]);
            }

            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }

            if (reader.HasColumn("Description") && reader["Description"] != DBNull.Value)
            {
                p.Description = reader["Description"].ToString();
            }

            if (reader.HasColumn("FromDate") && reader["FromDate"] != DBNull.Value)
            {
                p.FromDate = Convert.ToDateTime(reader["FromDate"]);
            }

            if (reader.HasColumn("ToDate") && reader["ToDate"] != DBNull.Value)
            {
                p.ToDate = Convert.ToDateTime(reader["ToDate"]);
            }

            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
            }

            if (reader.HasColumn("V_Form02Type") && reader["V_Form02Type"] != DBNull.Value)
            {
                p.V_Form02Type = Convert.ToInt64(reader["V_Form02Type"]);
            }

            if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
            {
                p.Department = new RefDepartment();
                p.Department.DeptID = Convert.ToInt64(reader["DeptID"]);

                if (reader.HasColumn("DeptName") && reader["DeptName"] != DBNull.Value)
                {
                    p.Department.DeptName = reader["DeptName"].ToString();
                }
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = Convert.ToInt64(reader["StaffID"]);
            }

            if (reader.HasColumn("StaffName") && reader["StaffName"] != DBNull.Value)
            {
                p.StaffName = reader["StaffName"].ToString();
            }

            if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
            {
                p.Note = reader["Note"].ToString();
            }

            return p;

        }


        protected virtual List<InPatientBillingInvoice> GetInPatientBillingInvoiceCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<InPatientBillingInvoice>();
            while (reader.Read())
            {
                retVal.Add(GetInPatientBillingInvoiceFromReader(reader));
            }
            return retVal;
        }
        protected virtual List<RefMedicalServiceType> GetMedicalServiceTypeCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<RefMedicalServiceType>();
            while (reader.Read())
            {
                retVal.Add(GetRefMedicalServiceTypeFromReader(reader));
            }
            return retVal;
        }

        protected virtual DeceasedInfo GetDeceasedInfoFromReader(IDataReader reader)
        {
            var info = new DeceasedInfo
            {
                DSNumber = (long)reader["DSNumber"],
                PtRegistrationID = (long)reader["PtRegistrationID"],
                CommonMedRecID = reader["CommonMedRecID"] as long?,
                DeceasedDateTime = (DateTime)reader["DeceasedDateTime"]
            };

            var catOfDecease = (long)reader["V_CategoryOfDecease"];
            if (Enum.IsDefined(typeof(AllLookupValues.CategoryOfDecease), catOfDecease))
            {
                info.V_CategoryOfDecease = (AllLookupValues.CategoryOfDecease)catOfDecease;
            }
            else
            {
                info.V_CategoryOfDecease = AllLookupValues.CategoryOfDecease.CHUA_XAC_DINH;
            }
            info.MainReasonOfDecease = (string)reader["MainReasonOfDecease"];
            info.MainCauseOfDeceaseCode = reader["MainCauseOfDeceaseCode"] as string;
            info.IsPostMorternExam = reader["IsPostMorternExam"] as bool?;
            info.PostMortemExamDiagnosis = reader["PostMortemExamDiagnosis"] as string;
            info.PostMortemExamCode = reader["PostMortemExamCode"] as string;
            info.EntityState = EntityState.PERSITED;

            return info;
        }
        protected virtual List<InPatientAdmDisDetails> GetInPatientAdmDisDetailsCollectionFromReader(IDataReader reader)
        {
            var lst = new List<InPatientAdmDisDetails>();
            while (reader.Read())
            {
                lst.Add(GetInPatientAdmissionFromReader(reader));
            }
            return lst;
        }

        protected virtual InPatientAdmDisDetails GetInPatientAdmissionFromReader(IDataReader reader)
        {
            var p = new InPatientAdmDisDetails();
            // TxD 23/07/2014 Commented out the following and added proper column and value checking below
            //{
            //    InPatientAdmDisDetailID = (long)reader["InPatientAdmDisDetailID"],
            //    PtRegistrationID = (long)reader["PtRegistrationID"],
            //    DeptID = (long)reader["DeptID"],
            //    Department = GetDepartmentFromReader(reader),
            //    AdmissionDate = (DateTime)reader["AdmissionDate"],
            //    V_AdmissionType = (long)reader["V_AdmissionType"],
            //    AdmissionNote = reader["AdmissionNote"] as string,
            //    DischargeDate = reader["DischargeDate"] as DateTime?,
            //    VAdmissionType = new Lookup(),
            //    VDischargeType = new Lookup()
            //};
            p.VAdmissionType = new Lookup();

            if (reader.HasColumn("InPatientAdmDisDetailID") && reader["InPatientAdmDisDetailID"] != DBNull.Value)
            {
                p.InPatientAdmDisDetailID = (long)reader["InPatientAdmDisDetailID"];
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = (long)reader["PtRegistrationID"];
            }
            if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
            {
                p.DeptID = (long)reader["DeptID"];
                p.Department = GetDepartmentFromReader(reader);
            }
            if (reader.HasColumn("DeptLocationID") && reader["DeptLocationID"] != DBNull.Value)
            {
                p.DeptLocationID = (long)reader["DeptLocationID"];
                p.DeptLocationObj = GetDeptLocationFromReader(reader);
            }

            if (reader.HasColumn("AdmissionDate") && reader["AdmissionDate"] != DBNull.Value)
            {
                p.AdmissionDate = (DateTime)reader["AdmissionDate"];
            }
            if (reader.HasColumn("V_AdmissionType") && reader["V_AdmissionType"] != DBNull.Value)
            {
                p.V_AdmissionType = (long)reader["V_AdmissionType"];
            }
            if (reader.HasColumn("AdmissionNote") && reader["AdmissionNote"] != DBNull.Value)
            {
                p.AdmissionNote = reader["AdmissionNote"] as string;
            }
            if (reader.HasColumn("DischargeDate") && reader["DischargeDate"] != DBNull.Value)
            {
                p.DischargeDate = reader["DischargeDate"] as DateTime?;
            }

            if (reader.HasColumn("DischargeDetailRecCreatedDate") && reader["DischargeDetailRecCreatedDate"] != DBNull.Value)
            {
                p.DischargeDetailRecCreatedDate = reader["DischargeDetailRecCreatedDate"] as DateTime?;
                p.IsDoctorCreatedDischargePaper = true;
            }

            if (reader.HasColumn("TempDischargeDate") && reader["TempDischargeDate"] != DBNull.Value)
            {
                p.TempDischargeDate = reader["TempDischargeDate"] as DateTime?;
            }

            if (reader.HasColumn("AdmissionTypeValue") && reader["AdmissionTypeValue"] != DBNull.Value)
            {
                p.VAdmissionType.ObjectValue = reader["AdmissionTypeValue"].ToString();
            }
            if (reader.HasColumn("DischargeTypeValue") && reader["DischargeTypeValue"] != DBNull.Value)
            {
                p.VDischargeType.ObjectValue = reader["DischargeTypeValue"].ToString();
            }

            if (reader.HasColumn("V_DischargeType") && reader["V_DischargeType"] != DBNull.Value)
            {
                var dischargeType = (long)reader["V_DischargeType"];
                if (Enum.IsDefined(typeof(AllLookupValues.V_DischargeType), dischargeType))
                {
                    p.V_DischargeType = (AllLookupValues.V_DischargeType)dischargeType;
                }
            }

            if (reader.HasColumn("DSNumber") && reader["DSNumber"] != DBNull.Value)
            {
                p.DSNumber = reader["DSNumber"] as long?;
            }

            if (reader.HasColumn("V_DischargeCondition") && reader["V_DischargeCondition"] != DBNull.Value)
            {
                var cond = (long)reader["V_DischargeCondition"];
                if (Enum.IsDefined(typeof(AllLookupValues.DischargeCondition), cond))
                {
                    p.VDischargeCondition = (AllLookupValues.DischargeCondition)cond;
                }
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientRegistration = new PatientRegistration();
                p.PatientRegistration = GetPatientRegistrationFromReader(reader);
            }
            if (reader.HasColumn("DischargeCode"))
            {
                p.DischargeCode = reader["DischargeCode"] as string;
            }
            if (reader.HasColumn("DischargeNote"))
            {
                p.DischargeNote = reader["DischargeNote"] as string;
            }
            if (reader.HasColumn("DischargeCode2"))
            {
                p.DischargeCode2 = reader["DischargeCode2"] as string;
            }
            if (reader.HasColumn("DischargeNote2"))
            {
                p.DischargeNote2 = reader["DischargeNote2"] as string;
            }

            try
            {
                p.DiagnosisTreatmentInfo = GetDiagTrmtFromReader(reader);
            }
            catch
            { }
            if (reader.HasColumn("Comment"))
            {
                p.Comment = reader["Comment"] as string;
            }

            if (reader.HasColumn("Surgeon") && reader["Surgeon"] != DBNull.Value)
            {
                p.Surgeon = reader["Surgeon"].ToString();
            }

            if (reader.HasColumn("Therapist") && reader["Therapist"] != DBNull.Value)
            {
                p.Therapist = reader["Therapist"].ToString();
            }

            if (reader.HasColumn("ConfirmNotTreatedAsInPt") && reader["ConfirmNotTreatedAsInPt"] != DBNull.Value)
            {
                p.ConfirmNotTreatedAsInPt = (bool)reader["ConfirmNotTreatedAsInPt"];
            }

            if (reader.HasColumn("HuongDieuTri") && reader["HuongDieuTri"] != DBNull.Value)
            {
                p.HuongDieuTri = reader["HuongDieuTri"].ToString();
            }

            if (reader.HasColumn("DischargeDeptID") && reader["DischargeDeptID"] != DBNull.Value)
            {
                p.DischargeDepartment = new RefDepartment();
                p.DischargeDepartment.DeptID = (long)reader["DischargeDeptID"];

                if (reader.HasColumn("Discharge_ParDeptID"))
                {
                    p.DischargeDepartment.ParDeptID = reader["Discharge_ParDeptID"] as long?;
                }

                if (reader.HasColumn("Discharge_DeptName") && reader["Discharge_DeptName"] != DBNull.Value)
                {
                    p.DischargeDepartment.DeptName = reader["Discharge_DeptName"].ToString();
                }

                if (reader.HasColumn("Discharge_DeptDescription") && reader["Discharge_DeptDescription"] != DBNull.Value)
                {
                    p.DischargeDepartment.DeptDescription = reader["Discharge_DeptDescription"].ToString();
                }

                if (reader.HasColumn("Discharge_V_DeptType") && reader["Discharge_V_DeptType"] != DBNull.Value)
                {
                    p.DischargeDepartment.V_DeptType = (long)reader["Discharge_V_DeptType"];
                }

                if (reader.HasColumn("Discharge_V_DeptTypeOperation") && reader["Discharge_V_DeptTypeOperation"] != DBNull.Value)
                {
                    p.DischargeDepartment.V_DeptTypeOperation = (long)reader["Discharge_V_DeptTypeOperation"];
                }
            }

            if (reader.HasColumn("HosTransferIn") && reader["HosTransferIn"] != DBNull.Value)
            {
                p.HosTransferIn = reader["HosTransferIn"].ToString();
            }
            if (reader.HasColumn("HosTransferInID") && reader["HosTransferInID"] != DBNull.Value)
            {
                p.HosTransferInID = Convert.ToInt64(reader["HosTransferInID"]);
            }
            if (reader.HasColumn("HosTransferOut") && reader["HosTransferOut"] != DBNull.Value)
            {
                p.HosTransferOut = reader["HosTransferOut"].ToString();
            }
            if (reader.HasColumn("HosTransferOutID") && reader["HosTransferOutID"] != DBNull.Value)
            {
                p.HosTransferOutID = Convert.ToInt64(reader["HosTransferOutID"]);
            }
            if (reader.HasColumn("OperationDoctor") && reader["OperationDoctor"] != DBNull.Value)
            {
                p.OperationDoctor = reader["OperationDoctor"].ToString();
            }
            if (reader.HasColumn("ReferralDiagnosis") && reader["ReferralDiagnosis"] != DBNull.Value)
            {
                p.ReferralDiagnosis = reader["ReferralDiagnosis"].ToString();
            }
            if (reader.HasColumn("V_AccidentCode") && reader["V_AccidentCode"] != DBNull.Value)
            {
                p.V_AccidentCode = Convert.ToInt64(reader["V_AccidentCode"]);
            }
            if (reader.HasColumn("SurgeryDate") && reader["SurgeryDate"] != DBNull.Value)
            {
                p.SurgeryDate = Convert.ToDateTime(reader["SurgeryDate"]);
            }
            if (reader.HasColumn("CardiacCatheterDate") && reader["CardiacCatheterDate"] != DBNull.Value)
            {
                p.CardiacCatheterDate = Convert.ToDateTime(reader["CardiacCatheterDate"]);
            }
            /*▼====: #011*/
            if (reader.HasColumn("V_DeadReason") && reader["V_DeadReason"] != DBNull.Value)
            {
                var mV_DeadReason = (long)reader["V_DeadReason"];
                if (Enum.IsDefined(typeof(AllLookupValues.DeadReason), mV_DeadReason))
                {
                    p.V_DeadReason = (AllLookupValues.DeadReason)mV_DeadReason;
                }
            }
            /*▲====: #011*/
            if (reader.HasColumn("IsConfirmEmergencyTreatment") && reader["IsConfirmEmergencyTreatment"] != DBNull.Value)
            {
                p.IsConfirmEmergencyTreatment = Convert.ToBoolean(reader["IsConfirmEmergencyTreatment"]);
            }
            if (reader.HasColumn("MedServiceItemPriceListID") && reader["MedServiceItemPriceListID"] != DBNull.Value)
            {
                p.MedServiceItemPriceListID = Convert.ToInt64(reader["MedServiceItemPriceListID"]);
            }
            if (reader.HasColumn("PCLExamTypePriceListID") && reader["PCLExamTypePriceListID"] != DBNull.Value)
            {
                p.PCLExamTypePriceListID = Convert.ToInt64(reader["PCLExamTypePriceListID"]);
            }
            if (reader.HasColumn("DrugDeptPriceGroupID") && reader["DrugDeptPriceGroupID"] != DBNull.Value)
            {
                p.DrugDeptPriceGroupID = Convert.ToInt64(reader["DrugDeptPriceGroupID"]);
            }
            if (reader.HasColumn("TransferFormID") && reader["TransferFormID"] != DBNull.Value)
            {
                p.TransferFormID = Convert.ToInt64(reader["TransferFormID"]);
            }
            if (reader.HasColumn("DischargeStatus") && reader["DischargeStatus"] != DBNull.Value)
            {
                p.DischargeStatus = Convert.ToString(reader["DischargeStatus"]);
            }
            if (reader.HasColumn("IsTreatmentCOVID") && reader["IsTreatmentCOVID"] != DBNull.Value)
            {
                p.IsTreatmentCOVID = Convert.ToBoolean(reader["IsTreatmentCOVID"]);
            }
            //▼====: #115
            if (reader.HasColumn("V_ObjectType") && reader["V_ObjectType"] != DBNull.Value)
            {
                p.V_ObjectType = Convert.ToInt64(reader["V_ObjectType"]);
            }
            if (reader.HasColumn("IsPostponementAdvancePayment") && reader["IsPostponementAdvancePayment"] != DBNull.Value)
            {
                p.IsPostponementAdvancePayment = Convert.ToBoolean(reader["IsPostponementAdvancePayment"]);
            }
            if (reader.HasColumn("PostponementAdvancePaymentNote") && reader["PostponementAdvancePaymentNote"] != DBNull.Value)
            {
                p.PostponementAdvancePaymentNote = Convert.ToString(reader["PostponementAdvancePaymentNote"]);
            }
            //▲====: #115
            //▼====: #118
            if (reader.HasColumn("EnableSearchRegistration_InPt") && reader["EnableSearchRegistration_InPt"] != DBNull.Value)
            {
                p.EnableSearchRegistration_InPt = Convert.ToBoolean(reader["EnableSearchRegistration_InPt"]);
            }
            if (reader.HasColumn("IsConfirmedPostponement") && reader["IsConfirmedPostponement"] != DBNull.Value)
            {
                p.IsConfirmedPostponement = Convert.ToBoolean(reader["IsConfirmedPostponement"]);
            }
            if (reader.HasColumn("PostponementStaff") && reader["PostponementStaff"] != DBNull.Value)
            {
                p.PostponementStaff = Convert.ToInt64(reader["PostponementStaff"]);
            }
            if (reader.HasColumn("PostponementDate") && reader["PostponementDate"] != DBNull.Value)
            {
                p.PostponementDate = Convert.ToDateTime(reader["PostponementDate"]);
            }
            //▲====: #118
            //▼====: #126
            if (reader.HasColumn("IsSevereIllness") && reader["IsSevereIllness"] != DBNull.Value)
            {
                p.IsSevereIllness = Convert.ToBoolean(reader["IsSevereIllness"]);
            }
            //▲====: #126
            //▼==== #149
            if (reader.HasColumn("IsReturning") && reader["IsReturning"] != DBNull.Value)
            {
                p.IsReturning = Convert.ToBoolean(reader["IsReturning"]);
            }
            //▲==== #149
            //▼==== #168
            if (reader.HasColumn("TreatmentDischarge") && reader["TreatmentDischarge"] != DBNull.Value)
            {
                p.TreatmentDischarge = Convert.ToString(reader["TreatmentDischarge"]);
            }
            //▲==== #168
            //▼==== #171        
            if (reader.HasColumn("PaperID") && reader["PaperID"] != DBNull.Value)
            {               
                p.DischargePapersInfo = GetDischargePapersInfoFromReader(reader);
            }
            //▲==== #171

            //▼==== #174
            if (reader.HasColumn("PathologicalProcess") && reader["PathologicalProcess"] != DBNull.Value)
            {
                p.PathologicalProcess = Convert.ToString(reader["PathologicalProcess"]);
            }
            if (reader.HasColumn("IsNeedTreatmentSummary") && reader["IsNeedTreatmentSummary"] != DBNull.Value)
            {
                p.IsNeedTreatmentSummary = Convert.ToBoolean(reader["IsNeedTreatmentSummary"]);
            }
            if (reader.HasColumn("DiagnosisTreatmentSummary") && reader["DiagnosisTreatmentSummary"] != DBNull.Value)
            {
                p.DiagnosisTreatmentSummary = Convert.ToString(reader["DiagnosisTreatmentSummary"]);
            }
            //▲==== #174
            //▼==== #189
            if (reader.HasColumn("IsSurgeryTipsBeginning") && reader["IsSurgeryTipsBeginning"] != DBNull.Value)
            {
                p.IsSurgeryTipsBeginning = Convert.ToBoolean(reader["IsSurgeryTipsBeginning"]);
            }
            //▲==== #189
            //▼==== #194
            p.V_TimeOfDecease = new Lookup();
            try
            {
                if (reader.HasColumn("V_TimeOfDecease") && reader["V_TimeOfDecease"] != DBNull.Value)
                {
                    p.V_TimeOfDecease.LookupID = Convert.ToInt64(reader["V_TimeOfDecease"]);
                }
                if (reader.HasColumn("V_TimeOfDeceaseStr") && reader["V_TimeOfDeceaseStr"] != DBNull.Value)
                {
                    p.V_TimeOfDecease.ObjectValue = Convert.ToString(reader["V_TimeOfDeceaseStr"]);
                }
            }
            catch { }
            //▲==== #194
            return p;
        }

        protected virtual Patient GetPatientFromReader(IDataReader reader)
        {
            var p = new Patient();

            if (reader.HasColumn("PatientID"))
            {
                p.PatientID = (long)reader["PatientID"];
            }

            if (reader.HasColumn("PatientCode"))
            {
                p.PatientCode = reader["PatientCode"].ToString();
            }

            if (reader.HasColumn("FullName"))
            {
                p.FullName = reader["FullName"].ToString();
            }

            if (reader.HasColumn("OldPtNamesLog") && reader["OldPtNamesLog"] != DBNull.Value)
            {
                p.OldPtNamesLog = reader["OldPtNamesLog"].ToString();
            }

            if (reader.HasColumn("Gender"))
            {
                p.Gender = reader["Gender"].ToString();
                p.GenderObj = Gender.GetGender(reader["Gender"].ToString());
            }

            if (reader.HasColumn("CountryID"))
            {
                p.CountryID = reader["CountryID"] as long?;
            }

            if (reader.HasColumn("NationalityID"))
            {
                p.NationalityID = reader["NationalityID"] as long?;
            }

            if (reader.HasColumn("CityProvinceID"))
            {
                p.CityProvinceID = reader["CityProvinceID"] as long?;
            }

            if (reader.HasColumn("PatientBarcode"))
            {
                p.PatientBarcode = reader["PatientBarcode"].ToString();
            }

            if (reader.HasColumn("IDNumber"))
            {
                p.IDNumber = reader["IDNumber"].ToString().Trim();
            }
            if (reader.HasColumn("FirstName"))
            {
                p.FirstName = reader["FirstName"].ToString();
            }
            if (reader.HasColumn("MiddleName"))
            {
                p.MiddleName = reader["MiddleName"].ToString();
            }
            if (reader.HasColumn("LastName"))
            {
                p.LastName = reader["LastName"].ToString();
            }
            if (reader.HasColumn("AgeOnly"))
            {
                p.AgeOnly = reader["AgeOnly"] as bool?;
            }
            if (reader.HasColumn("DOB"))
            {
                p.DOB = reader["DOB"] as DateTime?;
                if (p.DOB != null)
                {
                    if (p.AgeOnly != null && !p.AgeOnly.Value)
                    {
                        p.DOBText = p.DOB.GetValueOrDefault().ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        p.DOBText = p.DOB.Value.Year.ToString();
                    }
                }
                //20190327 TBL: BM 0006670 Tre em duoi 6 tuoi se tinh theo thang
                if (reader.HasColumn("ExamDate") && reader["ExamDate"] != DBNull.Value)
                {
                    p.GenerateAgeString(Convert.ToDateTime(reader["ExamDate"]));
                }
                else
                {
                    p.GenerateAgeString(DateTime.Now);
                }
            }

            if (reader.HasColumn("DOBText") && reader["DOBText"] != DBNull.Value)
            {
                p.DOBText = reader["DOBText"].ToString();
            }


            if (p.AgeOnly != null && !p.AgeOnly.Value)
            {
                if (reader.HasColumn("DOB"))
                {
                    p.DOBForBaby = reader["DOB"] as DateTime?;
                }
            }

            if (p.AgeOnly.GetValueOrDefault())
            {
                p.MaskedDOB = null;
            }
            if (reader.HasColumn("DateBecamePatient"))
            {
                p.DateBecamePatient = reader["DateBecamePatient"] as DateTime?;
            }
            if (reader.HasColumn("V_MaritalStatus"))
            {
                p.V_MaritalStatus = reader["V_MaritalStatus"] as long?;
            }
            if (reader.HasColumn("PatientPhoto"))
            {
                p.PatientPhoto = reader["PatientPhoto"].ToString();
            }
            if (reader.HasColumn("PatientNotes"))
            {
                p.PatientNotes = reader["PatientNotes"].ToString();
            }
            if (reader.HasColumn("PatientStreetAddress"))
            {
                p.PatientStreetAddress = reader["PatientStreetAddress"].ToString();
            }
            if (reader.HasColumn("PatientSurburb") && reader["PatientSurburb"] != DBNull.Value)
            {
                p.PatientSurburb = reader["PatientSurburb"].ToString();
            }
            if (reader.HasColumn("PatientPhoneNumber"))
            {
                p.PatientPhoneNumber = reader["PatientPhoneNumber"].ToString();
            }
            if (reader.HasColumn("PatientCellPhoneNumber"))
            {
                p.PatientCellPhoneNumber = reader["PatientCellPhoneNumber"].ToString();
            }
            if (reader.HasColumn("PatientEmailAddress"))
            {
                p.PatientEmailAddress = reader["PatientEmailAddress"].ToString();
            }
            if (reader.HasColumn("PatientEmployer"))
            {
                p.PatientEmployer = reader["PatientEmployer"].ToString();
            }
            if (reader.HasColumn("PatientOccupation"))
            {
                p.PatientOccupation = reader["PatientOccupation"].ToString();
            }
            if (reader.HasColumn("V_Ethnic"))
            {
                p.V_Ethnic = reader["V_Ethnic"] as long?;
            }
            if (reader.HasColumn("EthnicName"))
            {
                p.EthnicName = reader["EthnicName"].ToString();
            }
            if (reader.HasColumn("FContactFullName"))
            {
                p.FContactFullName = reader["FContactFullName"].ToString();
            }
            if (reader.HasColumn("V_FamilyRelationship"))
            {
                p.V_FamilyRelationship = reader["V_FamilyRelationship"] as long?;
            }
            if (reader.HasColumn("FContactAddress"))
            {
                p.FContactAddress = reader["FContactAddress"].ToString();
            }
            if (reader.HasColumn("FContactHomePhone"))
            {
                p.FContactHomePhone = reader["FContactHomePhone"].ToString();
            }
            if (reader.HasColumn("FContactBusinessPhone"))
            {
                p.FContactBusinessPhone = reader["FContactBusinessPhone"].ToString();
            }
            if (reader.HasColumn("FContactCellPhone"))
            {
                p.FContactCellPhone = reader["FContactCellPhone"].ToString();
            }
            if (reader.HasColumn("FAlternateContact"))
            {
                p.FAlternateContact = reader["FAlternateContact"].ToString();
            }
            if (reader.HasColumn("FAlternatePhone"))
            {
                p.FAlternatePhone = reader["FAlternatePhone"].ToString();
            }
            if (reader.HasColumn("BloodTypeID"))
            {
                p.BloodTypeID = reader["BloodTypeID"] as int?;
                try
                {
                    p.VBloodType = new BloodType();
                    p.VBloodType.BloodTypeID = Convert.ToByte(reader["BloodTypeID"]);
                    if (reader.HasColumn("BloodTypeName") && reader["BloodTypeName"] != DBNull.Value)
                    {
                        p.VBloodType.BloodTypeName = reader["BloodTypeName"].ToString();
                    }
                    if (reader.HasColumn("RhType") && reader["RhType"] != DBNull.Value)
                    {
                        p.VBloodType.RhType = reader["RhType"].ToString();
                    }
                    p.VBloodType.Descript = p.VBloodType.BloodTypeName + " " + p.VBloodType.RhType;
                }
                catch
                { }
            }

            if (reader.HasColumn("CityProvinceID"))
            {
                try
                {
                    p.CitiesProvince = GetCityProvinceFromReader(reader);
                }
                catch
                {
                }
            }
            p.SuburbName = GetSuburbNamesFromReader(reader);
            if (p.SuburbName != null
                && !string.IsNullOrEmpty(p.SuburbName.SuburbName))
            {
                p.PatientSurburb = p.SuburbName.SuburbName;
            }
            //▼====== #043
            p.WardName = GetWardNamesFromReader(reader);
            //▲====== #043
            if (reader.HasColumn("WardNameID") && reader["WardNameID"] != DBNull.Value)
            {
                p.WardNameID = (long)reader["WardNameID"];
            }
            try
            {
                p.NormalizeDOB();
            }
            catch { }
            if (reader.HasColumn("NationalMedicalCode") && reader["NationalMedicalCode"] != DBNull.Value)
            {
                try
                {
                    p.NationalMedicalCode = reader["NationalMedicalCode"].ToString();
                }
                catch
                {
                }
            }
            if (reader.HasColumn("FileCodeNumber") && reader["FileCodeNumber"] != DBNull.Value)
            {
                p.FileCodeNumber = reader["FileCodeNumber"].ToString();
            }

            if (reader.HasColumn("StaffName") && reader["StaffName"] != DBNull.Value)
            {
                p.StaffName = reader["StaffName"].ToString();
            }

            if (reader.HasColumn("PatientStaffID") && reader["PatientStaffID"] != DBNull.Value)
            {
                p.StaffID = (long)reader["PatientStaffID"];
            }

            if (reader.HasColumn("MaxExamDateHI"))
            {
                p.MaxExamDateHI = reader["MaxExamDateHI"] as DateTime?;
            }
            if (reader.HasColumn("MaxDayRptsHI") && reader["MaxDayRptsHI"] != DBNull.Value)
            {
                p.MaxDayRptsHI = Convert.ToDecimal(reader["MaxDayRptsHI"]);
            }
            if (reader.HasColumn("HICardNo") && reader["HICardNo"] != DBNull.Value)
            {
                p.LastNewHealthInsurance = new HealthInsurance { HICardNo = reader["HICardNo"].ToString() };
            }
            if (reader.HasColumn("PatientFullStreetAddress") && reader["PatientFullStreetAddress"] != DBNull.Value)
            {
                p.PatientFullStreetAddress = reader["PatientFullStreetAddress"].ToString();
            }
            if (reader.HasColumn("IDCreatedDate") && reader["IDCreatedDate"] != DBNull.Value)
            {
                p.IDCreatedDate = Convert.ToDateTime(reader["IDCreatedDate"]);
            }
            if (reader.HasColumn("OccupationDate") && reader["OccupationDate"] != DBNull.Value)
            {
                p.OccupationDate = Convert.ToDateTime(reader["OccupationDate"]);
            }
            if (reader.HasColumn("IDCreatedFrom") && reader["IDCreatedFrom"] != DBNull.Value)
            {
                p.IDCreatedFrom = Convert.ToString(reader["IDCreatedFrom"]);
            }
            //▼====: #094
            if (reader.HasColumn("SocialInsuranceNumber") && reader["SocialInsuranceNumber"] != DBNull.Value)
            {
                p.SocialInsuranceNumber = Convert.ToString(reader["SocialInsuranceNumber"]);
            }
            //▲====: #094
            if (reader.HasColumn("V_Job") && reader["V_Job"] != DBNull.Value)
            {
                p.V_Job = Convert.ToInt64(reader["V_Job"]);
            }
            if (reader.HasColumn("Passport") && reader["Passport"] != DBNull.Value)
            {
                p.Passport = Convert.ToString(reader["Passport"]);
            }
            if (reader.HasColumn("Nationality") && reader["Nationality"] != DBNull.Value)
            {
                p.Nationality = Convert.ToString(reader["Nationality"]);
            }
            if (reader.HasColumn("AllFContact") && reader["AllFContact"] != DBNull.Value)
            {
                p.AllFContact = Convert.ToString(reader["AllFContact"]);
            }
            //▼====: #166
            if (reader.HasColumn("JobID130") && reader["JobID130"] != DBNull.Value)
            {
                p.JobID130 = Convert.ToInt64(reader["JobID130"]);
            }
            //▲====: #166
            if (reader.HasColumn("FContactEmployer") && reader["FContactEmployer"] != DBNull.Value)
            {
                p.FContactEmployer = Convert.ToString(reader["FContactEmployer"]);
            }
            if (reader.HasColumn("FContactSocialInsuranceNumber") && reader["FContactSocialInsuranceNumber"] != DBNull.Value)
            {
                p.FContactSocialInsuranceNumber = Convert.ToString(reader["FContactSocialInsuranceNumber"]);
            }
            return p;
        }

        protected virtual List<Patient> GetPatientCollectionFromReader(IDataReader reader)
        {
            var patients = new List<Patient>();
            while (reader.Read())
            {
                patients.Add(GetPatientFromReader(reader));
            }
            return patients;
        }

        protected virtual SuburbNames GetSuburbNamesFromReader(IDataReader reader)
        {
            SuburbNames p = new SuburbNames();
            p.CitiesProvince = new CitiesProvince();

            if (reader.HasColumn("SuburbNameID") && reader["SuburbNameID"] != DBNull.Value)
            {
                p.SuburbNameID = (long)reader["SuburbNameID"];
            }
            if (reader.HasColumn("CityProvinceID") && reader["CityProvinceID"] != DBNull.Value)
            {
                p.CityProvinceID = (long)reader["CityProvinceID"];
                p.CitiesProvince.CityProvinceID = (long)reader["CityProvinceID"];
            }

            if (reader.HasColumn("DescNote") && reader["DescNote"] != DBNull.Value)
            {
                p.DescNote = reader["DescNote"].ToString();
            }

            if (reader.HasColumn("SuburbCode") && reader["SuburbCode"] != DBNull.Value)
            {
                p.SuburbCode = reader["SuburbCode"].ToString();
            }

            if (reader.HasColumn("SuburbName") && reader["SuburbName"] != DBNull.Value)
            {
                p.SuburbName = reader["SuburbName"].ToString();
            }

            if (reader.HasColumn("CityProvinceName") && reader["CityProvinceName"] != DBNull.Value)
            {
                p.CitiesProvince.CityProvinceName = reader["CityProvinceName"].ToString();
            }
            return p;
        }
        //▼====== #043
        protected virtual List<WardNames> GetWardNamesCollectionFromReader(IDataReader reader)
        {
            var WardNames = new List<WardNames>();
            while (reader.Read())
            {
                WardNames.Add(GetWardNamesFromReader(reader));
            }
            return WardNames;
        }
        protected virtual WardNames GetWardNamesFromReader(IDataReader reader)
        {
            WardNames p = new WardNames();
            if (reader.HasColumn("WardNameID") && reader["WardNameID"] != DBNull.Value)
            {
                p.WardNameID = (long)reader["WardNameID"];
            }
            else
            {
                p.WardNameID = -1;
            }
            if (reader.HasColumn("SuburbNameID") && reader["SuburbNameID"] != DBNull.Value)
            {
                p.SuburbNameID = (long)reader["SuburbNameID"];
            }
            if (reader.HasColumn("WardCode") && reader["WardCode"] != DBNull.Value)
            {
                p.WardCode = reader["WardCode"].ToString();
            }
            if (reader.HasColumn("WardName") && reader["WardName"] != DBNull.Value)
            {
                p.WardName = reader["WardName"].ToString();
            }
            else
            {
                p.WardName = eHCMSResources.Z2338_G1_KhongXacDinh;
            }
            return p;
        }
        //▲====== #043
        protected virtual List<SuburbNames> GetSuburbNamesCollectionFromReader(IDataReader reader)
        {
            var SuburbNames = new List<SuburbNames>();
            while (reader.Read())
            {
                SuburbNames.Add(GetSuburbNamesFromReader(reader));
            }
            return SuburbNames;
        }
        protected virtual PatientClassification GetPatientClassificationFromReader(IDataReader reader)
        {
            var p = new PatientClassification
            {
                PatientClassID = (long)reader["PatientClassID"]
            };
            if (reader.HasColumn("PatientClassName") && reader["PatientClassName"] != DBNull.Value)
            {
                p.PatientClassName = Convert.ToString(reader["PatientClassName"]);
            }
            if (reader.HasColumn("PCNotes") && reader["PCNotes"] != DBNull.Value)
            {
                p.PCNotes = Convert.ToString(reader["PCNotes"]);
            }
            return p;
        }
        protected virtual List<PatientClassification> GetPatientClassificationCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientClassification>();
            while (reader.Read())
            {
                retVal.Add(GetPatientClassificationFromReader(reader));
            }
            return retVal;
        }
        protected virtual PaperReferal GetPaperReferalFromReader(IDataReader reader)
        {
            var p = new PaperReferal { RefID = (long)reader["RefID"], MarkAsDeleted = (bool)reader["MarkAsDeleted"] };

            p.EntityState = p.MarkAsDeleted ? EntityState.DELETED_PERSITED : EntityState.PERSITED;

            p.HospitalID = (long)reader["HospitalID"];
            p.RefCreatedDate = (DateTime)reader["RefCreatedDate"];
            p.TreatmentFaculty = reader["TreatmentFaculty"] as string;
            p.GeneralDiagnoses = reader["GeneralDiagnoses"] as string;
            p.CurrentStatusOfPt = reader["CurrentStatusOfPt"] as string;
            p.AcceptedDate = reader["AcceptedDate"] as DateTime?;
            p.Notes = reader["Notes"] as string;
            p.IsActive = (bool)reader["IsActive"];

            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = (long)reader["PtRegistrationID"];
            }

            /*TMA*/
            if (reader.HasColumn("TransferFormID") && reader["TransferFormID"] != DBNull.Value)
            {
                p.TransferFormID = (long)reader["TransferFormID"];
            }
            if (reader.HasColumn("TransferNum") && reader["TransferNum"] != DBNull.Value)
            {
                p.TransferNum = reader["TransferNum"].ToString();
            }
            /*TMA*/

            if (p.PtRegistrationID == null || p.PtRegistrationID < 1)
            {
                p.isBrandNew = true;
                p.IsActive = true;
            }
            /*TMA*/
            if (reader.HasColumn("IsReUse") && reader["IsReUse"] != DBNull.Value)
            {
                p.IsReUse = (bool)reader["IsReUse"];
            }
            /*TMA*/

            //KMx: Nếu đã đăng ký BH nhưng chưa thêm dịch vụ nào hết thì cho phép chỉnh sửa giấy chuyển viện.
            //if (reader.HasColumn("IsBrandNew") && reader["IsBrandNew"] != DBNull.Value)
            //{
            //    p.isBrandNew = (bool)reader["IsBrandNew"];
            //}

            if (reader.HasColumn("IsChronicDisease") && reader["IsChronicDisease"] != DBNull.Value)
            {
                p.IsChronicDisease = (bool)reader["IsChronicDisease"];
            }

            if (reader.HasColumn("Used"))
            {
                if (reader["Used"] != DBNull.Value)
                {
                    p.Used = (int)reader["Used"] > 0;
                }
                else
                {
                    p.Used = false;
                }
            }
            if (reader.HasColumn("IssuerLocation") && reader["IssuerLocation"] != DBNull.Value)
            {
                p.IssuerLocation = reader["IssuerLocation"].ToString();
            }

            if (reader.HasColumn("IssuerCode") && reader["IssuerCode"] != DBNull.Value)
            {
                p.IssuerCode = reader["IssuerCode"].ToString();
            }

            if (reader.HasColumn("CityProvinceName") && reader["CityProvinceName"] != DBNull.Value)
            {
                p.CityProvinceName = reader["CityProvinceName"].ToString();
            }

            p.Hospital = GetHospitalFromReader(reader);
            //kiem tra danh cho truong hop cu
            if (p.Hospital != null)
            {
                if (string.IsNullOrEmpty(p.Hospital.HICode))
                {
                    p.Hospital.IsNoneHICodeOrig = true;
                }
                if (!(string.IsNullOrEmpty(p.IssuerLocation)))
                {
                    p.Hospital.HosName = p.IssuerLocation;
                }
                //else
                //{
                //    p.IssuerLocation = p.Hospital.HosName;
                //}
                if (!(string.IsNullOrEmpty(p.IssuerCode)))
                {
                    p.Hospital.HICode = p.IssuerCode;
                }
                //else
                //{
                //    p.IssuerCode = p.Hospital.HICode;
                //}
                if (string.IsNullOrEmpty(p.CityProvinceName)
                    && !string.IsNullOrEmpty(p.Hospital.CityProvinceName))
                {
                    p.CityProvinceName = p.Hospital.CityProvinceName;
                }
            }
            return p;
        }

        protected virtual List<PaperReferal> GetPaperReferalCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PaperReferal>();
            while (reader.Read())
            {
                retVal.Add(GetPaperReferalFromReader(reader));
            }
            return retVal;
        }

        //protected virtual List<HICardType> GetHICardTypeCollectionFromReader(IDataReader reader)
        //{
        //    var retVal = new List<HICardType>();
        //    while (reader.Read())
        //    {
        //        retVal.Add(GetHICardTypeFromReader(reader));
        //    }
        //    return retVal;
        //}

        //protected virtual HICardType GetHICardTypeFromReader(IDataReader reader)
        //{
        //    var p = new HICardType();
        //    //if (reader.HasColumn("IssuerLocation") && reader["IssuerLocation"] != DBNull.Value)
        //    //{
        //    //    p = reader["IssuerLocation"].ToString();
        //    //}

        //    //if (reader.HasColumn("IssuerCode") && reader["IssuerCode"] != DBNull.Value)
        //    //{
        //    //    p.IssuerCode = reader["IssuerCode"].ToString();
        //    //}

        //    //if (reader.HasColumn("CityProvinceName") && reader["CityProvinceName"] != DBNull.Value)
        //    //{
        //    //    p.CityProvinceName = reader["CityProvinceName"].ToString();
        //    //}

        //    return p;
        //}


        protected virtual EmergencyRecord GetEmergencyRecordFromReader(IDataReader reader)
        {
            var p = new EmergencyRecord
            {
                EmergRecID = (long)reader["EmergRecID"],
                StaffID = reader["StaffID"] as long?,
                CityProvinceID = reader["CityProvinceID"] as long?,
                AcDateTime = (DateTime)reader["AcDateTime"],
                AcPlaceStreetAddress = reader["AcPlaceStreetAddress"] as string,
                AcPlaceSurburb = reader["AcPlaceSurburb"] as string,
                AccidentPlace = reader["AccidentPlace"] as string,
                Cause = (string)reader["AccidentPlace"],
                V_InjuredPartsOfBody = (long)reader["V_InjuredPartsOfBody"],
                BePoisoned = reader["BePoisoned"] as string,
                V_BehaveAfterAc = reader["V_BehaveAfterAc"] as long?,
                V_ChangesAfterAc = reader["V_ChangesAfterAc"] as long?,
                HospitalizationReason = reader["HospitalizationReason"] as string,
                Diagnosis = reader["Diagnosis"] as string,
                Treatment = reader["Treatment"] as string,
                InjuryStatusBefHos = reader["InjuryStatusBefHos"] as string,
                InjuryStatusAftDischarge = reader["InjuryStatusAftDischarge"] as string,
                PatientID = reader["PatientID"] as long?
            };

            return p;
        }

        protected virtual PatientClassHistory GetPatientClassHistoryFromReader(IDataReader reader)
        {
            var p = new PatientClassHistory
            {
                PatientID = (long)reader["PatientID"],
                PatientClassID = (long)reader["PatientClassID"],
                PCFromDate = (DateTime)reader["PCFromDate"]
            };
            if (reader["PCToDate"] != DBNull.Value)
                p.PCToDate = (DateTime)reader["PCToDate"];

            p.PatientClassification = new PatientClassification
            {
                PatientClassID = p.PatientClassID,
                PatientClassName = reader["PatientClassName"].ToString()
            };
            return p;
        }

        protected virtual List<PatientClassHistory> GetPatientClassHistoryCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientClassHistory>();
            while (reader.Read())
            {
                retVal.Add(GetPatientClassHistoryFromReader(reader));
            }
            return retVal;
        }

        protected virtual HealthInsurance GetHealthInsuranceFromReader(IDataReader reader)
        {
            var p = new HealthInsurance { };
            if (reader.HasColumn("HIID") && reader["HIID"] != DBNull.Value)
            {
                p.HIID = (long)reader["HIID"];
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientID = (long)reader["PatientID"];
            }
            if (reader.HasColumn("HICardNo") && reader["HICardNo"] != DBNull.Value)
            {
                p.HICardNo = reader["HICardNo"].ToString();
            }
            if (reader.HasColumn("IBID") && reader["IBID"] != DBNull.Value)
            {
                p.IBID = (int)reader["IBID"];
            }
            if (reader.HasColumn("HIPCode") && reader["HIPCode"] != DBNull.Value)
            {
                p.HIPCode = reader["HIPCode"].ToString();
            }
            if (reader.HasColumn("RegistrationCode") && reader["RegistrationCode"] != DBNull.Value)
            {
                p.RegistrationCode = reader["RegistrationCode"].ToString();
            }
            if (reader.HasColumn("RegistrationLocation") && reader["RegistrationLocation"] != DBNull.Value)
            {
                p.RegistrationLocation = reader["RegistrationLocation"].ToString();
            }
            if (reader.HasColumn("ValidDateFrom") && reader["ValidDateFrom"] != DBNull.Value)
            {
                p.ValidDateFrom = (DateTime)reader["ValidDateFrom"];
            }
            if (reader.HasColumn("ValidDateTo") && reader["ValidDateTo"] != DBNull.Value)
            {
                p.ValidDateTo = (DateTime)reader["ValidDateTo"];
            }
            if (reader.HasColumn("EditLocked") && reader["EditLocked"] != DBNull.Value)
            {
                p.EditLocked = (bool)reader["EditLocked"];
            }
            if (reader.HasColumn("InvalidFlag") && reader["InvalidFlag"] != DBNull.Value)
            {
                p.InvalidFlag = (bool)reader["InvalidFlag"];
            }
            if (reader.HasColumn("HosID") && reader["HosID"] != DBNull.Value)
            {
                p.HosID = (long)reader["HosID"];
            }
            if (reader.HasColumn("CityProvinceName") && reader["CityProvinceName"] != DBNull.Value)
            {
                p.CityProvinceName = reader["CityProvinceName"].ToString();
            }

            if (reader.HasColumn("HealthInsurance_MarkAsDeleted"))
            {
                p.MarkAsDeleted = (bool)reader["HealthInsurance_MarkAsDeleted"];
            }
            else
            {
                p.MarkAsDeleted = (bool)reader["MarkAsDeleted"];
            }
            if (reader.HasColumn("V_HICardType") && reader["V_HICardType"] != DBNull.Value)
            {
                p.V_HICardType = (long)reader["V_HICardType"];
            }
            try
            {
                p.InsuranceBenefit = GetInsuranceBenefitFromReader(reader);
            }
            catch
            {
            }
            try
            {
                p.HICardType = GetLookupFromReader(reader);
            }
            catch (Exception)
            {
            }

            p.EntityState = p.MarkAsDeleted ? EntityState.DELETED_PERSITED : EntityState.PERSITED;

            if (reader.HasColumn("IsActive"))
            {
                var temp = reader["IsActive"];
                if (temp != DBNull.Value)
                {
                    if (temp is int)
                    {
                        p.IsActive = (int)temp > 0;
                    }
                    else if (temp is bool)
                    {
                        p.IsActive = (bool)temp;
                    }
                }
            }
            if (reader.HasColumn("IsValid"))
            {
                if (reader["IsValid"] != DBNull.Value)
                {
                    p.IsValid = (int)reader["IsValid"] > 0;
                }
            }
            if (reader.HasColumn("Used"))
            {
                if (reader["Used"] != DBNull.Value)
                {
                    p.Used = (int)reader["Used"] > 0;
                }
                else
                {
                    p.Used = false;
                }
            }

            if (reader.HasColumn("ArchiveNumber"))
            {
                p.ArchiveNumber = reader["ArchiveNumber"].ToString();
            }
            //HPT
            if (reader.HasColumn("HICityProvinceID") && reader["HICityProvinceID"] != DBNull.Value)
            {
                p.CityProvinceID_Address = (long)reader["HICityProvinceID"];
            }
            if (reader.HasColumn("HISuburbNameID") && reader["HISuburbNameID"] != DBNull.Value)
            {
                p.SuburbNameID = (long)reader["HISuburbNameID"];
            }
            if (reader.HasColumn("HIPatientStreetAddress") && reader["HIPatientStreetAddress"] != DBNull.Value)
            {
                p.PatientStreetAddress = reader["HIPatientStreetAddress"].ToString();
            }
            if (reader.HasColumn("KVCode") && reader["KVCode"] != DBNull.Value)
            {
                p.KVCode = (long)reader["KVCode"];
            }
            if (reader.HasColumn("IsHistoryActive") && reader["IsHistoryActive"] != DBNull.Value)
            {
                p.IsHistoryActive = (bool)reader["IsHistoryActive"];
            }

            //▼====== #043
            if (reader.HasColumn("HIWardNameID") && reader["HIWardNameID"] != DBNull.Value)
            {
                p.WardNameID = Convert.ToInt32(reader["HIWardNameID"]);
            }
            if (reader.HasColumn("HIWardName") && reader["HIWardName"] != DBNull.Value)
            {
                p.WardName = reader["HIWardName"].ToString();
            }
            //▲====== #043
            if (reader.HasColumn("IBeID") && reader["IBeID"] != DBNull.Value)
            {
                p.IBeID = (long)reader["IBeID"];
            }
            return p;
        }

        protected virtual HealthInsuranceHistory GetHealthInsuranceHistoryFromReader(IDataReader reader)
        {
            var p = new HealthInsuranceHistory
            {
                HisID = (long)reader["HisID"],
                HIID = reader["HIID"] as long?,
                FromAppliedDate = reader["FromAppliedDate"] as DateTime?,
                ToAppliedDate = reader["ToAppliedDate"] as DateTime?,
                IsActive = reader["IsActive"] as bool?
            };

            return p;
        }

        protected virtual List<HealthInsurance> GetHealthInsuranceCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<HealthInsurance>();
            while (reader.Read())
            {
                retVal.Add(GetHealthInsuranceFromReader(reader));
            }
            return retVal;
        }

        protected virtual InsuranceBenefit GetInsuranceBenefitFromReader(IDataReader reader)
        {
            //var info = new InsuranceBenefit { IBID = (int)reader["IBID"], StaffID = reader["StaffID"] as long? };
            var info = new InsuranceBenefit { IBID = (int)reader["IBID"], StaffID = 0 };

            if (reader.HasColumn("RebatePercentage") && reader["RebatePercentage"] != DBNull.Value)
            {
                info.RebatePercentage = (double)reader["RebatePercentage"];
            }
            if (reader.HasColumn("MaxPayable") && reader["MaxPayable"] != DBNull.Value)
            {
                info.MaxPayable = (decimal)reader["MaxPayable"];
            }
            if (reader.HasColumn("IBID") && reader["IBID"] != DBNull.Value)
            {
                info.MaxPayableRemark = reader["IBID"] as string;
            }
            if (reader.HasColumn("PercentageOnMaxPayable") && reader["PercentageOnMaxPayable"] != DBNull.Value)
            {
                info.PercentageOnMaxPayable = (double)reader["PercentageOnMaxPayable"];
            }
            if (reader.HasColumn("UpdateDate") && reader["UpdateDate"] != DBNull.Value)
            {
                info.UpdateDate = reader["UpdateDate"] as DateTime?;
            }
            return info;
        }

        protected virtual HealthInsuranceHIPatientBenefit GetHealthInsuranceHIPatientBenefitFromReader(IDataReader reader)
        {
            var info = new HealthInsuranceHIPatientBenefit
            {
                HIBenefitID = (long)reader["HIBenefitID"],
                StaffID = (long)reader["StaffID"],
                HisID = (long)reader["HisID"],
                //RecCreatedDate = (DateTime)reader["RecCreatedDate"],
                Benefit = (double)reader["Benefit"],
                IsActive = (bool)reader["IsActive"]
            };
            if (reader.HasColumn("HealthInsuranceHIPatientBenefit_RecCreatedDate"))
            {
                info.RecCreatedDate = (DateTime)reader["HealthInsuranceHIPatientBenefit_RecCreatedDate"];
            }
            else
            {
                if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
                {
                    info.RecCreatedDate = (DateTime)reader["RecCreatedDate"];
                }
                else
                {
                    info.RecCreatedDate = DateTime.Now;
                }
            }
            return info;
        }
        protected virtual RegistrationType GetRegistrationTypeFromReader(IDataReader reader)
        {
            var p = new RegistrationType { RegTypeID = (byte)reader["RegTypeID"], RegTypeName = reader["RegTypeName"].ToString() };

            return p;
        }

        protected virtual List<RegistrationType> GetRegistrationTypeCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<RegistrationType>();
            while (reader.Read())
            {
                retVal.Add(GetRegistrationTypeFromReader(reader));
            }
            return retVal;
        }

        protected virtual PatientOutstandingItem GetPatientOutstandingItemFromReader(IDataReader reader)
        {
            var p = new PatientOutstandingItem { ID = (long)reader["PatientID"], HeaderText = reader["FullName"] as string };
            if (reader.HasColumn("PtRegistrationID"))
                p.RegistrationID = (long)reader["PtRegistrationID"];
            if (reader.HasColumn("PtPmtID"))
                p.PaymentID = (long)reader["PtPmtID"];
            if (reader.HasColumn("Age"))
                p.Age = (int)reader["Age"];
            if (reader.HasColumn("MedServiceID"))
                p.ServiceID = (long)reader["MedServiceID"];
            if (reader.HasColumn("MedServiceName"))
                p.ServiceName = reader["MedServiceName"].ToString();

            return p;
        }

        protected virtual List<PatientOutstandingItem> GetPatientOutstandingItemCollectionFromReader(IDataReader reader)
        {
            var patients = new List<PatientOutstandingItem>();
            while (reader.Read())
            {
                patients.Add(GetPatientOutstandingItemFromReader(reader));
            }
            return patients;
        }

        protected virtual LocationOutstandingItem GetLocationOutstandingItemFromReader(IDataReader reader)
        {
            var p = new LocationOutstandingItem
            {
                LID = (long)reader["LID"],
                LocationName = reader["LocationName"] as string,
                LocationDescription = reader["LocationDescription"] as string
            };
            if (reader["NumOfPatients"] != DBNull.Value)
            {
                p.NumOfPatients = (int)reader["NumOfPatients"];
            }

            return p;
        }

        protected virtual List<LocationOutstandingItem> GetLocationOutstandingItemCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<LocationOutstandingItem>();
            while (reader.Read())
            {
                retVal.Add(GetLocationOutstandingItemFromReader(reader));
            }
            return retVal;
        }


        protected virtual PatientRegistrationDetail GetPatientRegistrationDetailsFromReader(IDataReader reader)
        {
            var p = new PatientRegistrationDetail();
            try
            {
                #region KMx: Có tính tiền BH, tính tiền BN hay không (11/12/2014 14:50).
                if (reader.HasColumn("IsCountPatient") && reader["IsCountPatient"] != DBNull.Value)
                {
                    p.IsCountPatient = (bool)reader["IsCountPatient"];
                }
                else
                {
                    p.IsCountPatient = false;
                }

                if (reader.HasColumn("IsInPackage") && reader["IsInPackage"] != DBNull.Value)
                {
                    p.IsInPackage = Convert.ToBoolean(reader["IsInPackage"]);
                }

                if (reader.HasColumn("IsPackageService") && reader["IsPackageService"] != DBNull.Value)
                {
                    p.IsPackageService = Convert.ToBoolean(reader["IsPackageService"]);
                }

                #endregion

                if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
                {
                    p.DoctorStaff = new Staff();
                    p.DoctorStaff.StaffID = Convert.ToInt64(reader["DoctorStaffID"]);

                    if (reader.HasColumn("DoctorStaffName") && reader["DoctorStaffName"] != DBNull.Value)
                    {
                        p.DoctorStaff.FullName = reader["DoctorStaffName"].ToString();
                    }
                }

                if (reader.HasColumn("MedicalInstructionDate") && reader["MedicalInstructionDate"] != DBNull.Value)
                {
                    p.MedicalInstructionDate = Convert.ToDateTime(reader["MedicalInstructionDate"]);
                }

                if (reader.HasColumn("ResultDate") && reader["ResultDate"] != DBNull.Value)
                {
                    p.ResultDate = Convert.ToDateTime(reader["ResultDate"]);
                }

                if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
                {
                    p.PtRegDetailID = (long)reader["PtRegDetailID"];
                }
                if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
                {
                    p.PtRegistrationID = reader["PtRegistrationID"] as long?;
                }
                if (reader.HasColumn("HisID") && reader["HisID"] != DBNull.Value)
                {
                    p.HisID = reader["HisID"] as long?;
                }
                if (reader.HasColumn("DeptLocID") && reader["DeptLocID"] != DBNull.Value)
                {
                    p.DeptLocID = reader["DeptLocID"] as long?;
                }
                if (reader.HasColumn("ServiceSeqNum") && reader["ServiceSeqNum"] != DBNull.Value)
                {
                    p.ServiceSeqNum = (int)reader["ServiceSeqNum"];
                }
                if (reader.HasColumn("ServiceSeqNum_Old") && reader["ServiceSeqNum_Old"] != DBNull.Value)
                {
                    p.ServiceSeqNum_Old = (int)reader["ServiceSeqNum_Old"];
                }
                if (reader.HasColumn("ServiceSeqNumType") && reader["ServiceSeqNumType"] != DBNull.Value)
                {
                    p.ServiceSeqNumType = (byte)reader["ServiceSeqNumType"];
                }
                p.ServiceSeqNumString = AxHelper.GetSequenceNumber(p.ServiceSeqNumType, p.ServiceSeqNum);
                try
                {
                    if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                    {
                        //p.PatientRegistration = new PatientRegistration { Patient = new Patient { FullName = reader["FullName"].ToString() } };
                        p.PatientRegistration = GetPatientRegistrationFromReader(reader);
                    }
                    if (reader.HasColumn("ObjectValue") && reader["ObjectValue"] != DBNull.Value)
                    {
                        p.ExamRegStatusObj = new Lookup { ObjectValue = reader["ObjectValue"].ToString() };
                    }

                    if (reader.HasColumn("MedServiceName") && reader["MedServiceName"] != DBNull.Value)
                    {
                        p.RefMedicalServiceItem = new RefMedicalServiceItem { MedServiceName = reader["MedServiceName"].ToString() };
                        p.MedServiceName = reader["MedServiceName"].ToString();
                        if (reader.HasColumn("IsMedicalExamination") && reader["IsMedicalExamination"] != DBNull.Value)
                        {
                            p.RefMedicalServiceItem.IsMedicalExamination = Convert.ToBoolean(reader["IsMedicalExamination"]);
                        }
                        if (reader.HasColumn("V_SpecialistType") && reader["V_SpecialistType"] != DBNull.Value)
                        {
                            p.RefMedicalServiceItem.V_SpecialistType = Convert.ToInt64(reader["V_SpecialistType"]);
                        }
                    }
                }
                catch { }
                try
                {
                    if (reader.HasColumn("MedicalServiceTypeID") && reader["MedicalServiceTypeID"] != DBNull.Value)
                    {
                        p.MedServiceType = new RefMedicalServiceType { MedicalServiceTypeID = Convert.ToInt64(reader["MedicalServiceTypeID"]) };
                    }
                }
                catch { }
                if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
                {
                    p.StaffID = reader["StaffID"] as long?;
                }
                if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
                {
                    p.MedServiceID = reader["MedServiceID"] as long?;
                }
                if (reader.HasColumn("ServiceQty") && reader["ServiceQty"] != DBNull.Value)
                {
                    p.ServiceQty = (double)reader["ServiceQty"];
                    p.Qty = Convert.ToDecimal(reader["ServiceQty"]);
                }
                if (reader.HasColumn("V_ExamRegStatus") && reader["V_ExamRegStatus"] != DBNull.Value)
                {
                    p.V_ExamRegStatus = (long)reader["V_ExamRegStatus"];
                }

                if (reader.HasColumn("ExamRegStatus") && reader["ExamRegStatus"] != DBNull.Value)
                {
                    p.RegStatus = Convert.ToInt16(reader["ExamRegStatus"]);
                }

                if (reader.HasColumn("DiagDeptLocationName") && reader["DiagDeptLocationName"] != DBNull.Value)
                {
                    p.DiagDeptLocationName = reader["DiagDeptLocationName"].ToString();
                }

                if (reader.HasColumn("DiagDoctorName") && reader["DiagDoctorName"] != DBNull.Value)
                {
                    p.DiagDoctorName = reader["DiagDoctorName"].ToString();
                }

                if (Enum.IsDefined(typeof(AllLookupValues.ExamRegStatus), (int)p.V_ExamRegStatus))
                {
                    p.ExamRegStatus = (AllLookupValues.ExamRegStatus)p.V_ExamRegStatus;
                }
                else
                {
                    p.ExamRegStatus = AllLookupValues.ExamRegStatus.KHONG_XAC_DINH;
                }

                if (reader.HasColumn("ExamRegStatusID") && reader["ExamRegStatusID"] != DBNull.Value)
                {
                    p.ExamRegStatusObj = GetLookupFromReader(reader);
                }

                p.RecordState = RecordState.UNCHANGED;

                if (reader.HasColumn("MedServiceCode") && p.MedServiceID.HasValue)
                {
                    p.RefMedicalServiceItem = GetMedicalServiceItemFromReader(reader);
                }

                p.DeptLocation = GetDeptLocationFromReader(reader);

                if (reader.HasColumn("MarkedAsDeleted") && reader["MarkedAsDeleted"] != DBNull.Value)
                {
                    p.MarkedAsDeleted = (bool)reader["MarkedAsDeleted"];
                }
                else
                {
                    p.MarkedAsDeleted = false;
                }
                if (p.MarkedAsDeleted)
                {
                    //Con dung RecordState de tuong thich voi code cu.
                    p.RecordState = RecordState.DELETED;
                    p.EntityState = EntityState.DELETED_PERSITED;
                }
                else
                {
                    p.EntityState = EntityState.PERSITED;
                }

                if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
                {
                    p.CreatedDate = (DateTime)reader["CreatedDate"];
                }
                else
                {
                    p.CreatedDate = DateTime.MinValue;
                }
                if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
                {
                    p.RecCreatedDate = (DateTime)reader["RecCreatedDate"];
                }

                if (reader.HasColumn("HIBenefit") && reader["HIBenefit"] != DBNull.Value)
                {
                    p.HIBenefit = reader["HIBenefit"] as double?;
                }
                if (p.HIBenefit.GetValueOrDefault(0) > 0)
                {
                    p.HiApplied = true;
                }
                else
                {
                    p.HiApplied = false;
                }
                if (reader.HasColumn("IsCountHI") && reader["IsCountHI"] != DBNull.Value)
                {
                    p.IsCountHI = (bool)reader["IsCountHI"];
                }
                else
                {
                    p.IsCountHI = (p.HIBenefit.GetValueOrDefault(0) > 0) ? true : false;
                }
                //▼======: #049:    Lý do dẫn đến việc này là không đọc dữ liệu 2 cột HIPatientPrice và NormalPrice nhưng lại sử dụng cột này ở Client để tính toán 
                //                  => giá trị 2 cột này bằng 0
                if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
                {
                    p.HIAllowedPrice = reader["HIAllowedPrice"] as decimal?;
                }
                if (reader.HasColumn("HIPatientPrice") && reader["HIPatientPrice"] != DBNull.Value)
                {
                    p.ChargeableItem.HIPatientPrice = Convert.ToDecimal(reader["HIPatientPrice"]);
                }
                if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
                {
                    p.ChargeableItem.NormalPrice = Convert.ToDecimal(reader["NormalPrice"]);
                }
                //▲======: 
                //dung de tinh lai BH
                if (reader.HasColumn("HIAllowedPriceNew") && reader["HIAllowedPriceNew"] != DBNull.Value)
                {
                    p.ChargeableItem.HIAllowedPriceNew = reader["HIAllowedPriceNew"] as decimal?;
                }
                if (reader.HasColumn("HIPatientPriceNew") && reader["HIPatientPriceNew"] != DBNull.Value)
                {
                    p.ChargeableItem.HIPatientPriceNew = Convert.ToDecimal(reader["HIPatientPriceNew"]);
                }
                if (reader.HasColumn("NormalPriceNew") && reader["NormalPriceNew"] != DBNull.Value)
                {
                    p.ChargeableItem.NormalPriceNew = Convert.ToDecimal(reader["NormalPriceNew"]);
                }

                if (reader.HasColumn("PriceType_RegisDetails") && reader["PriceType_RegisDetails"] != DBNull.Value)
                {
                    p.V_NewPriceType = Convert.ToInt32(reader["PriceType_RegisDetails"]);
                }
                if (reader.HasColumn("ReasonChangePrice") && reader["ReasonChangePrice"] != DBNull.Value)
                {
                    p.ReasonChangePrice = reader["ReasonChangePrice"].ToString();
                }

                //dung de tinh lai BH

                if (reader.HasColumn("Price") && reader["Price"] != DBNull.Value)
                {
                    p.InvoicePrice = (decimal)reader["Price"];
                }
                if (reader.HasColumn("PaidTime"))
                {
                    p.PaidTime = reader["PaidTime"] as DateTime?;
                }

                if (reader.HasColumn("PaidStaffID") && reader["PaidStaffID"] != DBNull.Value)
                {
                    p.PaidStaffID = (long)reader["PaidStaffID"];
                }

                if (reader.HasColumn("RegDetailCancelStaffID") && reader["RegDetailCancelStaffID"] != DBNull.Value)
                {
                    p.RegDetailCancelStaffID = (long)reader["RegDetailCancelStaffID"];
                }

                if (reader.HasColumn("PaidStaffName") && reader["PaidStaffName"] != DBNull.Value)
                {
                    p.PaidStaffName = reader["PaidStaffName"].ToString();
                }
                if (reader.HasColumn("CancelStaffName") && reader["CancelStaffName"] != DBNull.Value)
                {
                    p.CancelStaffName = reader["CancelStaffName"].ToString();
                }

                if (reader.HasColumn("RefundTime") && reader["RefundTime"] != DBNull.Value)
                {
                    p.RefundTime = reader["RefundTime"] as DateTime?;
                }

                if (reader.HasColumn("RegStaffFullName") && reader["RegStaffFullName"] != DBNull.Value)
                {
                    p.RegStaffFullName = reader["RegStaffFullName"].ToString();
                }
                if (reader.HasColumn("LookupID") && reader["LookupID"] != DBNull.Value)
                {
                    try
                    {
                        p.ObjV_ExamRegStatus = GetLookupFromReader(reader);
                    }
                    catch
                    {
                        p.ObjV_ExamRegStatus = null;
                    }

                }
                //▼====: #103
                if (reader.HasColumn("OtherAmt") && reader["OtherAmt"] != DBNull.Value)
                {
                    p.OtherAmt = (decimal)(reader["OtherAmt"]);
                }
                if (reader.HasColumn("IsCountPatientCOVID") && reader["IsCountPatientCOVID"] != DBNull.Value)
                {
                    p.IsCountPatientCOVID = Convert.ToBoolean(reader["IsCountPatientCOVID"]);
                }
                //▲====: #103
                if (reader.HasColumn("Amount") && reader["Amount"] != DBNull.Value)
                {

                    p.TotalInvoicePrice = (decimal)reader["Amount"];
                }
                else
                {
                    p.TotalInvoicePrice = 0;
                }
                if (reader.HasColumn("AmountCoPay") && reader["AmountCoPay"] != DBNull.Value)
                {
                    p.TotalCoPayment = (decimal)reader["AmountCoPay"];
                }
                else
                {
                    p.TotalCoPayment = 0;
                }

                if (reader.HasColumn("TotalHIPayment") && reader["TotalHIPayment"] != DBNull.Value)
                {
                    p.TotalHIPayment = (decimal)reader["TotalHIPayment"];
                }
                else
                {
                    p.TotalHIPayment = 0;
                }

                if (reader.HasColumn("PriceDifference") && reader["PriceDifference"] != DBNull.Value)
                {
                    p.TotalPriceDifference = (decimal)reader["PriceDifference"];
                }
                else
                {
                    p.TotalPriceDifference = 0;
                }
                if (reader.HasColumn("DiscountAmt") && reader["DiscountAmt"] != DBNull.Value)
                {
                    p.DiscountAmt = Convert.ToDecimal(reader["DiscountAmt"]);
                }
                if (reader.HasColumn("PromoDiscProgID") && reader["PromoDiscProgID"] != DBNull.Value)
                {
                    p.PromoDiscProgID = reader["PromoDiscProgID"] as long?;
                }
                if (p.IsInPackage)
                {
                    p.TotalPatientPayment = 0;
                }
                else
                {
                    p.TotalPatientPayment = p.TotalInvoicePrice - p.TotalHIPayment - p.DiscountAmt - p.OtherAmt;
                }


                if (reader.HasColumn("PtBedAllocRegDetailID") && reader["PtBedAllocRegDetailID"] != DBNull.Value)
                {
                    var bedPatientRegDetail = new BedPatientRegDetail
                    {
                        PtBedAllocRegDetailID = (long)reader["PtBedAllocRegDetailID"],
                        PtRegDetailID = (long)reader["PtRegDetailID"],
                        BedPatientID = (long)reader["BedPatientID"],

                        BillFromDate = (DateTime)reader["BillFromDate"],
                        BillToDate = (DateTime)reader["BillToDate"],
                        IsDeleted = (bool)reader["IsDeleted"]
                    };
                    if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
                    {
                        bedPatientRegDetail.RecCreatedDate = (DateTime)reader["RecCreatedDate"];
                    }
                    p.BedPatientRegDetail = bedPatientRegDetail;
                }
                if (reader.HasColumn("ServiceRecID") && reader["ServiceRecID"] != DBNull.Value)
                {
                    p.ServiceRecID = (long)reader["ServiceRecID"];
                }
                if (reader.HasColumn("AppointmentID") && reader["AppointmentID"] != DBNull.Value)
                {
                    p.AppointmentID = Convert.ToInt64(reader["AppointmentID"]);
                    p.patientAppointment = new PatientAppointment();
                    p.patientAppointment = GetAppointmentFromReader(reader);
                }

                if (reader.HasColumn("IssueID1") && reader["IssueID1"] != DBNull.Value)
                {
                    p.prescriptionIssueHistory = new PrescriptionIssueHistory();
                    if (reader.HasColumn("IssueID1") && reader["IssueID1"] != DBNull.Value)
                    {
                        p.prescriptionIssueHistory.IssueID = (long)reader["IssueID1"];
                    }

                    if (reader.HasColumn("HisID1") && reader["HisID1"] != DBNull.Value)
                    {
                        p.prescriptionIssueHistory.HisID = (long)reader["HisID1"];
                    }

                    if (reader.HasColumn("PrescriptID1") && reader["PrescriptID1"] != DBNull.Value)
                    {
                        p.prescriptionIssueHistory.PrescriptID = (long)reader["PrescriptID1"];
                    }

                    if (reader.HasColumn("PtRegDetailID1") && reader["PtRegDetailID1"] != DBNull.Value)
                    {
                        p.prescriptionIssueHistory.PtRegDetailID = (long)reader["PtRegDetailID1"];
                    }

                    if (reader.HasColumn("IssuedDateTime1") && reader["IssuedDateTime1"] != DBNull.Value)
                    {
                        p.prescriptionIssueHistory.IssuedDateTime = (DateTime)reader["IssuedDateTime1"];
                    }
                }
                if (reader.HasColumn("SpecialNote") && reader["SpecialNote"] != DBNull.Value)
                {
                    p.SpecialNote = reader["SpecialNote"].ToString();
                    if (p.RefMedicalServiceItem.ServiceMainTime == (long)AllLookupValues.V_ServicePrice.Changeable
                        && !string.IsNullOrEmpty(p.SpecialNote))
                    {
                        p.MedServiceName += " - " + p.SpecialNote;
                    }
                }
                if (reader.HasColumn("ReceiptNumber") && reader["ReceiptNumber"] != DBNull.Value)
                {
                    p.ReceiptNumber = reader["ReceiptNumber"] as string;
                }
                if (reader.HasColumn("BedNumber") && reader["BedNumber"] != DBNull.Value)
                {
                    p.InvoiceID = reader["BedNumber"].ToString();
                    if (reader.HasColumn("HIBedCode") && reader["HIBedCode"] != DBNull.Value)
                    {
                        p.InvoiceID += string.Format(" ({0})", reader["HIBedCode"].ToString());
                    }
                    p.BedAllocation = new BedAllocation();
                    p.BedAllocation.BedNumber = reader["BedNumber"].ToString();
                    if (reader.HasColumn("HIBedCode") && reader["HIBedCode"] != DBNull.Value)
                    {
                        p.BedAllocation.HIBedCode = reader["HIBedCode"].ToString();
                    }
                }
                if (reader.HasColumn("IntPtDiagDrInstructionID") && reader["IntPtDiagDrInstructionID"] != DBNull.Value)
                {
                    p.IntPtDiagDrInstructionID = (long)reader["IntPtDiagDrInstructionID"];
                }
                if (reader.HasColumn("STT") && reader["STT"] != DBNull.Value)
                {
                    p.STT = (long)reader["STT"];
                }
                //▼====: #087
                if (reader.HasColumn("ReqFromDeptID") && reader["ReqFromDeptID"] != DBNull.Value)
                {
                    p.ReqFromDeptID = (long)reader["ReqFromDeptID"];
                    p.ReqFromDepartment = new RefDepartments();
                    p.ReqFromDepartment.DeptID = (long)reader["ReqFromDeptID"];
                    if (reader.HasColumn("ReqFromDeptName") && reader["ReqFromDeptName"] != DBNull.Value)
                    {
                        p.ReqFromDepartment.DeptName = reader["ReqFromDeptName"].ToString();
                    }
                    if (reader.HasColumn("ReqFromDeptCode") && reader["ReqFromDeptCode"] != DBNull.Value)
                    {
                        p.ReqFromDepartment.DeptCode = reader["ReqFromDeptCode"].ToString();
                    }
                }
                //▲====: #087
                //▼====: #132
                if (reader.HasColumn("IsCountSE") && reader["IsCountSE"] != DBNull.Value)
                {
                    p.IsCountSE = (bool)reader["IsCountSE"];
                }
                //▲====: #132
                //▼==== #178
                if (reader.HasColumn("IsPCLFinished") && reader["IsPCLFinished"] != DBNull.Value)
                {
                    p.IsPCLFinished = Convert.ToBoolean(reader["IsPCLFinished"]);
                }
                //▲==== #178
            }
            catch (Exception ex)
            {
                AxLogger.Instance.LogError(ex);
            }
            if (reader.HasColumn("InPatientBillingInvID") && reader["InPatientBillingInvID"] != DBNull.Value)
            {
                p.InPatientBillingInvID = (long)reader["InPatientBillingInvID"];
            }
            if (reader.HasColumn("HIPaymentPercent") && reader["HIPaymentPercent"] != DBNull.Value)
            {
                p.HIPaymentPercent = Convert.ToDouble(reader["HIPaymentPercent"]);
            }
            //20181124 TBL: BM 0005334: Hien thi them cot cach dieu tri khi dang ky da duoc thuc hien
            if (reader.HasColumn("Treatment") && reader["Treatment"] != DBNull.Value)
            {
                p.Treatment = reader["Treatment"].ToString();
            }
            if (reader.HasColumn("V_Ekip") && reader["V_Ekip"] != DBNull.Value)
            {
                p.V_Ekip = new Lookup();
                p.V_Ekip.LookupID = (long)(reader["V_Ekip"]);
                if (reader.HasColumn("Ekip") && reader["Ekip"] != DBNull.Value)
                {
                    p.V_Ekip.ObjectValue = reader["Ekip"].ToString();
                }
            }
            if (reader.HasColumn("V_EkipIndex") && reader["V_EkipIndex"] != DBNull.Value)
            {
                p.V_EkipIndex = new Lookup();
                p.V_EkipIndex.LookupID = (long)(reader["V_EkipIndex"]);
                if (reader.HasColumn("EkipIndex") && reader["EkipIndex"] != DBNull.Value)
                {
                    p.V_EkipIndex.ObjectValue = reader["EkipIndex"].ToString();
                }
            }
            if (reader.HasColumn("DiagnosisDate") && reader["DiagnosisDate"] != DBNull.Value)
            {
                p.DiagnosisDate = (DateTime)reader["DiagnosisDate"];
            }
            if (reader.HasColumn("DateStarted") && reader["DateStarted"] != DBNull.Value)
            {
                p.DateStarted = (DateTime)reader["DateStarted"];
            }
            if (reader.HasColumn("DateEnded") && reader["DateEnded"] != DBNull.Value)
            {
                p.DateEnded = (DateTime)reader["DateEnded"];
            }
            //▼===== #067
            if (reader.HasColumn("HosClientID") && reader["HosClientID"] != DBNull.Value)
            {
                p.HosClientID = (long)reader["HosClientID"];
            }
            if (reader.HasColumn("HosClientContractID") && reader["HosClientContractID"] != DBNull.Value)
            {
                p.HosClientContractID = (long)reader["HosClientContractID"];
            }
            if (reader.HasColumn("ContractNo") && reader["ContractNo"] != DBNull.Value)
            {
                p.ContractNo = reader["ContractNo"].ToString();
            }
            if (reader.HasColumn("CompanyName") && reader["CompanyName"] != DBNull.Value)
            {
                p.CompanyName = reader["CompanyName"].ToString();
            }
            if (reader.HasColumn("ContractName") && reader["ContractName"] != DBNull.Value)
            {
                p.ContractName = reader["ContractName"].ToString();
            }
            //▲===== #067
            if (reader.HasColumn("ConfimedForPreAndDischarge") && reader["ConfimedForPreAndDischarge"] != DBNull.Value)
            {
                p.ConfimedForPreAndDischarge = Convert.ToBoolean(reader["ConfimedForPreAndDischarge"]);
            }
            if (reader.HasColumn("V_Ekip") && reader["V_Ekip"] != DBNull.Value)
            {
                p.V_Ekip = new Lookup();
                p.V_Ekip.LookupID = (long)(reader["V_Ekip"]);
                if (reader.HasColumn("Ekip") && reader["Ekip"] != DBNull.Value)
                {
                    p.V_Ekip.ObjectValue = reader["Ekip"].ToString();
                }
            }
            if (reader.HasColumn("V_EkipIndex") && reader["V_EkipIndex"] != DBNull.Value)
            {
                p.V_EkipIndex = new Lookup();
                p.V_EkipIndex.LookupID = (long)(reader["V_EkipIndex"]);
                if (reader.HasColumn("EkipIndex") && reader["EkipIndex"] != DBNull.Value)
                {
                    p.V_EkipIndex.ObjectValue = reader["EkipIndex"].ToString();
                }
            }
            if (reader.HasColumn("IsChecked") && reader["IsChecked"] != DBNull.Value)
            {
                p.IsChecked = Convert.ToBoolean(reader["IsChecked"]);
            }
            if (reader.HasColumn("PackServDetailID") && reader["PackServDetailID"] != DBNull.Value)
            {
                p.PackServDetailID = (long)(reader["PackServDetailID"]);
            }
            if (reader.HasColumn("PatientWaitStatus") && reader["PatientWaitStatus"] != DBNull.Value)
            {
                p.PatientWaitStatus = (int)(reader["PatientWaitStatus"]);
            }
            if (reader.HasColumn("PaymentPercent") && reader["PaymentPercent"] != DBNull.Value)
            {
                p.PaymentPercent = Convert.ToDouble(reader["PaymentPercent"]);
            }
            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.DoctorStaffID = (long)(reader["DoctorStaffID"]);
            }
            if (reader.HasColumn("BedPatientID") && reader["BedPatientID"] != DBNull.Value)
            {
                p.BedPatientID = (long)(reader["BedPatientID"]);
                if (p.BedPatientID.GetValueOrDefault() != 0)
                {
                    p.IsNotBedService = false;
                }
            }
            if (reader.HasColumn("IsNeedCashAdvance") && reader["IsNeedCashAdvance"] != DBNull.Value)
            {
                p.IsNeedCashAdvance = Convert.ToBoolean(reader["IsNeedCashAdvance"]);
            }
            //▼===== #126
            if (reader.HasColumn("IsSevereIllness") && reader["IsSevereIllness"] != DBNull.Value)
            {
                p.IsSevereIllness = Convert.ToBoolean(reader["IsSevereIllness"]);
            }
            //▲===== #126
            if (reader.HasColumn("IsDigitalSigned") && reader["IsDigitalSigned"] != DBNull.Value)
            {
                p.IsDigitalSigned = Convert.ToInt32(reader["IsDigitalSigned"]);
            }
            return p;
        }

        protected virtual List<PatientRegistrationDetail> GetPatientRegistrationDetailsCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientRegistrationDetail>();
            while (reader.Read())
            {
                retVal.Add(GetPatientRegistrationDetailsFromReader(reader));
            }
            return retVal;
        }

        protected virtual PatientRegistrationDetailEx GetPatientRegistrationDetailsExFromReader(IDataReader reader)
        {
            var p = new PatientRegistrationDetailEx();

            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                p.PtRegDetailID = (long)reader["PtRegDetailID"];
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = reader["PtRegistrationID"] as long?;
            }
            if (reader.HasColumn("HisID") && reader["HisID"] != DBNull.Value)
            {
                p.HisID = reader["HisID"] as long?;
            }
            if (reader.HasColumn("DeptLocID"))
            {
                p.DeptLocID = reader["DeptLocID"] as long?;
            }
            if (reader.HasColumn("ServiceSeqNum") && reader["ServiceSeqNum"] != DBNull.Value)
            {
                p.ServiceSeqNum = (int)reader["ServiceSeqNum"];
            }
            if (reader.HasColumn("ServiceSeqNumType"))
            {
                p.ServiceSeqNumType = (byte)reader["ServiceSeqNumType"];
            }

            if (reader.HasColumn("ExamDate"))
            {
                p.CreatedDate = (DateTime)reader["ExamDate"];
            }

            p.ServiceSeqNumString = AxHelper.GetSequenceNumber(p.ServiceSeqNumType, p.ServiceSeqNum);
            try
            {
                //if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                //{
                //    p.PatientRegistration = new PatientRegistration { Patient = new Patient { FullName = reader["FullName"].ToString() } };
                //}
                if (reader.HasColumn("ObjectValue") && reader["ObjectValue"] != DBNull.Value)
                {
                    p.ExamRegStatusObj = new Lookup { ObjectValue = reader["ObjectValue"].ToString() };
                }

                if (reader.HasColumn("MedServiceName") && reader["MedServiceName"] != DBNull.Value)
                {
                    p.RefMedicalServiceItem = new RefMedicalServiceItem { MedServiceName = reader["MedServiceName"].ToString() };
                }
            }
            catch { }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = reader["StaffID"] as long?;
            }
            if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
            {
                p.MedServiceID = reader["MedServiceID"] as long?;
            }
            if (reader.HasColumn("ServiceQty") && reader["ServiceQty"] != DBNull.Value)
            {
                p.ServiceQty = (double)reader["ServiceQty"];
                p.Qty = Convert.ToDecimal(reader["ServiceQty"]);
            }
            if (reader.HasColumn("V_ExamRegStatus") && reader["V_ExamRegStatus"] != DBNull.Value)
            {
                p.V_ExamRegStatus = (long)reader["V_ExamRegStatus"];
            }

            if (Enum.IsDefined(typeof(AllLookupValues.ExamRegStatus), (int)p.V_ExamRegStatus))
            {
                p.ExamRegStatus = (AllLookupValues.ExamRegStatus)p.V_ExamRegStatus;
            }
            else
            {
                p.ExamRegStatus = AllLookupValues.ExamRegStatus.KHONG_XAC_DINH;
            }

            if (reader.HasColumn("ExamRegStatusID") && reader["ExamRegStatusID"] != DBNull.Value)
            {
                p.ExamRegStatusObj = GetLookupFromReader(reader);
            }

            p.RecordState = RecordState.UNCHANGED;

            if (reader.HasColumn("MedServiceCode") && p.MedServiceID.HasValue)
            {
                p.RefMedicalServiceItem = GetMedicalServiceItemFromReader(reader);
            }

            p.DeptLocation = GetDeptLocationFromReader(reader);

            if (reader.HasColumn("MarkedAsDeleted") && reader["MarkedAsDeleted"] != DBNull.Value)
            {
                p.MarkedAsDeleted = (bool)reader["MarkedAsDeleted"];
            }
            else
            {
                p.MarkedAsDeleted = false;
            }
            if (p.MarkedAsDeleted)
            {
                //Con dung RecordState de tuong thich voi code cu.
                p.RecordState = RecordState.DELETED;
                p.EntityState = EntityState.DELETED_PERSITED;
            }
            else
            {
                p.EntityState = EntityState.PERSITED;
            }

            if (reader.HasColumn("CreatedDate"))
            {
                p.CreatedDate = (DateTime)reader["CreatedDate"];
            }
            else
            {
                p.CreatedDate = DateTime.MinValue;
            }
            if (reader.HasColumn("HIBenefit"))
            {
                p.HIBenefit = reader["HIBenefit"] as double?;
            }
            if (reader.HasColumn("HIAllowedPrice"))
            {
                p.HIAllowedPrice = reader["HIAllowedPrice"] as decimal?;
            }
            if (reader.HasColumn("Price") && reader["Price"] != DBNull.Value)
            {
                p.InvoicePrice = (decimal)reader["Price"];
            }
            if (reader.HasColumn("PaidTime"))
            {
                p.PaidTime = reader["PaidTime"] as DateTime?;
            }
            if (reader.HasColumn("RefundTime"))
            {
                p.RefundTime = reader["RefundTime"] as DateTime?;
            }

            if (reader.HasColumn("LookupID"))
            {
                try
                {
                    p.ObjV_ExamRegStatus = GetLookupFromReader(reader);
                }
                catch
                {
                    p.ObjV_ExamRegStatus = null;
                }

            }

            if (reader.HasColumn("Amount"))
            {
                if (reader["Amount"] != DBNull.Value)
                {
                    p.TotalInvoicePrice = (decimal)reader["Amount"];
                }
                else
                {
                    p.TotalInvoicePrice = 0;
                }
            }
            else
            {
                p.TotalInvoicePrice = 0;
            }

            if (reader.HasColumn("AmountCoPay"))
            {
                if (reader["AmountCoPay"] != DBNull.Value)
                {
                    p.TotalCoPayment = (decimal)reader["AmountCoPay"];
                }
                else
                {
                    p.TotalCoPayment = 0;
                }
            }
            else
            {
                p.TotalCoPayment = 0;
            }

            if (reader.HasColumn("TotalHIPayment"))
            {
                if (reader["TotalHIPayment"] != DBNull.Value)
                {
                    p.TotalHIPayment = (decimal)reader["TotalHIPayment"];
                }
                else
                {
                    p.TotalHIPayment = 0;
                }
            }
            else
            {
                p.TotalHIPayment = 0;
            }


            if (reader.HasColumn("TotalHIPayment"))
            {
                if (reader["TotalHIPayment"] != DBNull.Value)
                {
                    p.TotalHIPayment = (decimal)reader["TotalHIPayment"];
                }
                else
                {
                    p.TotalHIPayment = 0;
                }
            }
            else
            {
                p.TotalHIPayment = 0;
            }

            if (reader.HasColumn("PriceDifference"))
            {
                if (reader["PriceDifference"] != DBNull.Value)
                {
                    p.TotalPriceDifference = (decimal)reader["PriceDifference"];
                }
                else
                {
                    p.TotalPriceDifference = 0;
                }
            }
            else
            {
                p.TotalPriceDifference = 0;
            }

            p.TotalPatientPayment = p.TotalInvoicePrice - p.TotalHIPayment - p.DiscountAmt - p.OtherAmt;
            if (reader.HasColumn("PtBedAllocRegDetailID") && reader["PtBedAllocRegDetailID"] != DBNull.Value)
            {
                var bedPatientRegDetail = new BedPatientRegDetail
                {
                    PtBedAllocRegDetailID = (long)reader["PtBedAllocRegDetailID"],
                    PtRegDetailID = (long)reader["PtRegDetailID"],
                    BedPatientID = (long)reader["BedPatientID"],
                    RecCreatedDate = (DateTime)reader["RecCreatedDate"],
                    BillFromDate = (DateTime)reader["BillFromDate"],
                    BillToDate = (DateTime)reader["BillToDate"],
                    IsDeleted = (bool)reader["IsDeleted"]
                };

                p.BedPatientRegDetail = bedPatientRegDetail;
            }
            try
            {
                var Patient = new Patient { PatientID = (long)reader["PatientID"] };

                if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
                {
                    Patient.PatientCode = reader["PatientCode"].ToString();
                }

                if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                {
                    Patient.FullName = reader["FullName"].ToString();
                }

                if (reader.HasColumn("Gender") && reader["Gender"] != DBNull.Value)
                {
                    Patient.Gender = reader["Gender"].ToString();
                    Patient.GenderObj = Gender.GetGender(reader["Gender"].ToString());
                }

                if (reader.HasColumn("PatientBarcode") && reader["PatientBarcode"] != DBNull.Value)
                {
                    Patient.PatientBarcode = reader["PatientBarcode"].ToString();
                }

                if (reader.HasColumn("IDNumber") && reader["IDNumber"] != DBNull.Value)
                {
                    Patient.IDNumber = reader["IDNumber"].ToString().Trim();
                }

                if (reader.HasColumn("AgeOnly") && reader["AgeOnly"] != DBNull.Value)
                {
                    Patient.AgeOnly = reader["AgeOnly"] as bool?;
                }

                if (reader.HasColumn("DOB") && reader["DOB"] != DBNull.Value)
                {
                    Patient.DOB = (DateTime)reader["DOB"];
                    if (Patient.DOB != null)
                    {
                        if (Patient.AgeOnly != null && !Patient.AgeOnly.Value)
                        {
                            Patient.DOBText = ((DateTime)Patient.DOB).ToString("dd/MM/yyyy");
                        }
                        else
                        {
                            Patient.DOBText = Patient.DOB.Value.Year.ToString();
                        }
                    }
                }

                if (reader.HasColumn("DOBText") && reader["DOBText"] != DBNull.Value)
                {
                    Patient.DOBText = reader["DOBText"].ToString();
                }

                if (Patient.AgeOnly.GetValueOrDefault() && reader["PatientCode"] != DBNull.Value)
                {
                    Patient.MaskedDOB = null;
                }
                if (reader.HasColumn("NationalMedicalCode") && reader["NationalMedicalCode"] != DBNull.Value)
                {
                    Patient.NationalMedicalCode = reader["NationalMedicalCode"].ToString();
                }

                if (reader.HasColumn("FileCodeNumber") && reader["FileCodeNumber"] != DBNull.Value)
                {
                    Patient.FileCodeNumber = reader["FileCodeNumber"].ToString();
                }

                if (reader.HasColumn("CityProvinceName") && reader["CityProvinceName"] != DBNull.Value)
                {
                    Patient.CitiesProvince = new CitiesProvince();
                    Patient.CitiesProvince.CityProvinceName = reader["CityProvinceName"].ToString();
                }
                p.PatientRegistration = new PatientRegistration();
                p.PatientRegistration.Patient = new Patient();
                p.PatientRegistration.Patient = Patient;
            }
            catch
            {
            }

            p.curPatientAppointments = new PatientAppointment();
            p.PatientApptServiceDetails = new PatientApptServiceDetails();
            p.DiagnosisTreatment = new DiagnosisTreatment();


            if (reader.HasColumn("ApptDate") && reader["ApptDate"] != DBNull.Value)
            {
                p.curPatientAppointments.ApptDate = (DateTime)reader["ApptDate"];
            }

            if (reader.HasColumn("appServiceSeqNum") && reader["appServiceSeqNum"] != DBNull.Value)
            {
                p.PatientApptServiceDetails.ServiceSeqNum = Convert.ToInt16(reader["appServiceSeqNum"]);
            }

            if (reader.HasColumn("DiagnosisFinal") && reader["DiagnosisFinal"] != DBNull.Value)
            {
                p.DiagnosisTreatment.DiagnosisFinal = reader["DiagnosisFinal"].ToString();
            }

            if (reader.HasColumn("ICD10Code") && reader["ICD10Code"] != DBNull.Value)
            {
                p.ICD10Code = reader["ICD10Code"].ToString();
            }

            if (reader.HasColumn("Treatment") && reader["Treatment"] != DBNull.Value)
            {
                p.DiagnosisTreatment.Treatment = reader["Treatment"].ToString();
            }

            if (reader.HasColumn("DiagnosisDate") && reader["DiagnosisDate"] != DBNull.Value)
            {
                p.DiagnosisTreatment.DiagnosisDate = (DateTime)reader["DiagnosisDate"];
            }

            if (reader.HasColumn("doctorFullName") && reader["doctorFullName"] != DBNull.Value)
            {
                p.DiagnosisTreatment.ObjDoctorStaffID = new Staff();
                p.DiagnosisTreatment.ObjDoctorStaffID.FullName = reader["doctorFullName"].ToString();
            }

            if (reader.HasColumn("BenhMoi") && reader["BenhMoi"] != DBNull.Value)
            {
                p.isBenhMoi = (bool)reader["BenhMoi"];
            }

            if (reader.HasColumn("IsHasHI") && reader["IsHasHI"] != DBNull.Value)
            {
                p.IsHasHI = (bool)reader["IsHasHI"];
            }

            if (reader.HasColumn("OrigCreatorDoctorNames") && reader["OrigCreatorDoctorNames"] != DBNull.Value)
            {
                p.DiagnosisTreatment.ObjDoctorStaffID = new Staff();
                p.DiagnosisTreatment.ObjDoctorStaffID.FullName = reader["OrigCreatorDoctorNames"].ToString();
                if (string.IsNullOrEmpty(p.DiagnosisTreatment.ObjDoctorStaffID.FullName))
                {
                    if (reader.HasColumn("IssuerDoctorFullName") && reader["IssuerDoctorFullName"] != DBNull.Value)
                    {
                        p.DiagnosisTreatment.ObjDoctorStaffID.FullName = reader["IssuerDoctorFullName"].ToString();
                    }
                }
            }


            if (p.curPatientAppointments.ApptDate == null)
            {
                p.isTaiKham = true;
            }
            else p.isTaiKham = false;
            return p;
        }

        protected virtual List<PatientRegistrationDetailEx> GetPatientRegistrationDetailsExCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientRegistrationDetailEx>();
            while (reader.Read())
            {
                var p = GetPatientRegistrationDetailsExFromReader(reader);
                retVal.Add(p);
            }
            return retVal;
        }
        //▼====: #088
        protected virtual List<CheckMedicalFiles> GetCheckMedicalFilesCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<CheckMedicalFiles>();
            while (reader.Read())
            {
                var p = GetCheckMedicalFilesFromReader(reader);
                retVal.Add(p);
            }
            return retVal;
        }
        protected virtual CheckMedicalFiles GetCheckMedicalFilesFromReader(IDataReader reader)
        {
            var p = new CheckMedicalFiles();
            if (reader.HasColumn("CheckMedicalFileID") && reader["CheckMedicalFileID"] != DBNull.Value)
            {
                p.CheckMedicalFileID = Convert.ToInt64(reader["CheckMedicalFileID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("Check_KHTH") && reader["Check_KHTH"] != DBNull.Value)
            {
                p.Check_KHTH = reader["Check_KHTH"].ToString();
            }
            if (reader.HasColumn("Check_DLS") && reader["Check_DLS"] != DBNull.Value)
            {
                p.Check_DLS = reader["Check_DLS"].ToString();
            }
            if (reader.HasColumn("NoteDLS") && reader["NoteDLS"] != DBNull.Value)
            {
                p.Note_DLS = reader["NoteDLS"].ToString();
            }
            if (reader.HasColumn("DateCreated") && reader["DateCreated"] != DBNull.Value)
            {
                p.DateCreated = Convert.ToDateTime(reader["DateCreated"]);
            }
            if (reader.HasColumn("V_CheckMedicalFilesStatus") && reader["V_CheckMedicalFilesStatus"] != DBNull.Value)
            {
                p.V_CheckMedicalFilesStatus = Convert.ToInt64(reader["V_CheckMedicalFilesStatus"]);
            }
            if (reader.HasColumn("IsDLSChecked") && reader["IsDLSChecked"] != DBNull.Value)
            {
                p.IsDLSChecked = Convert.ToBoolean(reader["IsDLSChecked"]);
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.CreatedStaff = new Staff();
                p.CreatedStaff.StaffID = Convert.ToInt64(reader["StaffID"]);
                if (reader.HasColumn("StaffFullName") && reader["StaffFullName"] != DBNull.Value)
                {
                    p.CreatedStaff.FullName = reader["StaffFullName"].ToString();
                }
            }
            if (reader.HasColumn("SendRequestStaffID") && reader["SendRequestStaffID"] != DBNull.Value)
            {
                p.SendRequestStaff = new Staff();
                p.SendRequestStaff.StaffID = Convert.ToInt64(reader["SendRequestStaffID"]);
                if (reader.HasColumn("SendRequestStaffFullName") && reader["SendRequestStaffFullName"] != DBNull.Value)
                {
                    p.SendRequestStaff.FullName = reader["SendRequestStaffFullName"].ToString();
                }
            }
            if (reader.HasColumn("DateSendRequest") && reader["DateSendRequest"] != DBNull.Value)
            {
                p.DateSendRequest = Convert.ToDateTime(reader["DateSendRequest"]);
            }
            if (reader.HasColumn("DLSReject") && reader["DLSReject"] != DBNull.Value)
            {
                p.DLSReject = Convert.ToBoolean(reader["DLSReject"]);
            }
            //--▼-- 20220329 DatTB: Lấy thêm thông tin lịch sử kiểm duyệt hồ sơ
            if (reader.HasColumn("KHTH_StaffID") && reader["KHTH_StaffID"] != DBNull.Value)
            {
                p.KHTH_Staff = new Staff();
                p.KHTH_Staff.StaffID = Convert.ToInt64(reader["KHTH_StaffID"]);
                if (reader.HasColumn("KHTH_StaffFullName") && reader["KHTH_StaffFullName"] != DBNull.Value)
                {
                    p.KHTH_Staff.FullName = reader["KHTH_StaffFullName"].ToString();
                }
            }
            if (reader.HasColumn("RejectStaffID") && reader["RejectStaffID"] != DBNull.Value)
            {
                p.RejectStaff = new Staff();
                p.RejectStaff.StaffID = Convert.ToInt64(reader["RejectStaffID"]);
                if (reader.HasColumn("RejectStaffFullName") && reader["RejectStaffFullName"] != DBNull.Value)
                {
                    p.RejectStaff.FullName = reader["RejectStaffFullName"].ToString();
                }
            }
            if (reader.HasColumn("DLS_CheckDate") && reader["DLS_CheckDate"] != DBNull.Value)
            {
                p.DLS_CheckDate = Convert.ToDateTime(reader["DLS_CheckDate"]);
            }
            if (reader.HasColumn("KHTH_CheckDate") && reader["KHTH_CheckDate"] != DBNull.Value)
            {
                p.KHTH_CheckDate = Convert.ToDateTime(reader["KHTH_CheckDate"]);
            }
            if (reader.HasColumn("RejectDate") && reader["RejectDate"] != DBNull.Value)
            {
                p.RejectDate = Convert.ToDateTime(reader["RejectDate"]);
            }
            //--▲-- 20220329 DatTB: Lấy thêm thông tin lịch sử kiểm duyệt hồ sơ
            //▼==== #130
            if (reader.HasColumn("DLS_RejectStaffID") && reader["DLS_RejectStaffID"] != DBNull.Value)
            {
                p.DLS_RejectStaff = new Staff();
                p.DLS_RejectStaff.StaffID = Convert.ToInt64(reader["DLS_RejectStaffID"]);
                if (reader.HasColumn("DLS_RejectStaffFullName") && reader["DLS_RejectStaffFullName"] != DBNull.Value)
                {
                    p.DLS_RejectStaff.FullName = reader["DLS_RejectStaffFullName"].ToString();
                }
            }
            if (reader.HasColumn("KHTH_RejectStaffID") && reader["KHTH_RejectStaffID"] != DBNull.Value)
            {
                p.KHTH_RejectStaff = new Staff();
                p.KHTH_RejectStaff.StaffID = Convert.ToInt64(reader["KHTH_RejectStaffID"]);
                if (reader.HasColumn("KHTH_RejectStaffFullName") && reader["KHTH_RejectStaffFullName"] != DBNull.Value)
                {
                    p.KHTH_RejectStaff.FullName = reader["KHTH_RejectStaffFullName"].ToString();
                }
            }
            if (reader.HasColumn("KHTH_RejectDate") && reader["KHTH_RejectDate"] != DBNull.Value)
            {
                p.RejectDate = Convert.ToDateTime(reader["KHTH_RejectDate"]);
            }
            if (reader.HasColumn("RejectDateStr") && reader["RejectDateStr"] != DBNull.Value)
            {
                p.RejectDateStr = reader["RejectDateStr"].ToString();
            }
            if (reader.HasColumn("RejectStaffStr") && reader["RejectStaffStr"] != DBNull.Value)
            {
                p.RejectStaffStr = reader["RejectStaffStr"].ToString();
            }
            //▲==== #130
            return p;
        }
        //▲====: #088
        protected virtual List<NutritionalRating> GetNutritionalRatingCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<NutritionalRating>();
            while (reader.Read())
            {
                var p = GetNutritionalRatingFromReader(reader);
                retVal.Add(p);
            }
            return retVal;
        }
        protected virtual NutritionalRating GetNutritionalRatingFromReader(IDataReader reader)
        {
            var p = new NutritionalRating();
            if (reader.HasColumn("NutritionalRatingID") && reader["NutritionalRatingID"] != DBNull.Value)
            {
                p.NutritionalRatingID = Convert.ToInt64(reader["NutritionalRatingID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("ROM_BMI") && reader["ROM_BMI"] != DBNull.Value)
            {
                p.ROM_BMI = Convert.ToBoolean(reader["ROM_BMI"]);
            }
            if (reader.HasColumn("ROM_WeightLoss") && reader["ROM_WeightLoss"] != DBNull.Value)
            {
                p.ROM_WeightLoss = Convert.ToBoolean(reader["ROM_WeightLoss"]);
            }
            if (reader.HasColumn("ROM_SevereIllness") && reader["ROM_SevereIllness"] != DBNull.Value)
            {
                p.ROM_ReduceEat = Convert.ToBoolean(reader["ROM_ReduceEat"]);
            }
            if (reader.HasColumn("ROM_SevereIllness") && reader["ROM_SevereIllness"] != DBNull.Value)
            {
                p.ROM_SevereIllness = Convert.ToBoolean(reader["ROM_SevereIllness"]);
            }
            if (reader.HasColumn("RiskOfMalnutrition") && reader["RiskOfMalnutrition"] != DBNull.Value)
            {
                p.RiskOfMalnutrition = Convert.ToBoolean(reader["RiskOfMalnutrition"]);
            }
            if (reader.HasColumn("WeightLossHospitalStay") && reader["WeightLossHospitalStay"] != DBNull.Value)
            {
                p.WeightLossHospitalStay = Convert.ToBoolean(reader["WeightLossHospitalStay"]);
            }
            if (reader.HasColumn("WL_Weight") && reader["WL_Weight"] != DBNull.Value)
            {
                p.WL_Weight = Convert.ToByte(reader["WL_Weight"]);
            }
            if (reader.HasColumn("WL_Month") && reader["WL_Month"] != DBNull.Value)
            {
                p.WL_Month = Convert.ToByte(reader["WL_Month"]);
            }
            if (reader.HasColumn("WL_Percent") && reader["WL_Percent"] != DBNull.Value)
            {
                p.WL_Percent = Convert.ToByte(reader["WL_Percent"]);
            }
            if (reader.HasColumn("V_EatingType") && reader["V_EatingType"] != DBNull.Value)
            {
                p.V_EatingType = Convert.ToInt64(reader["V_EatingType"]);
            }
            if (reader.HasColumn("AtrophySubcutaneousFatLayer") && reader["AtrophySubcutaneousFatLayer"] != DBNull.Value)
            {
                p.AtrophySubcutaneousFatLayer = Convert.ToInt64(reader["AtrophySubcutaneousFatLayer"]);
            }
            if (reader.HasColumn("AmyotrophicLateralSclerosis") && reader["AmyotrophicLateralSclerosis"] != DBNull.Value)
            {
                p.AmyotrophicLateralSclerosis = Convert.ToInt64(reader["AmyotrophicLateralSclerosis"]);
            }
            if (reader.HasColumn("PeripheralEdema") && reader["PeripheralEdema"] != DBNull.Value)
            {
                p.PeripheralEdema = Convert.ToInt64(reader["PeripheralEdema"]);
            }
            if (reader.HasColumn("BellyFlap") && reader["BellyFlap"] != DBNull.Value)
            {
                p.BellyFlap = Convert.ToInt64(reader["BellyFlap"]);
            }
            if (reader.HasColumn("V_SGAType") && reader["V_SGAType"] != DBNull.Value)
            {
                p.V_SGAType = Convert.ToInt64(reader["V_SGAType"]);
            }
            if (reader.HasColumn("V_NutritionalRequire") && reader["V_NutritionalRequire"] != DBNull.Value)
            {
                p.V_NutritionalRequire = Convert.ToInt64(reader["V_NutritionalRequire"]);
            }
            if (reader.HasColumn("ONT_Kcal") && reader["ONT_Kcal"] != DBNull.Value)
            {
                p.ONT_Kcal = Convert.ToInt32(reader["ONT_Kcal"]);
            }
            if (reader.HasColumn("ONT_Protein") && reader["ONT_Protein"] != DBNull.Value)
            {
                p.ONT_Protein = Convert.ToInt32(reader["ONT_Protein"]);
            }
            if (reader.HasColumn("ONT_Fat") && reader["ONT_Fat"] != DBNull.Value)
            {
                p.ONT_Fat = Convert.ToInt32(reader["ONT_Fat"]);
            }
            if (reader.HasColumn("ONT_Other") && reader["ONT_Other"] != DBNull.Value)
            {
                p.ONT_Other = reader["ONT_Other"].ToString();
            }
            if (reader.HasColumn("V_NutritionalMethods") && reader["V_NutritionalMethods"] != DBNull.Value)
            {
                p.V_NutritionalMethods = Convert.ToInt64(reader["V_NutritionalMethods"]);
            }
            if (reader.HasColumn("ConsultationNutritional") && reader["ConsultationNutritional"] != DBNull.Value)
            {
                p.ConsultationNutritional = Convert.ToBoolean(reader["ConsultationNutritional"]);
            }
            if (reader.HasColumn("DateCreated") && reader["DateCreated"] != DBNull.Value)
            {
                p.CreatedDate = Convert.ToDateTime(reader["DateCreated"]);
            }

            if (reader.HasColumn("StaffCreated") && reader["StaffCreated"] != DBNull.Value)
            {
                p.CreatedStaff = new Staff();
                p.CreatedStaff.StaffID = Convert.ToInt64(reader["StaffCreated"]);
                if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                {
                    p.CreatedStaff.FullName = reader["FullName"].ToString();
                }
            }
            //if (reader.HasColumn("DateSendRequest") && reader["DateSendRequest"] != DBNull.Value)
            //{
            //    p.DateSendRequest = Convert.ToDateTime(reader["DateSendRequest"]);
            //}
            return p;
        }
        protected virtual List<RequiredSubDiseasesReferences> GetRequiredSubDiseasesReferencesDataCollectionFromReader(IDataReader reader)
        {
            var p = new List<RequiredSubDiseasesReferences>();
            while (reader.Read())
            {
                p.Add(GetRequiredSubDiseasesReferencesFromReader(reader));
            }
            return p;
        }
        protected virtual RequiredSubDiseasesReferences GetRequiredSubDiseasesReferencesFromReader(IDataReader reader)
        {
            var p = new RequiredSubDiseasesReferences();
            try
            {
                if (reader.HasColumn("MainICD10") && reader["MainICD10"] != DBNull.Value)
                {
                    p.MainICD10 = reader["MainICD10"].ToString();
                }
                if (reader.HasColumn("SubICD10") && reader["SubICD10"] != DBNull.Value)
                {
                    p.SubICD10 = reader["SubICD10"].ToString();
                    p.SubICDInfo = GetRefDiseasesFromReader(reader);
                }
                if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
                {
                    p.IsActive = bool.Parse(reader["IsActive"].ToString());
                }
                if (reader.HasColumn("Desc") && reader["Desc"] != DBNull.Value)
                {
                    p.Desc = reader["Desc"].ToString();
                }
                if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
                {
                    p.StaffID = Convert.ToInt64(reader["Notes"].ToString());
                }
            }
            catch (Exception e)
            {
                AxLogger.Instance.LogError(e);
            }
            return p;
        }
        //▼====: #093
        protected virtual List<RuleDiseasesReferences> GetRuleDiseasesReferencesDataCollectionFromReader(IDataReader reader)
        {
            var p = new List<RuleDiseasesReferences>();
            while (reader.Read())
            {
                p.Add(GetRuleDiseasesReferencesFromReader(reader));
            }
            return p;
        }
        protected virtual RuleDiseasesReferences GetRuleDiseasesReferencesFromReader(IDataReader reader)
        {
            var p = new RuleDiseasesReferences();
            try
            {
                if (reader.HasColumn("MainICD10") && reader["MainICD10"] != DBNull.Value)
                {
                    p.MainICD10 = reader["MainICD10"].ToString();
                }
                if (reader.HasColumn("SubICD10") && reader["SubICD10"] != DBNull.Value)
                {
                    p.SubICD10 = reader["SubICD10"].ToString();
                    p.SubICDInfo = GetRefDiseasesFromReader(reader);
                }
                if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
                {
                    p.IsActive = bool.Parse(reader["IsActive"].ToString());
                }
                if (reader.HasColumn("IsException") && reader["IsException"] != DBNull.Value)
                {
                    p.IsException = bool.Parse(reader["IsException"].ToString());
                }
                if (reader.HasColumn("Desc") && reader["Desc"] != DBNull.Value)
                {
                    p.Desc = reader["Desc"].ToString();
                }
                if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
                {
                    p.StaffID = Convert.ToInt64(reader["Notes"].ToString());
                }
            }
            catch (Exception e)
            {
                AxLogger.Instance.LogError(e);
            }
            return p;
        }
        //▲====: #093
        protected virtual List<PCLExamAccordingICD> GetListPCLExamAccordingICDDataCollectionFromReader(IDataReader reader)
        {
            var p = new List<PCLExamAccordingICD>();
            while (reader.Read())
            {
                p.Add(GetListPCLExamAccordingICDFromReader(reader));
            }
            return p;
        }
        protected virtual PCLExamAccordingICD GetListPCLExamAccordingICDFromReader(IDataReader reader)
        {
            var p = new PCLExamAccordingICD();
            try
            {
                if (reader.HasColumn("PCLExamAccordingICDID") && reader["PCLExamAccordingICDID"] != DBNull.Value)
                {
                    p.PCLExamAccordingICDID = Convert.ToInt64(reader["PCLExamAccordingICDID"]);
                }
                if (reader.HasColumn("PCLExamTypeID") && reader["PCLExamTypeID"] != DBNull.Value)
                {
                    p.PCLExamTypeID = Convert.ToInt64(reader["PCLExamTypeID"]);
                }
                if (reader.HasColumn("ICDList") && reader["ICDList"] != DBNull.Value)
                {
                    p.ICDList = reader["ICDList"].ToString();
                }
                if (reader.HasColumn("ReminderTime") && reader["ReminderTime"] != DBNull.Value)
                {
                    p.ReminderTime = Convert.ToInt32(reader["ReminderTime"]);
                }
                if (reader.HasColumn("IsDelete") && reader["IsDelete"] != DBNull.Value)
                {
                    p.IsDelete = bool.Parse(reader["IsDelete"].ToString());
                }
                if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
                {
                    p.IsActive = bool.Parse(reader["IsActive"].ToString());
                }
            }
            catch (Exception e)
            {
                AxLogger.Instance.LogError(e);
            }
            return p;
        }
        protected virtual SummaryMedicalRecords GetSummaryMedicalRecordsFromReader(IDataReader reader)
        {
            var p = new SummaryMedicalRecords();
            if (reader.HasColumn("SummaryMedicalRecordID") && reader["SummaryMedicalRecordID"] != DBNull.Value)
            {
                p.SummaryMedicalRecordID = Convert.ToInt64(reader["SummaryMedicalRecordID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
                p.CurPatientRegistration = GetPatientRegistrationFromReader(reader);
            }
            if (reader.HasColumn("AdmissionDiagnosis") && reader["AdmissionDiagnosis"] != DBNull.Value)
            {
                p.AdmissionDiagnosis = reader["AdmissionDiagnosis"].ToString();
            }
            if (reader.HasColumn("DischargeDiagnosis") && reader["DischargeDiagnosis"] != DBNull.Value)
            {
                p.DischargeDiagnosis = reader["DischargeDiagnosis"].ToString();
            }
            if (reader.HasColumn("PathologicalProcess") && reader["PathologicalProcess"] != DBNull.Value)
            {
                p.PathologicalProcess = reader["PathologicalProcess"].ToString();
            }
            if (reader.HasColumn("SummaryResultPCL") && reader["SummaryResultPCL"] != DBNull.Value)
            {
                p.SummaryResultPCL = reader["SummaryResultPCL"].ToString();
            }
            if (reader.HasColumn("Treatment") && reader["Treatment"] != DBNull.Value)
            {
                p.Treatment = reader["Treatment"].ToString();
            }
            if (reader.HasColumn("DischargeStatus") && reader["DischargeStatus"] != DBNull.Value)
            {
                p.DischargeStatus = reader["DischargeStatus"].ToString();
            }
            if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
            {
                p.Note = reader["Note"].ToString();
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                p.V_RegistrationType = Convert.ToInt64(reader["V_RegistrationType"]);
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("IsDelete") && reader["IsDelete"] != DBNull.Value)
            {
                p.IsDelete = Convert.ToBoolean(reader["IsDelete"]);
            }
            if (reader.HasColumn("V_OutDischargeCondition") && reader["V_OutDischargeCondition"] != DBNull.Value)
            {
                p.V_OutDischargeCondition = Convert.ToInt64(reader["V_OutDischargeCondition"]);
            }
            if (reader.HasColumn("ChiefDoctorStaffID") && reader["ChiefDoctorStaffID"] != DBNull.Value)
            {
                p.ChiefDoctorStaffID = Convert.ToInt64(reader["ChiefDoctorStaffID"]);
            }
            if (reader.HasColumn("DoctorStaffName") && reader["DoctorStaffName"] != DBNull.Value)
            {
                p.DoctorStaffName = Convert.ToString(reader["DoctorStaffName"]);
            }
            if (reader.HasColumn("ConfirmHIStaffID") && reader["ConfirmHIStaffID"] != DBNull.Value)
            {
                p.ConfirmHIStaffID = Convert.ToInt64(reader["ConfirmHIStaffID"]);
            }
            return p;
        }
        protected virtual PatientTreatmentCertificates GetPatientTreatmentCertificatesFromReader(IDataReader reader)
        {
            var p = new PatientTreatmentCertificates();
            if (reader.HasColumn("PatientTreatmentCertificateID") && reader["PatientTreatmentCertificateID"] != DBNull.Value)
            {
                p.PatientTreatmentCertificateID = Convert.ToInt64(reader["PatientTreatmentCertificateID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("PatientTreatmentCertificateCode") && reader["PatientTreatmentCertificateCode"] != DBNull.Value)
            {
                p.PatientTreatmentCertificateCode = Convert.ToInt32(reader["PatientTreatmentCertificateCode"]);
            }
            if (reader.HasColumn("MedicalHistory") && reader["MedicalHistory"] != DBNull.Value)
            {
                p.MedicalHistory = reader["MedicalHistory"].ToString();
            }
            if (reader.HasColumn("Diagnosis") && reader["Diagnosis"] != DBNull.Value)
            {
                p.Diagnosis = reader["Diagnosis"].ToString();
            }
            if (reader.HasColumn("Treatment") && reader["Treatment"] != DBNull.Value)
            {
                p.Treatment = reader["Treatment"].ToString();
            }
            if (reader.HasColumn("Treatment") && reader["Treatment"] != DBNull.Value)
            {
                p.Treatment = reader["Treatment"].ToString();
            }
            if (reader.HasColumn("DoctorAdvice") && reader["DoctorAdvice"] != DBNull.Value)
            {
                p.DoctorAdvice = reader["DoctorAdvice"].ToString();
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                p.V_RegistrationType = Convert.ToInt64(reader["V_RegistrationType"]);
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("IsDelete") && reader["IsDelete"] != DBNull.Value)
            {
                p.IsDelete = Convert.ToBoolean(reader["IsDelete"]);
            }
            return p;
        }
        protected virtual InjuryCertificates GetInjuryCertificatesFromReader(IDataReader reader)
        {
            var p = new InjuryCertificates();
            if (reader.HasColumn("InjuryCertificateID") && reader["InjuryCertificateID"] != DBNull.Value)
            {
                p.InjuryCertificateID = Convert.ToInt64(reader["InjuryCertificateID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("ReasonAdmission") && reader["ReasonAdmission"] != DBNull.Value)
            {
                p.ReasonAdmission = reader["ReasonAdmission"].ToString();
            }
            if (reader.HasColumn("ClinicalSigns") && reader["ClinicalSigns"] != DBNull.Value)
            {
                p.ClinicalSigns = reader["ClinicalSigns"].ToString();
            }
            if (reader.HasColumn("InjuryCertificateCode") && reader["InjuryCertificateCode"] != DBNull.Value)
            {
                p.InjuryCertificateCode = Convert.ToInt32(reader["InjuryCertificateCode"]);
            }
            if (reader.HasColumn("Diagnosis") && reader["Diagnosis"] != DBNull.Value)
            {
                p.Diagnosis = reader["Diagnosis"].ToString();
            }
            if (reader.HasColumn("Treatment") && reader["Treatment"] != DBNull.Value)
            {
                p.Treatment = reader["Treatment"].ToString();
            }
            if (reader.HasColumn("Treatment") && reader["Treatment"] != DBNull.Value)
            {
                p.Treatment = reader["Treatment"].ToString();
            }
            if (reader.HasColumn("AdmissionStatus") && reader["AdmissionStatus"] != DBNull.Value)
            {
                p.AdmissionStatus = reader["AdmissionStatus"].ToString();
            }
            if (reader.HasColumn("DischargeStatus") && reader["DischargeStatus"] != DBNull.Value)
            {
                p.DischargeStatus = reader["DischargeStatus"].ToString();
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                p.V_RegistrationType = Convert.ToInt64(reader["V_RegistrationType"]);
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("IsDelete") && reader["IsDelete"] != DBNull.Value)
            {
                p.IsDelete = Convert.ToBoolean(reader["IsDelete"]);
            }
            return p;
        }
        protected virtual List<BirthCertificates> GetBirthCertificatesCollectionFromReader(IDataReader reader)
        {
            var p = new List<BirthCertificates>();
            while (reader.Read())
            {
                p.Add(GetBirthCertificatesFromReader(reader));
            }
            return p;
        }
        protected virtual BirthCertificates GetBirthCertificatesFromReader(IDataReader reader)
        {
            var p = new BirthCertificates();
            if (reader.HasColumn("BirthCertificateID") && reader["BirthCertificateID"] != DBNull.Value)
            {
                p.BirthCertificateID = Convert.ToInt64(reader["BirthCertificateID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("NumOfChild") && reader["NumOfChild"] != DBNull.Value)
            {
                p.NumOfChild = Convert.ToInt32(reader["NumOfChild"]);
            }
            if (reader.HasColumn("BirthCertificateCode") && reader["BirthCertificateCode"] != DBNull.Value)
            {
                p.BirthCertificateCode = Convert.ToInt32(reader["BirthCertificateCode"]);
            }
            if (reader.HasColumn("GenderOfChild") && reader["GenderOfChild"] != DBNull.Value)
            {
                p.GenderOfChild = reader["GenderOfChild"].ToString();
            }
            if (reader.HasColumn("WeightOfChild") && reader["WeightOfChild"] != DBNull.Value)
            {
                p.WeightOfChild = Convert.ToInt32(reader["WeightOfChild"]);
            }
            if (reader.HasColumn("PlanningName") && reader["PlanningName"] != DBNull.Value)
            {
                p.PlanningName = reader["PlanningName"].ToString();
            }
            if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
            {
                p.Note = reader["Note"].ToString();
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                p.V_RegistrationType = Convert.ToInt64(reader["V_RegistrationType"]);
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("IsDelete") && reader["IsDelete"] != DBNull.Value)
            {
                p.IsDelete = Convert.ToBoolean(reader["IsDelete"]);
            }
            if (reader.HasColumn("BirthDate") && reader["BirthDate"] != DBNull.Value)
            {
                p.BirthDate = Convert.ToDateTime(reader["BirthDate"]);
            }
            if (reader.HasColumn("PtRegistrationID_Child") && reader["PtRegistrationID_Child"] != DBNull.Value)
            {
                p.CurPatientRegistration = GetPatientRegistrationFromReader(reader);
            }
            if (reader.HasColumn("V_SurgicalBirth") && reader["V_SurgicalBirth"] != DBNull.Value)
            {
                p.V_SurgicalBirth = Convert.ToInt64(reader["V_SurgicalBirth"]);
            }
            if (reader.HasColumn("V_BirthUnder32") && reader["V_BirthUnder32"] != DBNull.Value)
            {
                p.V_BirthUnder32 = Convert.ToInt64(reader["V_BirthUnder32"]);
            }
            if (reader.HasColumn("ChildStatus") && reader["ChildStatus"] != DBNull.Value)
            {
                p.ChildStatus = Convert.ToString(reader["ChildStatus"]);
            }
            if (reader.HasColumn("BirthCount") && reader["BirthCount"] != DBNull.Value)
            {
                p.BirthCount = (byte)reader["BirthCount"];
            }
            if (reader.HasColumn("ChildCount") && reader["ChildCount"] != DBNull.Value)
            {
                p.ChildCount= (byte)reader["ChildCount"];
            }
            return p;
        }
        protected virtual VacationInsuranceCertificates GetVacationInsuranceCertificatesFromReader(IDataReader reader)
        {
            var p = new VacationInsuranceCertificates();
            if (reader.HasColumn("VacationInsuranceCertificateID") && reader["VacationInsuranceCertificateID"] != DBNull.Value)
            {
                p.VacationInsuranceCertificateID = Convert.ToInt64(reader["VacationInsuranceCertificateID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("VacationInsuranceCertificateCode") && reader["VacationInsuranceCertificateCode"] != DBNull.Value)
            {
                p.VacationInsuranceCertificateCode = reader["VacationInsuranceCertificateCode"].ToString();
            }
            if (reader.HasColumn("SeriNumber") && reader["SeriNumber"] != DBNull.Value)
            {
                p.SeriNumber = Convert.ToInt32(reader["SeriNumber"]);
            }
            if (reader.HasColumn("Diagnosis") && reader["Diagnosis"] != DBNull.Value)
            {
                p.Diagnosis = reader["Diagnosis"].ToString();
            }
            if (reader.HasColumn("FromDate") && reader["FromDate"] != DBNull.Value)
            {
                p.FromDate = Convert.ToDateTime(reader["FromDate"]);
            }
            if (reader.HasColumn("ToDate") && reader["ToDate"] != DBNull.Value)
            {
                p.ToDate = Convert.ToDateTime(reader["ToDate"]);
            }
            if (reader.HasColumn("FatherName") && reader["FatherName"] != DBNull.Value)
            {
                p.FatherName = reader["FatherName"].ToString();
            }
            if (reader.HasColumn("MotherName") && reader["MotherName"] != DBNull.Value)
            {
                p.MotherName = reader["MotherName"].ToString();
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("IsDelete") && reader["IsDelete"] != DBNull.Value)
            {
                p.IsDelete = Convert.ToBoolean(reader["IsDelete"]);
            }
            if (reader.HasColumn("IsInsurance") && reader["IsInsurance"] != DBNull.Value)
            {
                p.IsInsurance = Convert.ToBoolean(reader["IsInsurance"]);
            }
            if (reader.HasColumn("SeriNumberText") && reader["SeriNumberText"] != DBNull.Value)
            {
                p.SeriNumberText = Convert.ToString(reader["SeriNumberText"]);
            }
            if (reader.HasColumn("DocumentNumber") && reader["DocumentNumber"] != DBNull.Value)
            {
                p.DocumentNumber = Convert.ToString(reader["DocumentNumber"]);
            }
            if (reader.HasColumn("MedicalNumber") && reader["MedicalNumber"] != DBNull.Value)
            {
                p.MedicalNumber = Convert.ToString(reader["MedicalNumber"]);
            }
            if (reader.HasColumn("CheifDoctorStaffID") && reader["CheifDoctorStaffID"] != DBNull.Value)
            {
                p.CheifDoctorStaffID = Convert.ToInt64(reader["CheifDoctorStaffID"]);
            }
            if (reader.HasColumn("IsSuspendedPregnant") && reader["IsSuspendedPregnant"] != DBNull.Value)
            {
                p.IsSuspendedPregnant = Convert.ToBoolean(reader["IsSuspendedPregnant"]);
            }
            if (reader.HasColumn("ReasonSuspendedPregnant") && reader["ReasonSuspendedPregnant"] != DBNull.Value)
            {
                p.ReasonSuspendedPregnant = Convert.ToString(reader["ReasonSuspendedPregnant"]);
            }
            if (reader.HasColumn("NumOfDayLeave") && reader["NumOfDayLeave"] != DBNull.Value)
            {
                p.NumOfDayLeave = Convert.ToInt32(reader["NumOfDayLeave"]);
            }
            if (reader.HasColumn("TreatmentMethod") && reader["TreatmentMethod"] != DBNull.Value)
            {
                p.TreatmentMethod = Convert.ToString(reader["TreatmentMethod"]);
            }
            if (reader.HasColumn("ChildUnder7") && reader["ChildUnder7"] != DBNull.Value)
            {
                p.ChildUnder7 = Convert.ToBoolean(reader["ChildUnder7"]);
            }
            if (reader.HasColumn("IsTuberculosis") && reader["IsTuberculosis"] != DBNull.Value)
            {
                p.IsTuberculosis = Convert.ToBoolean(reader["IsTuberculosis"]);
            }
            if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
            {
                p.PatientCode = Convert.ToString(reader["PatientCode"]);
            }
            if (reader.HasColumn("PatientName") && reader["PatientName"] != DBNull.Value)
            {
                p.PatientName = Convert.ToString(reader["PatientName"]);
            }
            if (reader.HasColumn("DOB") && reader["DOB"] != DBNull.Value)
            {
                p.DOB = Convert.ToDateTime(reader["DOB"]);
            }
            if (reader.HasColumn("Age") && reader["Age"] != DBNull.Value)
            {
                p.Age = Convert.ToString(reader["Age"]);
            }
            if (reader.HasColumn("Gender") && reader["Gender"] != DBNull.Value)
            {
                p.Gender = Convert.ToString(reader["Gender"]);
            }
            if (reader.HasColumn("PatientEmployer") && reader["PatientEmployer"] != DBNull.Value)
            {
                p.PatientEmployer = Convert.ToString(reader["PatientEmployer"]);
            }
            if (reader.HasColumn("HICardNo") && reader["HICardNo"] != DBNull.Value)
            {
                p.HICardNo = Convert.ToString(reader["HICardNo"]);
            }
            if (reader.HasColumn("SocialInsuranceNumber") && reader["SocialInsuranceNumber"] != DBNull.Value)
            {
                p.SocialInsuranceNumber = Convert.ToString(reader["SocialInsuranceNumber"]);
            }
            if (reader.HasColumn("PatientStreetAddress") && reader["PatientStreetAddress"] != DBNull.Value)
            {
                p.PatientStreetAddress = Convert.ToString(reader["PatientStreetAddress"]);
            }
            if (reader.HasColumn("AdmissionDate") && reader["AdmissionDate"] != DBNull.Value)
            {
                p.AdmissionDate = Convert.ToDateTime(reader["AdmissionDate"]);
            }
            if (reader.HasColumn("DischargeDate") && reader["DischargeDate"] != DBNull.Value)
            {
                p.DischargeDate = Convert.ToDateTime(reader["DischargeDate"]);
            }
            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.DoctorStaffID = Convert.ToInt64(reader["DoctorStaffID"]);
            }
            if (reader.HasColumn("GestationalAge") && reader["GestationalAge"] != DBNull.Value)
            {
                p.GestationalAge = Convert.ToInt32(reader["GestationalAge"]);
            }
            if (reader.HasColumn("HICardNoTemp") && reader["HICardNoTemp"] != DBNull.Value)
            {
                p.HICardNoTemp = Convert.ToString(reader["HICardNoTemp"]);
            }
            return p;
        }
        protected virtual List<DTDT_don_thuoc> GetDTDT_don_thuocCollectionFromReader(IDataReader reader)
        {
            var p = new List<DTDT_don_thuoc>();
            while (reader.Read())
            {
                p.Add(GetDTDT_don_thuocFromReader(reader));
            }
            return p;
        }
        protected virtual DTDT_don_thuoc GetDTDT_don_thuocFromReader(IDataReader reader)
        {
            var p = new DTDT_don_thuoc();
            if (reader.HasColumn("id_don_thuoc") && reader["id_don_thuoc"] != DBNull.Value)
            {
                p.id_don_thuoc = Convert.ToInt64(reader["id_don_thuoc"]);
            }
            if (reader.HasColumn("ma_don_thuoc_co_so_kcb") && reader["ma_don_thuoc_co_so_kcb"] != DBNull.Value)
            {
                p.ma_don_thuoc_co_so_kcb = Convert.ToString(reader["ma_don_thuoc_co_so_kcb"]);
                p.ma_don_thuoc = Convert.ToString(reader["ma_don_thuoc_co_so_kcb"]);
            }
            if (reader.HasColumn("ma_co_so") && reader["ma_co_so"] != DBNull.Value)
            {
                p.ma_co_so = Convert.ToString(reader["ma_co_so"]);
            }
            if (reader.HasColumn("ten_co_so") && reader["ten_co_so"] != DBNull.Value)
            {
                p.ten_co_so = Convert.ToString(reader["ten_co_so"]);
            }
            if (reader.HasColumn("ma_so_bao_hiem_y_te") && reader["ma_so_bao_hiem_y_te"] != DBNull.Value)
            {
                p.ma_so_bao_hiem_y_te = Convert.ToString(reader["ma_so_bao_hiem_y_te"]);
            }
            if (reader.HasColumn("ho_ten") && reader["ho_ten"] != DBNull.Value)
            {
                p.ho_ten = Convert.ToString(reader["ho_ten"]);
                p.ho_ten_benh_nhan = Convert.ToString(reader["ho_ten"]);
            }
            if (reader.HasColumn("ngay_sinh_benh_nhan") && reader["ngay_sinh_benh_nhan"] != DBNull.Value)
            {
                p.ngay_sinh_benh_nhan = Convert.ToString(reader["ngay_sinh_benh_nhan"]);
            }
            if (reader.HasColumn("ma_dinh_danh_y_te") && reader["ma_dinh_danh_y_te"] != DBNull.Value)
            {
                p.ma_dinh_danh_y_te = Convert.ToString(reader["ma_dinh_danh_y_te"]);
            }
            if (reader.HasColumn("tuoi") && reader["tuoi"] != DBNull.Value)
            {
                p.tuoi = Convert.ToInt16(reader["tuoi"]);
            }
            if (reader.HasColumn("gioi_tinh") && reader["gioi_tinh"] != DBNull.Value)
            {
                p.gioi_tinh = Convert.ToInt16(reader["gioi_tinh"]);
            }
            if (reader.HasColumn("dia_chi") && reader["dia_chi"] != DBNull.Value)
            {
                p.dia_chi = Convert.ToString(reader["dia_chi"]);
            }
            if (reader.HasColumn("ma_benh") && reader["ma_benh"] != DBNull.Value)
            {
                p.ma_benh = Convert.ToString(reader["ma_benh"]);
            }
            if (reader.HasColumn("ten_benh") && reader["ten_benh"] != DBNull.Value)
            {
                p.ten_benh = Convert.ToString(reader["ten_benh"]);
            }
            //▼====: #156
            if (reader.HasColumn("chandoanXML") && reader["chandoanXML"] != DBNull.Value)
            {
                XmlTextReader txtReader = new XmlTextReader(new StringReader(Convert.ToString(reader["chandoanXML"])));
                XmlSerializer serializer = new XmlSerializer(typeof(chandoanlist));
                chandoanlist chandoanlistXML = (chandoanlist)serializer.Deserialize(txtReader);
                List<DTDT_chan_doan> chandoanlist = new List<DTDT_chan_doan>();
                if (chandoanlistXML != null && chandoanlistXML.chandoanitem != null && chandoanlistXML.chandoanitem.Count() > 0)
                {
                    foreach (chandoan item in chandoanlistXML.chandoanitem)
                    {
                        DTDT_chan_doan itemNew = new DTDT_chan_doan();
                        itemNew.ma_chan_doan = item.ma_benh;
                        itemNew.ten_chan_doan = item.ten_benh;
                        itemNew.ket_luan = item.ket_luan;
                        chandoanlist.Add(itemNew);
                    }
                    p.chan_doan = chandoanlist;
                }
            }
            //▲====: #156
            if (reader.HasColumn("ngay_ke_don") && reader["ngay_ke_don"] != DBNull.Value)
            {
                p.ngay_ke_don = Convert.ToString(reader["ngay_ke_don"]);
                p.ngay_gio_ke_don = Convert.ToString(reader["ngay_ke_don"]);
            }
            if (reader.HasColumn("ma_don_thuoc_quoc_gia") && reader["ma_don_thuoc_quoc_gia"] != DBNull.Value)
            {
                p.ma_don_thuoc_quoc_gia = Convert.ToString(reader["ma_don_thuoc_quoc_gia"]);
            }
            if (reader.HasColumn("IssueID") && reader["IssueID"] != DBNull.Value)
            {
                p.IssueID = Convert.ToInt64(reader["IssueID"]);
            }
            if (reader.HasColumn("nguoi_ke_don") && reader["nguoi_ke_don"] != DBNull.Value)
            {
                p.nguoi_ke_don = Convert.ToString(reader["nguoi_ke_don"]);
            }
            if (reader.HasColumn("outiID") && reader["outiID"] != DBNull.Value)
            {
                p.outiID = Convert.ToInt64(reader["outiID"]);
            }
            if (reader.HasColumn("loai_don_thuoc") && reader["loai_don_thuoc"] != DBNull.Value)
            {
                p.loai_don_thuoc = Convert.ToString(reader["loai_don_thuoc"]);
            }
            if (reader.HasColumn("can_nang") && reader["can_nang"] != DBNull.Value)
            {
                p.can_nang = Convert.ToString(reader["can_nang"]);
            }
            if (reader.HasColumn("gioi_tinh_str") && reader["gioi_tinh_str"] != DBNull.Value)
            {
                p.gioi_tinh_str = Convert.ToString(reader["gioi_tinh_str"]);
            }
            if (reader.HasColumn("thong_tin_nguoi_giam_ho") && reader["thong_tin_nguoi_giam_ho"] != DBNull.Value)
            {
                p.thong_tin_nguoi_giam_ho = Convert.ToString(reader["thong_tin_nguoi_giam_ho"]);
            }
            if (reader.HasColumn("luu_y") && reader["luu_y"] != DBNull.Value)
            {
                p.luu_y = Convert.ToString(reader["luu_y"]);
            }
            if (reader.HasColumn("hinh_thuc_dieu_tri") && reader["hinh_thuc_dieu_tri"] != DBNull.Value)
            {
                p.hinh_thuc_dieu_tri = Convert.ToString(reader["hinh_thuc_dieu_tri"]);
            }
            if (reader.HasColumn("loi_dan") && reader["loi_dan"] != DBNull.Value)
            {
                p.loi_dan = Convert.ToString(reader["loi_dan"]);
            }
            if (reader.HasColumn("so_dien_thoai_nguoi_kham_benh") && reader["so_dien_thoai_nguoi_kham_benh"] != DBNull.Value)
            {
                p.so_dien_thoai_nguoi_kham_benh = Convert.ToString(reader["so_dien_thoai_nguoi_kham_benh"]);
            }
            if (reader.HasColumn("ngay_tai_kham") && reader["ngay_tai_kham"] != DBNull.Value)
            {
                p.ngay_tai_kham = Convert.ToString(reader["ngay_tai_kham"]);
            }
            if (reader.HasColumn("khoa_xuat_vien") && reader["khoa_xuat_vien"] != DBNull.Value)
            {
                p.khoa_xuat_vien = Convert.ToString(reader["khoa_xuat_vien"]);
            }
            if (reader.HasColumn("ngay_vao_vien") && reader["ngay_vao_vien"] != DBNull.Value)
            {
                p.ngay_vao_vien = Convert.ToDateTime(reader["ngay_vao_vien"]);
            }
            if (reader.HasColumn("ngay_ra_vien") && reader["ngay_ra_vien"] != DBNull.Value)
            {
                p.ngay_ra_vien = Convert.ToDateTime(reader["ngay_ra_vien"]);
            }
            if (reader.HasColumn("bac_si_ke_don") && reader["bac_si_ke_don"] != DBNull.Value)
            {
                p.bac_si_ke_don = Convert.ToString(reader["bac_si_ke_don"]);
            }
            if (reader.HasColumn("tinh_trang_day_cong") && reader["tinh_trang_day_cong"] != DBNull.Value)
            {
                p.tinh_trang_day_cong = Convert.ToString(reader["tinh_trang_day_cong"]);
            }
            if (reader.HasColumn("ngay_day_cong") && reader["ngay_day_cong"] != DBNull.Value)
            {
                p.ngay_day_cong = Convert.ToDateTime(reader["ngay_day_cong"]);
            }
            //▼====: #156
            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.Doctor = new Staff();
                p.Doctor.StaffID = (long)reader["DoctorStaffID"];
                if (reader.HasColumn("MaLienThongBacSi") && reader["MaLienThongBacSi"] != DBNull.Value)
                {
                    p.Doctor.MaLienThongBacSi = reader["MaLienThongBacSi"].ToString();
                }
                if (reader.HasColumn("MatKhauLienThongBacSi") && reader["MatKhauLienThongBacSi"] != DBNull.Value)
                {
                    p.Doctor.MatKhauLienThongBacSi = reader["MatKhauLienThongBacSi"].ToString();
                }
            }
            if (reader.HasColumn("id_don_thuoc_chi_tiet") && reader["id_don_thuoc_chi_tiet"] != DBNull.Value)
            {
                p.thong_tin_don_thuoc_item = GetDTDT_don_thuoc_chi_tietFromReader(reader);
            }
            //▲====: #156
            if (reader.HasColumn("dotdungthuocXML") && reader["dotdungthuocXML"] != DBNull.Value)
            {
                XmlTextReader txtReader = new XmlTextReader(new StringReader(Convert.ToString(reader["dotdungthuocXML"])));
                XmlSerializer serializer = new XmlSerializer(typeof(dotdungthuoclist));
                dotdungthuoclist dotdungthuoclistXML = (dotdungthuoclist)serializer.Deserialize(txtReader);

                List<DTDT_dot_dung_thuoc> dotdungthuoclist = new List<DTDT_dot_dung_thuoc>();
                if (dotdungthuoclistXML != null && dotdungthuoclistXML.dotdungthuocitem != null && dotdungthuoclistXML.dotdungthuocitem.Count() > 0)
                {
                    foreach (dotdungthuoc item in dotdungthuoclistXML.dotdungthuocitem)
                    {
                        DTDT_dot_dung_thuoc itemNew = new DTDT_dot_dung_thuoc();
                        itemNew.dot = item.dot;
                        itemNew.tu_ngay = item.tu_ngay;
                        itemNew.den_ngay = item.den_ngay;
                        itemNew.so_thang_thuoc = item.so_thang_thuoc;
                        dotdungthuoclist.Add(itemNew);
                    }
                    p.dot_dung_thuoc = dotdungthuoclist.FirstOrDefault();
                }
            }
            return p;
        }
        //▼====: #156
        [Serializable()]
        [XmlRootAttribute("chandoanlist", Namespace = "", IsNullable = false)]
        public class chandoanlist
        {
            [XmlElement(ElementName = "chandoan")]
            public List<chandoan> chandoanitem { get; set; }
        }

        [XmlRoot(ElementName = "chandoan")]
        public class chandoan
        {
            [XmlElement(ElementName = "ma_benh")]
            public string ma_benh { get; set; }
            [XmlElement(ElementName = "ten_benh")]
            public string ten_benh { get; set; }
            [XmlElement(ElementName = "ket_luan")]
            public string ket_luan { get; set; }
        }

        [Serializable()]
        [XmlRootAttribute("dotdungthuoclist", Namespace = "", IsNullable = false)]
        public class dotdungthuoclist
        {
            [XmlElement(ElementName = "dotdungthuoc")]
            public List<dotdungthuoc> dotdungthuocitem { get; set; }
        }

        [XmlRoot(ElementName = "dotdungthuoc")]
        public class dotdungthuoc
        {
            [XmlElement(ElementName = "dot")]
            public int dot { get; set; }
            [XmlElement(ElementName = "tu_ngay")]
            public string tu_ngay { get; set; }
            [XmlElement(ElementName = "den_ngay")]
            public string den_ngay { get; set; }
            [XmlElement(ElementName = "so_thang_thuoc")]
            public string so_thang_thuoc { get; set; }
        }

        protected virtual List<DTDT_don_thuoc_chi_tiet> GetDTDT_don_thuoc_chi_tietCollectionFromReader(IDataReader reader)
        {
            var p = new List<DTDT_don_thuoc_chi_tiet>();
            while (reader.Read())
            {
                p.Add(GetDTDT_don_thuoc_chi_tietFromReader(reader));
            }
            return p;
        }

        protected virtual DTDT_don_thuoc_chi_tiet GetDTDT_don_thuoc_chi_tietFromReader(IDataReader reader)
        {
            var p = new DTDT_don_thuoc_chi_tiet();
            if (reader.HasColumn("id_don_thuoc_chi_tiet") && reader["id_don_thuoc_chi_tiet"] != DBNull.Value)
            {
                p.id_don_thuoc_chi_tiet = Convert.ToInt64(reader["id_don_thuoc_chi_tiet"]);
            }
            if (reader.HasColumn("id_don_thuoc") && reader["id_don_thuoc"] != DBNull.Value)
            {
                p.id_don_thuoc = Convert.ToInt64(reader["id_don_thuoc"]);
            }
            if (reader.HasColumn("ma_thuoc") && reader["ma_thuoc"] != DBNull.Value)
            {
                p.ma_thuoc = Convert.ToString(reader["ma_thuoc"]);
            }
            if (reader.HasColumn("biet_duoc") && reader["biet_duoc"] != DBNull.Value)
            {
                p.biet_duoc = Convert.ToString(reader["biet_duoc"]);
            }
            if (reader.HasColumn("ten_thuoc") && reader["ten_thuoc"] != DBNull.Value)
            {
                p.ten_thuoc = Convert.ToString(reader["ten_thuoc"]);
            }
            if (reader.HasColumn("don_vi_tinh") && reader["don_vi_tinh"] != DBNull.Value)
            {
                p.don_vi_tinh = Convert.ToString(reader["don_vi_tinh"]);
            }
            if (reader.HasColumn("cach_dung") && reader["cach_dung"] != DBNull.Value)
            {
                p.cach_dung = Convert.ToString(reader["cach_dung"]);
            }
            if (reader.HasColumn("duong_dung") && reader["duong_dung"] != DBNull.Value)
            {
                p.duong_dung = Convert.ToString(reader["duong_dung"]);
            }
            if (reader.HasColumn("lieu_dung") && reader["lieu_dung"] != DBNull.Value)
            {
                p.lieu_dung = Convert.ToString(reader["lieu_dung"]);
            }
            if (reader.HasColumn("so_dang_ky") && reader["so_dang_ky"] != DBNull.Value)
            {
                p.so_dang_ky = Convert.ToString(reader["so_dang_ky"]);
            }
            if (reader.HasColumn("so_luong") && reader["so_luong"] != DBNull.Value)
            {
                p.so_luong = Convert.ToInt32(reader["so_luong"]);
            }
            if (reader.HasColumn("ham_luong") && reader["ham_luong"] != DBNull.Value)
            {
                p.ham_luong = Convert.ToString(reader["ham_luong"]);
            }
            return p;
        }
        //▲====: #156

        protected virtual PatientRegistration GetPatientRegistrationFromReader(IDataReader reader)
        {
            var p = new PatientRegistration();
            p.Patient = new Patient();
            if (reader.HasColumn("DischargeDate") && reader["DischargeDate"] != DBNull.Value)
            {
                p.DischargeDate = reader["DischargeDate"] as DateTime?;
            }
            if (reader.HasColumn("DischargeDetailRecCreatedDate") && reader["DischargeDetailRecCreatedDate"] != DBNull.Value)
            {
                p.DischargeDetailRecCreatedDate = reader["DischargeDetailRecCreatedDate"] as DateTime?;
            }
            if (reader.HasColumn("TempDischargeDate") && reader["TempDischargeDate"] != DBNull.Value)
            {
                p.TempDischargeDate = reader["TempDischargeDate"] as DateTime?;
            }

            if (reader.HasColumn("InPtAdmissionStatus") && reader["InPtAdmissionStatus"] != DBNull.Value)
            {
                p.InPtAdmissionStatus = Convert.ToInt16(reader["InPtAdmissionStatus"]);
            }

            if (reader.HasColumn("IsDischarge") && reader["IsDischarge"] != DBNull.Value)
            {
                p.IsDischarge = Convert.ToBoolean(reader["IsDischarge"]);
            }

            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = (long)reader["PtRegistrationID"];
            }
            if (reader.HasColumn("PatientClassID") && reader["PatientClassID"] != DBNull.Value)
            {
                p.PatientClassID = reader["PatientClassID"] as long?;
                var temp = new PatientClassification
                {
                    PatientClassID = (long)reader["PatientClassID"]
                };
                if (reader.HasColumn("PatientClassName") && reader["PatientClassName"] != DBNull.Value)
                {
                    temp.PatientClassName = Convert.ToString(reader["PatientClassName"]);
                }
                if (reader.HasColumn("PCNotes") && reader["PCNotes"] != DBNull.Value)
                {
                    temp.PCNotes = Convert.ToString(reader["PCNotes"]);
                }
                p.PatientClassification = temp;
            }
            if (reader.HasColumn("AdmissionDate") && reader["AdmissionDate"] != DBNull.Value)
            {
                p.AdmissionInfo = new InPatientAdmDisDetails();
                p.AdmissionInfo.AdmissionDate = Convert.ToDateTime(reader["AdmissionDate"]);
                if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
                {
                    p.AdmissionInfo.Department = new RefDepartment();
                    p.AdmissionInfo.Department.DeptID = Convert.ToInt64(reader["DeptID"]);
                    if (reader.HasColumn("AdmDeptName") && reader["AdmDeptName"] != DBNull.Value)
                    {
                        p.AdmissionInfo.Department.DeptName = reader["AdmDeptName"].ToString();
                    }
                }
                if (reader.HasColumn("DischargeDeptID") && reader["DischargeDeptID"] != DBNull.Value)
                {
                    p.AdmissionInfo.DischargeDepartment = new RefDepartment();
                    p.AdmissionInfo.DischargeDepartment.DeptID = Convert.ToInt64(reader["DischargeDeptID"]);
                    if (reader.HasColumn("DischargeDeptName") && reader["DischargeDeptName"] != DBNull.Value)
                    {
                        p.AdmissionInfo.DischargeDepartment.DeptName = reader["DischargeDeptName"].ToString();
                    }
                }
                if (reader.HasColumn("V_DischargeType") && reader["V_DischargeType"] != DBNull.Value)
                {
                    p.AdmissionInfo.VDischargeType = new Lookup();
                    p.AdmissionInfo.VDischargeType.LookupID = Convert.ToInt64(reader["V_DischargeType"]);
                    if (reader.HasColumn("V_DischargeTypeName") && reader["V_DischargeTypeName"] != DBNull.Value)
                    {
                        p.AdmissionInfo.VDischargeType.ObjectValue = reader["V_DischargeTypeName"].ToString();
                    }
                }
                if (reader.HasColumn("V_DischargeCondition") && reader["V_DischargeCondition"] != DBNull.Value)
                {
                    p.AdmissionInfo.V_DischargeCondition = new Lookup();
                    p.AdmissionInfo.V_DischargeCondition.LookupID = Convert.ToInt64(reader["V_DischargeCondition"]);
                    if (reader.HasColumn("V_DischargeConditionName") && reader["V_DischargeConditionName"] != DBNull.Value)
                    {
                        p.AdmissionInfo.V_DischargeCondition.ObjectValue = reader["V_DischargeConditionName"].ToString();
                    }
                }
                if (reader.HasColumn("TotalDaysOfTreatment") && reader["TotalDaysOfTreatment"] != DBNull.Value)
                {
                    p.AdmissionInfo.TotalDaysOfTreatment = Convert.ToInt32(reader["TotalDaysOfTreatment"]);
                }
                if (reader.HasColumn("V_AdmissionType") && reader["V_AdmissionType"] != DBNull.Value)
                {
                    p.AdmissionInfo.VAdmissionType = new Lookup();
                    p.AdmissionInfo.V_AdmissionType = Convert.ToInt64(reader["V_AdmissionType"]);
                    p.AdmissionInfo.VAdmissionType.LookupID = Convert.ToInt64(reader["V_AdmissionType"]);
                    if (reader.HasColumn("AdmissionType") && reader["AdmissionType"] != DBNull.Value)
                    {
                        p.AdmissionInfo.VAdmissionType.ObjectValue = reader["AdmissionType"].ToString();
                    }
                }
                if (reader.HasColumn("DischargeNote") && reader["DischargeNote"] != DBNull.Value)
                {
                    p.AdmissionInfo.DischargeNote = reader["DischargeNote"].ToString();
                }
                if (reader.HasColumn("AdmissionNote") && reader["AdmissionNote"] != DBNull.Value)
                {
                    p.AdmissionInfo.AdmissionNote = reader["AdmissionNote"].ToString();
                }
                if (reader.HasColumn("DischargeNote2") && reader["DischargeNote2"] != DBNull.Value)
                {
                    p.AdmissionInfo.DischargeNote2 = reader["DischargeNote2"].ToString();
                }
                if (reader.HasColumn("MedicalHistory") && reader["MedicalHistory"] != DBNull.Value)
                {
                    p.AdmissionInfo.MedicalHistory = reader["MedicalHistory"].ToString();
                }
                if (reader.HasColumn("DischargeStatus") && reader["DischargeStatus"] != DBNull.Value)
                {
                    p.AdmissionInfo.DischargeStatus = reader["DischargeStatus"].ToString();
                }
                if (reader.HasColumn("Comment") && reader["Comment"] != DBNull.Value)
                {
                    p.AdmissionInfo.Comment = reader["Comment"].ToString();
                }
                if (reader.HasColumn("IsTreatmentCOVID") && reader["IsTreatmentCOVID"] != DBNull.Value)
                {
                    p.AdmissionInfo.IsTreatmentCOVID = Convert.ToBoolean(reader["IsTreatmentCOVID"]);
                }
                //▼====: #138
                if (reader.HasColumn("IsConfirmEmergencyTreatment") && reader["IsConfirmEmergencyTreatment"] != DBNull.Value)
                {
                    p.AdmissionInfo.IsConfirmEmergencyTreatment = Convert.ToBoolean(reader["IsConfirmEmergencyTreatment"]);
                }
                //▲====: #138
                //▼==== #149
                if (reader.HasColumn("IsReturning") && reader["IsReturning"] != DBNull.Value)
                {
                    p.AdmissionInfo.IsReturning = Convert.ToBoolean(reader["IsReturning"]);
                }
                //▲==== #149
            }
            if (reader.HasColumn("RegTypeID") && reader["RegTypeID"] != DBNull.Value)
            {
                p.RegTypeID = reader["RegTypeID"] as byte?;
                p.RegistrationType = new RegistrationType { RegTypeID = p.RegTypeID.GetValueOrDefault(0) };
                if (reader.HasColumn("RegTypeName") && reader["RegTypeName"] != DBNull.Value)
                {
                    p.RegistrationType.RegTypeName = reader["RegTypeName"].ToString();
                }
            }
            if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
            {
                p.DeptID = reader["DeptID"] as long?;
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientID = reader["PatientID"] as long?;
            }
            if (reader.HasColumn("EmergRecID") && reader["EmergRecID"] != DBNull.Value)
            {
                p.EmergRecID = reader["EmergRecID"] as long?;
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = reader["StaffID"] as long?;
            }
            if (reader.HasColumn("HIApprovedStaffID") && reader["HIApprovedStaffID"] != DBNull.Value)
            {
                p.HIApprovedStaffID = reader["HIApprovedStaffID"] as long?;
            }
            if (reader.HasColumn("HisID") && reader["HisID"] != DBNull.Value)
            {
                p.HisID = reader["HisID"] as long?;
            }
            if (reader.HasColumn("PaperReferalID") && reader["PaperReferalID"] != DBNull.Value)
            {
                p.PaperReferalID = reader["PaperReferalID"] as long?;
            }
            if (reader.HasColumn("StaffFullName"))
            {
                p.StaffName = reader["StaffFullName"] as string;
            }
            if (reader.HasColumn("ExamDate") && reader["ExamDate"] != DBNull.Value)
            {
                p.ExamDate = (DateTime)reader["ExamDate"];
            }
            if (reader.HasColumn("PtRegistrationCode") && reader["PtRegistrationCode"] != DBNull.Value)
            {
                p.PtRegistrationCode = reader["PtRegistrationCode"] as string;
            }
            if (reader.HasColumn("V_DocumentTypeOnHold") && reader["V_DocumentTypeOnHold"] != DBNull.Value)
            {
                p.V_DocumentTypeOnHold = reader["V_DocumentTypeOnHold"] as long?;
            }
            if (reader.HasColumn("SequenceNo") && reader["SequenceNo"] != DBNull.Value)
            {
                p.SequenceNo = (int)reader["SequenceNo"];
            }
            if (reader.HasColumn("ProgSumMinusMinHI") && reader["ProgSumMinusMinHI"] != DBNull.Value)
            {
                p.ProgSumMinusMinHI = reader["ProgSumMinusMinHI"] as decimal?;
            }
            if (reader.HasColumn("IsCrossRegion") && reader["IsCrossRegion"] != DBNull.Value)
            {
                p.IsCrossRegion = (reader["IsCrossRegion"] as bool?).GetValueOrDefault(false);
            }
            if (reader.HasColumn("IsForeigner") && reader["IsForeigner"] != DBNull.Value)
            {
                p.IsForeigner = (reader["IsForeigner"] as bool?).GetValueOrDefault(false);
            }
            if (reader.HasColumn("IsHICard_FiveYearsCont") && reader["IsHICard_FiveYearsCont"] != DBNull.Value)
            {
                p.IsHICard_FiveYearsCont = Convert.ToBoolean(reader["IsHICard_FiveYearsCont"]);
            }
            if (reader.HasColumn("EmergInPtReExamination") && reader["EmergInPtReExamination"] != DBNull.Value)
            {
                p.EmergInPtReExamination = (reader["EmergInPtReExamination"] as bool?).GetValueOrDefault(false);
            }

            if (reader.HasColumn("PtInsuranceBenefit") && reader["PtInsuranceBenefit"] != DBNull.Value)
            {
                p.PtInsuranceBenefit = reader["PtInsuranceBenefit"] as double?;
            }
            if (reader.HasColumn("IsAllowCrossRegion") && reader["IsAllowCrossRegion"] != DBNull.Value)
            {
                p.IsAllowCrossRegion = Convert.ToBoolean(reader["IsAllowCrossRegion"]);
            }
            p.RecordState = RecordState.UNCHANGED;
            if (reader.HasColumn("V_RegistrationStatus") && reader["V_RegistrationStatus"] != DBNull.Value)
            {
                p.V_RegistrationStatus = (long)reader["V_RegistrationStatus"];
            }

            if (Enum.IsDefined(typeof(AllLookupValues.RegistrationStatus), (int)p.V_RegistrationStatus))
            {
                p.RegistrationStatus = (AllLookupValues.RegistrationStatus)p.V_RegistrationStatus;
            }
            else
            {
                p.RegistrationStatus = AllLookupValues.RegistrationStatus.INVALID;
            }

            if (reader.HasColumn("V_RegistrationPaymentStatus") && reader["V_RegistrationPaymentStatus"] != DBNull.Value)
            {
                try
                {
                    var ps = (long)reader["V_RegistrationPaymentStatus"];
                    if (Enum.IsDefined(typeof(AllLookupValues.RegistrationPaymentStatus), (int)ps))
                    {
                        p.RegistrationPaymentStatus = (AllLookupValues.RegistrationPaymentStatus)ps;
                    }
                }
                catch
                {

                }

            }

            if (reader.HasColumn("V_RegistrationType"))
            {

                var V_RegistrationType = reader["V_RegistrationType"] as long?;
                if (Enum.IsDefined(typeof(AllLookupValues.RegistrationType), (int)V_RegistrationType.GetValueOrDefault(0)))
                {
                    p.V_RegistrationType = (AllLookupValues.RegistrationType)V_RegistrationType.Value;
                }
                else
                {
                    p.V_RegistrationType = AllLookupValues.RegistrationType.Unknown;
                }
            }

            if (reader.HasColumn("V_RegForPatientOfType"))
            {
                var vregForPatientOfType = reader["V_RegForPatientOfType"] as long?;
                if (Enum.IsDefined(typeof(AllLookupValues.V_RegForPatientOfType), (int)vregForPatientOfType.GetValueOrDefault(0)))
                {
                    p.V_RegForPatientOfType = (AllLookupValues.V_RegForPatientOfType)vregForPatientOfType.GetValueOrDefault(0);
                }
                else
                {
                    p.V_RegForPatientOfType = AllLookupValues.V_RegForPatientOfType.Unknown;
                }
            }

            if (reader.HasColumn("MedServiceNames"))
            {
                p.MedServiceNames = reader["MedServiceNames"] as string;
            }

            if (reader.HasColumn("MarkedAsDeleted") && reader["MarkedAsDeleted"] != DBNull.Value)
            {
                p.MarkedAsDeleted = (bool)reader["MarkedAsDeleted"];
            }
            if (reader.HasColumn("SomeRegDetailsRemoved") && reader["SomeRegDetailsRemoved"] != DBNull.Value)
            {
                p.SomeRegDetailsRemoved = (bool)reader["SomeRegDetailsRemoved"];
            }
            if (p.MarkedAsDeleted)
            {
                p.RecordState = RecordState.DELETED;
            }
            try
            {
                if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
                {
                    p.Patient = GetPatientFromReader(reader);
                    /*▼====: #013*/
                    p.Patient.GenerateAgeString(p.ExamDate);
                    /*▲====: #013*/
                }
                p.Patient.CurrentHealthInsurance = new HealthInsurance();

                if (reader.HasColumn("HIID") && reader["HIID"] != DBNull.Value)
                {
                    p.Patient.CurrentHealthInsurance.HIID = (long)reader["HIID"];
                }
                if (reader.HasColumn("HICardNo"))
                {
                    p.Patient.CurrentHealthInsurance.HICardNo = reader["HICardNo"].ToString();
                }
                if (reader.HasColumn("ValidDateFrom") && reader["ValidDateFrom"] != DBNull.Value)
                {
                    p.Patient.CurrentHealthInsurance.ValidDateFrom = (DateTime)reader["ValidDateFrom"];
                }
                if (reader.HasColumn("ValidDateTo") && reader["ValidDateTo"] != DBNull.Value)
                {
                    p.Patient.CurrentHealthInsurance.ValidDateTo = (DateTime)reader["ValidDateTo"];
                }

                if (reader.HasColumn("InPtRegRefIssuerLoc") && reader["InPtRegRefIssuerLoc"] != DBNull.Value)
                {
                    p.PaperReferal = new PaperReferal();
                    p.PaperReferal.IssuerLocation = reader["IssuerLocation"].ToString();
                }

            }
            catch
            {
            }
            if (reader.HasColumn("HICardNo"))
            {
                p.HiCardNo = reader["HICardNo"] as string;
            }

            if (reader.HasColumn("DeptLocationNameResponse") && reader["DeptLocationNameResponse"] != DBNull.Value)
            {
                p.DeptLocationName = reader["DeptLocationNameResponse"].ToString();
            }

            if (reader.HasColumn("DiagDeptLocationName") && reader["DiagDeptLocationName"] != DBNull.Value)
            {
                p.DiagDeptLocationName = reader["DiagDeptLocationName"].ToString();
            }

            if (reader.HasColumn("HIComment") && reader["HIComment"] != DBNull.Value)
            {
                p.HIComment = reader["HIComment"].ToString();
            }

            if (reader.HasColumn("RegisType") && reader["RegisType"] != DBNull.Value)
            {
                p.RegisType = Convert.ToInt32(reader["RegisType"]);
            }

            if (reader.HasColumn("AppointmentID") && reader["AppointmentID"] != DBNull.Value)
            {
                p.AppointmentID = Convert.ToInt64(reader["AppointmentID"]);
            }

            if (reader.HasColumn("InDeptLocation") && reader["InDeptLocation"] != DBNull.Value)
            {
                p.InDeptLocation = reader["InDeptLocation"].ToString();
            }

            //KMx: Ngày nhập viện, dùng để chọn từ ngày mặc định khi in mẫu 02 (25/01/2015 15:35).
            if (reader.HasColumn("AdmissionDate") && reader["AdmissionDate"] != DBNull.Value)
            {
                p.AdmissionDate = (DateTime)reader["AdmissionDate"];
            }

            if (reader.HasColumn("IsChildUnder6YearsOld") && reader["IsChildUnder6YearsOld"] != DBNull.Value)
            {
                p.IsChildUnder6YearsOld = Convert.ToBoolean(reader["IsChildUnder6YearsOld"]);
            }
            if (reader.HasColumn("IsAllowCrossRegion") && reader["IsAllowCrossRegion"] != DBNull.Value)
            {
                p.IsAllowCrossRegion = Convert.ToBoolean(reader["IsAllowCrossRegion"]);
            }
            if (reader.HasColumn("AdmDeptID") && reader["AdmDeptID"] != DBNull.Value)
            {
                p.AdmDeptID = Convert.ToInt32(reader["AdmDeptID"]);
            }
            if (reader.HasColumn("HIReportID") && reader["HIReportID"] != DBNull.Value)
            {
                p.HIReportID = Convert.ToInt32(reader["HIReportID"]);
                p.RegLockFlag = 1;
            }
            /*==== #006 ====*/
            if (reader.HasColumn("IsHICard_FiveYearsCont_NoPaid") && reader["IsHICard_FiveYearsCont_NoPaid"] != DBNull.Value)
            {
                p.IsHICard_FiveYearsCont_NoPaid = Convert.ToBoolean(reader["IsHICard_FiveYearsCont_NoPaid"]);
            }
            if (reader.HasColumn("Applied02Version1") && reader["Applied02Version1"] != DBNull.Value)
            {
                p.Applied02Version1 = Convert.ToInt16(reader["Applied02Version1"]);
            }
            /*==== #006 ====*/
            /*TMA*/
            if (reader.HasColumn("TransferForm") && reader["TransferForm"] != DBNull.Value)
            {
                p.TransferForm = (long)reader["TransferForm"];
            }
            if (reader.HasColumn("TransferNum") && reader["TransferNum"] != DBNull.Value)
            {
                p.TransferNum = reader["TransferNum"].ToString();
            }
            /*TMA*/
            /*▼====: #014*/
            if (reader.HasColumn("HisID_2") && reader["HisID_2"] != DBNull.Value)
            {
                p.HisID_2 = (long)reader["HisID_2"];
            }
            if (reader.HasColumn("PtInsuranceBenefit_2") && reader["PtInsuranceBenefit_2"] != DBNull.Value)
            {
                p.PtInsuranceBenefit_2 = Convert.ToDouble(reader["PtInsuranceBenefit_2"]);
            }
            if (reader.HasColumn("HisID_3") && reader["HisID_3"] != DBNull.Value)
            {
                p.HisID_3 = (long)reader["HisID_3"];
            }
            if (reader.HasColumn("PtInsuranceBenefit_3") && reader["PtInsuranceBenefit_3"] != DBNull.Value)
            {
                p.PtInsuranceBenefit_3 = Convert.ToDouble(reader["PtInsuranceBenefit_3"]);
            }
            /*▲====: #014*/
            if (reader.HasColumn("FiveYearsAppliedDate") && reader["FiveYearsAppliedDate"] != DBNull.Value)
            {
                p.FiveYearsAppliedDate = Convert.ToDateTime(reader["FiveYearsAppliedDate"]);
            }
            if (reader.HasColumn("FiveYearsARowDate") && reader["FiveYearsARowDate"] != DBNull.Value)
            {
                p.FiveYearsARowDate = Convert.ToDateTime(reader["FiveYearsARowDate"]);
            }

            if (reader.HasColumn("PaperReferralID_2") && reader["PaperReferralID_2"] != DBNull.Value)
            {
                p.PaperReferralID_2 = reader["PaperReferralID_2"] as long?;
            }
            if (reader.HasColumn("PaperReferralID_3") && reader["PaperReferralID_3"] != DBNull.Value)
            {
                p.PaperReferralID_3 = reader["PaperReferralID_3"] as long?;
            }
            if (reader.HasColumn("IsHIUnder15Percent") && reader["IsHIUnder15Percent"] != DBNull.Value)
            {
                p.IsHIUnder15Percent = Convert.ToBoolean(reader["IsHIUnder15Percent"]);
            }
            /*▼====: #026*/
            if (reader.HasColumn("BNTKSauXV") && reader["BNTKSauXV"] != DBNull.Value)
            {
                p.BNTKSauXV = Convert.ToBoolean(reader["BNTKSauXV"]);
            }
            /*▲====: #026*/
            if (reader.HasColumn("DTItemID") && reader["DTItemID"] != DBNull.Value)
            {
                p.DiagnosisTreatment = GetDiagTrmtFromReader(reader);
            }
            if (reader.HasColumn("ReportAppliedCode") && reader["ReportAppliedCode"] != DBNull.Value)
            {
                p.ReportAppliedCode = reader["ReportAppliedCode"].ToString();
            }
            if (reader.HasColumn("V_ReportStatus") && reader["V_ReportStatus"] != DBNull.Value)
            {
                p.V_ReportStatus = new Lookup { LookupID = (long)reader["V_ReportStatus"], ObjectName = "V_ReportStatus" };
                if (reader.HasColumn("ReportStatus") && reader["ReportStatus"] != DBNull.Value)
                {
                    p.V_ReportStatus.ObjectValue = reader["ReportStatus"].ToString();
                }
            }
            if (reader.HasColumn("ConfirmHIStaffID") && reader["ConfirmHIStaffID"] != DBNull.Value)
            {
                p.ConfirmHIStaffID = (long)reader["ConfirmHIStaffID"];
            }
            if (reader.HasColumn("BasicDiagTreatment") && reader["BasicDiagTreatment"] != DBNull.Value)
            {
                p.BasicDiagTreatment = reader["BasicDiagTreatment"].ToString();
            }
            if (reader.HasColumn("ConfirmStaffFullName") && reader["ConfirmStaffFullName"] != DBNull.Value)
            {
                p.ConfirmStaffFullName = reader["ConfirmStaffFullName"].ToString();
            }
            if (reader.HasColumn("TotalAmount") && reader["TotalAmount"] != DBNull.Value)
            {
                p.TotalAmount = Convert.ToDecimal(reader["TotalAmount"]);
            }
            if (reader.HasColumn("TotalHIRebate") && reader["TotalHIRebate"] != DBNull.Value)
            {
                p.TotalHIRebate = Convert.ToDecimal(reader["TotalHIRebate"]);
            }
            if (reader.HasColumn("TotalAmountCoPay") && reader["TotalAmountCoPay"] != DBNull.Value)
            {
                p.TotalAmountCoPay = Convert.ToDecimal(reader["TotalAmountCoPay"]);
            }
            if (reader.HasColumn("ReportedDate") && reader["ReportedDate"] != DBNull.Value)
            {
                p.ReportedDate = Convert.ToDateTime(reader["ReportedDate"]);
            }
            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                PatientRegistrationDetail mDetails = new PatientRegistrationDetail();
                mDetails.PtRegDetailID = (long)reader["PtRegDetailID"];
                if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
                {
                    mDetails.MedServiceID = (long)reader["MedServiceID"];
                }
                if (reader.HasColumn("MedServiceName") && reader["MedServiceName"] != DBNull.Value)
                {
                    mDetails.MedServiceName = reader["MedServiceName"].ToString();
                }
                if (reader.HasColumn("V_ExamRegStatus") && reader["V_ExamRegStatus"] != DBNull.Value)
                {
                    mDetails.V_ExamRegStatus = (long)reader["V_ExamRegStatus"];
                }
                if (reader.HasColumn("PaidTime") && reader["PaidTime"] != DBNull.Value)
                {
                    mDetails.PaidTime = reader["PaidTime"] as DateTime?;
                }
                if (reader.HasColumn("MedicalInstructionDate") && reader["MedicalInstructionDate"] != DBNull.Value)
                {
                    mDetails.MedicalInstructionDate = reader["MedicalInstructionDate"] as DateTime?;
                }
                if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
                {
                    mDetails.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
                }
                //▼===== #0164
                if (reader.HasColumn("DiagDoctorName") && reader["DiagDoctorName"] != DBNull.Value)
                {
                    mDetails.DiagDoctorName = reader["DiagDoctorName"].ToString();
                }
                if (reader.HasColumn("DQGReportID"))
                {
                    mDetails.prescriptionIssueHistory = new PrescriptionIssueHistory();
                    if(reader["DQGReportID"] != DBNull.Value)
                    {
                        mDetails.prescriptionIssueHistory.DQGReportID = (long)reader["DQGReportID"];
                    }
                    if (reader.HasColumn("CancelReason") && reader["CancelReason"] != DBNull.Value)
                    {
                        mDetails.prescriptionIssueHistory.CancelReason = reader["CancelReason"].ToString();
                    }
                    if (reader.HasColumn("IssueID") && reader["IssueID"] != DBNull.Value)
                    {
                        mDetails.prescriptionIssueHistory.IssueID = Convert.ToInt64(reader["IssueID"]);
                    }
                    if (reader.HasColumn("IsCanSelect") && reader["IsCanSelect"] != DBNull.Value)
                    {
                        mDetails.prescriptionIssueHistory.IsCanSelect = Convert.ToBoolean(reader["IsCanSelect"]);
                    }
                }
                if (reader.HasColumn("DiagDoctorName") && reader["DiagDoctorName"] != DBNull.Value)
                {
                    mDetails.DiagDoctorName = reader["DiagDoctorName"].ToString();
                }
                //▲===== #0164
                p.PatientRegistrationDetails = new ObservableCollection<PatientRegistrationDetail>() { mDetails };
            }
            if (reader.HasColumn("InPtRegistrationID") && reader["InPtRegistrationID"] != DBNull.Value)
            {
                p.InPtRegistrationID = reader["InPtRegistrationID"] as long?;
            }
            if (reader.HasColumn("TranFinalizationID") && reader["TranFinalizationID"] != DBNull.Value)
            {
                p.TranFinalizationID = (long)reader["TranFinalizationID"];
            }
            if (reader.HasColumn("AppointmentID") && reader["AppointmentID"] != DBNull.Value)
            {
                p.Appointment = GetAppointmentFromReader(reader);
            }
            //▼===== #062
            if (reader.HasColumn("AdmissionICD10Code") && reader["AdmissionICD10Code"] != DBNull.Value)
            {
                p.AdmissionICD10 = new DiseasesReference();
                p.AdmissionICD10.ICD10Code = reader["AdmissionICD10Code"].ToString();
                if (reader.HasColumn("BasicDiagTreatment") && reader["BasicDiagTreatment"] != DBNull.Value)
                {
                    p.AdmissionICD10.DiseaseNameVN = reader["BasicDiagTreatment"].ToString();
                }
            }
            if (reader.HasColumn("OutHosDiagStaffFullName") && reader["OutHosDiagStaffFullName"] != DBNull.Value)
            {
                p.OutHosDiagStaff = new Staff();
                p.OutHosDiagStaff.FullName = reader["OutHosDiagStaffFullName"].ToString();
            }
            //▲===== #062
            if (reader.HasColumn("MedServiceNameCancel") && reader["MedServiceNameCancel"] != DBNull.Value)
            {
                p.MedServiceNameCancel = reader["MedServiceNameCancel"] as string;
            }
            if (reader.HasColumn("IsCancelRegistration") && reader["IsCancelRegistration"] != DBNull.Value)
            {
                p.IsCancelRegistration = Convert.ToBoolean(reader["IsCancelRegistration"]);
            }
            if (reader.HasColumn("OutPtTreatmentProgramID") && reader["OutPtTreatmentProgramID"] != DBNull.Value)
            {
                p.OutPtTreatmentProgramID = Convert.ToInt64(reader["OutPtTreatmentProgramID"]);
            }
            if (reader.HasColumn("ChangedLog") && reader["ChangedLog"] != DBNull.Value)
            {
                p.ChangedLog = reader["ChangedLog"].ToString();
            }
            if (reader.HasColumn("RefByPatientID") && reader["RefByPatientID"] != DBNull.Value)
            {
                p.RefByPatient = new Patient();
                p.RefByPatient.PatientID = (long)reader["RefByPatientID"];
                if (reader.HasColumn("RefByPatientCode") && reader["RefByPatientCode"] != DBNull.Value)
                {
                    p.RefByPatient.PatientCode = reader["RefByPatientCode"].ToString();
                }
                if (reader.HasColumn("RefByPatientFullName") && reader["RefByPatientFullName"] != DBNull.Value)
                {
                    p.RefByPatient.FullName = reader["RefByPatientFullName"].ToString();
                }
            }
            if (reader.HasColumn("RefByStaffID") && reader["RefByStaffID"] != DBNull.Value)
            {
                p.RefByStaff = new Staff();
                p.RefByStaff.StaffID = (long)reader["RefByStaffID"];
                if (reader.HasColumn("RefByStaffFullName") && reader["RefByStaffFullName"] != DBNull.Value)
                {
                    p.RefByStaff.FullName = reader["RefByStaffFullName"].ToString();
                }
            }
            #region DataProvideBase cho quyết toán ngoại trú.
            if (reader.HasColumn("TotalAmountForSettlement") && reader["TotalAmountForSettlement"] != DBNull.Value)
            {
                p.TotalAmountForSettlement = (decimal)reader["TotalAmountForSettlement"];
            }
            if (reader.HasColumn("TotalHIPaymentForSettlement") && reader["TotalHIPaymentForSettlement"] != DBNull.Value)
            {
                p.TotalHIPaymentForSettlement = (decimal)reader["TotalHIPaymentForSettlement"];
            }
            if (reader.HasColumn("TotalPatientPaymentForSettlement") && reader["TotalPatientPaymentForSettlement"] != DBNull.Value)
            {
                p.TotalPatientPaymentForSettlement = (decimal)reader["TotalPatientPaymentForSettlement"];
            }
            if (reader.HasColumn("TotalDiscountForSettlement") && reader["TotalDiscountForSettlement"] != DBNull.Value)
            {
                p.TotalDiscountForSettlement = (decimal)reader["TotalDiscountForSettlement"];
            }
            if (reader.HasColumn("TotalPatientPaidForSettlement") && reader["TotalPatientPaidForSettlement"] != DBNull.Value)
            {
                p.TotalPatientPaidForSettlement = (decimal)reader["TotalPatientPaidForSettlement"];
            }
            if (reader.HasColumn("IsSettlement") && reader["IsSettlement"] != DBNull.Value)
            {
                p.IsSettlement = Convert.ToBoolean(reader["IsSettlement"]);
            }
            #endregion
            if (reader.HasColumn("AdmissionICD10Code") && reader["AdmissionICD10Code"] != DBNull.Value)
            {
                p.AdmissionICD10 = new DiseasesReference { ICD10Code = reader["AdmissionICD10Code"].ToString() };
                if (reader.HasColumn("BasicDiagTreatment") && reader["BasicDiagTreatment"] != DBNull.Value)
                {
                    p.AdmissionICD10.DiseaseNameVN = reader["BasicDiagTreatment"].ToString();
                }
            }
            p.OutHosDiagStaff = new Staff();
            if (reader.HasColumn("OutHosDiagStaffFullName") && reader["OutHosDiagStaffFullName"] != DBNull.Value)
            {
                p.OutHosDiagStaff.FullName = Convert.ToString(reader["OutHosDiagStaffFullName"]);
            }
            if (reader.HasColumn("TreatmentTotalMinute") && reader["TreatmentTotalMinute"] != DBNull.Value)
            {
                p.TreatmentTotalMinute = Convert.ToDecimal(reader["TreatmentTotalMinute"]);
            }
            if (reader.HasColumn("TotalAmount") && reader["TotalAmount"] != DBNull.Value)
            {
                p.TotalAmount = Convert.ToDecimal(reader["TotalAmount"]);
            }
            if (reader.HasColumn("CurrentInPatientDeptDetailID") && reader["CurrentInPatientDeptDetailID"] != DBNull.Value)
            {
                if (reader.HasColumn("InPatientDeptDetailFromDate") && reader["InPatientDeptDetailFromDate"] != DBNull.Value)
                {
                    p.CurrentInPatientDeptDetailFromDate = Convert.ToDateTime(reader["InPatientDeptDetailFromDate"]);
                }
                if (reader.HasColumn("InPatientDeptDetailToDate") && reader["InPatientDeptDetailToDate"] != DBNull.Value)
                {
                    p.CurrentInPatientDeptDetailToDate = Convert.ToDateTime(reader["InPatientDeptDetailToDate"]);
                }
            }
            if (reader.HasColumn("TicketNumberText") && reader["TicketNumberText"] != DBNull.Value)
            {
                p.TicketIssue = new TicketIssue();
                if (reader.HasColumn("TicketID") && reader["TicketID"] != DBNull.Value)
                {
                    p.TicketIssue.TicketID = (long)reader["TicketID"];
                }
                p.TicketIssue.TicketNumberText = reader["TicketNumberText"].ToString();
                if (reader.HasColumn("TicketNumberSeq") && reader["TicketNumberSeq"] != DBNull.Value)
                {
                    p.TicketIssue.TicketNumberSeq = (int)reader["TicketNumberSeq"];
                }
                if (reader.HasColumn("TicketGetTime") && reader["TicketGetTime"] != DBNull.Value)
                {
                    p.TicketIssue.TicketGetTime = Convert.ToDateTime(reader["TicketGetTime"]);
                }
            }
            if (reader.HasColumn("OutPtRegistrationID") && reader["OutPtRegistrationID"] != DBNull.Value)
            {
                p.OutPtRegistrationID = Convert.ToInt64(reader["OutPtRegistrationID"]);
            }
            if (reader.HasColumn("SmallProcedureID") && reader["SmallProcedureID"] != DBNull.Value)
            {
                p.SmallProcedureForAutoPerform = new SmallProcedure();
                p.SmallProcedureForAutoPerform.SmallProcedureID = Convert.ToInt64(reader["SmallProcedureID"]);
                if (reader.HasColumn("DiagnosisFinal") && reader["DiagnosisFinal"] != DBNull.Value)
                {
                    p.SmallProcedureForAutoPerform.AfterICD10 = new DiseasesReference();
                    p.SmallProcedureForAutoPerform.AfterICD10.DiagnosisFinal = reader["DiagnosisFinal"].ToString();
                }
                if (reader.HasColumn("ProcedureDateTime") && reader["ProcedureDateTime"] != DBNull.Value)
                {
                    p.SmallProcedureForAutoPerform.ProcedureDateTime = Convert.ToDateTime(reader["ProcedureDateTime"]);
                }
                if (reader.HasColumn("CompletedDateTime") && reader["CompletedDateTime"] != DBNull.Value)
                {
                    p.SmallProcedureForAutoPerform.CompletedDateTime = Convert.ToDateTime(reader["CompletedDateTime"]);
                }
                if (reader.HasColumn("DoctorName") && reader["DoctorName"] != DBNull.Value)
                {
                    p.SmallProcedureForAutoPerform.ProcedureDoctorStaff = new Staff();
                    p.SmallProcedureForAutoPerform.ProcedureDoctorStaff.FullName = reader["DoctorName"].ToString();
                }
                if (reader.HasColumn("NurseName") && reader["NurseName"] != DBNull.Value)
                {
                    p.SmallProcedureForAutoPerform.NurseStaff = new Staff();
                    p.SmallProcedureForAutoPerform.NurseStaff.FullName = reader["NurseName"].ToString();
                }
                if (reader.HasColumn("HIRepResourceCode") && reader["HIRepResourceCode"] != DBNull.Value)
                {
                    p.SmallProcedureForAutoPerform.HIRepResourceCode = reader["HIRepResourceCode"].ToString();
                }
            }
            if (reader.HasColumn("IsSpecialHIRegistration") && reader["IsSpecialHIRegistration"] != DBNull.Value)
            {
                p.IsSpecialHIRegistration = Convert.ToBoolean(reader["IsSpecialHIRegistration"]);
            }
            //▼====: #089
            if (reader.HasColumn("V_CheckMedicalFilesStatus") && reader["V_CheckMedicalFilesStatus"] != DBNull.Value)
            {
                p.V_CheckMedicalFilesStatus = Convert.ToInt64(reader["V_CheckMedicalFilesStatus"]);
            }
            if (reader.HasColumn("IsDLSChecked") && reader["IsDLSChecked"] != DBNull.Value)
            {
                p.IsDLSChecked = Convert.ToBoolean(reader["IsDLSChecked"]);
            }
            if (reader.HasColumn("CheckMedicalFileID") && reader["CheckMedicalFileID"] != DBNull.Value)
            {
                p.CheckMedicalFiles = GetCheckMedicalFilesFromReader(reader);
            }
            //▲====: #089
            //▼====: #089
            if (reader.HasColumn("HasPayOutPtDrugBill") && reader["HasPayOutPtDrugBill"] != DBNull.Value)
            {
                p.HasPayOutPtDrugBill = Convert.ToBoolean(reader["HasPayOutPtDrugBill"]);
            }
            //▲====: #089
            if (reader.HasColumn("PtRegistrationID_Child") && reader["PtRegistrationID_Child"] != DBNull.Value)
            {
                p.PtRegistrationID_Child = Convert.ToInt64(reader["PtRegistrationID_Child"]);
            }
            //▼====: #113
            if (reader.HasColumn("DLSReject") && reader["DLSReject"] != DBNull.Value)
            {
                p.DLSReject = Convert.ToBoolean(reader["DLSReject"]);
            }
            //▲====: #113
            //▼===== #124
            if (reader.HasColumn("IsAdmission") && reader["IsAdmission"] != DBNull.Value)
            {
                p.IsAdmission = Convert.ToBoolean(reader["IsAdmission"]);
                if (p.IsAdmission)
                {
                    p.RegLockFlag = 1;
                }
            }
            //▲===== #124
            if (reader.HasColumn("IsSumTreatmentProgram") && reader["IsSumTreatmentProgram"] != DBNull.Value)
            {
                p.IsSumTreatmentProgram = Convert.ToBoolean(reader["IsSumTreatmentProgram"]);
            }
            if (reader.HasColumn("OutpatientTreatmentTypeID") && reader["OutpatientTreatmentTypeID"] != DBNull.Value)
            {
                p.OutpatientTreatmentTypeID = Convert.ToInt64(reader["OutpatientTreatmentTypeID"]);
            }
            if (reader.HasColumn("IsChronic") && reader["IsChronic"] != DBNull.Value)
            {
                p.IsChronic = Convert.ToBoolean(reader["IsChronic"]);
            }
            //▼===== #133
            if (reader.HasColumn("InPatientTransferDeptReqID") && reader["InPatientTransferDeptReqID"] != DBNull.Value)
            {
                p.InPatientTransferDeptReqID = (long)(reader["InPatientTransferDeptReqID"]);

                p.InPatientTransferDeptReq = new InPatientTransferDeptReq();
                if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
                {
                    p.InPatientTransferDeptReq.PtRegistrationID = (long)reader["PtRegistrationID"];
                }
                if (reader.HasColumn("InPatientTransferDeptReqID") && reader["InPatientTransferDeptReqID"] != DBNull.Value)
                {
                    p.InPatientTransferDeptReq.InPatientTransferDeptReqID = (long)(reader["InPatientTransferDeptReqID"]);
                }
                if (reader.HasColumn("InPatientAdmDisDetailID") && reader["InPatientAdmDisDetailID"] != DBNull.Value)
                {
                    p.InPatientTransferDeptReq.InPatientAdmDisDetailID = (long)(reader["InPatientAdmDisDetailID"]);
                }
                if (reader.HasColumn("ReqDeptLocID") && reader["ReqDeptLocID"] != DBNull.Value)
                {
                    p.InPatientTransferDeptReq.ReqDeptLocID = (long)(reader["ReqDeptLocID"]);
                }
                if (reader.HasColumn("ReqDate") && reader["ReqDate"] != DBNull.Value)
                {
                    p.InPatientTransferDeptReq.ReqDate = (DateTime)(reader["ReqDate"]);
                }
                if (reader.HasColumn("ReqStaffID") && reader["ReqStaffID"] != DBNull.Value)
                {
                    p.InPatientTransferDeptReq.ReqStaffID = (long)(reader["ReqStaffID"]);
                }
                if (reader.HasColumn("CurDeptID") && reader["CurDeptID"] != DBNull.Value)
                {
                    p.InPatientTransferDeptReq.CurDept.DeptID = ((long)reader["CurDeptID"]);
                }
                if (reader.HasColumn("ReqDeptID") && reader["ReqDeptID"] != DBNull.Value)
                {
                    p.InPatientTransferDeptReq.ReqDeptID = (long)(reader["ReqDeptID"]);
                }
                if (reader.HasColumn("IsAccepted") && reader["IsAccepted"] != DBNull.Value)
                {
                    p.InPatientTransferDeptReq.IsAccepted = Convert.ToBoolean(reader["IsAccepted"]);
                }
            }
            //▲===== #133
            if (reader.HasColumn("PrescriptionsAmount") && reader["PrescriptionsAmount"] != DBNull.Value)
            {
                p.PrescriptionsAmount = Convert.ToInt32(reader["PrescriptionsAmount"]);
            }
            if (reader.HasColumn("V_OutDischargeCondition") && reader["V_OutDischargeCondition"] != DBNull.Value 
                && reader.HasColumn("V_OutDischargeConditionName") && reader["V_OutDischargeConditionName"] != DBNull.Value)
            {
                p.V_OutDischargeCondition = new Lookup
                {
                    LookupID = Convert.ToInt32(reader["V_OutDischargeCondition"]),
                    ObjectValue = Convert.ToString(reader["V_OutDischargeConditionName"])
                };
            }
            if (reader.HasColumn("V_OutDischargeType") && reader["V_OutDischargeType"] != DBNull.Value 
                && reader.HasColumn("V_OutDischargeTypeName") && reader["V_OutDischargeTypeName"] != DBNull.Value)
            {
                p.V_OutDischargeType = new Lookup
                {
                    LookupID = Convert.ToInt32(reader["V_OutDischargeType"]),
                    ObjectValue = Convert.ToString(reader["V_OutDischargeTypeName"])
                };
            }
            if (reader.HasColumn("DTDTReportID") && reader["DTDTReportID"] != DBNull.Value)
            {
                p.DTDTReportID = (long)reader["DTDTReportID"];
                if(p.DTDTReportID == -1)
                {
                    p.ListOfPrescriptionIssueHistory = new ObservableCollection<PrescriptionIssueHistory>();
                    p.ListOfPrescriptionIssueHistory.Add(GetPtPrescriptIssueHisFromReader(reader));
                }
            }
            //▼===== #164
            if (reader.HasColumn("V_ReportStatusPrescription") && reader["V_ReportStatusPrescription"] != DBNull.Value)
            {
                p.V_ReportStatusPrescription = new Lookup { LookupID = (long)reader["V_ReportStatusPrescription"], ObjectName = "V_ReportStatusPrescription" };
                if (reader.HasColumn("ReportStatusPrescription") && reader["ReportStatusPrescription"] != DBNull.Value)
                {
                    p.V_ReportStatusPrescription.ObjectValue = reader["ReportStatusPrescription"].ToString();
                }
            }
            //▲===== #164
            if (reader.HasColumn("V_MedicalExaminationType") && reader["V_MedicalExaminationType"] != DBNull.Value)
            {
                p.V_MedicalExaminationType = new Lookup { LookupID = (long)reader["V_MedicalExaminationType"], ObjectName = "V_MedicalExaminationType" };
                if (reader.HasColumn("MedicalExaminationType") && reader["MedicalExaminationType"] != DBNull.Value)
                {
                    p.V_MedicalExaminationType.ObjectValue = reader["MedicalExaminationType"].ToString();
                }
            }
            if (reader.HasColumn("V_ObjectMedicalExamination") && reader["V_ObjectMedicalExamination"] != DBNull.Value)
            {
                p.V_ObjectMedicalExamination = new Lookup { LookupID = (long)reader["V_ObjectMedicalExamination"], ObjectName = "V_ObjectMedicalExamination" };
                if (reader.HasColumn("ObjectMedicalExamination") && reader["ObjectMedicalExamination"] != DBNull.Value)
                {
                    p.V_MedicalExaminationType.ObjectValue = reader["ObjectMedicalExamination"].ToString();
                }
            }
            if (reader.HasColumn("V_ReasonHospitalStay") && reader["V_ReasonHospitalStay"] != DBNull.Value)
            {
                p.V_ReasonHospitalStay = new Lookup { LookupID = (long)reader["V_ReasonHospitalStay"], ObjectName = "V_ReasonHospitalStay" };
                if (reader.HasColumn("ReasonHospitalStay") && reader["ReasonHospitalStay"] != DBNull.Value)
                {
                    p.V_ReasonHospitalStay.ObjectValue = reader["ReasonHospitalStay"].ToString();
                }
            }
            if (reader.HasColumn("V_ReceiveMethod") && reader["V_ReceiveMethod"] != DBNull.Value)
            {
                p.V_ReceiveMethod =  (long)reader["V_ReceiveMethod"];
            }
            //▼===== #172
            if (reader.HasColumn("V_HIReportWaitingStatus") && reader["V_HIReportWaitingStatus"] != DBNull.Value)
            {
                p.V_HIReportWaitingStatus = new Lookup { LookupID = (long)reader["V_HIReportWaitingStatus"], ObjectName = "V_HIReportWaitingStatus" };
                if (reader.HasColumn("V_HIReportWaitingStatus") && reader["V_HIReportWaitingStatus"] != DBNull.Value)
                {
                    p.V_HIReportWaitingStatus.ObjectValue = reader["HIReportWaitingStatus"].ToString();
                }
            }
            //▲===== #172
            if (reader.HasColumn("DisChargePapersDoctorName") && reader["DisChargePapersDoctorName"] != DBNull.Value)
            {
                p.DisChargePapersDoctorName = Convert.ToString(reader["DisChargePapersDoctorName"]);
            }
            return p;
        }
        protected virtual List<PatientRegistration> GetPatientRegistrationCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientRegistration>();
            while (reader.Read())
            {
                retVal.Add(GetPatientRegistrationFromReader(reader));
            }
            return retVal;
        }
        protected virtual List<SummaryMedicalRecords> GetSummaryMedicalRecordsCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<SummaryMedicalRecords>();
            while (reader.Read())
            {
                retVal.Add(GetSummaryMedicalRecordsFromReader(reader));
            }
            return retVal;
        }
        protected virtual PatientQueue GetPatientQueueItemFromReader(IDataReader reader)
        {
            var p = new PatientQueue();

            if (reader.HasColumn("ID") && reader["ID"] != DBNull.Value)
            {
                p.ID = (long)reader["ID"];
            }

            if (reader.HasColumn("RegistrationID") && reader["RegistrationID"] != DBNull.Value)
            {
                p.RegistrationID = (long)reader["RegistrationID"];
            }

            if (reader.HasColumn("PatientAppointmentID") && reader["PatientAppointmentID"] != DBNull.Value)
            {
                p.PatientAppointmentID = (long)reader["PatientAppointmentID"];
            }

            if (reader.HasColumn("PatientPCLReqID") && reader["PatientPCLReqID"] != DBNull.Value)
            {
                p.PatientPCLReqID = reader["PatientPCLReqID"] as long?;
            }

            if (reader.HasColumn("RegistrationDetailsID") && reader["RegistrationDetailsID"] != DBNull.Value)
            {
                p.RegistrationDetailsID = reader["RegistrationDetailsID"] as long?;
            }

            if (reader.HasColumn("PrescriptionIssueID") && reader["PrescriptionIssueID"] != DBNull.Value)
            {
                p.PrescriptionIssueID = reader["PrescriptionIssueID"] as long?;
            }

            if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
            {
                p.MedServiceID = reader["MedServiceID"] as long?;
            }

            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientID = reader["PatientID"] as long?;
            }

            if (reader.HasColumn("SequenceNo") && reader["SequenceNo"] != DBNull.Value)
            {
                p.SequenceNo = reader["SequenceNo"] as int?;
            }

            if (reader.HasColumn("DOBText") && reader["DOBText"] != DBNull.Value)
            {
                p.DOBText = reader["DOBText"].ToString();
            }

            if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
            {
                p.PatientCode = reader["PatientCode"].ToString();
            }

            if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
            {
                p.FullName = reader["FullName"] as string;
            }

            if (reader.HasColumn("LocationID") && reader["LocationID"] != DBNull.Value)
            {
                p.DeptLocID = reader["LocationID"] as long?;
            }

            if (reader.HasColumn("V_QueueType") && reader["V_QueueType"] != DBNull.Value)
            {
                p.V_QueueType = (long)reader["V_QueueType"];
            }

            if (reader.HasColumn("ActionPending") && reader["ActionPending"] != DBNull.Value)
            {
                p.ActionPending = (bool)reader["ActionPending"];
            }

            if (reader.HasColumn("EnqueueSequenceNo") && reader["EnqueueSequenceNo"] != DBNull.Value)
            {
                p.EnqueueSequenceNo = (int)reader["EnqueueSequenceNo"];
            }

            if (reader.HasColumn("Priority") && reader["Priority"] != DBNull.Value)
            {
                p.Priority = (int)reader["Priority"];
            }

            if (reader.HasColumn("EnqueueTime") && reader["EnqueueTime"] != DBNull.Value)
            {
                p.EnqueueTime = reader["EnqueueTime"] as DateTime?;
            }

            if (reader.HasColumn("V_PatientQueueItemsStatus") && reader["V_PatientQueueItemsStatus"] != DBNull.Value)
            {
                p.V_PatientQueueItemsStatus = (long)reader["V_PatientQueueItemsStatus"];
            }

            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = (bool)reader["IsDeleted"];
            }

            p.GetFullInfo();
            return p;
        }

        protected virtual List<PatientQueue> GetPatientQueueItemCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientQueue>();
            while (reader.Read())
            {
                retVal.Add(GetPatientQueueItemFromReader(reader));
            }
            return retVal;
        }

        protected virtual PatientSession GetPatientSessionItemFromReader(IDataReader reader)
        {
            var p = new PatientSession
            {
                ID = (long)reader["ID"],
                RegistrationID = (long)reader["RegistrationID"],
                PatientID = reader["PatientID"] as long?,
                LocationID = reader["LocationID"] as long?,
                V_SessionActivity = (long)reader["V_SessionActivity"],
                Waiting = reader["Waiting"] as DateTime?,
                Begin = reader["Begin"] as DateTime?,
                End = reader["End"] as DateTime?
            };
            return p;
        }

        protected virtual List<PatientSession> GetPatientSessionItemCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientSession>();
            while (reader.Read())
            {
                retVal.Add(GetPatientSessionItemFromReader(reader));
            }
            return retVal;
        }

        protected virtual PatientTransaction GetPatientTransactionFromReader(IDataReader reader)
        {
            var p = new PatientTransaction
            {
                TransactionID = (long)reader["TransactionID"],
                PtRegistrationID = reader["PtRegistrationID"] as long?,
                TransactionTypeID = reader["TransactionTypeID"] as long?,
                BDID = reader["BDID"] as long?,
                TransactionBeginDate = (DateTime)reader["TransactionBeginDate"],
                TransactionEndDate = reader["TransactionBeginDate"] as DateTime?,
                TransactionRemarks = reader["TransactionRemarks"] as string,
                IsAdjusted = reader["IsAdjusted"] as bool?,
                IsClosed = reader["IsClosed"] as bool?,
                V_TranHIPayment = (long)reader["V_TranHIPayment"],
                V_TranPatientPayment = (long)reader["V_TranPatientPayment"],
                V_RegistrationType = (AllLookupValues.RegistrationType)((long)reader["V_RegistrationType"]),
            };


            //Kiem tra gia tri trong database co khop voi gia tri enum khong
            if (Enum.IsDefined(typeof(AllLookupValues.TranPatientPayment), (int)p.V_TranPatientPayment))
            {
                p.TranPatientPaymentStatus = (AllLookupValues.TranPatientPayment)p.V_TranPatientPayment;
            }
            else
            {
                p.TranPatientPaymentStatus = AllLookupValues.TranPatientPayment.OPENED;
            }

            if (Enum.IsDefined(typeof(AllLookupValues.TranHIPayment), (int)p.V_TranHIPayment))
            {
                p.TranHIPaymentStatus = (AllLookupValues.TranHIPayment)p.V_TranHIPayment;
            }
            else
            {
                p.TranHIPaymentStatus = AllLookupValues.TranHIPayment.OPENED;
            }
            p.RecordState = RecordState.UNCHANGED;
            return p;
        }

        protected virtual List<PatientTransaction> GetPatientTransactionCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientTransaction>();
            while (reader.Read())
            {
                retVal.Add(GetPatientTransactionFromReader(reader));
            }
            return retVal;
        }

        protected virtual PatientTransactionDetail GetTransactionDetailsFromReader(IDataReader reader)
        {
            var p = new PatientTransactionDetail();

            if (reader.HasColumn("TransItemID"))
            {
                p.TransItemID = (long)reader["TransItemID"];
            }
            if (reader.HasColumn("OutwBloodInvoiceID") && reader["OutwBloodInvoiceID"] != DBNull.Value)
            {
                p.OutwBloodInvoiceID = reader["OutwBloodInvoiceID"] as long?;
            }
            if (reader.HasColumn("OutDMedRscrID") && reader["OutDMedRscrID"] != DBNull.Value)
            {
                p.OutDMedRscrID = reader["OutDMedRscrID"] as long?;
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = reader["StaffID"] as long?;
            }
            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                p.PtRegDetailID = reader["PtRegDetailID"] as long?;
            }
            if (reader.HasColumn("outiID") && reader["outiID"] != DBNull.Value)
            {
                p.outiID = reader["outiID"] as long?;
            }
            if (reader.HasColumn("TransactionID") && reader["TransactionID"] != DBNull.Value)
            {
                p.TransactionID = reader["TransactionID"] as long?;
            }
            if (reader.HasColumn("TransactionDate") && reader["TransactionDate"] != DBNull.Value)
            {
                p.TransactionDate = reader["TransactionDate"] as DateTime?;
            }
            if (reader.HasColumn("Amount") && reader["Amount"] != DBNull.Value)
            {
                p.Amount = (decimal)reader["Amount"];
            }
            if (reader.HasColumn("PriceDifference") && reader["PriceDifference"] != DBNull.Value)
            {
                p.PriceDifference = reader["PriceDifference"] as decimal?;
            }
            if (reader.HasColumn("AmountCoPay") && reader["AmountCoPay"] != DBNull.Value)
            {
                p.AmountCoPay = reader["AmountCoPay"] as decimal?;
            }
            if (reader.HasColumn("HealthInsuranceRebate") && reader["HealthInsuranceRebate"] != DBNull.Value)
            {
                p.HealthInsuranceRebate = reader["HealthInsuranceRebate"] as decimal?;
            }
            if (reader.HasColumn("Discount") && reader["Discount"] != DBNull.Value)
            {
                p.Discount = reader["Discount"] as double?;
            }
            if (reader.HasColumn("Qty") && reader["Qty"] != DBNull.Value)
            {
                p.Qty = reader["Qty"] as double?;
            }
            if (reader.HasColumn("PCLRequestID") && reader["PCLRequestID"] != DBNull.Value)
            {
                p.PCLRequestID = reader["PCLRequestID"] as long?;
            }
            if (reader.HasColumn("RefDocID") && reader["RefDocID"] != DBNull.Value)
            {
                p.RefDocID = reader["RefDocID"] as long?;
            }
            if (reader.HasColumn("ExchangeRate") && reader["ExchangeRate"] != DBNull.Value)
            {
                p.ExchangeRate = reader["ExchangeRate"] as double?;
            }
            if (reader.HasColumn("TransItemRemarks") && reader["TransItemRemarks"] != DBNull.Value)
            {
                p.TransItemRemarks = reader["TransItemRemarks"] as string;
            }
            if (reader.HasColumn("IsPaided") && reader["IsPaided"] != DBNull.Value)
            {
                p.IsPaided = (bool)reader["IsPaided"];
            }


            if (reader.HasColumn("FullNameService") && reader["FullNameService"] != DBNull.Value)
            {
                p.FullName = reader["FullNameService"].ToString();
            }
            if (reader.HasColumn("FullNamePCL") && reader["FullNamePCL"] != DBNull.Value)
            {
                p.FullName = reader["FullNamePCL"].ToString();
            }
            if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
            {
                p.FullName = reader["FullName"].ToString();
            }

            if (reader.HasColumn("OutInvID") && reader["OutInvID"] != DBNull.Value)
            {
                p.FullName = reader["OutInvID"].ToString();
            }
            if (reader["TranRefID"] != DBNull.Value)
            {
                p.TranRefID = (long)reader["TranRefID"];
            }
            if (reader["V_TranRefType"] != DBNull.Value)
            {
                var type = (long)reader["V_TranRefType"];
                if (Enum.IsDefined(typeof(AllLookupValues.V_TranRefType), type))
                {
                    p.V_TranRefType = (AllLookupValues.V_TranRefType)type;
                }
                else
                {
                    p.V_TranRefType = AllLookupValues.V_TranRefType.NONE;
                }
            }
            if (reader.HasColumn("DiscountAmt") && reader["DiscountAmt"] != DBNull.Value)
            {
                p.DiscountAmt = Convert.ToDecimal(reader["DiscountAmt"]);
            }
            if (reader.HasColumn("OtherAmt") && reader["OtherAmt"] != DBNull.Value)
            {
                p.OtherAmt = Convert.ToDecimal(reader["OtherAmt"]);
            }
            return p;
        }

        protected virtual List<PatientTransactionDetail> GetTransactionDetailsCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientTransactionDetail>();
            while (reader.Read())
            {
                retVal.Add(GetTransactionDetailsFromReader(reader));
            }
            return retVal;
        }

        //protected virtual PatientPayment GetPatientPaymentFromReader(IDataReader reader)
        //{
        //    var p = new PatientPayment
        //                {
        //                    PtPmtID = (long)reader["PtPmtID"],
        //                    InvoiceID = reader["InvoiceID"] as string,
        //                    TransactionID = reader["TransactionID"] as long?,
        //                    IntRcptTypeID = reader["IntRcptTypeID"] as long?,
        //                    PaymentDate = reader["PaymentDate"] as DateTime?,
        //                    PayAmount = (decimal)reader["PayAmount"],
        //                    ReceiptNumber = reader["ReceiptNumber"] as string,
        //                    ManualReceiptNumber = reader["ManualReceiptNumber"] as string,
        //                    V_Currency = reader["V_Currency"] as long?,
        //                    V_PaymentMode = reader["V_PaymentMode"] as long?,
        //                    V_PaymentType = reader["V_PaymentType"] as long?,
        //                    PaymentReason = reader["PaymentReason"] as string
        //                };
        //    if (reader.HasColumn("CreditOrDebit") && reader["CreditOrDebit"] != DBNull.Value)
        //    {
        //        p.CreditOrDebit = (Int16)reader["CreditOrDebit"];
        //    }
        //    if (reader.HasColumn("PtPmtAccID"))
        //    {
        //        p.PtPmtAccID = reader["PtPmtAccID"] as long?;
        //    }
        //    return p;
        //}

        protected virtual PayableSum GetPayableSumFromReader(IDataReader reader)
        {
            var p = new PayableSum
            {
                TotalCoPayment = (reader["TotalCoPayment"] as decimal?).GetValueOrDefault(),
                TotalPatientPayment = (reader["TotalPatientPayment"] as decimal?).GetValueOrDefault(),
                TotalHIPayment = (reader["TotalHIPayment"] as decimal?).GetValueOrDefault(),
                TotalPriceDifference = (reader["TotalPriceDifference"] as long?).GetValueOrDefault()
            };

            return p;
        }

        protected virtual PatientTransactionPayment GetPatientTransactionPaymentFromReader(IDataReader reader)
        {
            var p = new PatientTransactionPayment
            {
                PtTranPaymtID = (long)reader["PtTranPaymtID"],
                RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]),
                PtPmtAccID = reader["PtPmtAccID"] as long?,
                InvoiceID = reader["InvoiceID"] as string,
                TransactionID = reader["TransactionID"] as long?,
                IntRcptTypeID = reader["IntRcptTypeID"] as long?,
                TranFinalizationID = reader["TranFinalizationID"] as long?,
                PaymentDate = reader["PaymentDate"] as DateTime?,
                PayAmount = (decimal)reader["PayAmount"],
                ReceiptNumber = reader["ReceiptNumber"] as string,
                ManualReceiptNumber = reader["ManualReceiptNumber"] as string,
                V_Currency = reader["V_Currency"] as long?,
                V_PaymentMode = reader["V_PaymentMode"] as long?,
                V_PaymentType = reader["V_PaymentType"] as long?,
                StaffID = (long)reader["StaffID"],
                TranPaymtNote = reader["TranPaymtNote"] as string,
                TranPaymtStatus = Convert.ToInt16(reader["TranPaymtStatus"]),
                IsDeleted = reader["IsDeleted"] as bool?
            };

            if (reader.HasColumn("TransItemID") && reader["TransItemID"] != DBNull.Value)
            {
                p.TransItemID = (long)reader["TransItemID"];
            }

            if (reader.HasColumn("CollectorDeptLocID") && reader["CollectorDeptLocID"] != DBNull.Value)
            {
                p.CollectorDeptLocID = (long)reader["CollectorDeptLocID"];
            }

            if (reader.HasColumn("CreditOrDebit") && reader["CreditOrDebit"] != DBNull.Value)
            {
                p.CreditOrDebit = (Int16)reader["CreditOrDebit"];
            }

            if (reader.HasColumn("DeletedStaffID") && reader["DeletedStaffID"] != DBNull.Value)
            {
                p.DeletedStaffID = (long)reader["DeletedStaffID"];
            }

            if (reader.HasColumn("DeletedStaffName") && reader["DeletedStaffName"] != DBNull.Value)
            {
                p.DeletedStaffName = reader["DeletedStaffName"].ToString();
            }
            //03.02.2013
            //Code nay duoi nay co nhan roi. Len tren lam them lan nua nen sai. Co gi xem lai sau.
            //p.PayAmount = p.PayAmount * p.CreditOrDebit;

            if (reader.HasColumn("PaymentModeLookupID") && reader["PaymentModeLookupID"] != DBNull.Value)
            {
                //Get them thong tin tu bang lookup.
                Lookup paymentModeInfo = new Lookup();

                paymentModeInfo.LookupID = (long)reader["PaymentModeLookupID"];
                paymentModeInfo.ObjectTypeID = (long)reader["PaymentModeObjectTypeID"];
                paymentModeInfo.ObjectName = reader["PaymentModeObjectName"] as string;
                paymentModeInfo.ObjectValue = reader["PaymentModeObjectValue"] as string;
                paymentModeInfo.ObjectNotes = reader["PaymentModeObjectNotes"] as string;

                p.PaymentMode = paymentModeInfo;
            }

            if (reader.HasColumn("CurrencyLookupID") && reader["CurrencyLookupID"] != DBNull.Value)
            {
                //Get them thong tin tu bang lookup.
                Lookup currencyInfo = new Lookup();

                currencyInfo.LookupID = (long)reader["CurrencyLookupID"];
                currencyInfo.ObjectTypeID = (long)reader["CurrencyObjectTypeID"];
                currencyInfo.ObjectName = reader["CurrencyObjectName"] as string;
                currencyInfo.ObjectValue = reader["CurrencyObjectValue"] as string;
                currencyInfo.ObjectNotes = reader["CurrencyObjectNotes"] as string;

                p.Currency = currencyInfo;
            }

            if (reader.HasColumn("PaymentTypeLookupID") && reader["PaymentTypeLookupID"] != DBNull.Value)
            {
                //Get them thong tin tu bang lookup.
                Lookup paymentTypeInfo = new Lookup();

                paymentTypeInfo.LookupID = (long)reader["PaymentTypeLookupID"];
                paymentTypeInfo.ObjectTypeID = (long)reader["PaymentTypeObjectTypeID"];
                paymentTypeInfo.ObjectName = reader["PaymentTypeObjectName"] as string;
                paymentTypeInfo.ObjectValue = reader["PaymentTypeObjectValue"] as string;
                paymentTypeInfo.ObjectNotes = reader["PaymentTypeObjectNotes"] as string;

                p.PaymentType = paymentTypeInfo;
            }
            p.PatientTransaction = new PatientTransaction();
            if (reader.HasColumn("TransactionID"))
            {
                p.PatientTransaction.TransactionID = (long)reader["TransactionID"];
            }
            p.PatientTransaction.PatientRegistration = new PatientRegistration();
            if (reader.HasColumn("PtRegistrationID"))
            {
                p.PatientTransaction.PatientRegistration.PtRegistrationID = (long)reader["PtRegistrationID"];
            }
            p.PatientTransaction.PatientRegistration.Patient = new Patient();
            if (reader.HasColumn("PatientID"))
            {
                p.PatientTransaction.PatientRegistration.Patient.PatientID = (long)reader["PatientID"];
            }
            if (reader.HasColumn("PatientCode"))
            {
                p.PatientTransaction.PatientRegistration.Patient.PatientCode = reader["PatientCode"].ToString();
            }
            if (reader.HasColumn("FullName"))
            {
                p.PatientTransaction.PatientRegistration.Patient.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("DOB"))
            {
                p.PatientTransaction.PatientRegistration.Patient.DOB = (DateTime)reader["DOB"];
                p.PatientTransaction.PatientRegistration.Patient.DOBText = ((DateTime)reader["DOB"]).Year.ToString();
            }

            if (reader.HasColumn("Reported"))
            {
                p.Reported = Convert.ToBoolean(reader["Reported"]);
            }
            if (reader.HasColumn("V_RefundPaymentReasonInPtID") && reader["V_RefundPaymentReasonInPtID"] != DBNull.Value)
            {
                p.V_RefundPaymentReasonInPt = new Lookup();
                p.V_RefundPaymentReasonInPt.LookupID = Convert.ToInt64(reader["V_RefundPaymentReasonInPtID"]);
                if (reader.HasColumn("V_RefundPaymentReasonInPtValue") && reader["V_RefundPaymentReasonInPtValue"] != DBNull.Value)
                {
                    p.V_RefundPaymentReasonInPt.ObjectValue = reader["V_RefundPaymentReasonInPtValue"].ToString();
                }
            }
            if (reader.HasColumn("OutPtCashAdvanceID") && reader["OutPtCashAdvanceID"] != DBNull.Value)
            {
                p.OutPtCashAdvanceID = reader["OutPtCashAdvanceID"] as long?;
            }
            return p;
        }

        protected virtual List<PatientTransactionPayment> GetPatientTransactionPaymentCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientTransactionPayment>();
            while (reader.Read())
            {
                retVal.Add(GetPatientTransactionPaymentFromReader(reader));
            }
            return retVal;
        }


        protected virtual XDocument GetPatientTransactionPaymentToXML(IList<PatientTransactionPayment> items, int bNgoaiTru, bool IsCashAdvance = false)
        {
            if (items != null)
            {
                var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                    new XElement("Root",
                    from item in items
                    select new XElement("IDList",
                    new XElement("PtTranPaymtID", item.PtTranPaymtID),
                    new XElement("TransactionID", item.TransactionID),
                    new XElement("InvoiceID", item.InvoiceID),
                    new XElement("IntRcptTypeID", item.IntRcptTypeID),
                    new XElement("PaymentDate", item.PaymentDate.HasValue ? item.PaymentDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                    new XElement("PayAmount", item.PayAmount),
                    new XElement("StaffID", item.StaffID),
                    new XElement("CollectorDeptLocID", item.CollectorDeptLocID),
                    new XElement("ReceiptNumber", IsCashAdvance ? null : new ServiceSequenceNumberProvider().GetReceiptNumber_NgoaiTru(bNgoaiTru)),
                    new XElement("ManualReceiptNumber", item.ManualReceiptNumber),
                    new XElement("TranPaymtNote", item.TranPaymtNote),
                    new XElement("V_Currency", item.V_Currency ?? (item.Currency != null ? item.Currency.LookupID : 0)),
                    new XElement("V_PaymentType", item.V_PaymentType ?? (item.PaymentType != null ? item.PaymentType.LookupID : 0)),
                    new XElement("V_PaymentMode", item.V_PaymentMode ?? (item.PaymentMode != null ? item.PaymentMode.LookupID : 0)),
                    new XElement("CreditOrDebit", item.CreditOrDebit),
                    new XElement("PtPmtAccID", item.PtPmtAccID),
                    new XElement("V_TradingPlaces", item.V_TradingPlaces),
                    new XElement("TranPaymtStatus", item.TranPaymtStatus),
                    new XElement("XMLLink", item.XMLLink),
                    new XElement("XMLService", item.XMLService))));
                return xmlDocument;
            }
            else
            {
                return null;
            }
        }

        protected virtual XDocument GetPCLExamTypeComboItemToXML(IList<PCLExamTypeComboItem> items)
        {
            if (items != null)
            {
                var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                        new XElement("Root",
                         from item in items
                         select new XElement("PCLExamTypeComboItems",
                                new XElement("PCLExamTypeComboID", item.PCLExamTypeComboID),
                                new XElement("PCLExamTypeComboItemID", item.PCLExamTypeComboItemID),
                                new XElement("PCLExamTypeID", item.PCLExamType.PCLExamTypeID)
                             )));
                return xmlDocument;
            }
            else
            {
                return null;
            }
        }

        protected virtual List<ReportOutPatientCashReceipt_Payments> GetReportOutPatientCashReceipt_PaymentsCollectionFromReader_New(IDataReader reader, out List<PatientTransactionPayment> OutPaymentLst)
        {
            OutPaymentLst = new List<PatientTransactionPayment>();
            var retVal = new List<ReportOutPatientCashReceipt_Payments>();
            PatientTransactionPayment theCurPatientTransactionPayment = null;
            while (reader.Read())
            {
                var p = new ReportOutPatientCashReceipt_Payments();
                p.CurPatientTransactionPayment = GetPatientTransactionPaymentFromReader(reader);
                bool bAdd_PTP_List = false;
                if (theCurPatientTransactionPayment != null)
                {
                    if (theCurPatientTransactionPayment.OutPtCashAdvanceID != p.CurPatientTransactionPayment.OutPtCashAdvanceID)
                    {
                        bAdd_PTP_List = true;
                    }
                }
                else
                {
                    bAdd_PTP_List = true;
                }
                theCurPatientTransactionPayment = p.CurPatientTransactionPayment;
                if (bAdd_PTP_List)
                {
                    OutPaymentLst.Add(p.CurPatientTransactionPayment);
                }
                if (reader.HasColumn("ReportOutPatientCashReceiptID"))
                {
                    p.CurReportOutPatientCashReceipt = GetReportOutPatientCashReceiptFromReader(reader);
                }
                retVal.Add(p);
            }
            return retVal;
        }
        protected virtual ReportOutPatientCashReceipt_Payments GetReportOutPatientCashReceipt_PaymentsFromReader(IDataReader reader)
        {
            var p = new ReportOutPatientCashReceipt_Payments();
            p.CurPatientTransactionPayment = GetPatientTransactionPaymentFromReader(reader);
            if (reader.HasColumn("ReportOutPatientCashReceiptID"))
            {
                p.CurReportOutPatientCashReceipt = GetReportOutPatientCashReceiptFromReader(reader);
            }
            return p;
        }

        protected virtual List<ReportOutPatientCashReceipt_Payments> GetReportOutPatientCashReceipt_PaymentsCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<ReportOutPatientCashReceipt_Payments>();
            while (reader.Read())
            {
                retVal.Add(GetReportOutPatientCashReceipt_PaymentsFromReader(reader));
            }
            return retVal;
        }

        protected virtual ReportOutPatientCashReceipt GetReportOutPatientCashReceiptFromReader(IDataReader reader)
        {
            ReportOutPatientCashReceipt p = new ReportOutPatientCashReceipt();

            p.PaymentID = (long)reader["PtTranPaymtID"];
            p.PatientID = (long)reader["PatientID"];
            p.PatientAmount = Convert.ToDecimal(reader["PatientAmount"]);
            p.Amount = Convert.ToDecimal(reader["Amount"]);
            p.ServiceName = reader["ServiceName"].ToString();
            p.ServiceItemType = (long)reader["V_ServiceItemType"];
            p.ItemID = (long)reader["ItemID"];
            p.ReportOutPatientCashReceiptID = (long)reader["ReportOutPatientCashReceiptID"];
            p.PtRegistrationID = (long)reader["PtRegistrationID"];

            if (reader.HasColumn("StaffName"))
            {
                p.StaffName = reader["StaffName"].ToString();
            }
            if (reader.HasColumn("FullName"))
            {
                p.FullName = reader["FullName"].ToString();
            }


            return p;
        }

        protected virtual List<ReportOutPatientCashReceipt> GetReportOutPatientCashReceiptCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<ReportOutPatientCashReceipt>();
            while (reader.Read())
            {
                retVal.Add(GetReportOutPatientCashReceiptFromReader(reader));
            }
            return retVal;
        }
        protected virtual PatientTranacsionPaymentLink GetPatientTranacsionPaymentLinkFromReader(IDataReader reader)
        {
            var p = new PatientTranacsionPaymentLink
            {
                PtTranPmtLinkID = (long)reader["PtTranPmtLinkID"],
                PtTranPaymtID = (long)reader["PtTranPaymtID"],
                TransItemID = (long)reader["TransItemID"]
            };
            return p;
        }

        protected virtual List<PatientTranacsionPaymentLink> GetPatientTranacsionPaymentLinkCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientTranacsionPaymentLink>();
            while (reader.Read())
            {
                retVal.Add(GetPatientTranacsionPaymentLinkFromReader(reader));
            }
            return retVal;
        }

        protected virtual PatientCashAdvance GetPatientCashAdvanceFromReader(IDataReader reader)
        {
            var p = new PatientCashAdvance
            {
                PtCashAdvanceID = (long)reader["PtCashAdvanceID"],
                PtRegistrationID = (long)reader["PtRegistrationID"],
                CashAdvReceiptNum = reader["CashAdvReceiptNum"].ToString(),
                RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]),
                PaymentDate = Convert.ToDateTime(reader["PaymentDate"]),
                StaffID = (long)reader["StaffID"],
                V_CashAdvanceType = (long)reader["V_CashAdvanceType"],
                V_RegistrationType = (AllLookupValues.RegistrationType)((long)reader["V_RegistrationType"]),
                PaymentAmount = (decimal)reader["PaymentAmount"],
                BalanceAmount = (decimal)reader["BalanceAmount"],
                GeneralNote = reader["GeneralNote"].ToString()
            };

            if (reader.HasColumn("FullName"))
            {
                p.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("RptPtCashAdvRemID") && reader["RptPtCashAdvRemID"] != DBNull.Value)
            {
                p.RptPtCashAdvRemID = reader["RptPtCashAdvRemID"] as long?;
                try
                {
                    p.RptPatientCashAdvReminder = GetRptPatientCashAdvReminderFromReader(reader);
                }
                catch { }
            }

            //KMx: Lấy thêm 2 properties để biết tạm ứng cho bill nào (25/10/2014 08:55).
            if (reader.HasColumn("InPatientBillingInvID") && reader["InPatientBillingInvID"] != DBNull.Value)
            {
                p.InPatientBillingInvID = (long)reader["InPatientBillingInvID"];
            }

            if (reader.HasColumn("BillingInvNum") && reader["BillingInvNum"] != DBNull.Value)
            {
                p.BillingInvNum = reader["BillingInvNum"].ToString();
            }

            if (reader.HasColumn("V_PaymentReasonID") && reader["V_PaymentReasonID"] != DBNull.Value)
            {
                p.V_PaymentReason = new Lookup();
                p.V_PaymentReason.LookupID = Convert.ToInt64(reader["V_PaymentReasonID"]);
                if (reader.HasColumn("V_PaymentReasonValue") && reader["V_PaymentReasonValue"] != DBNull.Value)
                {
                    p.V_PaymentReason.ObjectValue = reader["V_PaymentReasonValue"].ToString();
                }
            }

            if (reader.HasColumn("V_PaymentModeID") && reader["V_PaymentModeID"] != DBNull.Value)
            {
                p.V_PaymentMode = new Lookup();
                p.V_PaymentMode.LookupID = Convert.ToInt64(reader["V_PaymentModeID"]);
                if (reader.HasColumn("V_PaymentModeValue") && reader["V_PaymentModeValue"] != DBNull.Value)
                {
                    p.V_PaymentMode.ObjectValue = reader["V_PaymentModeValue"].ToString();
                }
            }
            if (reader.HasColumn("RemCode") && reader["RemCode"] != DBNull.Value)
            {
                p.RemCode = Convert.ToString(reader["RemCode"]);
            }
            // VuTTM begin
            if (reader.HasColumn("BankingTrxId") && reader["BankingTrxId"] != DBNull.Value)
            {
                p.BankingTrxId = (long)reader["BankingTrxId"];
            }
            if (reader.HasColumn("BankingRefundTrxId") && reader["BankingRefundTrxId"] != DBNull.Value)
            {
                p.BankingRefundTrxId = (long)reader["BankingRefundTrxId"];
            }
            // VuTTM end
            return p;
        }

        protected virtual List<PatientCashAdvance> GetPatientCashAdvanceCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientCashAdvance>();
            while (reader.Read())
            {
                retVal.Add(GetPatientCashAdvanceFromReader(reader));
            }
            return retVal;
        }


        protected virtual TransactionFinalization GetTransactionFinalizationFromReader(IDataReader reader)
        {
            var p = new TransactionFinalization { TotalSupportFund = 0 };

            if (reader.HasColumn("TranFinalizationID") && reader["TranFinalizationID"] != DBNull.Value)
            {
                p.TranFinalizationID = (long)reader["TranFinalizationID"];
            }

            if (reader.HasColumn("DateFinalize") && reader["DateFinalize"] != DBNull.Value)
            {
                p.DateFinalize = Convert.ToDateTime(reader["DateFinalize"]);
            }

            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = (long)reader["PtRegistrationID"];
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.SettlementStaff = new Staff();
                p.SettlementStaff.StaffID = (long)reader["StaffID"];

                if (reader.HasColumn("StaffName") && reader["StaffName"] != DBNull.Value)
                {
                    p.SettlementStaff.FullName = reader["StaffName"].ToString();
                }
            }

            if (reader.HasColumn("TranDateFrom") && reader["TranDateFrom"] != DBNull.Value)
            {
                p.TranDateFrom = Convert.ToDateTime(reader["TranDateFrom"]);
            }

            if (reader.HasColumn("TranDateTo") && reader["TranDateTo"] != DBNull.Value)
            {
                p.TranDateTo = Convert.ToDateTime(reader["TranDateTo"]);
            }

            if (reader.HasColumn("V_TranFinalizationType") && reader["V_TranFinalizationType"] != DBNull.Value)
            {
                p.V_TranFinalizationType = (long)reader["V_TranFinalizationType"];
            }


            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                long V_RegistrationType = (long)reader["V_RegistrationType"];
                if (Enum.IsDefined(typeof(AllLookupValues.RegistrationType), (int)V_RegistrationType))
                {
                    p.V_RegistrationType = (AllLookupValues.RegistrationType)V_RegistrationType;
                }
                else
                {
                    p.V_RegistrationType = AllLookupValues.RegistrationType.Unknown;
                }
            }

            if (reader.HasColumn("FinalizedReceiptNum") && reader["FinalizedReceiptNum"] != DBNull.Value)
            {
                p.FinalizedReceiptNum = reader["FinalizedReceiptNum"].ToString();
            }

            if (reader.HasColumn("TotalPatientPayment") && reader["TotalPatientPayment"] != DBNull.Value)
            {
                p.TotalPatientPayment = (Decimal)reader["TotalPatientPayment"];
            }

            if (reader.HasColumn("TotalHIPayment") && reader["TotalHIPayment"] != DBNull.Value)
            {
                p.TotalHIPayment = (Decimal)reader["TotalHIPayment"];
            }

            if (reader.HasColumn("TotalInvoicePrice") && reader["TotalInvoicePrice"] != DBNull.Value)
            {
                p.TotalInvoicePrice = (Decimal)reader["TotalInvoicePrice"];
            }
            if (reader.HasColumn("TotalSupported") && reader["TotalSupported"] != DBNull.Value)
            {
                p.TotalSupported = (Decimal)reader["TotalSupported"];
                p.TotalSupportFund += p.TotalSupported;
            }
            if (reader.HasColumn("TotalSupported_HighTech") && reader["TotalSupported_HighTech"] != DBNull.Value)
            {
                p.TotalSupported_HighTech = (Decimal)reader["TotalSupported_HighTech"];
                p.TotalSupportFund += p.TotalSupported_HighTech;
            }
            return p;
        }


        protected virtual List<TransactionFinalization> GetTransactionFinalizationCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<TransactionFinalization>();
            while (reader.Read())
            {
                retVal.Add(GetTransactionFinalizationFromReader(reader));
            }
            return retVal;
        }

        protected virtual RptPatientCashAdvReminder GetRptPatientCashAdvReminderFromReader(IDataReader reader)
        {
            var p = new RptPatientCashAdvReminder
            {
                RptPtCashAdvRemID = (long)reader["RptPtCashAdvRemID"],
                PtRegistrationID = (long)reader["PtRegistrationID"],
                RemCode = reader["RemCode"].ToString(),
                RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]),
                RemDate = Convert.ToDateTime(reader["RemDate"]),
                V_CashAdvanceType = (long)reader["V_CashAdvanceType"],
                RemAmount = (decimal)reader["RemAmount"],
                RemNote = reader["RemNote"].ToString()
            };
            if (reader.HasColumn("Checked"))
            {
                p.Checked = Convert.ToBoolean(reader["Checked"]);
            }

            if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
            {
                p.DepartmentSuggest = GetDepartmentFromReader(reader);
            }

            if (reader.HasColumn("V_PaymentReasonID") && reader["V_PaymentReasonID"] != DBNull.Value)
            {
                p.V_PaymentReason = new Lookup();
                p.V_PaymentReason.LookupID = Convert.ToInt64(reader["V_PaymentReasonID"]);
                if (reader.HasColumn("V_PaymentReasonValue") && reader["V_PaymentReasonValue"] != DBNull.Value)
                {
                    p.V_PaymentReason.ObjectValue = reader["V_PaymentReasonValue"].ToString();
                }
            }

            if (reader.HasColumn("V_RefundPaymentReasonInPtID") && reader["V_RefundPaymentReasonInPtID"] != DBNull.Value)
            {
                p.V_RefundPaymentReasonInPt = new Lookup();
                p.V_RefundPaymentReasonInPt.LookupID = Convert.ToInt64(reader["V_RefundPaymentReasonInPtID"]);
                if (reader.HasColumn("V_RefundPaymentReasonInPtValue") && reader["V_RefundPaymentReasonInPtValue"] != DBNull.Value)
                {
                    p.V_RefundPaymentReasonInPt.ObjectValue = reader["V_RefundPaymentReasonInPtValue"].ToString();
                }
            }
            return p;
        }

        protected virtual List<RptPatientCashAdvReminder> GetRptPatientCashAdvReminderCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<RptPatientCashAdvReminder>();
            while (reader.Read())
            {
                retVal.Add(GetRptPatientCashAdvReminderFromReader(reader));
            }
            return retVal;
        }

        protected virtual PatientCashAdvTranPaymentLink GetPatientCashAdvTranPaymentLinkFromReader(IDataReader reader)
        {
            var p = new PatientCashAdvTranPaymentLink
            {
                PtCashAdvTranPayLinkID = (long)reader["PtCashAdvTranPayLinkID"],
                PtTranPaymtID = (long)reader["PtTranPaymtID"],
                PtCashAdvanceID = (long)reader["PtCashAdvanceID"]
            };
            return p;
        }

        protected virtual List<PatientCashAdvTranPaymentLink> GetPatientCashAdvTranPaymentLinkCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientCashAdvTranPaymentLink>();
            while (reader.Read())
            {
                retVal.Add(GetPatientCashAdvTranPaymentLinkFromReader(reader));
            }
            return retVal;
        }


        protected virtual PatientPaymentAccount GetPatientPaymentAccountFromReader(IDataReader reader)
        {
            var p = new PatientPaymentAccount
            {
                PtPmtAccID = (long)reader["PtPmtAccID"],
                AccAddress = reader["AccAddress"] as string,
                AccCode = reader["AccCode"] as string,
                AccName = reader["AccName"] as string,
                AccNote = reader["AccNote"] as string,
                AccOpenDate = reader["AccOpenDate"] as DateTime?,
                AccOwner = reader["AccOwner"] as string,
                AccTelephone = reader["AccTelephone"] as string,
                ContactName = reader["ContactName"] as string,
                ContactTelephone = reader["ContactTelephone"] as string,
                IsActive = reader["IsActive"] as bool?,
                RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"])
            };
            return p;
        }


        protected virtual List<PatientPaymentAccount> GetPatientPaymentAccountCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientPaymentAccount>();
            while (reader.Read())
            {
                retVal.Add(GetPatientPaymentAccountFromReader(reader));
            }
            return retVal;
        }

        protected virtual OutwardDrugViewItem GetOutWardDrugViewItemFromReader(IDataReader reader)
        {
            var p = new OutwardDrugViewItem
            {
                DrugID = (long)reader["DrugID"],
                InID = reader["InID"] as long?,
                OutQuantity = (double)reader["OutQuantity"],
                OutPrice = (decimal)reader["OutPrice"],
                OutInvID = reader["OutInvID"] as string,
                OutDate = reader["OutDate"] as DateTime?,
                BrandName = reader["BrandName"] as string
            };
            return p;
        }
        protected virtual List<OutwardDrugViewItem> GetOutWardDrugViewItemCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<OutwardDrugViewItem>();
            while (reader.Read())
            {
                retVal.Add(GetOutWardDrugViewItemFromReader(reader));
            }
            return retVal;
        }
        protected virtual OutwardDrugInvoice GetOutWardDrugInvoiceFromReader(IDataReader reader)
        {
            var p = new OutwardDrugInvoice
            {
                outiID = (long)reader["outiID"],
                //OutInvID = reader["OutInvID"].ToString(),
                //OutInvoiceNumber = reader["OutInvoiceNumber"] as string,
                //OutDate = (DateTime)reader["OutDate"],
                //PrescriptID = reader["PrescriptID"] as long?,
                //StaffID = reader["StaffID"] as Int64?,
                //StoreID = reader["StoreID"] as long?,
                //TypID = reader["TypID"] as long?,
                //MSCID = reader["MSCID"] as long?,
                //IMEID = reader["IMEID"] as long?,
                //HITTypeID = reader["HITTypeID"] as long?
            };

            if (reader.HasColumn("OutInvID") && reader["OutInvID"] != DBNull.Value)
            {
                p.OutInvID = reader["OutInvID"].ToString();
            }
            if (reader.HasColumn("OutInvoiceNumber") && reader["OutInvoiceNumber"] != DBNull.Value)
            {
                p.OutInvoiceNumber = reader["OutInvoiceNumber"].ToString();
            }
            if (reader.HasColumn("OutDate") && reader["OutDate"] != DBNull.Value)
            {
                p.OutDate = Convert.ToDateTime(reader["OutDate"]);
            }
            if (reader.HasColumn("PrescriptID") && reader["PrescriptID"] != DBNull.Value)
            {
                p.PrescriptID = Convert.ToInt64(reader["PrescriptID"]);
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = Convert.ToInt64(reader["StaffID"]);
            }
            if (reader.HasColumn("StoreID") && reader["StoreID"] != DBNull.Value)
            {
                p.StoreID = Convert.ToInt64(reader["StoreID"]);
            }
            if (reader.HasColumn("TypID") && reader["TypID"] != DBNull.Value)
            {
                p.TypID = Convert.ToInt64(reader["TypID"]);
            }
            if (reader.HasColumn("MSCID") && reader["MSCID"] != DBNull.Value)
            {
                p.MSCID = Convert.ToInt64(reader["MSCID"]);
            }
            if (reader.HasColumn("IMEID") && reader["IMEID"] != DBNull.Value)
            {
                p.IMEID = Convert.ToInt64(reader["IMEID"]);
            }
            if (reader.HasColumn("HITTypeID") && reader["HITTypeID"] != DBNull.Value)
            {
                p.HITTypeID = Convert.ToInt64(reader["HITTypeID"]);
            }
            if (reader.HasColumn("ModFromOutiID") && reader["ModFromOutiID"] != DBNull.Value)
            {
                p.ModFromOutiID = (long)reader["ModFromOutiID"];
            }
            if (reader.HasColumn("OutInvIDString"))
            {
                p.OutInvIDString = reader["OutInvIDString"] as string;
            }
            if (reader.HasColumn("V_OutDrugInvStatus"))
            {
                p.V_OutDrugInvStatus = (long)reader["V_OutDrugInvStatus"];
            }
            if (reader.HasColumn("Notes"))
            {
                p.Notes = reader["Notes"].ToString();
            }
            if (reader.HasColumn("CustomerName"))
            {
                p.FullName = reader["CustomerName"] as string;
            }
            if (reader.HasColumn("Address"))
            {
                p.Address = reader["Address"] as string;
            }
            if (reader.HasColumn("DOBString"))
            {
                p.DOBString = reader["DOBString"] as string;
            }
            if (reader.HasColumn("NumberPhone"))
            {
                p.NumberPhone = reader["NumberPhone"] as string;
            }
            if (reader.HasColumn("PatientCode"))
            {
                p.PatientCode = reader["PatientCode"].ToString();
            }
            if (reader.HasColumn("HICardNo"))
            {
                p.HICardNo = reader["HICardNo"].ToString();
            }
            p.SelectedStaff = new Staff();
            if (reader["StaffID"].ToString() != "" && reader["StaffID"] != DBNull.Value)
            {
                p.SelectedStaff.StaffID = (long)reader["StaffID"];
                if (reader.HasColumn("FullName"))
                {
                    p.SelectedStaff.FullName = reader["FullName"].ToString();
                }
            }
            p.SelectedStorage = new RefStorageWarehouseLocation();
            if (reader["StoreID"].ToString() != "" && reader["StoreID"] != DBNull.Value)
            {
                p.SelectedStorage.StoreID = (long)reader["StoreID"];
                if (reader.HasColumn("swhlName"))
                {
                    p.SelectedStorage.swhlName = reader["swhlName"].ToString();
                }
            }


            if (reader.HasColumn("ReturnID"))
            {
                p.ReturnID = reader["ReturnID"] as long?;
            }
            if (reader.HasColumn("ReturnInvoice"))
            {
                p.ReturnInvoice = reader["ReturnInvoice"].ToString();
            }

            if (reader.HasColumn("ReqDrugInID"))
            {
                p.ReqDrugInID = reader["ReqDrugInID"] as long?;
            }
            if (reader.HasColumn("ReqNumCode"))
            {
                p.ReqNumCode = reader["ReqNumCode"].ToString();
            }
            if (reader.HasColumn("ToStoreID"))
            {
                p.ToStoreID = reader["ToStoreID"] as long?;
            }

            if (reader.HasColumn("ToStaffID"))
            {
                p.ToStaffID = reader["ToStaffID"] as long?;
            }

            if (reader.HasColumn("ToStoreName"))
            {
                p.ToStoreName = reader["ToStoreName"].ToString();
            }

            if (reader.HasColumn("ToStaffIDName"))
            {
                p.ToStaffName = reader["ToStaffIDName"].ToString();
            }
            if (reader.HasColumn("HosID"))
            {
                p.HosID = reader["HosID"] as long?;
            }

            if (reader.HasColumn("HosName"))
            {
                p.HosName = reader["HosName"].ToString();
            }

            if (reader.HasColumn("V_ByOutPrice") && reader["V_ByOutPrice"] != DBNull.Value)
            {
                p.V_ByOutPrice = (long)reader["V_ByOutPrice"];
            }
            if (reader.HasColumn("Notes"))
            {
                p.Notes = reader["Notes"].ToString();
            }
            if (reader.HasColumn("CheckedPoint"))
            {
                p.CheckedPoint = (bool)reader["CheckedPoint"];
            }
            p.SelectedPrescription = new Prescription();
            if (reader.HasColumn("PrescriptID") && reader["PrescriptID"] != DBNull.Value)
            {
                if (reader.HasColumn("Issue_HisID") && reader["Issue_HisID"] != DBNull.Value)
                {
                    p.SelectedPrescription.Issue_HisID = (long)reader["Issue_HisID"];
                }
                if (reader.HasColumn("V_RegistrationType"))
                {

                    var V_RegistrationType = reader["V_RegistrationType"] as long?;
                    if (Enum.IsDefined(typeof(AllLookupValues.RegistrationType), (int)V_RegistrationType.GetValueOrDefault(0)))
                    {
                        p.SelectedPrescription.V_RegistrationType = (AllLookupValues.RegistrationType)V_RegistrationType.Value;
                    }
                    else
                    {
                        p.SelectedPrescription.V_RegistrationType = AllLookupValues.RegistrationType.Unknown;
                    }
                }

                if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
                {
                    p.SelectedPrescription.PatientID = (long)reader["PatientID"];
                }
                if (reader.HasColumn("PatientCode"))
                {
                    p.SelectedPrescription.PatientCode = reader["PatientCode"].ToString();
                }
                if (reader.HasColumn("PatientFullName") && reader["PatientFullName"] != DBNull.Value)
                {
                    p.SelectedPrescription.PatientFullName = reader["PatientFullName"].ToString();
                }
                p.SelectedPrescription.PrescriptID = (long)reader["PrescriptID"];
                if (reader.HasColumn("PtRegistrationID"))
                {
                    p.PtRegistrationID = reader["PtRegistrationID"] as long?;
                    p.SelectedPrescription.PtRegistrationID = reader["PtRegistrationID"] as long?;
                }

                if (reader.HasColumn("ForOutPatient"))
                {
                    p.SelectedPrescription.ForOutPatient = reader["ForOutPatient"] as bool?;
                }
                if (reader.HasColumn("IsHICount"))
                {
                    p.IsHICount = reader["IsHICount"] as bool?;
                }
                if (reader.HasColumn("IssueID") && reader["IssueID"] != DBNull.Value)
                {
                    p.IssueID = reader["IssueID"] as long?;
                    p.SelectedPrescription.IssueID = (long)reader["IssueID"];
                }
                if (reader.HasColumn("IssuedDateTime") && reader["IssuedDateTime"] != DBNull.Value)
                {
                    p.SelectedPrescription.IssuedDateTime = reader["IssuedDateTime"] as DateTime?;
                }
                if (reader.HasColumn("IssuerStaffID") && reader["IssuerStaffID"] != DBNull.Value)
                {

                    p.SelectedPrescription.ObjIssuerStaffID = new Staff { StaffID = Convert.ToInt64(reader["IssuerStaffID"]) };
                    if (reader.HasColumn("IssuerStaffIDName"))
                    {
                        p.SelectedPrescription.ObjIssuerStaffID.FullName = reader["IssuerStaffIDName"] == null ? "" : reader["IssuerStaffIDName"].ToString();
                    }
                    if (reader.HasColumn("IssuerStaffIDPhoneNumber"))
                    {
                        p.SelectedPrescription.ObjIssuerStaffID.SPhoneNumber = reader["IssuerStaffIDPhoneNumber"] == null ? "" : reader["IssuerStaffIDPhoneNumber"].ToString();
                    }

                }

                if (reader.HasColumn("ReIssuerStaffID") && reader["ReIssuerStaffID"] != DBNull.Value)
                {
                    p.SelectedPrescription.ObjReIssuerStaffID = new Staff
                    {
                        StaffID =
                                                                            Convert.ToInt64(reader["ReIssuerStaffID"])
                    };
                    if (reader.HasColumn("ReIssuerStaffIDName"))
                    {
                        p.SelectedPrescription.ObjReIssuerStaffID.FullName = reader["ReIssuerStaffIDName"] == null ? "" : reader["ReIssuerStaffIDName"].ToString();
                    }
                    if (reader.HasColumn("ReIssuerStaffIDPhoneNumber"))
                    {
                        p.SelectedPrescription.ObjReIssuerStaffID.SPhoneNumber = reader["ReIssuerStaffIDPhoneNumber"] == null ? "" : reader["ReIssuerStaffIDPhoneNumber"].ToString();
                    }
                }


            }
            if (reader.HasColumn("ColectDrugSeqNum"))
            {
                if (reader["ColectDrugSeqNum"] != DBNull.Value)
                {
                    p.ColectDrugSeqNum = (int)reader["ColectDrugSeqNum"];
                }
            }
            if (reader.HasColumn("ColectDrugSeqNumType"))
            {
                if (reader["ColectDrugSeqNumType"] != DBNull.Value)
                {
                    p.ColectDrugSeqNumType = (byte)reader["ColectDrugSeqNumType"];
                }
            }
            p.ColectDrugSeqNumString = AxHelper.GetSequenceNumber(p.ColectDrugSeqNumType, p.ColectDrugSeqNum);

            if (reader.HasColumn("PaidTime") && reader["PaidTime"] != DBNull.Value)
            {
                p.PaidTime = (DateTime)reader["PaidTime"];
            }
            if (reader.HasColumn("RefundTime") && reader["RefundTime"] != DBNull.Value)
            {
                p.RefundTime = (DateTime)reader["RefundTime"];
            }
            if (reader.HasColumn("AlreadyReported") && reader["AlreadyReported"] != DBNull.Value)
            {
                p.AlreadyReported = (bool)reader["AlreadyReported"];
            }
            /*▼====: #042*/
            if (reader.HasColumn("PrescriptionIssueCode") && reader["PrescriptionIssueCode"] != DBNull.Value)
            {
                p.SelectedPrescription.PrescriptionIssueCode = reader["PrescriptionIssueCode"].ToString();
            }
            /*▲====: #042*/
            p.CalculateState();
            p.RecordState = RecordState.UNCHANGED;
            if (reader.HasColumn("IssuedStaffFullName") && reader["IssuedStaffFullName"] != DBNull.Value)
            {
                p.IssuedStaffFullName = reader["IssuedStaffFullName"].ToString();
            }
            if (reader.HasColumn("ICD10Code") && reader["ICD10Code"] != DBNull.Value)
            {
                p.MainICD10 = new DiseasesReference { ICD10Code = reader["ICD10Code"].ToString() };
            }
            if (reader.HasColumn("PatientGender") && reader["PatientGender"] != DBNull.Value)
            {
                p.PatientGender = new Gender(reader["PatientGender"].ToString(), "");
            }
            //▼====: #058
            if (reader.HasColumn("DiagnosisFinal") && reader["DiagnosisFinal"] != DBNull.Value)
            {
                p.SelectedPrescription.ObjDiagnosisTreatment = GetDiagTrmtFromReader(reader);
            }
            //▲====: #058
            if (reader.HasColumn("DSPTModifiedDate") && reader["DSPTModifiedDate"] != DBNull.Value)
            {
                p.DSPTModifiedDate = Convert.ToDateTime(reader["DSPTModifiedDate"]);
            }
            //▼====: #164
            if (reader.HasColumn("DQGReportID") && reader["DQGReportID"] != DBNull.Value)
            {
                p.DQGReportID = Convert.ToInt64(reader["DQGReportID"]);
            }
            //▲====: #0164
            return p;
        }

        #endregion

        #region Lin Ny Med Dept

        protected virtual List<ContraIndicatorMedProductsRelToMedCond> GetContraIndicatorMedProductsRelToMedCondFromReader(IDataReader reader)
        {
            List<ContraIndicatorMedProductsRelToMedCond> lst = new List<ContraIndicatorMedProductsRelToMedCond>();
            while (reader.Read())
            {
                lst.Add(GetContraIndicatorMedProductsRelToMedCondObjFromReader(reader));
            }
            return lst;
        }
        protected virtual ContraIndicatorMedProductsRelToMedCond GetContraIndicatorMedProductsRelToMedCondObjFromReader(IDataReader reader)
        {
            ContraIndicatorMedProductsRelToMedCond p = new ContraIndicatorMedProductsRelToMedCond();
            try
            {
                if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
                {
                    p.GenMedProductID = (long)reader["GenMedProductID"];
                }
                if (reader.HasColumn("MedContraTypeID") && reader["MedContraTypeID"] != DBNull.Value)
                {
                    p.MCTypeID = (long)(Convert.ToInt32(reader["MedContraTypeID"]));
                }
                if (reader.HasColumn("DrugsMCTypeID") && reader["DrugsMCTypeID"] != DBNull.Value)
                {
                    p.MedProductsMCTypeID = (long)(Convert.ToInt32(reader["DrugsMCTypeID"]));
                }
                if (reader.HasColumn("IsWarning") && reader["IsWarning"] != DBNull.Value)
                {
                    p.IsWarning = Convert.ToBoolean(reader["IsWarning"]);
                }
                try
                {
                    p.RefGenMedProductDetails = new RefGenMedProductDetails();
                    if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
                    {
                        p.RefGenMedProductDetails.GenMedProductID = (long)reader["GenMedProductID"];
                    }
                    if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
                    {
                        p.RefGenMedProductDetails.BrandName = reader["BrandName"].ToString();
                    }
                }
                catch { }

                try
                {
                    p.RefMedicalConditionType = new RefMedContraIndicationTypes();
                    if (reader.HasColumn("MedContraTypeID") && reader["MedContraTypeID"] != DBNull.Value)
                    {
                        p.RefMedicalConditionType.MedContraTypeID = (Convert.ToInt32(reader["MedContraTypeID"]));
                    }
                    if (reader.HasColumn("MedContraIndicationType") && reader["MedContraIndicationType"] != DBNull.Value)
                    {
                        p.RefMedicalConditionType.MedContraIndicationType = reader["MedContraIndicationType"].ToString();
                    }
                    if (reader.HasColumn("AgeFrom") && reader["AgeFrom"] != DBNull.Value)
                    {
                        p.RefMedicalConditionType.AgeFrom = Convert.ToInt32(reader["AgeFrom"]);
                    }
                    if (reader.HasColumn("AgeTo") && reader["AgeTo"] != DBNull.Value)
                    {
                        p.RefMedicalConditionType.AgeTo = Convert.ToInt32(reader["AgeTo"]);
                    }
                }
                catch { }

            }
            catch
            { }

            return p;
        }
        protected virtual List<RouteOfAdministrationContactDrug> GetRouteOfAdministrationContactDrugFromReader(IDataReader reader)
        {
            List<RouteOfAdministrationContactDrug> lst = new List<RouteOfAdministrationContactDrug>();
            while (reader.Read())
            {
                lst.Add(GetRouteOfAdministrationContactDrugObjFromReader(reader));
            }
            return lst;
        }
        protected virtual RouteOfAdministrationContactDrug GetRouteOfAdministrationContactDrugObjFromReader(IDataReader reader)
        {
            RouteOfAdministrationContactDrug p = new RouteOfAdministrationContactDrug();
            try
            {
                if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
                {
                    p.GenMedProductID = (long)reader["GenMedProductID"];
                }
                if (reader.HasColumn("DrugROAID") && reader["DrugROAID"] != DBNull.Value)
                {
                    p.DrugROAID = (long)(Convert.ToInt32(reader["DrugROAID"]));
                }
               
                //try
                //{
                //    p.RefGenMedProductDetails = new RefGenMedProductDetails();
                //    if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
                //    {
                //        p.RefGenMedProductDetails.GenMedProductID = (long)reader["GenMedProductID"];
                //    }
                //    if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
                //    {
                //        p.RefGenMedProductDetails.BrandName = reader["BrandName"].ToString();
                //    }
                //}
                //catch { }

                try
                {
                    p.RouteOfAdministration = GetLookupFromReader(reader);
                    //if (reader.HasColumn("LookupID") && reader["LookupID"] != DBNull.Value)
                    //{
                    //    p.RouteOfAdministration.LookupID = (Convert.ToInt32(reader["LookupID"]));
                    //}
                    //if (reader.HasColumn("ObjectValue") && reader["ObjectValue"] != DBNull.Value)
                    //{
                    //    p.RouteOfAdministration.ObjectValue = reader["ObjectValue"].ToString();
                    //}
                }
                catch { }

            }
            catch
            { }

            return p;
        }

        protected virtual DrugDeptPharmaceuticalCompany GetDrugDeptPharmaceuticalCompanyFromReader(IDataReader reader)
        {
            var p = new DrugDeptPharmaceuticalCompany { PCOID = (long)reader["PCOID"], PCOName = reader["PCOName"].ToString() };
            if (reader.HasColumn("PCOAddress"))
            {
                p.PCOAddress = reader["PCOAddress"].ToString();
            }
            if (reader.HasColumn("PCOState"))
            {
                p.PCOState = reader["PCOState"].ToString();
            }
            if (reader.HasColumn("PCOTelephone"))
            {
                p.PCOTelephone = reader["PCOTelephone"].ToString();
            }
            if (reader.HasColumn("PCOZipCode"))
            {
                p.PCOZipCode = reader["PCOZipCode"].ToString();
            }
            if (reader.HasColumn("CountryID") && reader["CountryID"] != DBNull.Value)
            {
                p.CountryID = (long)reader["CountryID"];
            }
            if (reader.HasColumn("CountryName"))
            {
                p.CountryName = reader["CountryName"].ToString();
            }
            if (reader.HasColumn("ContactName"))
            {
                p.ContactName = reader["ContactName"].ToString();
            }
            if (reader.HasColumn("Active"))
            {
                p.Active = reader["Active"] as bool?;
            }
            return p;
        }
        protected virtual List<DrugDeptPharmaceuticalCompany> GetDrugDeptPharmaceuticalCompanyCollectionFromReader(IDataReader reader)
        {
            var pharmaceuticalCompanies = new List<DrugDeptPharmaceuticalCompany>();
            while (reader.Read())
            {
                pharmaceuticalCompanies.Add(GetDrugDeptPharmaceuticalCompanyFromReader(reader));
            }
            return pharmaceuticalCompanies;
        }

        protected virtual DrugDeptPurchaseCheckOrder GetDrugDeptPurchaseCheckOrderFromReader(IDataReader reader)
        {
            var p = new DrugDeptPurchaseCheckOrder { PONumber = reader["PONumber"].ToString() };
            if (reader.HasColumn("SupplierCode"))
            {
                p.SupplierCode = reader["SupplierCode"].ToString();
            }
            if (reader.HasColumn("SupplierName"))
            {
                p.SupplierName = reader["SupplierName"].ToString();
            }

            if (reader.HasColumn("PoUnitQty") && reader["PoUnitQty"] != DBNull.Value)
            {
                p.PoUnitQty = (int)reader["PoUnitQty"];
            }
            if (reader.HasColumn("WaitingDeliveryQty") && reader["WaitingDeliveryQty"] != DBNull.Value)
            {
                p.WaitingDeliveryQty = (int)reader["WaitingDeliveryQty"];
                p.IsOrderRemaining = p.WaitingDeliveryQty > 0 ? true : false;
            }

            if (reader.HasColumn("InQuantity") && reader["InQuantity"] != DBNull.Value)
            {
                p.InQuantity = Convert.ToDouble(reader["InQuantity"]);
            }
            return p;
        }
        protected virtual List<DrugDeptPurchaseCheckOrder> GetDrugDeptPurchaseCheckOrderCollectionFromReader(IDataReader reader)
        {
            List<DrugDeptPurchaseCheckOrder> PharmaceuticalCompanies = new List<DrugDeptPurchaseCheckOrder>();
            while (reader.Read())
            {
                PharmaceuticalCompanies.Add(GetDrugDeptPurchaseCheckOrderFromReader(reader));
            }
            return PharmaceuticalCompanies;
        }

        protected virtual DrugDeptPurchaseCheckOrderInward GetDrugDeptPurchaseCheckOrderInwardFromReader(IDataReader reader)
        {
            var p = new DrugDeptPurchaseCheckOrderInward();
            p.InQuantity = Convert.ToDouble(reader["InQuantity"]);
            p.InvID = reader["InvID"].ToString();
            return p;
        }
        protected virtual List<DrugDeptPurchaseCheckOrderInward> GetDrugDeptPurchaseCheckOrderInwardCollectionFromReader(IDataReader reader)
        {
            List<DrugDeptPurchaseCheckOrderInward> PharmaceuticalCompanies = new List<DrugDeptPurchaseCheckOrderInward>();
            while (reader.Read())
            {
                PharmaceuticalCompanies.Add(GetDrugDeptPurchaseCheckOrderInwardFromReader(reader));
            }
            return PharmaceuticalCompanies;
        }

        protected virtual PharmacyPurchaseCheckOrder GetPharmacyPurchaseCheckOrderFromReader(IDataReader reader)
        {
            var p = new PharmacyPurchaseCheckOrder { PONumber = reader["PONumber"].ToString() };
            if (reader.HasColumn("SupplierCode"))
            {
                p.SupplierCode = reader["SupplierCode"].ToString();
            }
            if (reader.HasColumn("SupplierName"))
            {
                p.SupplierName = reader["SupplierName"].ToString();
            }

            if (reader.HasColumn("PoUnitQty") && reader["PoUnitQty"] != DBNull.Value)
            {
                p.PoUnitQty = (int)reader["PoUnitQty"];
            }
            if (reader.HasColumn("WaitingDeliveryQty") && reader["WaitingDeliveryQty"] != DBNull.Value)
            {
                p.WaitingDeliveryQty = (int)reader["WaitingDeliveryQty"];
                p.IsOrderRemaining = p.WaitingDeliveryQty > 0 ? true : false;
            }

            if (reader.HasColumn("InQuantity") && reader["InQuantity"] != DBNull.Value)
            {
                p.InQuantity = Convert.ToDouble(reader["InQuantity"]);
            }
            return p;
        }
        protected virtual List<PharmacyPurchaseCheckOrder> GetPharmacyPurchaseCheckOrderCollectionFromReader(IDataReader reader)
        {
            List<PharmacyPurchaseCheckOrder> PharmaceuticalCompanies = new List<PharmacyPurchaseCheckOrder>();
            while (reader.Read())
            {
                PharmaceuticalCompanies.Add(GetPharmacyPurchaseCheckOrderFromReader(reader));
            }
            return PharmaceuticalCompanies;
        }

        protected virtual PharmacyPurchaseCheckOrderInward GetPharmacyPurchaseCheckOrderInwardFromReader(IDataReader reader)
        {
            var p = new PharmacyPurchaseCheckOrderInward();
            p.InQuantity = Convert.ToDouble(reader["InQuantity"]);
            p.InvID = reader["InvID"].ToString();
            return p;
        }
        protected virtual List<PharmacyPurchaseCheckOrderInward> GetPharmacyPurchaseCheckOrderInwardCollectionFromReader(IDataReader reader)
        {
            List<PharmacyPurchaseCheckOrderInward> PharmaceuticalCompanies = new List<PharmacyPurchaseCheckOrderInward>();
            while (reader.Read())
            {
                PharmaceuticalCompanies.Add(GetPharmacyPurchaseCheckOrderInwardFromReader(reader));
            }
            return PharmaceuticalCompanies;
        }

        protected virtual RefOutputType GetRefOutputTypeFromReader(IDataReader reader)
        {
            var p = new RefOutputType { TypID = (long)reader["TypID"], TypName = reader["TypName"].ToString() };
            if (reader.HasColumn("TypActive"))
            {
                p.TypActive = (bool)reader["TypActive"];
            }

            if (reader.HasColumn("IsSelected"))
            {
                p.IsSelected = reader["IsSelected"] as bool?;
            }
            if (reader.HasColumn("IsSelectedPharmacyInternal"))
            {
                p.IsSelectedPharmacyInternal = reader["IsSelectedPharmacyInternal"] as bool?;
            }
            if (reader.HasColumn("TypNamePharmacy"))
            {
                p.TypNamePharmacy = reader["TypNamePharmacy"].ToString();
            }
            if (reader.HasColumn("IsSelectedClinicDept") && reader["IsSelectedClinicDept"] != DBNull.Value)
            {
                p.IsSelectedClinicDept = Convert.ToBoolean(reader["IsSelectedClinicDept"]);
            }
            return p;
        }
        protected virtual List<RefOutputType> GetRefOutputTypeCollectionFromReader(IDataReader reader)
        {
            var pharmaceuticalCompanies = new List<RefOutputType>();
            while (reader.Read())
            {
                pharmaceuticalCompanies.Add(GetRefOutputTypeFromReader(reader));
            }
            return pharmaceuticalCompanies;
        }


        protected virtual PharmaceuticalCompany GetPharmaceuticalCompanyFromReader(IDataReader reader)
        {
            var p = new PharmaceuticalCompany { PCOID = (long)reader["PCOID"], PCOName = reader["PCOName"].ToString() };
            if (reader.HasColumn("PCOAddress"))
            {
                p.PCOAddress = reader["PCOAddress"].ToString();
            }
            if (reader.HasColumn("PCOState"))
            {
                p.PCOState = reader["PCOState"].ToString();
            }
            if (reader.HasColumn("PCOTelephone"))
            {
                p.PCOTelephone = reader["PCOTelephone"].ToString();
            }
            if (reader.HasColumn("PCOZipCode"))
            {
                p.PCOZipCode = reader["PCOZipCode"].ToString();
            }
            if (reader.HasColumn("CountryID") && reader["CountryID"] != DBNull.Value)
            {
                p.CountryID = (long)reader["CountryID"];
            }
            if (reader.HasColumn("CountryName"))
            {
                p.CountryName = reader["CountryName"].ToString();
            }
            if (reader.HasColumn("ContactName"))
            {
                p.ContactName = reader["ContactName"].ToString();
            }
            if (reader.HasColumn("Active"))
            {
                p.Active = reader["Active"] as bool?;
            }
            return p;
        }
        protected virtual List<PharmaceuticalCompany> GetPharmaceuticalCompanyCollectionFromReader(IDataReader reader)
        {
            var pharmaceuticalCompanies = new List<PharmaceuticalCompany>();
            while (reader.Read())
            {
                pharmaceuticalCompanies.Add(GetPharmaceuticalCompanyFromReader(reader));
            }
            return pharmaceuticalCompanies;
        }

        protected virtual RefCountry GetCountryFromReader(IDataReader reader)
        {
            var p = new RefCountry { CountryID = (long)reader["CountryID"] };
            if (reader.HasColumn("CountryCode"))
            {
                p.CountryCode = reader["CountryCode"].ToString();
            }
            if (reader.HasColumn("CountryName"))
            {
                p.CountryName = reader["CountryName"].ToString();
            }
            return p;
        }
        protected virtual List<RefCountry> GetCountryCollectionFromReader(IDataReader reader)
        {
            var countries = new List<RefCountry>();
            while (reader.Read())
            {
                countries.Add(GetCountryFromReader(reader));
            }
            return countries;
        }

        protected virtual Currency GetCurrencyFromReader(IDataReader reader)
        {
            var p = new Currency { CurrencyID = (long)reader["CurrencyID"] };
            if (reader.HasColumn("CurrencyName"))
            {
                p.CurrencyName = reader["CurrencyName"].ToString();
            }
            if (reader.HasColumn("CurrencySymbol"))
            {
                p.CurrencySymbol = reader["CurrencySymbol"].ToString();
            }
            if (reader.HasColumn("IsActive"))
            {
                p.IsActive = reader["IsActive"] as bool?;
            }
            if (reader.HasColumn("OrderNumber"))
            {
                p.OrderNumber = reader["OrderNumber"] as int?;
            }
            return p;
        }
        protected virtual List<Currency> GetCurrencyCollectionFromReader(IDataReader reader)
        {
            var countries = new List<Currency>();
            while (reader.Read())
            {
                countries.Add(GetCurrencyFromReader(reader));
            }
            return countries;
        }

        protected virtual RefUnit GetUnitFromReader(IDataReader reader)
        {
            var p = new RefUnit { UnitID = (long)reader["UnitID"] };
            if (reader.HasColumn("UnitCode"))
            {
                p.UnitCode = reader["UnitCode"].ToString();
            }
            if (reader.HasColumn("UnitName"))
            {
                p.UnitName = reader["UnitName"].ToString();
            }
            if (reader.HasColumn("UnitActive"))
            {
                p.UnitActive = (bool)reader["UnitActive"];
            }

            if (reader.HasColumn("UnitVolume"))
            {
                p.UnitVolume = Convert.ToDouble(reader["UnitVolume"]);
            }

            return p;
        }


        protected virtual ScientificResearchActivities ScientificResearchActivityFromReader(IDataReader reader)
        {
            var p = new ScientificResearchActivities { ActivityID = (long)reader["ActivityID"] };
            if (reader.HasColumn("StartDate") && reader["StartDate"] != DBNull.Value)
            {
                p.StartDate = (DateTime)reader["StartDate"];
            }
            if (reader.HasColumn("EndDate") && reader["EndDate"] != DBNull.Value)
            {
                p.EndDate = (DateTime)reader["EndDate"];
            }
            if (reader.HasColumn("ActivityName") && reader["ActivityName"] != DBNull.Value)
            {
                p.ActivityName = reader["ActivityName"].ToString();
            }
            if (reader.HasColumn("AttendeeName") && reader["AttendeeName"] != DBNull.Value)
            {
                p.AttendeeName = reader["AttendeeName"].ToString();
            }
            if (reader.HasColumn("V_ActivityTypeName") && reader["V_ActivityTypeName"] != DBNull.Value)
            {
                p.V_ActivityTypeName = reader["V_ActivityTypeName"].ToString();
            }
            if (reader.HasColumn("V_ActivityType") && reader["V_ActivityType"] != DBNull.Value)
            {
                p.V_ActivityType = reader["V_ActivityType"] as long?;
            }
            if (reader.HasColumn("V_ActivityMethodType") && reader["V_ActivityMethodType"] != DBNull.Value)
            {
                p.V_ActivityMethodType = reader["V_ActivityMethodType"] as long?;
            }
            if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
            {
                p.Note = reader["Note"].ToString();
            }
            if (reader.HasColumn("ApprovedDate") && reader["ApprovedDate"] != DBNull.Value)
            {
                p.ApprovedDate = (DateTime)reader["ApprovedDate"];
            }
            if (reader.HasColumn("AcceptedDate") && reader["AcceptedDate"] != DBNull.Value)
            {
                p.AcceptedDate = (DateTime)reader["AcceptedDate"];
            }
            if (reader.HasColumn("V_ActivityMethodTypeName") && reader["V_ActivityMethodTypeName"] != DBNull.Value)
            {
                p.V_ActivityMethodTypeName = reader["V_ActivityMethodTypeName"].ToString();
            }
            return p;
        }

        protected virtual TrainingForSubOrg GetTrainingForSubOrgFromReader(IDataReader reader)
        {
            var p = new TrainingForSubOrg { TrainingID = (long)reader["TrainingID"] };
            if (reader.HasColumn("TrainingStartDate") && reader["TrainingStartDate"] != DBNull.Value)
            {
                p.TrainingStartDate = (DateTime)reader["TrainingStartDate"];
            }
            if (reader.HasColumn("TrainingEndDate") && reader["TrainingEndDate"] != DBNull.Value)
            {
                p.TrainingEndDate = (DateTime)reader["TrainingEndDate"];
            }
            if (reader.HasColumn("TrainingName") && reader["TrainingName"] != DBNull.Value)
            {
                p.TrainingName = reader["TrainingName"].ToString();
            }
            if (reader.HasColumn("TrainingPerson") && reader["TrainingPerson"] != DBNull.Value)
            {
                p.TrainingPerson = reader["TrainingPerson"].ToString();
            }
            if (reader.HasColumn("TotalAttendees") && reader["TotalAttendees"] != DBNull.Value)
            {
                p.TotalAttendees = (int)reader["TotalAttendees"];
            }
            if (reader.HasColumn("TrainingPlace") && reader["TrainingPlace"] != DBNull.Value)
            {
                p.TrainingPlace = reader["TrainingPlace"].ToString();
            }
            if (reader.HasColumn("V_TrainingTypeName") && reader["V_TrainingTypeName"] != DBNull.Value)
            {
                p.V_TrainingTypeName = reader["V_TrainingTypeName"].ToString();
            }
            if (reader.HasColumn("V_TrainingType") && reader["V_TrainingType"] != DBNull.Value)
            {
                p.V_TrainingType = reader["V_TrainingType"] as long?;
            }
            if (reader.HasColumn("V_ActivityClassType") && reader["V_ActivityClassType"] != DBNull.Value)
            {
                p.V_ActivityClassType = reader["V_ActivityClassType"] as long?;
            }
            if (reader.HasColumn("ActivityClassID") && reader["ActivityClassID"] != DBNull.Value)
            {
                p.ActivityClassID = reader["ActivityClassID"] as long?;
            }
            return p;
        }
        protected virtual ActivityClasses SetActivityClassListAllFromReader(IDataReader reader)
        {
            var p = new ActivityClasses { ActivityClassID = (long)reader["ActivityClassID"] };

            if (reader.HasColumn("ActivityClassName") && reader["ActivityClassName"] != DBNull.Value)
            {
                p.ActivityClassName = reader["ActivityClassName"].ToString();
            }
            if (reader.HasColumn("TotalMonth") && reader["TotalMonth"] != DBNull.Value)
            {
                p.TotalMonth = float.Parse(reader["TotalMonth"].ToString());
            }

            if (reader.HasColumn("V_ActivityClassType") && reader["V_ActivityClassType"] != DBNull.Value)
            {
                p.V_ActivityClassType = reader["V_ActivityClassType"] as long?;
            }
            return p;
        }

        protected virtual List<RefUnit> GetUnitCollectionFromReader(IDataReader reader)
        {
            var units = new List<RefUnit>();
            while (reader.Read())
            {
                units.Add(GetUnitFromReader(reader));
            }
            return units;
        }

        protected virtual List<Lookup> GetTrainningTypeListFromReader(IDataReader reader)
        {
            var units = new List<Lookup>();
            while (reader.Read())
            {
                units.Add(TrainningTypeListFromReader(reader));
            }
            return units;
        }
        protected virtual Lookup TrainningTypeListFromReader(IDataReader reader)
        {
            var p = new Lookup { LookupID = (long)reader["LookupID"] };
            if (reader.HasColumn("ObjectValue") && reader["ObjectValue"] != DBNull.Value)
            {
                p.ObjectValue = reader["ObjectValue"].ToString();
            }

            return p;
        }

        protected virtual List<ScientificResearchActivities> GetScientificResearchActivityFromReader(IDataReader reader)
        {
            var units = new List<ScientificResearchActivities>();
            while (reader.Read())
            {
                units.Add(ScientificResearchActivityFromReader(reader));
            }
            return units;
        }

        protected virtual List<ActivityClasses> ActivityClassListAllFromReader(IDataReader reader)
        {
            var units = new List<ActivityClasses>();
            while (reader.Read())
            {
                units.Add(SetActivityClassListAllFromReader(reader));
            }
            return units;
        }


        protected virtual List<TrainingForSubOrg> GetTrainingForSubOrgListFromReader(IDataReader reader)
        {
            var units = new List<TrainingForSubOrg>();
            while (reader.Read())
            {
                units.Add(GetTrainingForSubOrgFromReader(reader));
            }
            return units;
        }


        protected virtual RefShelfDrugLocation GetRefShelfDrugLocationFromReader(IDataReader reader)
        {
            var p = new RefShelfDrugLocation { SdlID = (long)reader["SdlID"], SdlDescription = reader["SdlDescription"].ToString() };
            return p;
        }
        protected virtual List<RefShelfDrugLocation> GetRefShelfDrugLocationCollectionFromReader(IDataReader reader)
        {
            var pharmaceuticalCompanies = new List<RefShelfDrugLocation>();
            while (reader.Read())
            {
                pharmaceuticalCompanies.Add(GetRefShelfDrugLocationFromReader(reader));
            }
            return pharmaceuticalCompanies;
        }

        protected virtual DrugClass GetDrugClassFromReader(IDataReader reader)
        {
            var p = new DrugClass { DrugClassID = (long)reader["DrugClassID"] };
            if (reader.HasColumn("FaName"))
            {
                p.FaName = reader["FaName"].ToString();
            }
            if (reader.HasColumn("ParDrugClassID"))
            {
                p.ParDrugClassID = reader["ParDrugClassID"] as long?;
            }
            if (reader.HasColumn("DrugClassCode"))
            {
                p.DrugClassCode = reader["DrugClassCode"].ToString();
            }
            if (reader.HasColumn("FaDescription"))
            {
                p.FaDescription = reader["FaDescription"].ToString();
            }
            if (reader.HasColumn("FaActive") && reader["FaActive"] != DBNull.Value)
            {
                p.FaActive = Convert.ToBoolean(reader["FaActive"]);
            }
            if (reader.HasColumn("V_MedProductType"))
            {
                p.V_MedProductType = reader["V_MedProductType"] as long?;
            }
            return p;
        }
        protected virtual List<DrugClass> GetDrugClassCollectionFromReader(IDataReader reader)
        {
            var familytherapies = new List<DrugClass>();
            while (reader.Read())
            {
                familytherapies.Add(GetDrugClassFromReader(reader));
            }
            return familytherapies;
        }

        protected virtual Supplier GetSupplierFromReader(IDataReader reader)
        {
            var p = new Supplier();
            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.SupplierID = Convert.ToInt64(reader["SupplierID"]);
            }
            if (reader.HasColumn("SupplierName") && reader["SupplierName"] != DBNull.Value)
            {
                p.SupplierName = reader["SupplierName"].ToString();
            }
            if (reader.HasColumn("AccountNumber") && reader["AccountNumber"] != DBNull.Value)
            {
                p.AccountNumber = reader["AccountNumber"].ToString();
            }
            if (reader.HasColumn("BankName") && reader["BankName"] != DBNull.Value)
            {
                p.BankName = reader["BankName"].ToString();
            }
            if (reader.HasColumn("ListPCOID") && reader["ListPCOID"] != DBNull.Value)
            {
                p.ListPCOID = reader["ListPCOID"].ToString();
            }
            if (reader.HasColumn("SupplierCode") && reader["SupplierCode"] != DBNull.Value)
            {
                p.SupplierCode = reader["SupplierCode"].ToString();
            }
            if (reader.HasColumn("SupplierDrugDeptPharmOthers") && reader["SupplierDrugDeptPharmOthers"] != DBNull.Value)
            {
                p.SupplierDrugDeptPharmOthers = Convert.ToByte(reader["SupplierDrugDeptPharmOthers"]);
            }
            if (reader.HasColumn("SupplierDrugDeptPharmOthersName") && reader["SupplierDrugDeptPharmOthersName"] != DBNull.Value)
            {
                p.SupplierDrugDeptPharmOthersName = reader["SupplierDrugDeptPharmOthersName"].ToString();
            }
            try
            {
                if (reader.HasColumn("SupplierDescription") && reader["SupplierDescription"] != DBNull.Value)
                {
                    p.SupplierDescription = reader["SupplierDescription"].ToString();
                }
                if (reader.HasColumn("PAHEmailAddress") && reader["PAHEmailAddress"] != DBNull.Value)
                {
                    p.PAHEmailAddress = reader["PAHEmailAddress"].ToString();
                }
                if (reader.HasColumn("TelephoneNumber") && reader["TelephoneNumber"] != DBNull.Value)
                {
                    p.TelephoneNumber = reader["TelephoneNumber"].ToString();
                }
                if (reader.HasColumn("WebSiteAddress") && reader["WebSiteAddress"] != DBNull.Value)
                {
                    p.WebSiteAddress = reader["WebSiteAddress"].ToString();
                }
                if (reader.HasColumn("FaxNumber") && reader["FaxNumber"] != DBNull.Value)
                {
                    p.FaxNumber = reader["FaxNumber"].ToString();
                }
                if (reader.HasColumn("ContactPerson") && reader["ContactPerson"] != DBNull.Value)
                {
                    p.ContactPerson = reader["ContactPerson"].ToString();
                }
                if (reader.HasColumn("CityStateZipCode") && reader["CityStateZipCode"] != DBNull.Value)
                {
                    p.CityStateZipCode = reader["CityStateZipCode"].ToString();
                }
                if (reader.HasColumn("CertificateAgency") && reader["CertificateAgency"] != DBNull.Value)
                {
                    p.CertificateAgency = reader["CertificateAgency"].ToString();
                }
                if (reader.HasColumn("Address") && reader["Address"] != DBNull.Value)
                {
                    p.Address = reader["Address"].ToString();
                }
                if (reader.HasColumn("Active") && reader["Active"] != DBNull.Value)
                {
                    p.Active = Convert.ToBoolean(reader["Active"]);
                }
            }
            catch
            { }
            return p;
        }
        protected virtual List<Supplier> GetSupplierCollectionFromReader(IDataReader reader)
        {
            var suppliers = new List<Supplier>();
            while (reader.Read())
            {
                suppliers.Add(GetSupplierFromReader(reader));
            }
            return suppliers;
        }

        protected virtual DrugDeptSupplier GetDrugDeptSupplierFromReader(IDataReader reader)
        {
            var p = new DrugDeptSupplier();
            p.SupplierID = (long)reader["SupplierID"];
            p.SupplierName = reader["SupplierName"].ToString();

            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                p.GenMedProductID = Convert.ToInt64(reader["GenMedProductID"]);
            }

            if (reader.HasColumn("AccountNumber"))
            {
                p.AccountNumber = reader["AccountNumber"].ToString();
            }
            if (reader.HasColumn("BankName"))
            {
                p.BankName = reader["BankName"].ToString();
            }
            if (reader.HasColumn("ListPCOID"))
            {
                p.ListPCOID = reader["ListPCOID"].ToString();
            }
            if (reader.HasColumn("SupplierCode"))
            {
                p.SupplierCode = reader["SupplierCode"].ToString();
            }
            if (reader.HasColumn("IsForeign"))
            {
                p.IsForeign = reader["IsForeign"] as bool?;
            }
            if (reader.HasColumn("SupplierDrugDeptPharmOthers") && reader["SupplierDrugDeptPharmOthers"] != DBNull.Value)
            {
                p.SupplierDrugDeptPharmOthers = Convert.ToByte(reader["SupplierDrugDeptPharmOthers"]);
            }
            try
            {
                p.SupplierDescription = reader["SupplierDescription"].ToString();
                p.PAHEmailAddress = reader["PAHEmailAddress"].ToString();
                p.TelephoneNumber = reader["TelephoneNumber"].ToString();
                p.WebSiteAddress = reader["WebSiteAddress"].ToString();
                p.FaxNumber = reader["FaxNumber"].ToString();
                p.ContactPerson = reader["ContactPerson"].ToString();
                p.CityStateZipCode = reader["CityStateZipCode"].ToString();
                p.CertificateAgency = reader["CertificateAgency"].ToString();
                p.Address = reader["Address"].ToString();
                p.Active = (bool)reader["Active"];
            }
            catch
            { }
            return p;
        }
        protected virtual List<DrugDeptSupplier> GetDrugDeptSupplierCollectionFromReader(IDataReader reader)
        {
            var suppliers = new List<DrugDeptSupplier>();
            while (reader.Read())
            {
                suppliers.Add(GetDrugDeptSupplierFromReader(reader));
            }
            return suppliers;
        }


        protected virtual SupplierGenMedProduct GetSupplierGenMedProductFromReader(IDataReader reader)
        {
            var p = new SupplierGenMedProduct
            {
                SupGenMedID = (long)reader["SupGenMedID"],
                SupplierID = (long)reader["SupplierID"],
                SelectedSupplier = GetDrugDeptSupplierFromReader(reader),
                GenMedProductID = (long)reader["GenMedProductID"],
                SelectedGenMedProduct = GetRefGenMedProductDetailsFromReader(reader),
                SupplierPriorityOrderNum = reader["SupplierPriorityOrderNum"] as byte?,
                RecDateCreated = (DateTime)reader["RecDateCreated"]
            };
            if (reader.HasColumn("IsMain") && reader["IsMain"] != DBNull.Value)
            {
                p.IsMain = (bool)reader["IsMain"];
            }
            if (reader.HasColumn("UnitPrice") && reader["UnitPrice"] != DBNull.Value)
            {
                p.UnitPrice = Convert.ToDecimal(reader["UnitPrice"]);
            }

            if (reader.HasColumn("PackagePrice") && reader["PackagePrice"] != DBNull.Value)
            {
                p.PackagePrice = Convert.ToDecimal(reader["PackagePrice"]);
            }
            if (reader.HasColumn("VATOnSupplier") && reader["VATOnSupplier"] != DBNull.Value)
            {
                p.VAT = Convert.ToDouble(reader["VATOnSupplier"]);
            }
            return p;
        }
        protected virtual List<SupplierGenMedProduct> GetSupplierGenMedProductCollectionFromReader(IDataReader reader)
        {
            var suppliers = new List<SupplierGenMedProduct>();
            while (reader.Read())
            {
                suppliers.Add(GetSupplierGenMedProductFromReader(reader));
            }
            return suppliers;
        }
        /*▼====: #019*/
        protected virtual RefMedicalServiceItem GetServiceGenMedProductFromReader(IDataReader reader)
        {
            var p = new RefMedicalServiceItem();
            if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
            {
                p.MedServiceID = Convert.ToInt64(reader["MedServiceID"]);
            }
            if (reader.HasColumn("MedServiceCode") && reader["MedServiceCode"] != DBNull.Value)
            {
                p.MedServiceCode = reader["MedServiceCode"].ToString();
            }
            if (reader.HasColumn("MedServiceName") && reader["MedServiceName"] != DBNull.Value)
            {
                p.MedServiceName = reader["MedServiceName"].ToString();
            }
            return p;
        }
        protected virtual List<RefMedicalServiceItem> GetServiceGenMedProductCollectionFromReader(IDataReader reader)
        {
            var service = new List<RefMedicalServiceItem>();
            while (reader.Read())
            {
                service.Add(GetServiceGenMedProductFromReader(reader));
            }
            return service;
        }
        /*▲====: #019*/
        /*▼====: #041*/
        protected virtual List<DrugClass> GetAllRefGenericCollectionFromReader(IDataReader reader)
        {
            var refGeneric = new List<DrugClass>();
            while (reader.Read())
            {
                refGeneric.Add(GetAllRefGenericFromReader(reader));
            }
            return refGeneric;
        }
        protected virtual DrugClass GetAllRefGenericFromReader(IDataReader reader)
        {
            var p = new DrugClass();
            if (reader.HasColumn("DrugClassID"))
            {
                p.DrugClassID = (long)reader["DrugClassID"];
            }
            if (reader.HasColumn("FaName"))
            {
                p.FaName = reader["FaName"].ToString();
            }
            if (reader.HasColumn("DrugClassCode"))
            {
                p.DrugClassCode = reader["DrugClassCode"].ToString();
            }
            return p;
        }
        /*▲====: #041*/
        protected virtual List<RefGeneric> GetParRefGenericCollectionFromReader(IDataReader reader)
        {
            var refGeneric = new List<RefGeneric>();
            while (reader.Read())
            {
                refGeneric.Add(GetParRefGenericFromReader(reader));
            }
            return refGeneric;
        }
        protected virtual RefGeneric GetParRefGenericFromReader(IDataReader reader)
        {
            var p = new RefGeneric();
            if (reader.HasColumn("GenericID"))
            {
                p.GenericID = (long)reader["GenericID"];
            }
            if (reader.HasColumn("GenericName"))
            {
                p.GenericName = reader["GenericName"].ToString();
            }
            if (reader.HasColumn("GenericCode"))
            {
                p.GenericName = reader["GenericCode"].ToString();
            }
            return p;
        }
        protected virtual List<TherapyTree> GetAllRefGenericRelationCollectionFromReader(IDataReader reader)
        {
            var refGenericRelation = new List<TherapyTree>();
            while (reader.Read())
            {
                refGenericRelation.Add(GetAllRefGenericRelationFromReader(reader));
            }
            return refGenericRelation;
        }
        protected virtual TherapyTree GetAllRefGenericRelationFromReader(IDataReader reader)
        {
            var p = new TherapyTree();
            if (reader.HasColumn("GenericID") && reader["GenericID"] != DBNull.Value)
            {
                p.NodeID = (long)reader["GenericID"];
            }
            if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
            {
                p.NodeText = reader["GenericName"].ToString();
            }
            if (reader.HasColumn("IsSimilar") && reader["IsSimilar"] != DBNull.Value)
            {
                p.IsSimilar = (bool)reader["IsSimilar"];
            }
            if (reader.HasColumn("IsInteraction") && reader["IsInteraction"] != DBNull.Value)
            {
                p.IsInteraction = (bool)reader["IsInteraction"];
            }
            p.V_InteractionWarningLevel = new Lookup();
            if (reader.HasColumn("V_InteractionWarningLevelID") && reader["V_InteractionWarningLevelID"] != DBNull.Value)
            {
                p.V_InteractionWarningLevel.LookupID = (long)reader["V_InteractionWarningLevelID"];
            }
            if (reader.HasColumn("V_InteractionWarningLevelValue") && reader["V_InteractionWarningLevelValue"] != DBNull.Value)
            {
                p.V_InteractionWarningLevel.ObjectValue = reader["V_InteractionWarningLevelValue"].ToString();
            }
            p.V_InteractionSeverityLevel = new Lookup();
            if (reader.HasColumn("V_InteractionSeverityLevelID") && reader["V_InteractionSeverityLevelID"] != DBNull.Value)
            {
                p.V_InteractionSeverityLevel.LookupID = (long)reader["V_InteractionSeverityLevelID"];
            }
            if (reader.HasColumn("V_InteractionSeverityLevelValue") && reader["V_InteractionSeverityLevelValue"] != DBNull.Value)
            {
                p.V_InteractionSeverityLevel.ObjectValue = reader["V_InteractionSeverityLevelValue"].ToString();
            }
            return p;
        }
        protected virtual SupplierGenericDrug GetSupplierGenericDrugFromReader(IDataReader reader)
        {
            var p = new SupplierGenericDrug
            {
                SupGenDrugID = (long)reader["SupGenDrugID"],
                SupplierID = (long)reader["SupplierID"],
                SelectedSupplier = GetSupplierFromReader(reader),
                DrugID = (long)reader["DrugID"]
            };
            try
            {
                p.SelectedGenericDrug = GetRefDrugGenericDetailFromReader(reader);
            }
            catch
            { }

            p.RecDateCreated = (DateTime)reader["RecDateCreated"];
            if (reader.HasColumn("IsMain"))
            {
                p.IsMain = (bool)reader["IsMain"];
            }
            if (reader.HasColumn("UnitPrice"))
            {
                p.UnitPrice = Convert.ToDecimal(reader["UnitPrice"]);
            }
            if (reader.HasColumn("PackagePrice"))
            {
                p.PackagePrice = Convert.ToDecimal(reader["PackagePrice"]);
            }
            if (reader.HasColumn("VAT"))
            {
                p.VAT = Convert.ToDouble(reader["VAT"]);
            }
            return p;
        }

        protected virtual SupplierGenericDrug GetSupplierGenericDrugFromReader_New(IDataReader reader)
        {
            var p = new SupplierGenericDrug
            {
                SupGenDrugID = (long)reader["SupGenDrugID"],
                SupplierID = (long)reader["SupplierID"],
                SelectedSupplier = GetSupplierFromReader(reader),
                DrugID = (long)reader["DrugID"]
            };
            try
            {
                p.SelectedGenericDrug = GetRefDrugGenericDetailFromReader(reader);
            }
            catch
            { }

            p.RecDateCreated = (DateTime)reader["RecDateCreated"];
            if (reader.HasColumn("IsMain"))
            {
                p.IsMain = (bool)reader["IsMain"];
            }
            if (reader.HasColumn("UnitPrice"))
            {
                p.UnitPrice = Convert.ToDecimal(reader["UnitPrice"]);
            }
            if (reader.HasColumn("PackagePrice"))
            {
                p.PackagePrice = Convert.ToDecimal(reader["PackagePrice"]);
            }
            if (reader.HasColumn("VAT"))
            {
                p.VAT = Convert.ToDouble(reader["VAT"]);
            }
            return p;
        }

        protected virtual List<SupplierGenericDrug> GetSupplierGenericDrugCollectionFromReader(IDataReader reader)
        {
            var suppliers = new List<SupplierGenericDrug>();
            while (reader.Read())
            {
                suppliers.Add(GetSupplierGenericDrugFromReader(reader));
            }
            return suppliers;
        }

        protected virtual List<SupplierGenericDrug> GetSupplierGenericDrugCollectionFromReader_New(IDataReader reader)
        {
            var suppliers = new List<SupplierGenericDrug>();
            while (reader.Read())
            {
                suppliers.Add(GetSupplierGenericDrugFromReader_New(reader));
            }
            return suppliers;
        }

        protected virtual RefStorageWarehouseType GetRefStorageWarehouseTypeFromReader(IDataReader reader)
        {
            var p = new RefStorageWarehouseType
            {
                StoreTypeID = (long)reader["StoreTypeID"],
                StoreTypeName = reader["StoreTypeName"].ToString(),
                StoreTypeDescription = reader["StoreTypeDescription"].ToString()
            };
            return p;
        }
        protected virtual List<RefStorageWarehouseType> GetRefStorageWarehouseTypeCollectionFromReader(IDataReader reader)
        {
            var storages = new List<RefStorageWarehouseType>();
            while (reader.Read())
            {
                storages.Add(GetRefStorageWarehouseTypeFromReader(reader));
            }
            return storages;
        }


        protected virtual RefStorageWarehouseLocation GetStorageFromReader(IDataReader reader)
        {
            var p = new RefStorageWarehouseLocation
            {
                StoreID = (long)reader["StoreID"],
                swhlName = reader["swhlName"].ToString(),
                swhlNotes = reader["swhlNotes"].ToString(),
                swhlActive = (bool)reader["swhlActive"]
            };
            if (reader.HasColumn("StoreTypeID") && reader["StoreTypeID"] != DBNull.Value)
            {
                p.StoreTypeID = reader["StoreTypeID"] as long?;
                p.RefStorageWarehouseType = new RefStorageWarehouseType { StoreTypeID = (long)reader["StoreTypeID"] };
                if (reader.HasColumn("StoreTypeName"))
                {
                    p.RefStorageWarehouseType.StoreTypeName = reader["StoreTypeName"].ToString();
                }
            }
            if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
            {
                p.DeptID = reader["DeptID"] as long?;
                p.RefDepartment = new RefDepartment { DeptID = (long)reader["DeptID"] };
                if (reader.HasColumn("DeptName"))
                {
                    p.RefDepartment.DeptName = reader["DeptName"].ToString();
                }
            }
            if (reader.HasColumn("IsMain") && reader["IsMain"] != DBNull.Value)
            {
                p.IsMain = (Boolean)reader["IsMain"];
            }
            if (reader.HasColumn("IsMedicineStore") && reader["IsMedicineStore"] != DBNull.Value)
            {
                p.IsMedicineStore = (Boolean)reader["IsMedicineStore"];
            }
            if (reader.HasColumn("IsUtilStore") && reader["IsUtilStore"] != DBNull.Value)
            {
                p.IsUtilStore = (Boolean)reader["IsUtilStore"];
            }
            if (reader.HasColumn("IsChemicalStore") && reader["IsChemicalStore"] != DBNull.Value)
            {
                p.IsChemicalStore = (Boolean)reader["IsChemicalStore"];
            }
            if (reader.HasColumn("IsSubStorage") && reader["IsSubStorage"] != DBNull.Value)
            {
                p.IsSubStorage = Convert.ToBoolean(reader["IsSubStorage"]);
            }
            if (reader.HasColumn("ListV_MedProductType") && reader["ListV_MedProductType"] != DBNull.Value)
            {
                p.ListV_MedProductType = reader["ListV_MedProductType"].ToString();
            }
            if (reader.HasColumn("IsVATCreditStorage") && reader["IsVATCreditStorage"] != DBNull.Value)
            {
                p.IsVATCreditStorage = Convert.ToBoolean(reader["IsVATCreditStorage"]);
            }
            //--▼-- 28/12/2020 DatTB Convert biến trả về cho Client
            if (reader.HasColumn("V_GroupTypes") && reader["V_GroupTypes"] != DBNull.Value)
            {
                p.V_GroupTypes = (long)reader["V_GroupTypes"];
            }
            //--▲-- 28/12/2020 DatTB
            if (reader.HasColumn("SkipSendToFAST") && reader["SkipSendToFAST"] != DBNull.Value)
            {
                p.SkipSendToFAST = Convert.ToBoolean(reader["SkipSendToFAST"]);
            }
            if (reader.HasColumn("StoreCode") && reader["StoreCode"] != DBNull.Value)
            {
                p.StoreCode = reader["StoreCode"].ToString();
            }
            if (reader.HasColumn("IsConsignment") && reader["IsConsignment"] != DBNull.Value)
            {
                p.IsConsignment = Convert.ToBoolean(reader["IsConsignment"]);
            }
            if (reader.HasColumn("IsConsignmentReturn") && reader["IsConsignmentReturn"] != DBNull.Value)
            {
                p.IsConsignmentReturn = Convert.ToBoolean(reader["IsConsignmentReturn"]);
            }
            return p;
        }
        protected virtual List<RefStorageWarehouseLocation> GetStorageCollectionFromReader(IDataReader reader)
        {
            var storages = new List<RefStorageWarehouseLocation>();
            while (reader.Read())
            {
                storages.Add(GetStorageFromReader(reader));
            }
            return storages;
        }

        protected virtual RefGenDrugBHYT_Category GetRefGenDrugBHYT_CategoryFromReader(IDataReader reader)
        {
            var p = new RefGenDrugBHYT_Category { RefGenDrugBHYT_CatID = (long)reader["RefGenDrugBHYT_CatID"] };
            if (reader.HasColumn("CategoryName"))
            {
                p.CategoryName = reader["CategoryName"].ToString();
            }
            if (reader.HasColumn("CategoryDescription"))
            {
                p.CategoryDescription = reader["CategoryDescription"].ToString();
            }
            if (reader.HasColumn("DrugOrderNo") && reader["DrugOrderNo"] != DBNull.Value)
            {
                //p.DrugOrderNo = reader["DrugOrderNo"] as Int64?;
                p.DrugOrderNo = reader["DrugOrderNo"].ToString();
            }
            if (reader.HasColumn("IngredientOrderNo"))
            {
                p.IngredientOrderNo = reader["IngredientOrderNo"] as Int64?;
            }
            if (reader.HasColumn("GroupParentID") && reader["GroupParentID"] != DBNull.Value)
            {
                p.GroupParentID = Convert.ToInt64(reader["GroupParentID"]);
            }
            if (reader.HasColumn("GroupID") && reader["GroupID"] != DBNull.Value)
            {
                p.GroupID = Convert.ToInt64(reader["GroupID"]);
            }
            if (reader.HasColumn("IsCombined") && reader["IsCombined"] != DBNull.Value)
            {
                p.IsCombined = Convert.ToBoolean(reader["IsCombined"]);
            }
            return p;
        }
        protected virtual List<RefGenDrugBHYT_Category> GetRefGenDrugBHYT_CategoryCollectionFromReader(IDataReader reader)
        {
            var storages = new List<RefGenDrugBHYT_Category>();
            while (reader.Read())
            {
                storages.Add(GetRefGenDrugBHYT_CategoryFromReader(reader));
            }
            return storages;
        }

        protected virtual RefGenericDrugCategory_1 GetRefGenericDrugCategory_1FromReader(IDataReader reader)
        {
            var p = new RefGenericDrugCategory_1();
            p.RefGenDrugCatID_1 = (long)reader["RefGenDrugCatID_1"];
            if (reader.HasColumn("CategoryName"))
            {
                p.CategoryName = reader["CategoryName"].ToString();
            }
            if (reader.HasColumn("CategoryDescription"))
            {
                p.CategoryDescription = reader["CategoryDescription"].ToString();
            }
            if (reader.HasColumn("V_MedProductType"))
            {
                p.V_MedProductType = (long)reader["V_MedProductType"];
            }
            return p;
        }

        protected virtual List<RefGenericDrugCategory_1> GetRefGenericDrugCategory_1CollectionFromReader(IDataReader reader)
        {
            var storages = new List<RefGenericDrugCategory_1>();
            while (reader.Read())
            {
                storages.Add(GetRefGenericDrugCategory_1FromReader(reader));
            }
            return storages;
        }

        protected virtual RefGenericDrugCategory_2 GetRefGenericDrugCategory_2FromReader(IDataReader reader)
        {
            var p = new RefGenericDrugCategory_2();
            p.RefGenDrugCatID_2 = (long)reader["RefGenDrugCatID_2"];
            if (reader.HasColumn("CategoryName"))
            {
                p.CategoryName = reader["CategoryName"].ToString();
            }
            if (reader.HasColumn("CategoryDescription"))
            {
                p.CategoryDescription = reader["CategoryDescription"].ToString();
            }
            if (reader.HasColumn("V_MedProductType"))
            {
                p.V_MedProductType = (long)reader["V_MedProductType"];
            }
            return p;
        }
        protected virtual List<RefGenericDrugCategory_2> GetRefGenericDrugCategory_2CollectionFromReader(IDataReader reader)
        {
            var storages = new List<RefGenericDrugCategory_2>();
            while (reader.Read())
            {
                storages.Add(GetRefGenericDrugCategory_2FromReader(reader));
            }
            return storages;
        }

        protected virtual RefPharmacyDrugCategory GetRefPharmacyDrugCategoryFromReader(IDataReader reader)
        {
            var p = new RefPharmacyDrugCategory();
            if (reader.HasColumn("RefPharmacyDrugCatID") && reader["RefPharmacyDrugCatID"] != DBNull.Value)
            {
                p.RefPharmacyDrugCatID = Convert.ToInt64(reader["RefPharmacyDrugCatID"]);
            }
            if (reader.HasColumn("CategoryName") && reader["CategoryName"] != DBNull.Value)
            {
                p.CategoryName = reader["CategoryName"].ToString();
            }
            if (reader.HasColumn("CategoryDescription") && reader["CategoryDescription"] != DBNull.Value)
            {
                p.CategoryDescription = reader["CategoryDescription"].ToString();
            }
            return p;
        }
        protected virtual List<RefPharmacyDrugCategory> GetRefPharmacyDrugCategoryCollectionFromReader(IDataReader reader)
        {
            var storages = new List<RefPharmacyDrugCategory>();
            while (reader.Read())
            {
                storages.Add(GetRefPharmacyDrugCategoryFromReader(reader));
            }
            return storages;
        }

        protected virtual RefGenericDrugSimple GetRefGenericDrugSimpleFromReader(IDataReader reader)
        {
            var p = new RefGenericDrugSimple
            {
                DrugID = (long)reader["DrugID"],
                BrandName = reader["BrandName"].ToString(),
                DrugCode = reader["DrugCode"].ToString()
            };
            if (reader.HasColumn("UnitName"))
            {
                p.UnitName = reader["UnitName"].ToString();
            }
            if (reader.HasColumn("GenericName"))
            {
                p.GenericName = reader["GenericName"].ToString();
            }
            if (reader.HasColumn("Content"))
            {
                p.Content = reader["Content"].ToString();
            }
            return p;
        }

        protected virtual List<RefGenericDrugSimple> GetRefGenericDrugSimpleCollectionFromReader(IDataReader reader)
        {
            List<RefGenericDrugSimple> drugs = new List<RefGenericDrugSimple>();
            while (reader.Read())
            {
                drugs.Add(GetRefGenericDrugSimpleFromReader(reader));
            }
            return drugs;
        }

        protected virtual RefGenericDrugDetail GetRefDrugGenericDetailFromReader(IDataReader reader)
        {
            var p = new RefGenericDrugDetail();

            if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
            {
                p.DrugID = Convert.ToInt64(reader["DrugID"]);
            }
            if (reader.HasColumn("CountryID") && reader["CountryID"] != DBNull.Value)
            {
                p.CountryID = Convert.ToInt64(reader["CountryID"]);
            }
            if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
            {
                p.BrandName = reader["BrandName"].ToString();
            }
            if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
            {
                p.GenericName = reader["GenericName"].ToString();
            }
            if (reader.HasColumn("Content") && reader["Content"] != DBNull.Value)
            {
                p.Content = reader["Content"].ToString();
            }
            if (reader.HasColumn("Composition") && reader["Composition"] != DBNull.Value)
            {
                p.Composition = reader["Composition"].ToString();
            }
            if (reader.HasColumn("Contraindication") && reader["Contraindication"] != DBNull.Value)
            {
                p.Contraindication = reader["Contraindication"].ToString();
            }
            if (reader.HasColumn("InsuranceCover") && reader["InsuranceCover"] != DBNull.Value)
            {
                p.InsuranceCover = Convert.ToBoolean(reader["InsuranceCover"]);
            }
            if (reader.HasColumn("IsConsult") && reader["IsConsult"] != DBNull.Value)
            {
                p.IsConsult = Convert.ToBoolean(reader["IsConsult"]);
            }
            if (reader.HasColumn("DIsActive") && reader["DIsActive"] != DBNull.Value)
            {
                p.DIsActive = Convert.ToBoolean(reader["DIsActive"]);
            }
            if (reader.HasColumn("IsNotShow") && reader["IsNotShow"] != DBNull.Value)
            {
                p.IsNotShow = Convert.ToBoolean(reader["IsNotShow"]);
            }

            if (reader.HasColumn("Dosage") && reader["Dosage"] != DBNull.Value)
            {
                p.Dosage = reader["Dosage"].ToString();
            }

            if (reader.HasColumn("Administration") && reader["Administration"] != DBNull.Value)
            {
                p.Administration = reader["Administration"].ToString();
            }
            if (reader.HasColumn("Indication") && reader["Indication"] != DBNull.Value)
            {
                p.Indication = reader["Indication"].ToString();
            }
            if (reader.HasColumn("Interaction") && reader["Interaction"] != DBNull.Value)
            {
                p.Interaction = reader["Interaction"].ToString();
            }
            if (reader.HasColumn("ActiveIngredient") && reader["ActiveIngredient"] != DBNull.Value)
            {
                p.ActiveIngredient = reader["ActiveIngredient"].ToString();
            }

            if (reader.HasColumn("Dosage") && reader["Dosage"] != DBNull.Value)
            {
                p.Dosage = reader["Dosage"].ToString();
            }

            if (reader.HasColumn("AdvTimeBeforeExpire") && reader["AdvTimeBeforeExpire"] != DBNull.Value)
            {
                p.AdvTimeBeforeExpire = Convert.ToInt16(reader["AdvTimeBeforeExpire"]);
            }

            if (reader.HasColumn("OutNotes") && reader["OutNotes"] != DBNull.Value)
            {
                p.OutNotes = reader["OutNotes"].ToString();
            }
            //▼===== #024
            if (reader.HasColumn("V_CatDrugType") && reader["V_CatDrugType"] != DBNull.Value)
            {
                p.V_CatDrugType = reader["V_CatDrugType"] as long?;

                p.CatDrugType = new Lookup();
                p.CatDrugType.LookupID = Convert.ToInt64(reader["V_CatDrugType"]);
                if (reader.HasColumn("CatDrugType") && reader["CatDrugType"] != DBNull.Value)
                {
                    p.CatDrugType.ObjectValue = reader["CatDrugType"].ToString();
                }
            }
            //▲===== #024
            if (reader.HasColumn("PCOID"))
            {
                p.PCOID = reader["PCOID"] as long?;
                try
                {
                    p.PharmaceuticalCompany = GetPharmaceuticalCompanyFromReader(reader);
                }
                catch { }
            }

            if (reader.HasColumn("Precaution_Warn") && reader["Precaution_Warn"] != DBNull.Value)
            {
                p.Precaution_Warn = reader["Precaution_Warn"].ToString();
            }

            if (reader.HasColumn("HIDrugCode5084") && reader["HIDrugCode5084"] != DBNull.Value)
            {
                p.HIDrugCode5084 = reader["HIDrugCode5084"].ToString();
            }

            if (reader.HasColumn("WinningHospitals") && reader["WinningHospitals"] != DBNull.Value)
            {
                p.WinningHospitals = reader["WinningHospitals"].ToString();
            }

            if (reader.HasColumn("MonitorOutQty") && reader["MonitorOutQty"] != DBNull.Value)
            {
                p.MonitorOutQty = (bool)reader["MonitorOutQty"];
            }
            if (reader.HasColumn("LimitedOutQty") && reader["LimitedOutQty"] != DBNull.Value)
            {
                p.LimitedOutQty = Convert.ToInt32(reader["LimitedOutQty"]);
            }
            if (reader.HasColumn("RemainWarningLevel1") && reader["RemainWarningLevel1"] != DBNull.Value)
            {
                p.RemainWarningLevel1 = Convert.ToInt32(reader["RemainWarningLevel1"]);
            }
            if (reader.HasColumn("RemainWarningLevel2") && reader["RemainWarningLevel2"] != DBNull.Value)
            {
                p.RemainWarningLevel2 = Convert.ToInt32(reader["RemainWarningLevel2"]);
            }

            if (reader.HasColumn("IsWarningHI") && reader["IsWarningHI"] != DBNull.Value)
            {
                p.IsWarningHI = (bool)reader["IsWarningHI"];
            }

            if (reader.HasColumn("DrugDescription") && reader["DrugDescription"] != DBNull.Value)
            {
                p.SdlDescription = reader["DrugDescription"].ToString();
            }
            if (reader.HasColumn("SideEffects") && reader["SideEffects"] != DBNull.Value)
            {
                p.SideEffects = reader["SideEffects"].ToString();
            }
            p.SeletedUnit = new RefUnit();
            if (reader.HasColumn("UnitID"))
            {
                p.UnitID = reader["UnitID"] as long?;
                if (reader["UnitID"] != DBNull.Value)
                {
                    p.SeletedUnit = GetUnitFromReader(reader);
                }
            }
            try
            {
                if (reader.HasColumn("UnitUseID"))
                {
                    p.UnitUseID = reader["UnitUseID"] as long?;
                    p.SeletedUnitUse = new RefUnit();
                    if (reader["UnitUseID"] != DBNull.Value)
                    {
                        p.SeletedUnitUse.UnitID = (long)reader["UnitUseID"];
                        p.SeletedUnitUse.UnitName = reader["UnitUse"].ToString();
                    }
                }
            }
            catch { }
            if (reader.HasColumn("Packaging"))
            {
                p.Packaging = reader["Packaging"].ToString();
            }
            if (reader.HasColumn("Visa"))
            {
                p.Visa = reader["Visa"].ToString();
            }

            p.SeletedCountry = new RefCountry();
            if (reader.HasColumn("CountryID") && reader["CountryID"] != DBNull.Value)
            {
                p.SeletedCountry = GetCountryFromReader(reader);
            }
            p.SeletedDrugClass = new DrugClass();
            if (reader.HasColumn("DrugClassID") && reader["DrugClassID"] != DBNull.Value)
            {
                p.DrugClassID = reader["DrugClassID"] as long?;
                p.SeletedDrugClass.DrugClassID = (long)reader["DrugClassID"];
                if (reader.HasColumn("DrugClassCode"))
                {
                    p.SeletedDrugClass.DrugClassCode = reader["DrugClassCode"].ToString();
                }
                if (reader.HasColumn("FaName"))
                {
                    p.SeletedDrugClass.FaName = reader["FaName"].ToString();
                }
            }

            if (reader.HasColumn("DrugCode"))
            {
                p.DrugCode = reader["DrugCode"].ToString();
            }
            if (reader.HasColumn("HIDrugCode"))
            {
                p.HIDrugCode = reader["HIDrugCode"].ToString();
            }
            if (reader.HasColumn("UnitPackaging"))
            {
                p.UnitPackaging = reader["UnitPackaging"] as int?;
            }
            if (reader.HasColumn("NumberOfEstimatedMonths") && reader["NumberOfEstimatedMonths"] != DBNull.Value)
            {
                p.NumberOfEstimatedMonths_F = Convert.ToDouble(reader["NumberOfEstimatedMonths"]);
            }
            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.SupplierMain = new Supplier { SupplierID = (long)reader["SupplierID"] };
                if (reader.HasColumn("SupplierName"))
                {
                    p.SupplierMain.SupplierName = reader["SupplierName"].ToString();
                }
            }
            //gia ban
            if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
            {
                p.NormalPrice = Convert.ToDecimal(reader["NormalPrice"]);
            }
            if (reader.HasColumn("PriceForHIPatient") && reader["PriceForHIPatient"] != DBNull.Value)
            {
                p.PriceForHIPatient = Convert.ToDecimal(reader["PriceForHIPatient"]);
            }
            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = Convert.ToDecimal(reader["HIAllowedPrice"]);
            }
            if (reader.HasColumn("FactorSafety") && reader["FactorSafety"] != DBNull.Value)
            {
                p.FactorSafety = (int)reader["FactorSafety"];
            }
            if (reader.HasColumn("InBuyingPrice") && reader["InBuyingPrice"] != DBNull.Value)
            {
                p.InBuyingPrice = Convert.ToDecimal(reader["InBuyingPrice"]);
            }
            if (reader.HasColumn("ActiveIngredientCode"))
            {
                p.ActiveIngredientCode = reader["ActiveIngredientCode"].ToString();
            }

            if (reader.HasColumn("ProductCodeRefNum"))
            {
                p.ProductCodeRefNum = reader["ProductCodeRefNum"].ToString();
            }

            if (reader.HasColumn("KeepRefrigerated"))
            {
                p.KeepRefrigerated = reader["KeepRefrigerated"] as bool?;
            }

            if (reader.HasColumn("HosID") && reader["HosID"] != DBNull.Value)
            {
                p.HosID = reader["HosID"] as long?;
                p.CurrentHospital = GetHospitalFromReader(reader);
            }

            if (reader.HasColumn("RefGenDrugBHYT_CatID") && reader["RefGenDrugBHYT_CatID"] != DBNull.Value)
            {
                p.RefGenDrugBHYT_CatID = reader["RefGenDrugBHYT_CatID"] as long?;
                p.CurrentRefGenDrugBHYT_Category = GetRefGenDrugBHYT_CategoryFromReader(reader);

            }

            if (reader.HasColumn("RefGenDrugCatID_1"))
            {
                p.RefGenDrugCatID_1 = reader["RefGenDrugCatID_1"] as long?;
            }

            if (reader.HasColumn("DispenseVolume") && reader["DispenseVolume"] != DBNull.Value)
            {
                p.DispenseVolume = Convert.ToDouble(reader["DispenseVolume"]);
                if (p.DispenseVolume == 0.0)
                {
                    //bbd Dinh comment ngày 02/10/2013 vì hiển thị trong danh mục bị sai
                    //p.DispenseVolume = 1;
                }
            }

            if (reader.HasColumn("MaxDayPrescribed") && reader["MaxDayPrescribed"] != DBNull.Value)
            {
                p.MaxDayPrescribed = Convert.ToInt16(reader["MaxDayPrescribed"]);
            }

            if (reader.HasColumn("V_RouteOfAdministration") && reader["V_RouteOfAdministration"] != DBNull.Value)
            {
                p.RouteOfAdministration = new Lookup();
                p.RouteOfAdministration.LookupID = Convert.ToInt64(reader["V_RouteOfAdministration"]);

                if (reader.HasColumn("RouteOfAdministrationValue") && reader["RouteOfAdministrationValue"] != DBNull.Value)
                {
                    p.RouteOfAdministration.ObjectValue = reader["RouteOfAdministrationValue"].ToString();
                }
            }

            if (reader.HasColumn("DosageForm") && reader["DosageForm"] != DBNull.Value)
            {
                p.DosageForm = reader["DosageForm"].ToString();
            }

            if (reader.HasColumn("DrugForm") && reader["DrugForm"] != DBNull.Value)
            {
                p.DrugForm = reader["DrugForm"].ToString();
            }

            if (reader.HasColumn("V_VENType") && reader["V_VENType"] != DBNull.Value)
            {
                p.V_VENType = Convert.ToInt64(reader["V_VENType"]);
            }

            if (reader.HasColumn("BiddingHospital") && reader["BiddingHospital"] != DBNull.Value)
            {
                p.BiddingHospital = reader["BiddingHospital"].ToString();
            }

            if (reader.HasColumn("ReportBrandName") && reader["ReportBrandName"] != DBNull.Value)
            {
                p.ReportBrandName = reader["ReportBrandName"].ToString();
            }

            if (reader.HasColumn("BidDecisionNumAndOrdinalNum") && reader["BidDecisionNumAndOrdinalNum"] != DBNull.Value)
            {
                p.BidDecisionNumAndOrdinalNum = reader["BidDecisionNumAndOrdinalNum"].ToString();
            }

            if (reader.HasColumn("BidEffectiveDate") && reader["BidEffectiveDate"] != DBNull.Value)
            {
                p.BidEffectiveDate = reader["BidEffectiveDate"].ToString();
            }

            if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
            {
                p.Note = reader["Note"].ToString();
            }

            if (reader.HasColumn("TCKTAndTCCNGroup") && reader["TCKTAndTCCNGroup"] != DBNull.Value)
            {
                p.TCKTAndTCCNGroup = reader["TCKTAndTCCNGroup"].ToString();
            }

            if (reader.HasColumn("V_GroupTypeForReport20") && reader["V_GroupTypeForReport20"] != DBNull.Value)
            {
                p.V_GroupTypeForReport20 = Convert.ToInt64(reader["V_GroupTypeForReport20"]);
            }

            if (reader.HasColumn("RefPharmacyDrugCatID") && reader["RefPharmacyDrugCatID"] != DBNull.Value)
            {
                p.RefPharmacyDrugCatID = Convert.ToInt64(reader["RefPharmacyDrugCatID"]);
            }

            if (reader.HasColumn("TLThanhToan") && reader["TLThanhToan"] != DBNull.Value)
            {
                p.TLThanhToan = Convert.ToDecimal(reader["TLThanhToan"]);
            }

            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                p.MatchRefGenMedProduct = new RefGenMedProductSimple();

                p.MatchRefGenMedProduct.GenMedProductID = Convert.ToInt64(reader["GenMedProductID"]);

                if (reader.HasColumn("MedDeptCode") && reader["MedDeptCode"] != DBNull.Value)
                {
                    p.MatchRefGenMedProduct.Code = reader["MedDeptCode"].ToString();
                }

                if (reader.HasColumn("MedDeptBrandName") && reader["MedDeptBrandName"] != DBNull.Value)
                {
                    p.MatchRefGenMedProduct.BrandName = reader["MedDeptBrandName"].ToString();
                }
            }


            //dung cho sua gia nha thuoc

            try
            {
                if (reader.HasColumn("PharmacySellingItemPriceID"))
                {
                    p.ObjPharmacySellingItemPrices = new PharmacySellingItemPrices();
                    if (reader["PharmacySellingItemPriceID"] != DBNull.Value)
                    {
                        p.ObjPharmacySellingItemPrices.PharmacySellingItemPriceID = (long)reader["PharmacySellingItemPriceID"];
                    }
                    if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
                    {
                        p.ObjPharmacySellingItemPrices.NormalPrice = Convert.ToDecimal(reader["NormalPrice"]);
                    }
                    if (reader.HasColumn("PriceForHIPatient") && reader["PriceForHIPatient"] != DBNull.Value)
                    {
                        p.ObjPharmacySellingItemPrices.PriceForHIPatient = Convert.ToDecimal(reader["PriceForHIPatient"]);
                    }
                    if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
                    {
                        p.ObjPharmacySellingItemPrices.HIAllowedPrice = Convert.ToDecimal(reader["HIAllowedPrice"]);
                    }
                    if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
                    {
                        p.ObjPharmacySellingItemPrices.InCost = Convert.ToDecimal(reader["InCost"]);
                    }
                    if (reader.HasColumn("InCostBefore") && reader["InCostBefore"] != DBNull.Value)
                    {
                        p.ObjPharmacySellingItemPrices.InCostBefore = Convert.ToDecimal(reader["InCostBefore"]);
                    }
                }
            }
            catch { }
            /*▼====: #008*/
            if (reader.HasColumn("BidID") && reader["BidID"] != DBNull.Value)
            {
                p.BidID = (long)reader["BidID"];
            }
            if (reader.HasColumn("BidName") && reader["BidName"] != DBNull.Value)
            {
                p.BidName = reader["BidName"].ToString();
            }
            /*▲====: #008*/
            if (reader.HasColumn("BidCode") && reader["BidCode"] != DBNull.Value)
            {
                p.BidCode = reader["BidCode"].ToString();
            }
            if (reader.HasColumn("V_ProductScope") && reader["V_ProductScope"] != DBNull.Value)
            {
                p.V_ProductScope = (long)reader["V_ProductScope"];
            }
            if (reader.HasColumn("HITTypeID") && reader["HITTypeID"] != DBNull.Value)
            {
                p.HITTypeID = (long)reader["HITTypeID"];
            }
            if (reader.HasColumn("GenericID") && reader["GenericID"] != DBNull.Value)
            {
                p.SelectedGeneric = new DrugClass();
                p.SelectedGeneric.DrugClassID = Convert.ToInt64(reader["GenericID"]);

                if (reader.HasColumn("RefGenericName") && reader["RefGenericName"] != DBNull.Value)
                {
                    p.SelectedGeneric.FaName = reader["RefGenericName"].ToString();
                }
            }
            //▼====== #054
            if (reader.HasColumn("RefGeneralReportCode") && reader["RefGeneralReportCode"] != DBNull.Value)
            {
                p.RefGeneralReportCode = reader["RefGeneralReportCode"].ToString();
            }
            if (reader.HasColumn("RefGeneralReportName") && reader["RefGeneralReportName"] != DBNull.Value)
            {
                p.RefGeneralReportName = reader["RefGeneralReportName"].ToString();
            }
            if (reader.HasColumn("RefGeneralReportContent") && reader["RefGeneralReportContent"] != DBNull.Value)
            {
                p.RefGeneralReportContent = reader["RefGeneralReportContent"].ToString();
            }
            //▲====== #054
            if (reader.HasColumn("SellingPriceVATDef") && reader["SellingPriceVATDef"] != DBNull.Value)
            {
                p.SellingPriceVATDef = Convert.ToInt16(reader["SellingPriceVATDef"]);
            }
            //▼===== 20191110 TTM: Dùng VATForInward thay vì VAT bởi vì hàm này được gọi từ hàm khác. Và trong hàm 
            //                     khác đó đã có VAT rồi nên nếu để VAT thì giá trị của VAT trong này sẽ sai. Do nhận giá trị khác.

            if (reader.HasColumn("IsNotVat") && reader["IsNotVat"] != DBNull.Value)
            {
                p.IsNotVat = Convert.ToBoolean(reader["IsNotVat"]);
            }
            if (reader.HasColumn("VATForInward") && reader["VATForInward"] != DBNull.Value)
            {
                p.VAT = Convert.ToDecimal(reader["VATForInward"]);
            }
            else
            {
                p.VAT = null;
            }
            //▲=====
            return p;
        }
        protected virtual List<RefGenericDrugDetail> GetRefDrugGenericCollectionFromReader(IDataReader reader)
        {
            List<RefGenericDrugDetail> drugs = new List<RefGenericDrugDetail>();
            while (reader.Read())
            {
                drugs.Add(GetRefDrugGenericDetailFromReader(reader));
            }
            return drugs;
        }

        protected virtual InwardDrug GetspInwardDrugFromReader(IDataReader reader)
        {
            InwardDrug p = new InwardDrug();
            p.DrugID = reader["DrugID"] as long?;
            p.InBatchNumber = reader["InBatchNumber"].ToString();
            p.InBuyingPrice = (decimal)reader["InBuyingPrice"];
            p.InExpiryDate = reader["InExpiryDate"] as DateTime?;
            p.InID = (long)reader["InID"];
            p.InProductionDate = reader["InProductionDate"] as DateTime?;
            p.InQuantity = Convert.ToDouble(reader["InQuantity"]);
            p.inviID = (long)reader["inviID"];
            p.Remaining = Convert.ToDouble(reader["Remaining"]);
            if (reader.HasColumn("IsLoad") && reader["IsLoad"] != DBNull.Value)
            {
                p.IsLoad = Convert.ToInt16(reader["IsLoad"]);
            }
            p.IsPercentage = reader["IsPercentage"] as bool?;
            p.SdlID = reader["SdlID"] as long?;
            //p.TotalPriceNotVAT = Convert.ToDecimal(reader["InQuantity"]) * (decimal)reader["InBuyingPrice"]; 
            if (reader.HasColumn("TotalPrice") && reader["TotalPrice"] != DBNull.Value)
            {
                p.TotalPriceNotVAT = (decimal)reader["TotalPrice"];
            }
            p.SelectedShelfDrugLocation = new RefShelfDrugLocation();
            if (reader.HasColumn("SdlID") && reader["SdlID"] != DBNull.Value)
            {
                p.SelectedShelfDrugLocation.SdlID = (long)reader["SdlID"];
                if (reader.HasColumn("SdlDescription"))
                {
                    p.SelectedShelfDrugLocation.SdlDescription = reader["SdlDescription"].ToString();
                    p.SdlDescription = reader["SdlDescription"].ToString();
                }
            }
            p.SelectedDrug = new RefGenericDrugDetail();
            if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
            {
                p.SelectedDrug = GetRefGenericDrugForShowFromReader(reader);
            }
            p.SelectedStaffInput = new Staff();
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.SelectedStaffInput.StaffID = (long)reader["StaffID"];
                if (reader.HasColumn("FullName"))
                {
                    p.SelectedStaffInput.FullName = reader["FullName"].ToString();
                }
            }
            if (reader.HasColumn("swhlName"))
            {
                p.swhlName = reader["swhlName"].ToString();
            }
            if (reader.HasColumn("PharmacyPoDetailID"))
            {
                p.PharmacyPoDetailID = reader["PharmacyPoDetailID"] as long?;
            }
            if (reader.HasColumn("PharmacyPoID"))
            {
                p.PharmacyPoID = reader["PharmacyPoID"] as long?;
            }
            if (reader.HasColumn("PONumber"))
            {
                p.PONumber = reader["PONumber"].ToString();
            }
            if (reader.HasColumn("V_GoodsType") && reader["V_GoodsType"] != DBNull.Value)
            {
                p.V_GoodsType = (long)reader["V_GoodsType"];
            }
            if (reader.HasColumn("GoodsTypeName"))
            {
                p.GoodsTypeName = reader["GoodsTypeName"].ToString();
            }
            if (reader.HasColumn("IsPercent") && reader["IsPercent"] != DBNull.Value)
            {
                p.IsPercent = (bool)reader["IsPercent"];
            }
            if (reader.HasColumn("DiscountByPercent") && reader["DiscountByPercent"] != DBNull.Value)
            {
                p.DiscountingByPercent = Convert.ToDecimal(reader["DiscountByPercent"]);
            }
            if (reader.HasColumn("Discounting") && reader["Discounting"] != DBNull.Value)
            {
                p.Discounting = Convert.ToDecimal(reader["Discounting"]);
            }
            if (reader.HasColumn("IsPercent") && reader["IsPercent"] != DBNull.Value)
            {
                p.IsPercent = (bool)reader["IsPercent"];
            }
            if (reader.HasColumn("NoPrint"))
            {
                p.NoPrint = reader["NoPrint"] as bool?;
            }
            if (reader.HasColumn("IsUnitPackage"))
            {
                p.IsUnitPackage = reader["IsUnitPackage"] as bool?;
            }

            if (reader.HasColumn("PackageQuantity") && reader["PackageQuantity"] != DBNull.Value)
            {
                p.PackageQuantity = Convert.ToDouble(reader["PackageQuantity"]);
            }

            if (reader.HasColumn("PackagePrice") && reader["PackagePrice"] != DBNull.Value)
            {
                p.PackagePrice = Convert.ToDecimal(reader["PackagePrice"]);
            }

            if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
            {
                p.InBuyingPriceActual = (decimal)reader["InCost"];
            }

            if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
            {
                p.NormalPrice = (decimal)reader["NormalPrice"];
            }
            if (reader.HasColumn("HIPatientPrice") && reader["HIPatientPrice"] != DBNull.Value)
            {
                p.HIPatientPrice = (decimal)reader["HIPatientPrice"];
            }
            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = (decimal)reader["HIAllowedPrice"];
            }
            if (reader.HasColumn("DrugVersionID") && reader["DrugVersionID"] != DBNull.Value)
            {
                p.DrugVersionID = Convert.ToInt64(reader["DrugVersionID"]);
            }
            if (reader.HasColumn("RefGeneralReportCode") && reader["RefGeneralReportCode"] != DBNull.Value && p.SelectedDrug != null)
            {
                p.SelectedDrug.RefGeneralReportCode = reader["RefGeneralReportCode"].ToString();
            }
            if (reader.HasColumn("RefGeneralReportName") && reader["RefGeneralReportName"] != DBNull.Value && p.SelectedDrug != null)
            {
                p.SelectedDrug.RefGeneralReportName = reader["RefGeneralReportName"].ToString();
            }
            if (reader.HasColumn("SellingPriceVATDef") && reader["SellingPriceVATDef"] != DBNull.Value)
            {
                p.SellingPriceVATDef = Convert.ToInt16(reader["SellingPriceVATDef"]);
            }
            if (reader.HasColumn("IsNotVat") && reader["IsNotVat"] != DBNull.Value)
            {
                p.IsNotVat = Convert.ToBoolean(reader["IsNotVat"]);
            }

            if (reader.HasColumn("VATForInward") && reader["VATForInward"] != DBNull.Value)
            {
                p.VAT = Convert.ToDecimal(reader["VATForInward"]);
            }
            else
            {
                p.VAT = null;
            }
            if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
            {
                p.InCost = Convert.ToInt64(reader["InCost"]);
            }
            return p;
        }
        protected virtual List<InwardDrug> GetspInwardDrugCollectionFromReader(IDataReader reader)
        {
            var inwardDrugs = new List<InwardDrug>();
            while (reader.Read())
            {
                inwardDrugs.Add(GetspInwardDrugFromReader(reader));
            }
            return inwardDrugs;
        }

        protected virtual InwardDrug GetspInwardDrugThongKeFromReader(IDataReader reader)
        {
            var p = new InwardDrug { DrugID = reader["DrugID"] as long? };
            if (reader.HasColumn("InBatchNumber"))
            {
                p.InBatchNumber = reader["InBatchNumber"].ToString();
            }
            if (reader.HasColumn("InBuyingPrice"))
            {
                p.InBuyingPrice = (decimal)reader["InBuyingPrice"];
            }
            if (reader.HasColumn("NormalPrice"))
            {
                p.NormalPrice = (decimal)reader["NormalPrice"];
            }
            if (reader.HasColumn("HIPatientPrice"))
            {
                p.HIPatientPrice = (decimal)reader["HIPatientPrice"];
            }
            if (reader.HasColumn("HIAllowedPrice"))
            {
                p.HIAllowedPrice = reader["HIAllowedPrice"] as decimal?;
            }
            if (reader.HasColumn("InExpiryDate"))
            {
                p.InExpiryDate = reader["InExpiryDate"] as DateTime?;
            }
            if (reader.HasColumn("InID"))
            {
                p.InID = (long)reader["InID"];
            }

            if (reader.HasColumn("InProductionDate"))
            {
                p.InProductionDate = reader["InProductionDate"] as DateTime?;
            }
            if (reader.HasColumn("Remaining"))
            {
                p.Remaining = Convert.ToDouble(reader["Remaining"]);
            }
            if (reader.HasColumn("Location"))
            {
                p.SdlDescription = reader["Location"].ToString();
            }
            p.SelectedDrug = new RefGenericDrugDetail();
            if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
            {
                p.SelectedDrug = GetRefGenericDrugForShowFromReader(reader);
            }
            return p;
        }

        protected virtual List<InwardDrug> GetspInwardDrugThongKeCollectionFromReader(IDataReader reader)
        {
            var inwardDrugs = new List<InwardDrug>();
            while (reader.Read())
            {
                inwardDrugs.Add(GetspInwardDrugThongKeFromReader(reader));
            }
            return inwardDrugs;
        }
        protected virtual InwardDrugInvoice GetspInwardDrugInvoiceFromReader(IDataReader reader)
        {
            var p = new InwardDrugInvoice
            {
                inviID = (long)reader["inviID"],
                InvID = reader["InvID"].ToString(),
                InvInvoiceNumber = reader["InvInvoiceNumber"].ToString(),
                InvDateInvoice = (DateTime)reader["InvDateInvoice"]
            };
            if (reader.HasColumn("DifferenceValue"))
            {
                p.DifferenceValue = Convert.ToDecimal(reader["DifferenceValue"]);
            }
            if (reader.HasColumn("StaffID"))
            {
                p.StaffID = reader["StaffID"] as Int64?;
            }
            if (reader.HasColumn("SupplierID"))
            {
                p.SupplierID = reader["SupplierID"] as long?;
            }
            if (reader.HasColumn("TempRequireUpdate") && reader["TempRequireUpdate"] != DBNull.Value)
            {
                p.TempRequireUpdate = (bool)reader["TempRequireUpdate"];
            }
            if (reader.HasColumn("DSPTModifiedDate") && reader["DSPTModifiedDate"] != DBNull.Value)
            {
                p.DSPTModifiedDate = (DateTime)reader["DSPTModifiedDate"];
            }

            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.VAT = Convert.ToDecimal(reader["VAT"]);
            }

            if (reader.HasColumn("CurrencyID") && reader["CurrencyID"] != DBNull.Value)
            {
                p.CurrencyID = (long)reader["CurrencyID"];
                p.SelectedCurrency = new Currency { CurrencyID = (long)reader["CurrencyID"] };
            }
            if (reader.HasColumn("ExchangeRates") && reader["ExchangeRates"] != DBNull.Value)
            {
                p.ExchangeRates = Convert.ToDouble(reader["ExchangeRates"]);
            }
            if (reader.HasColumn("IsForeign") && reader["IsForeign"] != DBNull.Value)
            {
                p.IsForeign = (bool)reader["IsForeign"];
            }
            if (reader.HasColumn("Notes"))
            {
                p.Notes = reader["Notes"].ToString();
            }
            p.SelectedStaff = new Staff();
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = (long)reader["StaffID"];
                p.SelectedStaff.StaffID = (long)reader["StaffID"];
                p.SelectedStaff.FullName = reader["FullName"].ToString();
            }

            p.SelectedSupplier = new Supplier();
            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.SupplierID = (long)reader["SupplierID"];
                p.SelectedSupplier.SupplierID = (long)reader["SupplierID"];
            }
            if (reader.HasColumn("SupplierName"))
            {
                p.SelectedSupplier.SupplierName = reader["SupplierName"].ToString();
            }
            if (reader.HasColumn("StoreID"))
            {
                p.StoreID = (long)reader["StoreID"];
                p.SelectedStorage = new RefStorageWarehouseLocation { StoreID = (long)reader["StoreID"] };
                if (reader.HasColumn("swhlName"))
                {
                    p.SelectedStorage.swhlName = reader["swhlName"].ToString();
                }
            }
            if (reader.HasColumn("StoreIDOut") && reader["StoreIDOut"] != DBNull.Value)
            {
                p.StoreIDOut = reader["StoreIDOut"] as Int64?;
                p.SelectedStorageOut = new RefStorageWarehouseLocation { StoreID = (long)reader["StoreIDOut"] };
                if (reader.HasColumn("swhlNameOut"))
                {
                    p.SelectedStorageOut.swhlName = reader["swhlNameOut"].ToString();
                }
            }
            if (reader.HasColumn("OutInvID") && reader["OutInvID"] != DBNull.Value)
            {
                p.OutInvID = reader["OutInvID"].ToString();
            }
            if (reader.HasColumn("Discounting") && reader["Discounting"] != DBNull.Value)
            {
                p.Discounting = Convert.ToDecimal(reader["Discounting"]);
            }
            if (reader.HasColumn("DiscountByPercent") && reader["DiscountByPercent"] != DBNull.Value)
            {
                p.DiscountingByPercent = Convert.ToDecimal(reader["DiscountByPercent"]);
            }
            if (reader.HasColumn("IsPercent") && reader["IsPercent"] != DBNull.Value)
            {
                p.IsPercent = (bool)reader["IsPercent"];
            }
            if (reader.HasColumn("CheckedPoint") && reader["CheckedPoint"] != DBNull.Value)
            {
                p.CheckedPoint = (bool)reader["CheckedPoint"];
            }
            if (reader.HasColumn("Amount") && reader["Amount"] != DBNull.Value)
            {
                p.TotalPrice = Convert.ToDecimal(reader["Amount"]);
            }
            if (reader.HasColumn("PharmacySupplierPaymentReqID"))
            {
                p.PharmacySupplierPaymentReqID = reader["PharmacySupplierPaymentReqID"] as Int64?;
            }
            if (reader.HasColumn("PharmacySupplierPaymentNotes"))
            {
                p.PharmacySupplierPaymentNotes = reader["PharmacySupplierPaymentNotes"].ToString();
            }
            if (reader.HasColumn("CustomTax"))
            {
                p.CustomTax = Convert.ToDecimal(reader["CustomTax"]);
            }
            if (reader.HasColumn("VATSearch") && reader["VATSearch"] != DBNull.Value)
            {
                p.VATSearch = Convert.ToDecimal(reader["VATSearch"]);
            }
            if (reader.HasColumn("IsVATCredit") && reader["IsVATCredit"] != DBNull.Value)
            {
                p.IsVATCredit = Convert.ToBoolean(reader["IsVATCredit"]);
            }
            return p;
        }
        protected virtual List<InwardDrugInvoice> GetspInwardDrugInvoiceCollectionFromReader(IDataReader reader)
        {
            var invoicedrugs = new List<InwardDrugInvoice>();
            while (reader.Read())
            {
                invoicedrugs.Add(GetspInwardDrugInvoiceFromReader(reader));
            }
            return invoicedrugs;
        }

        protected virtual List<OutwardDrugInvoice> GetOutwardDrugInvoiceCollectionFromReader(IDataReader reader)
        {
            var invoicedrugs = new List<OutwardDrugInvoice>();
            while (reader.Read())
            {
                invoicedrugs.Add(GetOutWardDrugInvoiceFromReader(reader));
            }
            return invoicedrugs;
        }

        protected virtual GetDrugForSellVisitor GetDrugForSellVisitorFromReader(IDataReader reader)
        {
            var p = new GetDrugForSellVisitor();

            if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
            {
                p.BrandName = reader["BrandName"].ToString();
            }
            if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
            {
                p.DrugID = (long)reader["DrugID"];
            }

            if (reader.HasColumn("GenericID") && reader["GenericID"] != DBNull.Value)
            {
                p.GenericID = (long)reader["GenericID"];
            }
            if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
            {
                p.GenericName = reader["GenericName"].ToString();
            }

            if (reader.HasColumn("InBatchNumber") && reader["InBatchNumber"] != DBNull.Value)
            {
                p.InBatchNumber = reader["InBatchNumber"].ToString();
            }
            if (reader.HasColumn("InID") && reader["InID"] != DBNull.Value)
            {
                p.InID = (long)reader["InID"];
            }
            if (reader.HasColumn("UnitName") && reader["UnitName"] != DBNull.Value)
            {
                p.UnitName = reader["UnitName"].ToString();
            }
            if (reader.HasColumn("InExpiryDate") && reader["InExpiryDate"] != DBNull.Value)
            {
                p.InExpiryDate = Convert.ToDateTime(reader["InExpiryDate"]);
            }
            if (reader.HasColumn("SdlDescription") && reader["SdlDescription"] != DBNull.Value)
            {
                p.SdlDescription = reader["SdlDescription"].ToString();
            }
            if (reader.HasColumn("Content") && reader["Content"] != DBNull.Value)
            {
                p.Content = reader["Content"].ToString();
            }
            if (reader.HasColumn("Administration") && reader["Administration"] != DBNull.Value)
            {
                p.Administration = reader["Administration"].ToString();
            }

            //KMx: Lấy thêm cảnh báo của thuốc, khi bác sĩ chọn thuốc ra toa, nếu thuốc đó có cảnh báo thì hiện MessageBox lên (02/06/2014 09:54).
            if (reader.HasColumn("Precaution_Warn") && reader["Precaution_Warn"] != DBNull.Value)
            {
                p.Precaution_Warn = reader["Precaution_Warn"].ToString();
            }

            if (reader.HasColumn("IsWarningHI") && reader["IsWarningHI"] != DBNull.Value)
            {
                p.IsWarningHI = (bool)reader["IsWarningHI"];
            }

            if (reader.HasColumn("IsConsult") && reader["IsConsult"] != DBNull.Value)
            {
                p.IsConsult = reader["IsConsult"] as bool?;
            }
            if (reader.HasColumn("InsuranceCover") && reader["InsuranceCover"] != DBNull.Value)
            {
                p.InsuranceCover = reader["InsuranceCover"] as bool?;
            }
            if (reader.HasColumn("Packaging") && reader["Packaging"] != DBNull.Value)
            {
                p.Packaging = reader["Packaging"].ToString();
            }
            if (reader.HasColumn("STT") && reader["STT"] != DBNull.Value)
            {
                p.STT = Convert.ToInt64(reader["STT"]);
            }
            if (reader.HasColumn("Remaining") && reader["Remaining"] != DBNull.Value)
            {
                p.Remaining = Convert.ToInt32(reader["Remaining"]);
                p.RemainingFirst = Convert.ToInt32(reader["Remaining"]);
            }

            if (reader.HasColumn("SellingPrice") && reader["SellingPrice"] != DBNull.Value)
            {
                p.SellingPrice = Convert.ToDecimal(reader["SellingPrice"]);
            }
            if (reader.HasColumn("OutPrice") && reader["OutPrice"] != DBNull.Value)
            {
                p.OutPrice = (decimal)reader["OutPrice"];
            }
            if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
            {
                p.InCost = (decimal)reader["InCost"];
            }
            if (reader.HasColumn("UnitUse") && reader["UnitUse"] != DBNull.Value)
            {
                p.UnitUse = reader["UnitUse"].ToString();
            }
            if (reader.HasColumn("Visa") && reader["Visa"] != DBNull.Value)
            {
                p.Visa = reader["Visa"].ToString();
            }
            if (reader.HasColumn("HIDrugCode") && reader["HIDrugCode"] != DBNull.Value)
            {
                p.HIDrugCode = reader["HIDrugCode"].ToString();
            }
            if (reader.HasColumn("DrugCode") && reader["DrugCode"] != DBNull.Value)
            {
                p.DrugCode = reader["DrugCode"].ToString();
            }
            if (reader.HasColumn("Dosage") && reader["Dosage"] != DBNull.Value)
            {
                p.Dosage = reader["Dosage"].ToString();
            }
            if (reader.HasColumn("Qty") && reader["Qty"] != DBNull.Value)
            {
                p.Qty = Convert.ToInt32(reader["Qty"]);
            }

            if (reader.HasColumn("DayRpts") && reader["DayRpts"] != DBNull.Value)
            {
                p.DayRpts = Convert.ToInt32(reader["DayRpts"]);
            }

            if (reader.HasColumn("QtyForDay") && reader["QtyForDay"] != DBNull.Value)
            {
                p.QtyForDay = Convert.ToDouble(reader["QtyForDay"]);
            }
            //gia ban
            if (reader.HasColumn("InwardDrugs_NormalPrice") && reader["InwardDrugs_NormalPrice"] != DBNull.Value)
            {
                p.NormalPrice = (decimal)reader["InwardDrugs_NormalPrice"];
            }
            if (reader.HasColumn("InwardDrugs_HIPatientPrice") && reader["InwardDrugs_HIPatientPrice"] != DBNull.Value)
            {
                p.PriceForHIPatient = (decimal)reader["InwardDrugs_HIPatientPrice"];
            }
            if (reader.HasColumn("InwardDrugs_HIAllowedPrice") && reader["InwardDrugs_HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPriceNoChange = (decimal)reader["InwardDrugs_HIAllowedPrice"];
            }

            if (reader.HasColumn("InHIPriceAllow") && reader["InHIPriceAllow"] != DBNull.Value)
            {
                p.HIAllowedPrice = (decimal)reader["InHIPriceAllow"];
            }


            if (reader.HasColumn("DispenseVolume") && reader["DispenseVolume"] != DBNull.Value)
            {
                p.DispenseVolume = (double)reader["DispenseVolume"];
            }

            if (reader.HasColumn("UnitVolume") && reader["UnitVolume"] != DBNull.Value)
            {
                p.UnitVolume = (double)reader["UnitVolume"];
            }

            //Khi nào sử dụng cái này?
            //dung load nhung thuoc benh nhan da su dung
            if (reader.HasColumn("IssueID") && reader["IssueID"] != DBNull.Value)
            {
                p.IssueID = reader["IssueID"] as long?;
            }
            if (reader.HasColumn("PrescriptID") && reader["PrescriptID"] != DBNull.Value)
            {
                p.PrescriptID = reader["PrescriptID"] as long?;
            }
            if (reader.HasColumn("IssuedDateTime") && reader["IssuedDateTime"] != DBNull.Value)
            {
                p.IssuedDateTime = reader["IssuedDateTime"] as DateTime?;
            }
            if (reader.HasColumn("MaxDayPrescribed") && reader["MaxDayPrescribed"] != DBNull.Value)
            {
                p.MaxDayPrescribed = Convert.ToInt16(reader["MaxDayPrescribed"]);
            }

            //KMx: Dùng để tính số lượng thuốc lịch để bán (nhà thuốc) (18/06/2014 10:30).
            if (reader.HasColumn("V_DrugType") && reader["V_DrugType"] != DBNull.Value)
            {
                p.V_DrugType = Convert.ToInt64(reader["V_DrugType"]);
            }

            if (reader.HasColumn("QtyMaxAllowed") && reader["QtyMaxAllowed"] != DBNull.Value)
            {
                p.QtyMaxAllowed = Convert.ToDouble(reader["QtyMaxAllowed"]);
            }

            if (reader.HasColumn("QtySchedMon") && reader["QtySchedMon"] != DBNull.Value)
            {
                p.QtySchedMon = reader["QtySchedMon"] as float?;
            }

            if (reader.HasColumn("QtySchedTue") && reader["QtySchedTue"] != DBNull.Value)
            {
                p.QtySchedTue = reader["QtySchedTue"] as float?;
            }

            if (reader.HasColumn("QtySchedWed") && reader["QtySchedWed"] != DBNull.Value)
            {
                p.QtySchedWed = reader["QtySchedWed"] as float?;
            }

            if (reader.HasColumn("QtySchedThu") && reader["QtySchedThu"] != DBNull.Value)
            {
                p.QtySchedThu = reader["QtySchedThu"] as float?;
            }

            if (reader.HasColumn("QtySchedFri") && reader["QtySchedFri"] != DBNull.Value)
            {
                p.QtySchedFri = reader["QtySchedFri"] as float?;
            }

            if (reader.HasColumn("QtySchedSat") && reader["QtySchedSat"] != DBNull.Value)
            {
                p.QtySchedSat = reader["QtySchedSat"] as float?;
            }

            if (reader.HasColumn("QtySchedSun") && reader["QtySchedSun"] != DBNull.Value)
            {
                p.QtySchedSun = reader["QtySchedSun"] as float?;
            }

            if (reader.HasColumn("SchedBeginDOW") && reader["SchedBeginDOW"] != DBNull.Value)
            {
                p.SchedBeginDOW = reader["SchedBeginDOW"] as byte?;
            }

            if (reader.HasColumn("IsSearchByGenName") && reader["IsSearchByGenName"] != DBNull.Value)
            {
                p.IsSearchByGenName = Convert.ToBoolean(reader["IsSearchByGenName"]);
            }

            if (reader.HasColumn("HIPaymentPercent") && reader["HIPaymentPercent"] != DBNull.Value)
            {
                p.HIPaymentPercent = Convert.ToDouble(reader["HIPaymentPercent"]);
            }

            if (reader.HasColumn("HIRemaining") && reader["HIRemaining"] != DBNull.Value)
            {
                p.HIRemaining = Convert.ToInt32(reader["HIRemaining"]);
            }

            if (reader.HasColumn("Indication") && reader["Indication"] != DBNull.Value)
            {
                p.Indication = reader["Indication"].ToString();
            }

            if (reader.HasColumn("DrugClassID") && reader["DrugClassID"] != DBNull.Value)
            {
                p.DrugClassID = (long)reader["DrugClassID"];
            }

            if (reader.HasColumn("DrugClassName") && reader["DrugClassName"] != DBNull.Value)
            {
                p.DrugClassName = reader["DrugClassName"].ToString();
            }
            if (reader.HasColumn("IsNotVat") && reader["IsNotVat"] != DBNull.Value)
            {
                p.IsNotVat = Convert.ToBoolean(reader["IsNotVat"]);
            }
            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.VAT = Convert.ToDecimal(reader["VAT"]);
            }
            else
            {
                p.VAT = null;
            }
            if (reader.HasColumn("DrugVersionID") && reader["DrugVersionID"] != DBNull.Value)
            {
                p.DrugVersionID = Convert.ToInt64(reader["DrugVersionID"]);
            }
            return p;
        }
        protected virtual List<GetDrugForSellVisitor> GetDrugForSellVisitorCollectionFromReader(IDataReader reader)
        {
            var invoicedrugs = new List<GetDrugForSellVisitor>();
            while (reader.Read())
            {
                invoicedrugs.Add(GetDrugForSellVisitorFromReader(reader));
            }
            return invoicedrugs;
        }

        protected virtual List<RefTreatmentRegimen> GetRefTreatmentRegimenCollectionAndDetailFromReader(IDataReader aReader)
        {
            var mCollection = new List<RefTreatmentRegimen>();
            while (aReader.Read())
            {
                RefTreatmentRegimen mitem = new RefTreatmentRegimen();
                mitem.FillData(aReader);
                mCollection.Add(mitem);
            }
            if (aReader.NextResult())
            {
                List<RefTreatmentRegimenDrugDetail> mRefTreatmentRegimenDrugDetailCollection = GetRefTreatmentRegimenDrugDetailCollectionFromReader(aReader);
                foreach (var item in mCollection)
                {
                    item.RefTreatmentRegimenDrugDetails = new ObservableCollection<RefTreatmentRegimenDrugDetail>(mRefTreatmentRegimenDrugDetailCollection.Where(x => x.TreatmentRegimenID == item.TreatmentRegimenID).ToList());
                }
            }
            if (aReader.NextResult())
            {
                List<RefTreatmentRegimenPCLDetail> mRefTreatmentRegimenPCLDetailCollection = GetRefTreatmentRegimenPCLDetailCollectionFromReader(aReader);
                foreach (var item in mCollection)
                {
                    item.RefTreatmentRegimenPCLDetails = new ObservableCollection<RefTreatmentRegimenPCLDetail>(mRefTreatmentRegimenPCLDetailCollection.Where(x => x.TreatmentRegimenID == item.TreatmentRegimenID).ToList());
                }
            }
            if (aReader.NextResult())
            {
                List<RefTreatmentRegimenServiceDetail> mRefTreatmentRegimenServiceDetailCollection = GetRefTreatmentRegimenServiceDetailCollectionFromReader(aReader);
                foreach (var item in mCollection)
                {
                    item.RefTreatmentRegimenServiceDetails = new ObservableCollection<RefTreatmentRegimenServiceDetail>(mRefTreatmentRegimenServiceDetailCollection.Where(x => x.TreatmentRegimenID == item.TreatmentRegimenID).ToList());
                }
            }
            return mCollection;
        }
        protected virtual List<RefTreatmentRegimenDrugDetail> GetRefTreatmentRegimenDrugDetailCollectionFromReader(IDataReader aReader)
        {
            var mCollection = new List<RefTreatmentRegimenDrugDetail>();
            while (aReader.Read())
            {
                RefTreatmentRegimenDrugDetail mitem = new RefTreatmentRegimenDrugDetail();
                mitem.FillData(aReader);
                mCollection.Add(mitem);
            }
            return mCollection;
        }

        protected virtual List<RefTreatmentRegimenPCLDetail> GetRefTreatmentRegimenPCLDetailCollectionFromReader(IDataReader aReader)
        {
            var mCollection = new List<RefTreatmentRegimenPCLDetail>();
            while (aReader.Read())
            {
                RefTreatmentRegimenPCLDetail mitem = new RefTreatmentRegimenPCLDetail();
                mitem.FillData(aReader);
                mCollection.Add(mitem);
            }
            return mCollection;
        }
        protected virtual List<RefTreatmentRegimenServiceDetail> GetRefTreatmentRegimenServiceDetailCollectionFromReader(IDataReader aReader)
        {
            var mCollection = new List<RefTreatmentRegimenServiceDetail>();
            while (aReader.Read())
            {
                RefTreatmentRegimenServiceDetail mitem = new RefTreatmentRegimenServiceDetail();
                mitem.FillData(aReader);
                mCollection.Add(mitem);
            }
            return mCollection;
        }
        //KMx: Hàm này được copy từ hàm GetDrugForSellVisitorFromReader (25/11/2014 09:07).
        protected virtual GetGenMedProductForSell GetGenMedProductForSellFromReader(IDataReader reader)
        {
            var p = new GetGenMedProductForSell { BrandName = reader["BrandName"].ToString(), GenMedProductID = (long)reader["GenMedProductID"] };

            if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
            {
                p.GenericName = reader["GenericName"].ToString();
            }

            if (reader.HasColumn("InBatchNumber"))
            {
                p.InBatchNumber = reader["InBatchNumber"].ToString();
            }
            if (reader.HasColumn("InID") && reader["InID"] != DBNull.Value)
            {
                p.InID = (long)reader["InID"];
            }

            p.UnitName = reader["UnitName"].ToString();
            if (reader.HasColumn("InExpiryDate") && reader["InExpiryDate"] != DBNull.Value)
            {
                p.InExpiryDate = Convert.ToDateTime(reader["InExpiryDate"]);
            }
            if (reader.HasColumn("SdlDescription"))
            {
                p.SdlDescription = reader["SdlDescription"].ToString();
            }
            if (reader.HasColumn("Content"))
            {
                p.Content = reader["Content"].ToString();
            }
            if (reader.HasColumn("Administration"))
            {
                p.Administration = reader["Administration"].ToString();
            }

            //KMx: Lấy thêm cảnh báo của thuốc, khi bác sĩ chọn thuốc ra toa, nếu thuốc đó có cảnh báo thì hiện MessageBox lên (02/06/2014 09:54).
            if (reader.HasColumn("Precaution_Warn") && reader["Precaution_Warn"] != DBNull.Value)
            {
                p.Precaution_Warn = reader["Precaution_Warn"].ToString();
            }

            if (reader.HasColumn("IsWarningHI") && reader["IsWarningHI"] != DBNull.Value)
            {
                p.IsWarningHI = (bool)reader["IsWarningHI"];
            }

            if (reader.HasColumn("IsConsult"))
            {
                p.IsConsult = reader["IsConsult"] as bool?;
            }
            if (reader.HasColumn("InsuranceCover"))
            {
                p.InsuranceCover = reader["InsuranceCover"] as bool?;
            }
            if (reader.HasColumn("Packaging"))
            {
                p.Packaging = reader["Packaging"].ToString();
            }
            if (reader.HasColumn("STT"))
            {
                p.STT = Convert.ToInt64(reader["STT"]);
            }
            if (reader.HasColumn("Remaining") && reader["Remaining"] != DBNull.Value)
            {
                p.Remaining = Convert.ToInt32(reader["Remaining"]);
                p.RemainingFirst = Convert.ToInt32(reader["Remaining"]);
            }

            if (reader.HasColumn("OutPrice") && reader["OutPrice"] != DBNull.Value)
            {
                p.OutPrice = (decimal)reader["OutPrice"];
            }
            if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
            {
                p.InCost = (decimal)reader["InCost"];
            }
            if (reader.HasColumn("UnitUse"))
            {
                p.UnitUse = reader["UnitUse"].ToString();
            }
            if (reader.HasColumn("Visa"))
            {
                p.Visa = reader["Visa"].ToString();
            }
            if (reader.HasColumn("HICode"))
            {
                p.HICode = reader["HICode"].ToString();
            }
            if (reader.HasColumn("Code"))
            {
                p.Code = reader["Code"].ToString();
            }
            if (reader.HasColumn("Dosage"))
            {
                p.Dosage = reader["Dosage"].ToString();
            }
            if (reader.HasColumn("Qty"))
            {
                p.Qty = Convert.ToInt32(reader["Qty"]);
            }

            if (reader.HasColumn("DayRpts") && reader["DayRpts"] != DBNull.Value)
            {
                p.DayRpts = Convert.ToInt32(reader["DayRpts"]);
            }

            if (reader.HasColumn("QtyForDay") && reader["QtyForDay"] != DBNull.Value)
            {
                p.QtyForDay = Convert.ToDouble(reader["QtyForDay"]);
            }
            //gia ban
            if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
            {
                p.NormalPrice = (decimal)reader["NormalPrice"];
            }
            if (reader.HasColumn("HIPatientPrice") && reader["HIPatientPrice"] != DBNull.Value)
            {
                p.PriceForHIPatient = (decimal)reader["HIPatientPrice"];
            }
            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPriceNoChange = (decimal)reader["HIAllowedPrice"];
            }

            //Nếu BN được tính BH thì lấy giá BH, ngược lại = 0.
            if (reader.HasColumn("InHIPriceAllow") && reader["InHIPriceAllow"] != DBNull.Value)
            {
                p.HIAllowedPrice = (decimal)reader["InHIPriceAllow"];
            }

            if (reader.HasColumn("DispenseVolume") && reader["DispenseVolume"] != DBNull.Value)
            {
                p.DispenseVolume = (double)reader["DispenseVolume"];
            }

            if (reader.HasColumn("UnitVolume") && reader["UnitVolume"] != DBNull.Value)
            {
                p.UnitVolume = (double)reader["UnitVolume"];
            }

            //Khi nào sử dụng cái này?
            //dung load nhung thuoc benh nhan da su dung
            if (reader.HasColumn("IssueID"))
            {
                p.IssueID = reader["IssueID"] as long?;
            }
            if (reader.HasColumn("PrescriptID"))
            {
                p.PrescriptID = reader["PrescriptID"] as long?;
            }
            if (reader.HasColumn("IssuedDateTime"))
            {
                p.IssuedDateTime = reader["IssuedDateTime"] as DateTime?;
            }
            if (reader.HasColumn("MaxDayPrescribed") && reader["MaxDayPrescribed"] != DBNull.Value)
            {
                p.MaxDayPrescribed = Convert.ToInt16(reader["MaxDayPrescribed"]);
            }

            //KMx: Dùng để tính số lượng thuốc lịch để bán (khoa dược) (25/11/2014 09:05).
            if (reader.HasColumn("V_DrugType") && reader["V_DrugType"] != DBNull.Value)
            {
                p.V_DrugType = Convert.ToInt64(reader["V_DrugType"]);
            }

            if (reader.HasColumn("QtyMaxAllowed") && reader["QtyMaxAllowed"] != DBNull.Value)
            {
                p.QtyMaxAllowed = Convert.ToDouble(reader["QtyMaxAllowed"]);
            }

            if (reader.HasColumn("QtySchedMon"))
            {
                p.QtySchedMon = reader["QtySchedMon"] as float?;
            }

            if (reader.HasColumn("QtySchedTue"))
            {
                p.QtySchedTue = reader["QtySchedTue"] as float?;
            }

            if (reader.HasColumn("QtySchedWed"))
            {
                p.QtySchedWed = reader["QtySchedWed"] as float?;
            }

            if (reader.HasColumn("QtySchedThu"))
            {
                p.QtySchedThu = reader["QtySchedThu"] as float?;
            }

            if (reader.HasColumn("QtySchedFri"))
            {
                p.QtySchedFri = reader["QtySchedFri"] as float?;
            }

            if (reader.HasColumn("QtySchedSat"))
            {
                p.QtySchedSat = reader["QtySchedSat"] as float?;
            }

            if (reader.HasColumn("QtySchedSun"))
            {
                p.QtySchedSun = reader["QtySchedSun"] as float?;
            }

            if (reader.HasColumn("SchedBeginDOW"))
            {
                p.SchedBeginDOW = reader["SchedBeginDOW"] as byte?;
            }

            if (reader.HasColumn("IsSearchByGenName") && reader["IsSearchByGenName"] != DBNull.Value)
            {
                p.IsSearchByGenName = Convert.ToBoolean(reader["IsSearchByGenName"]);
            }

            if (reader.HasColumn("HIPaymentPercent") && reader["HIPaymentPercent"] != DBNull.Value)
            {
                p.HIPaymentPercent = Convert.ToDouble(reader["HIPaymentPercent"]);
            }

            return p;
        }

        //KMx: Hàm này được copy từ hàm GetDrugForSellVisitorCollectionFromReader (25/11/2014 09:07).
        protected virtual List<GetGenMedProductForSell> GetGenMedProductForSellCollectionFromReader(IDataReader reader)
        {
            var GenMedProducts = new List<GetGenMedProductForSell>();
            while (reader.Read())
            {
                GenMedProducts.Add(GetGenMedProductForSellFromReader(reader));
            }
            return GenMedProducts;
        }


        protected virtual OutwardDrug GetOutWardDrugDetailFromReader(IDataReader reader)
        {
            var p = new OutwardDrug();
            if (reader.HasColumn("STT") && reader["STT"] != DBNull.Value)
            {
                p.STT = Convert.ToInt64(reader["STT"]);
            }
            if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
            {
                p.DrugID = Convert.ToInt64(reader["DrugID"]);
            }
            if (reader.HasColumn("OutID") && reader["OutID"] != DBNull.Value)
            {
                p.OutID = Convert.ToInt64(reader["OutID"]);
            }
            if (reader.HasColumn("outiID") && reader["outiID"] != DBNull.Value)
            {
                p.outiID = Convert.ToInt64(reader["outiID"]);
            }
            if (reader.HasColumn("InID") && reader["InID"] != DBNull.Value)
            {
                p.InID = reader["InID"] as long?;
            }
            if (reader.HasColumn("OutQuantity") && reader["OutQuantity"] != DBNull.Value)
            {
                p.OutQuantityOld = Convert.ToInt32(reader["OutQuantity"]);
                p.Qty = p.OutQuantityOld;
            }
            if (reader.HasColumn("QtyReturned") && reader["QtyReturned"] != DBNull.Value)
            {
                p.QtyReturned = Convert.ToInt32(reader["QtyReturned"]);
            }
            if (reader.HasColumn("OutQuantity") && reader["OutQuantity"] != DBNull.Value)
            {
                p.OutQuantity = Convert.ToInt32(reader["OutQuantity"]);
            }
            if (reader.HasColumn("Qty") && reader["Qty"] != DBNull.Value)
            {
                p.QtyOffer = Convert.ToInt32(reader["Qty"]);
            }
            if (reader.HasColumn("HIBenefit") && reader["HIBenefit"] != DBNull.Value)
            {
                p.HIBenefit = reader["HIBenefit"] as double?;
            }
            if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
            {
                p.NormalPrice = (decimal)reader["NormalPrice"];
            }
            if (reader.HasColumn("OutPrice") && reader["OutPrice"] != DBNull.Value)
            {
                p.OutPrice = (decimal)reader["OutPrice"];

                p.InvoicePrice = p.OutPrice;
                p.NormalPrice = p.InvoicePrice;
            }

            if (reader.HasColumn("OutHIAllowedPrice") && reader["OutHIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = reader["OutHIAllowedPrice"] as decimal?;
            }
            if (reader.HasColumn("OutPriceDifference") && reader["OutPriceDifference"] != DBNull.Value)
            {
                p.PriceDifference = (decimal)reader["OutPriceDifference"];
                p.TotalPriceDifference = (decimal)p.OutQuantity * p.PriceDifference;
            }
            p.TotalPrice = (decimal)p.OutQuantity * p.OutPrice;

            if (reader["DrugID"].ToString() != "" && reader["DrugID"] != DBNull.Value && reader.HasColumn("BrandName"))
            {
                p.GetDrugForSellVisitor = GetDrugForSellVisitorFromReader(reader);
            }
            if (reader.HasColumn("IsLoad") && reader["IsLoad"] != DBNull.Value)
            {
                p.IsLoad = Convert.ToInt32(reader["IsLoad"]);
            }
            //Kiên thêm V_DrugType
            if (reader.HasColumn("V_DrugType") && reader["V_DrugType"] != DBNull.Value)
            {
                p.V_DrugType = Convert.ToInt64(reader["V_DrugType"]);
            }
            if (reader["InID"] != DBNull.Value)
            {
                try
                {
                    //p.InwardDrug = GetspInwardDrugFromReader(reader);
                    p.InwardDrug = new InwardDrug();
                    if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
                    {
                        p.InwardDrug.DrugID = reader["DrugID"] as long?;
                    }
                    if (reader.HasColumn("InBatchNumber") && reader["InBatchNumber"] != DBNull.Value)
                    {
                        p.InBatchNumber = reader["InBatchNumber"].ToString();
                        p.InwardDrug.InBatchNumber = reader["InBatchNumber"].ToString();
                    }
                    if (reader.HasColumn("InExpiryDate"))
                    {
                        p.InExpiryDate = reader["InExpiryDate"] == DBNull.Value ? DateTime.Now : (DateTime)reader["InExpiryDate"];
                        p.InwardDrug.InExpiryDate = reader["InExpiryDate"] as DateTime?;
                    }
                    else
                    {
                        p.InExpiryDate = DateTime.Now;
                    }
                    if (reader.HasColumn("InBuyingPrice") && reader["InBuyingPrice"] != DBNull.Value)
                    {
                        p.InwardDrug.InBuyingPrice = (decimal)reader["InBuyingPrice"];
                    }
                    if (reader.HasColumn("InID") && reader["InID"] != DBNull.Value)
                    {
                        p.InwardDrug.InID = (long)reader["InID"];
                    }
                    if (reader.HasColumn("InProductionDate") && reader["InProductionDate"] != DBNull.Value)
                    {
                        p.InwardDrug.InProductionDate = reader["InProductionDate"] as DateTime?;
                    }
                    if (reader.HasColumn("InQuantity") && reader["InQuantity"] != DBNull.Value)
                    {
                        p.InwardDrug.InQuantity = Convert.ToDouble(reader["InQuantity"]);
                    }
                    if (reader.HasColumn("inviID") && reader["inviID"] != DBNull.Value)
                    {
                        p.InwardDrug.inviID = (long)reader["inviID"];
                    }
                    if (reader.HasColumn("Remaining") && reader["Remaining"] != DBNull.Value)
                    {
                        p.InwardDrug.Remaining = Convert.ToDouble(reader["Remaining"]);
                    }

                    p.InwardDrug.SelectedShelfDrugLocation = new RefShelfDrugLocation();

                    if (reader.HasColumn("SdlID") && reader["SdlID"] != DBNull.Value)
                    {
                        p.InwardDrug.SdlID = reader["SdlID"] as long?;
                        p.InwardDrug.SelectedShelfDrugLocation.SdlID = (long)reader["SdlID"];
                        if (reader.HasColumn("SdlDescription"))
                        {
                            p.SdlDescription = reader["SdlDescription"].ToString();
                            p.InwardDrug.SelectedShelfDrugLocation.SdlDescription = reader["SdlDescription"].ToString();
                            p.InwardDrug.SdlDescription = reader["SdlDescription"].ToString();
                        }
                    }
                    if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
                    {
                        p.InwardDrug.InBuyingPriceActual = (decimal)reader["InCost"];
                    }

                    if (reader.HasColumn("InwardDrugs_NormalPrice") && reader["InwardDrugs_NormalPrice"] != DBNull.Value)
                    {
                        p.InwardDrug.NormalPrice = (decimal)reader["InwardDrugs_NormalPrice"];
                    }
                    if (reader.HasColumn("InwardDrugs_HIPatientPrice") && reader["InwardDrugs_HIPatientPrice"] != DBNull.Value)
                    {
                        p.InwardDrug.HIPatientPrice = (decimal)reader["InwardDrugs_HIPatientPrice"];
                    }
                    if (reader.HasColumn("InwardDrugs_HIAllowedPrice") && reader["InwardDrugs_HIAllowedPrice"] != DBNull.Value)
                    {
                        p.InwardDrug.HIAllowedPrice = (decimal)reader["InwardDrugs_HIAllowedPrice"];
                    }
                    if (reader.HasColumn("inviID") && reader["inviID"] != DBNull.Value)
                    {
                        p.InwardDrug.inviID = (long)reader["inviID"];
                    }
                    if (reader.HasColumn("DrugVersionID") && reader["DrugVersionID"] != DBNull.Value)
                    {
                        p.InwardDrug.DrugVersionID = (long)reader["DrugVersionID"];
                    }
                    if (reader.HasColumn("DrugDeptInIDOrig") && reader["DrugDeptInIDOrig"] != DBNull.Value)
                    {
                        p.InwardDrug.DrugDeptInIDOrig = (long)reader["DrugDeptInIDOrig"];
                    }
                    if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
                    {
                        p.InwardDrug.InCost = (decimal)reader["InCost"];
                    }
                }
                catch
                {
                }
            }

            if (reader.HasColumn("InsuranceCover") && reader["InsuranceCover"] != DBNull.Value)
            {
                p.HI = reader["InsuranceCover"] as bool?;
            }
            if (reader.HasColumn("DayRpts") && reader["DayRpts"] != DBNull.Value)
            {
                p.DayRpts = (double)reader["DayRpts"];

            }

            if (reader.HasColumn("QtyForDay") && reader["QtyForDay"] != DBNull.Value)
            {
                p.QtyForDay = Convert.ToDecimal(reader["QtyForDay"]);

            }

            if (reader.HasColumn("QtyMaxAllowed") && reader["QtyMaxAllowed"] != DBNull.Value)
            {
                p.QtyMaxAllowed = Convert.ToDouble(reader["QtyMaxAllowed"]);
            }

            if (reader.HasColumn("QtySchedMon") && reader["QtySchedMon"] != DBNull.Value)
            {
                p.QtySchedMon = reader["QtySchedMon"] as float?;
            }

            if (reader.HasColumn("QtySchedTue") && reader["QtySchedTue"] != DBNull.Value)
            {
                p.QtySchedTue = reader["QtySchedTue"] as float?;
            }

            if (reader.HasColumn("QtySchedWed") && reader["QtySchedWed"] != DBNull.Value)
            {
                p.QtySchedWed = reader["QtySchedWed"] as float?;
            }

            if (reader.HasColumn("QtySchedThu") && reader["QtySchedThu"] != DBNull.Value)
            {
                p.QtySchedThu = reader["QtySchedThu"] as float?;
            }

            if (reader.HasColumn("QtySchedFri") && reader["QtySchedFri"] != DBNull.Value)
            {
                p.QtySchedFri = reader["QtySchedFri"] as float?;
            }

            if (reader.HasColumn("QtySchedSat") && reader["QtySchedSat"] != DBNull.Value)
            {
                p.QtySchedSat = reader["QtySchedSat"] as float?;
            }

            if (reader.HasColumn("QtySchedSun") && reader["QtySchedSun"] != DBNull.Value)
            {
                p.QtySchedSun = reader["QtySchedSun"] as float?;
            }

            if (reader.HasColumn("SchedBeginDOW") && reader["SchedBeginDOW"] != DBNull.Value)
            {
                p.SchedBeginDOW = reader["SchedBeginDOW"] as byte?;
            }

            if (reader.HasColumn("DispenseVolume") && reader["DispenseVolume"] != DBNull.Value)
            {
                p.DispenseVolume = (double)reader["DispenseVolume"];
            }


            if (reader.HasColumn("OutHIRebate") && reader["OutHIRebate"] != DBNull.Value)
            {
                p.HIPayment = (decimal)reader["OutHIRebate"];
                p.TotalHIPayment = (reader["OutHIRebate"] as decimal?).GetValueOrDefault();
            }
            else
            {
                p.TotalHIPayment = 0;
            }
            p.TotalInvoicePrice = reader.HasColumn("OutAmount") ? (reader["OutAmount"] as decimal?).GetValueOrDefault() : 0;
            if (reader.HasColumn("OutAmountCoPay") && reader["OutAmountCoPay"] != DBNull.Value)
            {
                p.TotalCoPayment = (decimal)reader["OutAmountCoPay"];
            }
            else
            {
                p.TotalCoPayment = 0;
            }
            p.TotalPatientPayment = p.TotalInvoicePrice - p.TotalHIPayment - p.OtherAmt;
            if (p.HIAllowedPrice.GetValueOrDefault() == 0)
            {
                p.PriceDifference = 0;
                p.TotalPriceDifference = 0;
            }
            else
            {
                p.PriceDifference = p.InvoicePrice - p.HIAllowedPrice.GetValueOrDefault(0);
                p.TotalPriceDifference = p.TotalInvoicePrice - p.TotalHIPayment - p.TotalCoPayment;
            }

            if (reader.HasColumn("HIPaymentPercent") && reader["HIPaymentPercent"] != DBNull.Value)
            {
                p.HIPaymentPercent = Convert.ToDouble(reader["HIPaymentPercent"]);
            }

            p.RecordState = RecordState.UNCHANGED;

            if (reader.HasColumn("PrescriptionIssueCode") && reader["PrescriptionIssueCode"] != DBNull.Value)
            {
                p.PrescriptionIssueCode = reader["PrescriptionIssueCode"].ToString();
            }
            if (reader.HasColumn("ICD10List") && reader["ICD10List"] != DBNull.Value)
            {
                p.ICD10List = reader["ICD10List"].ToString();
            }
            try
            {
                p.GenMedProductItem = new RefGenMedProductDetails();
                //Do gộp danh mục khoa dược & nhà thuốc nên DrugID đọc từ RefGenericDrugDetails là GenMedProductID.
                if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
                {
                    p.GenMedProductItem.GenMedProductID = (long)reader["DrugID"];
                }
                if (reader.HasColumn("DrugCode") && reader["DrugCode"] != DBNull.Value)
                {
                    p.GenMedProductItem.Code = Convert.ToString(reader["DrugCode"]);
                }
                if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
                {
                    p.GenMedProductItem.BrandName = Convert.ToString(reader["BrandName"]);
                }
                if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
                {
                    p.GenMedProductItem.GenericName = Convert.ToString(reader["GenericName"]);
                }
                if (reader.HasColumn("UnitName") && reader["UnitName"] != DBNull.Value)
                {
                    p.GenMedProductItem.SelectedUnit = new RefUnit { UnitName = reader["UnitName"].ToString() };
                }
                if (reader.HasColumn("InwardDrug_NormalPrice") && reader["InwardDrug_NormalPrice"] != DBNull.Value)
                {
                    p.GenMedProductItem.NormalPrice = (decimal)reader["InwardDrug_NormalPrice"];
                }
                if (reader.HasColumn("InwardDrug_HIPatientPrice") && reader["InwardDrug_HIPatientPrice"] != DBNull.Value)
                {
                    p.GenMedProductItem.HIPatientPrice = (decimal)reader["InwardDrug_HIPatientPrice"];
                }
                if (reader.HasColumn("InwardDrug_HIAllowedPrice") && reader["InwardDrug_HIAllowedPrice"] != DBNull.Value)
                {
                    p.GenMedProductItem.HIAllowedPrice = (decimal)reader["InwardDrug_HIAllowedPrice"];
                }
            }
            catch (Exception ex)
            {
                AxLogger.Instance.LogError(ex);
            }
            if (reader.HasColumn("PrescriptDetailID") && reader["PrescriptDetailID"] != DBNull.Value)
            {
                p.PrescriptionDetailObj = GetPrescriptionDetailFromReaderBase(reader);
            }
            if (reader.HasColumn("DoseString") && reader["DoseString"] != DBNull.Value)
            {
                p.DoseString = Convert.ToString(reader["DoseString"]);
            }

            if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
            {
                p.InCost = (decimal)reader["InCost"];
            }
            if (reader.HasColumn("IsNotVat") && reader["IsNotVat"] != DBNull.Value)
            {
                p.IsNotVat = Convert.ToBoolean(reader["IsNotVat"]);
            }
            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.VAT = Convert.ToDecimal(reader["VAT"]);
            }
            else
            {
                p.VAT = null;
            }
            if (reader.HasColumn("DrugVersionID") && reader["DrugVersionID"] != DBNull.Value)
            {
                p.DrugVersionID = Convert.ToDecimal(reader["DrugVersionID"]);
            }
            return p;
        }

        protected virtual List<OutwardDrug> GetOutWardDrugDetailCollectionFromReader(IDataReader reader)
        {
            var invoicedrugs = new List<OutwardDrug>();
            while (reader.Read())
            {
                invoicedrugs.Add(GetOutWardDrugDetailFromReader(reader));
            }
            return invoicedrugs;
        }

        protected virtual XDocument GenerateListToXMLWithNameSpace(IList<OutwardDrug> OutwardDrugList)
        {
            OutwardDrugList = OutwardDrugList.Where(x => x.DrugID > 0).ToList();
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                       new XElement("OutwardDrugs",
                       from outwarddrug in OutwardDrugList
                       select new XElement("OutwardDrug",
                       new XElement("DrugID", outwarddrug.DrugID),
                        new XElement("InID", outwarddrug.InID),
                        new XElement("HIBenefit", outwarddrug.HIBenefit),
                        new XElement("HiApplied", outwarddrug.HiApplied),
                        new XElement("OutPrice", outwarddrug.OutPrice),
                        new XElement("OutQuantity", outwarddrug.OutQuantity),
                        new XElement("OutQuantityReturn", outwarddrug.OutQuantityReturn),
                         new XElement("OutHIAllowedPrice", outwarddrug.HIAllowedPrice),
                        new XElement("Qty", outwarddrug.QtyOffer),
                        new XElement("OutHIRebate", outwarddrug.TotalHIPayment),
                        new XElement("OutPriceDifference", outwarddrug.PriceDifference),
                        new XElement("OutAmount", outwarddrug.TotalInvoicePrice),//tong tien
                        new XElement("OutAmountCoPay", outwarddrug.TotalCoPayment),//tong tien BH dong chi tra
                        new XElement("OutNotes", outwarddrug.OutNotes))));
            return xmlDocument;
        }



        protected virtual XDocument GenerateListToXMLOutwardDrugCalMoney(IList<OutwardDrug> OutwardDrugList)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                       new XElement("OutwardDrugs",
                       from outwarddrug in OutwardDrugList
                       select new XElement("OutwardDrug",
                       new XElement("DrugID", outwarddrug.DrugID),
                        new XElement("InID", outwarddrug.InID),
                        new XElement("HIBenefit", outwarddrug.HIBenefit),
                        new XElement("HiApplied", outwarddrug.HiApplied),
                        new XElement("OutPrice", outwarddrug.InvoicePrice),//don gia ban
                        new XElement("OutQuantity", outwarddrug.Qty),//so luong ban
                        new XElement("Qty", outwarddrug.QtyOffer),//so luong bs ra toa
                        new XElement("OutHIRebate", outwarddrug.TotalHIPayment),//tong tien bao hiem chiu tra
                        new XElement("OutPriceDifference", outwarddrug.PriceDifference),//lech gia
                        new XElement("OutHIAllowedPrice", outwarddrug.HIAllowedPrice),//bao hiem quy dinh gia cho thuoc nay
                        new XElement("OutAmount", outwarddrug.TotalInvoicePrice),//tong tien
                        new XElement("OutAmountCoPay", outwarddrug.TotalCoPayment),//tong tien BH dong chi tra
                        new XElement("OutNotes", outwarddrug.OutNotes))));
            return xmlDocument;
        }

        protected virtual OutwardDrug GetOutWardDrugDetailThongKeFromReader(IDataReader reader)
        {
            var p = new OutwardDrug { DrugID = Convert.ToInt64(reader["DrugID"]) };
            if (reader.HasColumn("InID"))
            {
                p.InID = reader["InID"] as long?;
            }
            if (reader.HasColumn("InBatchNumber"))
            {
                p.InBatchNumber = reader["InBatchNumber"].ToString();
            }
            p.OutQuantity = Convert.ToInt32(reader["OutQuantity"]);
            p.OutPrice = (decimal)reader["OutPrice"];

            p.InvoicePrice = (decimal)reader["OutPrice"];
            if (reader.HasColumn("OutHIAllowedPrice") && reader["OutHIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = (decimal)reader["OutHIAllowedPrice"];
            }
            p.TotalPrice = (decimal)p.OutQuantity * p.OutPrice;
            if (reader["DrugID"].ToString() != "" && reader["DrugID"] != DBNull.Value)
            {
                p.GetDrugForSellVisitor = GetDrugForSellVisitorFromReader(reader);
                if (reader.HasColumn("InHIPriceAllow") && reader["InHIPriceAllow"] != DBNull.Value)
                {
                    p.HIAllowedPrice = (decimal)reader["InHIPriceAllow"];
                }
            }
            return p;
        }

        protected virtual List<OutwardDrug> GetOutWardDrugDetailThongKeCollectionFromReader(IDataReader reader)
        {
            var invoicedrugs = new List<OutwardDrug>();
            while (reader.Read())
            {
                invoicedrugs.Add(GetOutWardDrugDetailThongKeFromReader(reader));
            }
            return invoicedrugs;
        }

        protected virtual SellingPriceFormular GetSellingPriceFormularFromReader(IDataReader reader)
        {
            var p = new SellingPriceFormular
            {
                SPFItemID = (long)reader["SPFItemID"],
                SPFModifedDate = Convert.ToDateTime(reader["SPFModifedDate"]),
                HIProfitPrice = reader["HIProfitPrice"] as double?,
                InternalProfitPrice = reader["InternalProfitPrice"] as double?,
                ExternalProfitPrice = reader["ExternalProfitPrice"] as double?,
                IsPercentage = reader["IsPercentage"] as bool?,
                IsActive = reader["IsActive"] as bool?
            };
            return p;
        }
        protected virtual List<SellingPriceFormular> GetSellingPriceFormularCollectionFromReader(IDataReader reader)
        {
            var lst = new List<SellingPriceFormular>();
            while (reader.Read())
            {
                lst.Add(GetSellingPriceFormularFromReader(reader));
            }
            return lst;
        }




        protected virtual InwardDrugClinicDeptInvoice GetInwardDrugClinicDeptInvoiceFromReader(IDataReader reader)
        {
            var p = new InwardDrugClinicDeptInvoice
            {
                inviID = (long)reader["inviID"],
                InvID = reader["InvID"].ToString(),
                InvInvoiceNumber = reader["InvInvoiceNumber"].ToString(),
                InvDateInvoice = (DateTime)reader["InvDateInvoice"]
            };
            if (reader.HasColumn("StaffID"))
            {
                p.StaffID = reader["StaffID"] as Int64?;
            }
            if (reader.HasColumn("SupplierID"))
            {
                p.SupplierID = reader["SupplierID"] as long?;
            }
            if (reader.HasColumn("TempRequireUpdate") && reader["TempRequireUpdate"] != DBNull.Value)
            {
                p.TempRequireUpdate = (bool)reader["TempRequireUpdate"];
            }
            if (reader.HasColumn("DSPTModifiedDate") && reader["DSPTModifiedDate"] != DBNull.Value)
            {
                p.DSPTModifiedDate = (DateTime)reader["DSPTModifiedDate"];
            }

            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.VAT = Convert.ToDecimal(reader["VAT"]);
            }

            if (reader.HasColumn("CurrencyID") && reader["CurrencyID"] != DBNull.Value)
            {
                p.CurrencyID = (long)reader["CurrencyID"];
                p.SelectedCurrency = new Currency { CurrencyID = (long)reader["CurrencyID"] };
            }
            if (reader.HasColumn("ExchangeRates") && reader["ExchangeRates"] != DBNull.Value)
            {
                p.ExchangeRates = Convert.ToDouble(reader["ExchangeRates"]);
            }
            if (reader.HasColumn("IsForeign") && reader["IsForeign"] != DBNull.Value)
            {
                p.IsForeign = (bool)reader["IsForeign"];
            }
            if (reader.HasColumn("Notes"))
            {
                p.Notes = reader["Notes"].ToString();
            }
            p.SelectedStaff = new Staff();
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = (long)reader["StaffID"];
                p.SelectedStaff.StaffID = (long)reader["StaffID"];
                p.SelectedStaff.FullName = reader["FullName"].ToString();
            }

            p.SelectedSupplier = new DrugDeptSupplier();
            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.SupplierID = (long)reader["SupplierID"];
                p.SelectedSupplier.SupplierID = (long)reader["SupplierID"];
            }
            if (reader.HasColumn("SupplierName"))
            {
                p.SelectedSupplier.SupplierName = reader["SupplierName"].ToString();
            }
            if (reader.HasColumn("StoreID"))
            {
                p.StoreID = (long)reader["StoreID"];
                p.SelectedStorage = new RefStorageWarehouseLocation { StoreID = (long)reader["StoreID"] };
                if (reader.HasColumn("swhlName"))
                {
                    p.SelectedStorage.swhlName = reader["swhlName"].ToString();
                }
            }
            if (reader.HasColumn("StoreIDOut") && reader["StoreIDOut"] != DBNull.Value)
            {
                p.StoreIDOut = reader["StoreIDOut"] as Int64?;
                p.SelectedStorageOut = new RefStorageWarehouseLocation { StoreID = (long)reader["StoreIDOut"] };
                if (reader.HasColumn("swhlNameOut"))
                {
                    p.SelectedStorageOut.swhlName = reader["swhlNameOut"].ToString();
                }
            }
            if (reader.HasColumn("Discounting") && reader["Discounting"] != DBNull.Value)
            {
                p.Discounting = Convert.ToDecimal(reader["Discounting"]);
            }
            if (reader.HasColumn("DiscountByPercent") && reader["DiscountByPercent"] != DBNull.Value)
            {
                p.DiscountingByPercent = Convert.ToDecimal(reader["DiscountByPercent"]);
            }
            if (reader.HasColumn("IsPercent") && reader["IsPercent"] != DBNull.Value)
            {
                p.IsPercent = (bool)reader["IsPercent"];
            }
            if (reader.HasColumn("CheckedPoint") && reader["CheckedPoint"] != DBNull.Value)
            {
                p.CheckedPoint = (bool)reader["CheckedPoint"];
            }
            if (reader.HasColumn("Amount") && reader["Amount"] != DBNull.Value)
            {
                p.TotalPrice = Convert.ToDecimal(reader["Amount"]);
            }
            if (reader.HasColumn("PharmacySupplierPaymentReqID"))
            {
                p.PharmacySupplierPaymentReqID = reader["PharmacySupplierPaymentReqID"] as Int64?;
            }
            if (reader.HasColumn("PharmacySupplierPaymentNotes"))
            {
                p.PharmacySupplierPaymentNotes = reader["PharmacySupplierPaymentNotes"].ToString();
            }
            if (reader.HasColumn("outiID"))
            {
                p.outiID = reader["outiID"] as long?;
            }

            if (reader.HasColumn("OutInvID") && reader["OutInvID"] != DBNull.Value)
            {
                p.OutInvID = reader["OutInvID"].ToString();
            }
            else if (reader.HasColumn("OutInvID_FromClinic") && reader["OutInvID_FromClinic"] != DBNull.Value)
            {
                p.OutInvID = reader["OutInvID_FromClinic"].ToString();
            }

            if (reader.HasColumn("RequiredUpdate") && reader["RequiredUpdate"] != DBNull.Value)
            {
                p.IsRequiredUpdate = (bool)reader["RequiredUpdate"];
            }

            //▼====: #052
            if (reader.HasColumn("OutDate") && reader["OutDate"] != DBNull.Value)
            {
                p.OutDate = (DateTime)reader["OutDate"];
            }
            //▲====: #052
            return p;
        }

        protected virtual List<InwardDrugClinicDeptInvoice> GetInwardDrugClinicDeptInvoiceCollectionFromReader(IDataReader reader)
        {
            var lst = new List<InwardDrugClinicDeptInvoice>();
            while (reader.Read())
            {
                lst.Add(GetInwardDrugClinicDeptInvoiceFromReader(reader));
            }
            return lst;
        }

        protected virtual InwardDrugMedDeptInvoice GetInwardDrugMedDeptInvoiceFromReader(IDataReader reader)
        {
            var p = new InwardDrugMedDeptInvoice
            {
                inviID = (long)reader["inviID"],
                InvID = reader["InvID"].ToString(),
                InvInvoiceNumber = reader["InvInvoiceNumber"].ToString(),
                InvDateInvoice = Convert.ToDateTime(reader["InvDateInvoice"])
            };
            if (reader.HasColumn("SerialNumber") && reader["SerialNumber"] != DBNull.Value)
            {
                p.SerialNumber = reader["SerialNumber"].ToString();
            }
            if (reader.HasColumn("InvoiceForm") && reader["InvoiceForm"] != DBNull.Value)
            {
                p.InvoiceForm = reader["InvoiceForm"].ToString();
            }
            if (reader.HasColumn("StaffID"))
            {
                p.StaffID = reader["StaffID"] as Int64?;
            }
            if (reader.HasColumn("SupplierID"))
            {
                p.SupplierID = reader["SupplierID"] as long?;
            }
            if (reader.HasColumn("TempRequireUpdate") && reader["TempRequireUpdate"] != DBNull.Value)
            {
                p.TempRequireUpdate = (bool)reader["TempRequireUpdate"];
            }
            if (reader.HasColumn("DSPTModifiedDate") && reader["DSPTModifiedDate"] != DBNull.Value)
            {
                p.DSPTModifiedDate = (DateTime)reader["DSPTModifiedDate"];
            }

            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.VAT = Convert.ToDecimal(reader["VAT"]);
            }
            if (reader.HasColumn("CustomTax") && reader["CustomTax"] != DBNull.Value)
            {
                p.CustomTax = Convert.ToDecimal(reader["CustomTax"]);
            }
            if (reader.HasColumn("CurrencyID") && reader["CurrencyID"] != DBNull.Value)
            {
                p.CurrencyID = (long)reader["CurrencyID"];
                p.SelectedCurrency = new Currency { CurrencyID = (long)reader["CurrencyID"] };
                if (reader.HasColumn("CurrencyName"))
                {
                    p.SelectedCurrency.CurrencyName = reader["CurrencyName"].ToString();
                }
            }
            if (reader.HasColumn("ExchangeRates") && reader["ExchangeRates"] != DBNull.Value)
            {
                p.ExchangeRates = Convert.ToDouble(reader["ExchangeRates"]);
            }
            if (reader.HasColumn("IsForeign") && reader["IsForeign"] != DBNull.Value)
            {
                p.IsForeign = (bool)reader["IsForeign"];
            }
            if (reader.HasColumn("Notes"))
            {
                p.Notes = reader["Notes"].ToString();
            }
            p.SelectedStaff = new Staff();
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = (long)reader["StaffID"];
                p.SelectedStaff.StaffID = (long)reader["StaffID"];
                if (reader.HasColumn("FullName"))
                {
                    p.SelectedStaff.FullName = reader["FullName"].ToString();
                }
            }

            p.SelectedSupplier = new DrugDeptSupplier();
            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.SupplierID = (long)reader["SupplierID"];
                p.SelectedSupplier.SupplierID = (long)reader["SupplierID"];
                if (reader.HasColumn("SupplierName"))
                {
                    p.SelectedSupplier.SupplierName = reader["SupplierName"].ToString();
                }
            }

            if (reader.HasColumn("StoreID"))
            {
                p.StoreID = (long)reader["StoreID"];
                p.SelectedStorage = new RefStorageWarehouseLocation { StoreID = (long)reader["StoreID"] };
                if (reader.HasColumn("swhlName"))
                {
                    p.SelectedStorage.swhlName = reader["swhlName"].ToString();
                }
            }
            if (reader.HasColumn("StoreIDOut") && reader["StoreIDOut"] != DBNull.Value)
            {
                p.StoreIDOut = reader["StoreIDOut"] as Int64?;
                p.SelectedStorageOut = new RefStorageWarehouseLocation { StoreID = (long)reader["StoreIDOut"] };
                if (reader.HasColumn("swhlNameOut"))
                {
                    p.SelectedStorageOut.swhlName = reader["swhlNameOut"].ToString();
                }
            }
            if (reader.HasColumn("Discounting") && reader["Discounting"] != DBNull.Value)
            {
                p.Discounting = Convert.ToDecimal(reader["Discounting"]);
            }
            if (reader.HasColumn("DiscountByPercent") && reader["DiscountByPercent"] != DBNull.Value)
            {
                p.DiscountingByPercent = Convert.ToDecimal(reader["DiscountByPercent"]);
            }
            if (reader.HasColumn("IsPercent") && reader["IsPercent"] != DBNull.Value)
            {
                p.IsPercent = (bool)reader["IsPercent"];
            }
            if (reader.HasColumn("CheckedPoint") && reader["CheckedPoint"] != DBNull.Value)
            {
                p.CheckedPoint = (bool)reader["CheckedPoint"];
            }
            if (reader.HasColumn("DrugDeptSupplierPaymentReqID"))
            {
                p.DrugDeptSupplierPaymentReqID = reader["DrugDeptSupplierPaymentReqID"] as Int64?;
            }
            if (reader.HasColumn("DrugDeptSupplierPaymentNotes"))
            {
                p.DrugDeptSupplierPaymentNotes = reader["DrugDeptSupplierPaymentNotes"].ToString();
            }
            if (reader.HasColumn("TotalPrice"))
            {
                p.TotalPrice = Convert.ToDecimal(reader["TotalPrice"]);
            }
            if (reader.HasColumn("TypeInvoice"))
            {
                p.TypeInvoice = Convert.ToInt32(reader["TypeInvoice"]);
            }
            if (reader.HasColumn("OutInvID"))
            {
                p.OutInvID = reader["OutInvID"].ToString();
            }
            if (reader.HasColumn("DifferenceValue"))
            {
                p.DifferenceValue = Convert.ToDecimal(reader["DifferenceValue"]);
            }
            if (reader.HasColumn("IsCheckBuyingPrice") && reader["IsCheckBuyingPrice"] != DBNull.Value)
            {
                p.IsCheckBuyingPrice = Convert.ToBoolean(reader["IsCheckBuyingPrice"]);
            }
            //▼====: #052
            if (reader.HasColumn("OutDate") && reader["OutDate"] != DBNull.Value)
            {
                p.OutDate = (DateTime)reader["OutDate"];
            }
            //▲====: #052
            if (reader.HasColumn("VATSearch") && reader["VATSearch"] != DBNull.Value)
            {
                p.VATSearch = Convert.ToDecimal(reader["VATSearch"]);
            }
            if (reader.HasColumn("IsVATCredit") && reader["IsVATCredit"] != DBNull.Value)
            {
                p.IsVATCredit = Convert.ToBoolean(reader["IsVATCredit"]);
            }
            //▼====: #152
            if (reader.HasColumn("IsReturnInvoiceConsignment") && reader["IsReturnInvoiceConsignment"] != DBNull.Value)
            {
                p.IsReturnInvoiceConsignment = Convert.ToBoolean(reader["IsReturnInvoiceConsignment"]);
            }
            //▲====: #152
            return p;
        }

        protected virtual List<InwardDrugMedDeptInvoice> GetInwardDrugMedDeptInvoiceCollectionFromReader(IDataReader reader)
        {
            var lst = new List<InwardDrugMedDeptInvoice>();
            while (reader.Read())
            {
                lst.Add(GetInwardDrugMedDeptInvoiceFromReader(reader));
            }
            return lst;
        }

        protected virtual RefGenericDrugDetail GetRefGenericDrugForShowFromReader(IDataReader reader)
        {
            var p = new RefGenericDrugDetail
            {
                DrugID = (long)reader["DrugID"],
                BrandName = reader["BrandName"].ToString(),
                GenericName = reader["GenericName"].ToString()
            };
            if (reader.HasColumn("Content"))
            {
                p.Content = reader["Content"].ToString();
            }
            if (reader.HasColumn("IsConsult"))
            {
                p.IsConsult = reader["IsConsult"] as bool?;
            }
            if (reader.HasColumn("InsuranceCover"))
            {
                p.InsuranceCover = reader["InsuranceCover"] as bool?;
            }
            if (reader.HasColumn("Administration"))
            {
                p.Administration = reader["Administration"].ToString();
            }
            p.UnitID = reader["UnitID"] as long?;
            p.SeletedUnit = new RefUnit();
            if (reader["UnitID"] != DBNull.Value)
            {
                p.SeletedUnit = GetUnitFromReader(reader);
            }
            if (reader.HasColumn("UnitUseID"))
            {
                p.UnitUseID = reader["UnitUseID"] as long?;
                p.SeletedUnitUse = new RefUnit();
                if (reader["UnitUseID"] != DBNull.Value)
                {
                    p.SeletedUnitUse.UnitID = (long)reader["UnitUseID"];
                    if (reader.HasColumn("UnitUse"))
                    {
                        p.SeletedUnitUse.UnitName = reader["UnitUse"].ToString();
                    }
                }
            }

            if (reader.HasColumn("Packaging"))
            {
                p.Packaging = reader["Packaging"].ToString();
            }
            if (reader.HasColumn("Visa") && reader["Visa"] != DBNull.Value)
            {
                p.Visa = reader["Visa"].ToString();
            }

            if (reader.HasColumn("AdvTimeBeforeExpire"))
            {
                p.AdvTimeBeforeExpire = reader["AdvTimeBeforeExpire"] as int?;
            }
            if (reader.HasColumn("UnitPackaging"))
            {
                p.UnitPackaging = reader["UnitPackaging"] as int?;
            }
            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.SupplierMain = new Supplier { SupplierID = (long)reader["SupplierID"] };
                if (reader.HasColumn("SupplierName"))
                {
                    p.SupplierMain.SupplierName = reader["SupplierName"].ToString();
                }
                if (reader.HasColumn("SupplierCode"))
                {
                    p.SupplierMain.SupplierCode = reader["SupplierCode"].ToString();
                }
            }
            if (reader.HasColumn("UnitPrice") && reader["UnitPrice"] != DBNull.Value)
            {
                p.UnitPrice = Convert.ToDecimal(reader["UnitPrice"]);
            }
            if (reader.HasColumn("PackagePrice") && reader["PackagePrice"] != DBNull.Value)
            {
                p.PackagePrice = Convert.ToDecimal(reader["PackagePrice"]);
            }
            if (reader.HasColumn("DrugCode") && reader["DrugCode"] != DBNull.Value)
            {
                p.DrugCode = reader["DrugCode"].ToString();
            }
            if (reader.HasColumn("Qty"))
            {
                p.Qty = reader["Qty"] as int?;
            }
            if (reader.HasColumn("Ordered"))
            {
                p.Ordered = reader["Ordered"] as int?;
            }
            if (reader.HasColumn("Remaining") && reader["Remaining"] != DBNull.Value)
            {
                p.Remaining = (int)reader["Remaining"];
            }

            if (reader.HasColumn("WaitingDeliveryQty") && reader["WaitingDeliveryQty"] != DBNull.Value)
            {
                p.WaitingDeliveryQty = (int)reader["WaitingDeliveryQty"];
            }

            if (reader.HasColumn("NormalPrice"))
            {
                p.NormalPrice = (decimal)reader["NormalPrice"];
            }
            if (reader.HasColumn("PriceForHIPatient"))
            {
                p.PriceForHIPatient = (decimal)reader["PriceForHIPatient"];
            }
            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = (decimal)reader["HIAllowedPrice"];
            }
            if (reader.HasColumn("FactorSafety") && reader["FactorSafety"] != DBNull.Value)
            {
                p.FactorSafety = (int)reader["FactorSafety"];
            }
            if (reader.HasColumn("MaxDayPrescribed") && reader["MaxDayPrescribed"] != DBNull.Value)
            {
                p.MaxDayPrescribed = Convert.ToInt16(reader["MaxDayPrescribed"]);
            }

            if (reader.HasColumn("PCOID") && reader["PCOID"] != DBNull.Value)
            {
                p.PCOID = reader["PCOID"] as long?;
                p.PharmaceuticalCompany = new PharmaceuticalCompany { PCOID = Convert.ToInt64(reader["PCOID"]) };
                if (reader.HasColumn("PCOName") && reader["PCOName"] != DBNull.Value)
                {
                    p.PharmaceuticalCompany.PCOName = reader["PCOName"].ToString();
                }
            }
            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.VAT = Convert.ToDecimal(reader["VAT"]);
            }
            else
            {
                p.VAT = null;
            }

            return p;
        }
        protected virtual List<RefGenericDrugDetail> GetRefGenericDrugForShowCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RefGenericDrugDetail>();
            while (reader.Read())
            {
                lst.Add(GetRefGenericDrugForShowFromReader(reader));
            }
            return lst;
        }

        protected virtual InwardDrugClinicDept GetInwardDrugClinicDeptFromReader(IDataReader reader)
        {
            var p = new InwardDrugClinicDept
            {
                GenMedProductID = reader["GenMedProductID"] as long?,
                InBatchNumber = reader["InBatchNumber"].ToString(),
                InExpiryDate = reader["InExpiryDate"] as DateTime?,
                InID = (long)reader["InID"],
                Remaining = Convert.ToDecimal(reader["Remaining"])
            };
            if (reader.HasColumn("inviID") && reader["inviID"] != DBNull.Value)
            {
                p.inviID = Convert.ToInt64(reader["inviID"]);
            }
            if (reader.HasColumn("InProductionDate") && reader["InProductionDate"] != DBNull.Value)
            {
                p.InProductionDate = Convert.ToDateTime(reader["InProductionDate"]);
            }
            if (reader.HasColumn("InQuantity") && reader["InQuantity"] != DBNull.Value)
            {
                p.InQuantity = Convert.ToDecimal(reader["InQuantity"]);
            }
            if (reader.HasColumn("InBuyingPrice") && reader["InBuyingPrice"] != DBNull.Value)
            {
                p.InBuyingPrice = Convert.ToDecimal(reader["InBuyingPrice"]);
            }
            p.TotalPriceNotVAT = p.InQuantity * p.InBuyingPrice; //reader["TotalPrice"] as decimal?;
            if (reader.HasColumn("IsLoad") && reader["IsLoad"] != DBNull.Value)
            {
                p.IsLoad = Convert.ToInt16(reader["IsLoad"]);
            }
            if (reader.HasColumn("IsPercentage"))
            {
                p.IsPercentage = reader["IsPercentage"] as bool?;
            }
            p.SelectedShelfDrugLocation = new RefShelfDrugLocation();
            if (reader.HasColumn("SdlID") && reader["SdlID"] != DBNull.Value)
            {
                p.SdlID = reader["SdlID"] as long?;
                p.SelectedShelfDrugLocation.SdlID = (long)reader["SdlID"];
                if (reader.HasColumn("SdlDescription"))
                {
                    p.SelectedShelfDrugLocation.SdlDescription = reader["SdlDescription"].ToString();
                    p.SdlDescription = reader["SdlDescription"].ToString();
                }
            }
            p.RefGenMedProductDetails = new RefGenMedProductDetails();
            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                p.RefGenMedProductDetails = GetRefGenMedProductDetailsFromReader(reader);
            }
            p.SelectedStaffInput = new Staff();
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.SelectedStaffInput.StaffID = (long)reader["StaffID"];
                if (reader.HasColumn("FullName"))
                {
                    p.SelectedStaffInput.FullName = reader["FullName"].ToString();
                }
            }
            if (reader.HasColumn("swhlName"))
            {
                p.swhlName = reader["swhlName"].ToString();
            }
            if (reader.HasColumn("DrugDeptPoDetailID"))
            {
                p.DrugDeptPoDetailID = reader["DrugDeptPoDetailID"] as long?;
            }
            if (reader.HasColumn("DrugDeptPoID"))
            {
                p.DrugDeptPoID = reader["DrugDeptPoID"] as long?;
            }
            if (reader.HasColumn("PONumber"))
            {
                p.PONumber = reader["PONumber"].ToString();
            }
            if (reader.HasColumn("V_GoodsType") && reader["V_GoodsType"] != DBNull.Value)
            {
                p.V_GoodsType = (long)reader["V_GoodsType"];
            }
            if (reader.HasColumn("GoodsTypeName"))
            {
                p.GoodsTypeName = reader["GoodsTypeName"].ToString();
            }
            if (reader.HasColumn("IsPercent") && reader["IsPercent"] != DBNull.Value)
            {
                p.IsPercent = (bool)reader["IsPercent"];
            }
            if (reader.HasColumn("DiscountByPercent") && reader["DiscountByPercent"] != DBNull.Value)
            {
                p.DiscountingByPercent = Convert.ToDecimal(reader["DiscountByPercent"]);
            }
            if (reader.HasColumn("Discounting") && reader["Discounting"] != DBNull.Value)
            {
                p.Discounting = Convert.ToDecimal(reader["Discounting"]);
            }
            if (reader.HasColumn("IsPercent") && reader["IsPercent"] != DBNull.Value)
            {
                p.IsPercent = (bool)reader["IsPercent"];
            }
            if (reader.HasColumn("NoPrint"))
            {
                p.NoPrint = reader["NoPrint"] as bool?;
            }
            if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
            {
                p.InBuyingPriceActual = (decimal)reader["InCost"];
                p.InCost = (decimal)reader["InCost"];
            }

            if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
            {
                p.NormalPrice = (decimal)reader["NormalPrice"];
            }
            if (reader.HasColumn("HIPatientPrice") && reader["HIPatientPrice"] != DBNull.Value)
            {
                p.HIPatientPrice = (decimal)reader["HIPatientPrice"];
            }
            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = (decimal)reader["HIAllowedPrice"];
            }
            if (reader.HasColumn("OutID"))
            {
                p.OutID = reader["OutID"] as long?;
            }
            if (reader.HasColumn("MedDeptQty") && reader["MedDeptQty"] != DBNull.Value)
            {
                p.MedDeptQty = Convert.ToInt32(reader["MedDeptQty"]);
            }
            if (reader.HasColumn("GenMedVersionID") && reader["GenMedVersionID"] != DBNull.Value)
            {
                p.GenMedVersionID = Convert.ToInt64(reader["GenMedVersionID"]);
            }
            /*▼====: #009*/
            #region Copy lại, để khi đổi giá bán theo lô, so sánh cái cũ và cái mới, nếu cái mới khác cái cũ thì đổi trạng thái cái mới là Modified.
            p.NormalPrice_Orig = p.NormalPrice;
            p.HIPatientPrice_Orig = p.HIPatientPrice;
            p.HIAllowedPrice_Orig = p.HIAllowedPrice;
            #endregion
            if (reader.HasColumn("inviID") && reader["inviID"] != DBNull.Value)
            {
                p.inviID = (long)reader["inviID"];
                p.SelectedInwardDrugMedDeptInvoice = new InwardDrugClinicDeptInvoice();
                p.SelectedInwardDrugMedDeptInvoice.inviID = (long)reader["inviID"];
                if (reader.HasColumn("InvID") && reader["InvID"] != DBNull.Value)
                {
                    p.SelectedInwardDrugMedDeptInvoice.InvID = reader["InvID"].ToString();
                }
                if (reader.HasColumn("DSPTModifiedDate") && reader["DSPTModifiedDate"] != DBNull.Value)
                {
                    p.SelectedInwardDrugMedDeptInvoice.DSPTModifiedDate = Convert.ToDateTime(reader["DSPTModifiedDate"]);
                }
            }
            /*▲====: #009*/
            if (reader.HasColumn("InsuranceCover") && reader["InsuranceCover"] != DBNull.Value)
            {
                p.RefGenMedProductDetails.InsuranceCover = Convert.ToBoolean(reader["InsuranceCover"]);
            }
            if (reader.HasColumn("IsNotVat") && reader["IsNotVat"] != DBNull.Value)
            {
                p.IsNotVat = Convert.ToBoolean(reader["IsNotVat"]);
            }
            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.VAT = Convert.ToDecimal(reader["VAT"]);
            }
            else
            {
                p.VAT = null;
            }
            return p;
        }

        protected virtual List<InwardDrugClinicDept> GetInwardDrugClinicDeptCollectionFromReader(IDataReader reader)
        {
            var lst = new List<InwardDrugClinicDept>();
            while (reader.Read())
            {
                lst.Add(GetInwardDrugClinicDeptFromReader(reader));
            }
            return lst;
        }

        protected virtual InwardDrugMedDept GetInwardDrugMedDeptFromReader(IDataReader reader)
        {
            var p = new InwardDrugMedDept();
            //KMx: Sửa lại để cho Tồn Kho sử dụng chung (15/01/2015 17:45).
            //{
            //    GenMedProductID = reader["GenMedProductID"] as long?,
            //    InBatchNumber = reader["InBatchNumber"].ToString(),
            //    InBuyingPrice = (decimal)reader["InBuyingPrice"],
            //    InExpiryDate = reader["InExpiryDate"] as DateTime?,
            //    InID = (long)reader["InID"],
            //    InProductionDate = reader["InProductionDate"] as DateTime?,
            //    InQuantity = Convert.ToDecimal(reader["InQuantity"]),
            //    inviID = (long)reader["inviID"],
            //    Remaining = Convert.ToDecimal(reader["Remaining"])
            //};
            if (reader.HasColumn("inviID") && reader["inviID"] != DBNull.Value)
            {
                p.inviID = (long)reader["inviID"];

                //KMx: Dùng cho màn hình điều chỉnh giá bán theo lô (18/05/2015 11:33).
                p.SelectedInwardDrugMedDeptInvoice = new InwardDrugMedDeptInvoice();
                p.SelectedInwardDrugMedDeptInvoice.inviID = (long)reader["inviID"];
                if (reader.HasColumn("InvID") && reader["InvID"] != DBNull.Value)
                {
                    p.SelectedInwardDrugMedDeptInvoice.InvID = reader["InvID"].ToString();
                }
                if (reader.HasColumn("DSPTModifiedDate") && reader["DSPTModifiedDate"] != DBNull.Value)
                {
                    p.SelectedInwardDrugMedDeptInvoice.DSPTModifiedDate = Convert.ToDateTime(reader["DSPTModifiedDate"]);
                }
            }
            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                p.GenMedProductID = (long)reader["GenMedProductID"];
            }
            if (reader.HasColumn("InBatchNumber") && reader["InBatchNumber"] != DBNull.Value)
            {
                p.InBatchNumber = reader["InBatchNumber"].ToString();
            }
            if (reader.HasColumn("InBuyingPrice") && reader["InBuyingPrice"] != DBNull.Value)
            {
                p.InBuyingPrice = (decimal)reader["InBuyingPrice"];
            }
            if (reader.HasColumn("InExpiryDate") && reader["InExpiryDate"] != DBNull.Value)
            {
                p.InExpiryDate = Convert.ToDateTime(reader["InExpiryDate"]);
            }
            if (reader.HasColumn("InID") && reader["InID"] != DBNull.Value)
            {
                p.InID = (long)reader["InID"];
            }
            if (reader.HasColumn("InProductionDate") && reader["InProductionDate"] != DBNull.Value)
            {
                p.InProductionDate = Convert.ToDateTime(reader["InProductionDate"]);
            }
            if (reader.HasColumn("InQuantity") && reader["InQuantity"] != DBNull.Value)
            {
                p.InQuantity = Convert.ToDecimal(reader["InQuantity"]);
            }
            if (reader.HasColumn("Remaining") && reader["Remaining"] != DBNull.Value)
            {
                p.Remaining = Convert.ToDecimal(reader["Remaining"]);
            }
            if (reader.HasColumn("IsLoad") && reader["IsLoad"] != DBNull.Value)
            {
                p.IsLoad = Convert.ToInt16(reader["IsLoad"]);
            }
            //p.IsPercentage = reader["IsPercentage"] as bool?;
            //p.SdlID = reader["SdlID"] as long?;
            if (reader.HasColumn("IsPercentage") && reader["IsPercentage"] != DBNull.Value)
            {
                p.IsPercentage = (bool)reader["IsPercentage"];
            }
            if (reader.HasColumn("SdlID") && reader["SdlID"] != DBNull.Value)
            {
                p.SdlID = (long)reader["SdlID"];
            }

            if (reader.HasColumn("TotalPriceNotVAT"))
            {
                p.TotalPriceNotVAT = Convert.ToDecimal(reader["TotalPriceNotVAT"]);
            }
            p.SelectedShelfDrugLocation = new RefShelfDrugLocation();
            if (reader.HasColumn("SdlID") && reader["SdlID"] != DBNull.Value)
            {
                p.SelectedShelfDrugLocation.SdlID = (long)reader["SdlID"];
                if (reader.HasColumn("SdlDescription"))
                {
                    p.SelectedShelfDrugLocation.SdlDescription = reader["SdlDescription"].ToString();
                    p.SdlDescription = reader["SdlDescription"].ToString();
                }
            }
            p.RefGenMedProductDetails = new RefGenMedProductDetails();
            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                p.RefGenMedProductDetails = GetRefGenMedProductDetailsFromReader(reader);
            }
            p.SelectedStaffInput = new Staff();
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.SelectedStaffInput.StaffID = (long)reader["StaffID"];
                if (reader.HasColumn("FullName"))
                {
                    p.SelectedStaffInput.FullName = reader["FullName"].ToString();
                }
            }
            if (reader.HasColumn("swhlName"))
            {
                p.swhlName = reader["swhlName"].ToString();
            }
            if (reader.HasColumn("DrugDeptPoDetailID"))
            {
                p.DrugDeptPoDetailID = reader["DrugDeptPoDetailID"] as long?;
            }
            if (reader.HasColumn("DrugDeptPoID"))
            {
                p.DrugDeptPoID = reader["DrugDeptPoID"] as long?;
            }
            if (reader.HasColumn("PONumber"))
            {
                p.PONumber = reader["PONumber"].ToString();
            }

            p.ObjV_GoodsType = new Lookup();
            if (reader.HasColumn("V_GoodsType") && reader["V_GoodsType"] != DBNull.Value)
            {
                p.V_GoodsType = (long)reader["V_GoodsType"];

                p.ObjV_GoodsType = GetLookupFromReader(reader);
            }
            if (reader.HasColumn("GoodsTypeName"))
            {
                p.GoodsTypeName = reader["GoodsTypeName"].ToString();
            }
            if (reader.HasColumn("IsPercent") && reader["IsPercent"] != DBNull.Value)
            {
                p.IsPercent = (bool)reader["IsPercent"];
            }
            if (reader.HasColumn("DiscountByPercent") && reader["DiscountByPercent"] != DBNull.Value)
            {
                p.DiscountingByPercent = Convert.ToDecimal(reader["DiscountByPercent"]);
            }
            if (reader.HasColumn("Discounting") && reader["Discounting"] != DBNull.Value)
            {
                p.Discounting = Convert.ToDecimal(reader["Discounting"]);
            }
            if (reader.HasColumn("IsPercent") && reader["IsPercent"] != DBNull.Value)
            {
                p.IsPercent = (bool)reader["IsPercent"];
            }
            if (reader.HasColumn("NoPrint"))
            {
                p.NoPrint = reader["NoPrint"] as bool?;
            }

            if (reader.HasColumn("IsUnitPackage"))
            {
                p.IsUnitPackage = reader["IsUnitPackage"] as bool?;
            }

            if (reader.HasColumn("PackageQuantity") && reader["PackageQuantity"] != DBNull.Value)
            {
                p.PackageQuantity = Convert.ToDouble(reader["PackageQuantity"]);
            }

            if (reader.HasColumn("PackagePrice") && reader["PackagePrice"] != DBNull.Value)
            {
                p.PackagePrice = Convert.ToDecimal(reader["PackagePrice"]);
            }

            if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
            {
                p.InBuyingPriceActual = (decimal)reader["InCost"];
                p.InCost = (decimal)reader["InCost"];
            }

            if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
            {
                p.NormalPrice = (decimal)reader["NormalPrice"];
            }
            if (reader.HasColumn("HIPatientPrice") && reader["HIPatientPrice"] != DBNull.Value)
            {
                p.HIPatientPrice = (decimal)reader["HIPatientPrice"];
            }
            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = (decimal)reader["HIAllowedPrice"];
            }
            if (reader.HasColumn("ClinicDeptQty") && reader["ClinicDeptQty"] != DBNull.Value)
            {
                p.ClinicDeptQty = Convert.ToDecimal(reader["ClinicDeptQty"]);
            }

            if (reader.HasColumn("TempOutwardInvNum") && reader["TempOutwardInvNum"] != DBNull.Value)
            {
                p.TempOutwardInvNum = reader["TempOutwardInvNum"].ToString();
            }

            p.ObjSupplierID = new DrugDeptSupplier();
            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.ObjSupplierID = GetDrugDeptSupplierFromReader(reader);
            }

            if (reader.HasColumn("GenMedVersionID") && reader["GenMedVersionID"] != DBNull.Value)
            {
                p.GenMedVersionID = Convert.ToInt64(reader["GenMedVersionID"]);
            }

            #region Copy lại, để khi đổi giá bán theo lô, so sánh cái cũ và cái mới, nếu cái mới khác cái cũ thì đổi trạng thái cái mới là Modified (18/05/2015 16:42).
            p.NormalPrice_Orig = p.NormalPrice;
            p.HIPatientPrice_Orig = p.HIPatientPrice;
            p.HIAllowedPrice_Orig = p.HIAllowedPrice;
            #endregion
            if (reader.HasColumn("DrugDeptInIDOrig") && reader["DrugDeptInIDOrig"] != DBNull.Value)
            {
                p.DrugDeptInIDOrig = Convert.ToInt64(reader["DrugDeptInIDOrig"]);
            }
            if (reader.HasColumn("IsNotVat") && reader["IsNotVat"] != DBNull.Value)
            {
                p.IsNotVat = Convert.ToBoolean(reader["IsNotVat"]);
            }
            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.VAT = Convert.ToDecimal(reader["VAT"]);
            }
            else
            {
                p.VAT = null;
            }

            return p;
        }

        protected virtual List<InwardDrugMedDept> GetInwardDrugMedDeptCollectionFromReader(IDataReader reader)
        {
            var lst = new List<InwardDrugMedDept>();
            while (reader.Read())
            {
                lst.Add(GetInwardDrugMedDeptFromReader(reader));
            }
            return lst;
        }

        protected virtual OutwardDrugClinicDeptInvoice GetOutwardDrugClinicDeptInvoiceFromReader(IDataReader reader)
        {
            var p = new OutwardDrugClinicDeptInvoice
            {
                SelectedStaff = new Staff()
            };
            if (reader.HasColumn("outiID") && reader["outiID"] != DBNull.Value)
            {
                p.outiID = Convert.ToInt32(reader["outiID"]);
            }
            if (reader.HasColumn("OutInvID") && reader["OutInvID"] != DBNull.Value)
            {
                p.OutInvID = Convert.ToString(reader["OutInvID"]);
            }
            if (reader.HasColumn("OutInvoiceNumber") && reader["OutInvoiceNumber"] != DBNull.Value)
            {
                p.OutInvoiceNumber = Convert.ToString(reader["OutInvoiceNumber"]);
            }
            if (reader.HasColumn("OutDate") && reader["OutDate"] != DBNull.Value)
            {
                p.OutDate = Convert.ToDateTime(reader["OutDate"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt32(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = Convert.ToInt32(reader["StaffID"]);
            }
            if (reader.HasColumn("StoreID") && reader["StoreID"] != DBNull.Value)
            {
                p.StoreID = Convert.ToInt32(reader["StoreID"]);
            }
            if (reader.HasColumn("TypID") && reader["TypID"] != DBNull.Value)
            {
                p.TypID = Convert.ToInt32(reader["TypID"]);
            }
            if (reader.HasColumn("MSCID") && reader["MSCID"] != DBNull.Value)
            {
                p.MSCID = Convert.ToInt32(reader["MSCID"]);
            }
            if (reader.HasColumn("IMEID") && reader["IMEID"] != DBNull.Value)
            {
                p.IMEID = Convert.ToInt32(reader["IMEID"]);
            }
            if (reader.HasColumn("HITTypeID") && reader["HITTypeID"] != DBNull.Value)
            {
                p.HITTypeID = Convert.ToDecimal(reader["HITTypeID"]);
            }
            if (reader.HasColumn("ReturnID") && reader["ReturnID"] != DBNull.Value)
            {
                p.ReturnID = Convert.ToInt32(reader["ReturnID"]);
            }
            if (reader.HasColumn("CheckedPoint") && reader["CheckedPoint"] != DBNull.Value)
            {
                p.CheckedPoint = (bool)reader["CheckedPoint"];
            }
            if (reader["StaffID"] != DBNull.Value)
            {
                p.SelectedStaff.StaffID = (long)reader["StaffID"];
                if (reader.HasColumn("StaffName"))
                {
                    p.SelectedStaff.FullName = reader["StaffName"].ToString();
                    p.StaffName = reader["StaffName"].ToString();
                }
            }
            p.SelectedStorage = new RefStorageWarehouseLocation();
            if (reader["StoreID"] != DBNull.Value)
            {
                p.SelectedStorage.StoreID = (long)reader["StoreID"];
                if (reader.HasColumn("StoreName"))
                {
                    p.SelectedStorage.swhlName = reader["StoreName"].ToString();

                }
            }
            p.RefOutputType = new RefOutputType();
            if (reader.HasColumn("TypName"))
            {
                p.RefOutputType.TypID = (long)reader["TypID"];
                p.RefOutputType.TypName = reader["TypName"].ToString();
            }
            if (reader.HasColumn("OutputToID") && reader["OutputToID"] != DBNull.Value)
            {
                p.OutputToID = (long)reader["OutputToID"];

            }
            if (reader.HasColumn("OutputToIDName"))
            {
                p.OutputToIDName = reader["OutputToIDName"].ToString();
            }
            if (reader.HasColumn("ReqNumCode"))
            {
                p.ReqNumCode = reader["ReqNumCode"].ToString();
            }
            if (reader.HasColumn("ReqDrugInClinicDeptID"))
            {
                p.ReqDrugInClinicDeptID = reader["ReqDrugInClinicDeptID"] as long?;
            }
            if (reader.HasColumn("Confirmed"))
            {
                p.Confirmed = reader["Confirmed"] as bool?;
            }
            p.RecordState = RecordState.UNCHANGED;
            if (reader.HasColumn("OutPtRegistrationID") && reader["OutPtRegistrationID"] != DBNull.Value)
            {
                p.OutPtRegistrationID = Convert.ToInt64(reader["OutPtRegistrationID"]);
            }
            if (p.PtRegistrationID.GetValueOrDefault() > 0 || p.OutPtRegistrationID > 0)
            {
                p.PatientRegistration = GetPatientRegistrationFromReader(reader);
                if (p.OutPtRegistrationID > 0)
                {
                    p.PatientRegistration.PtRegistrationID = p.OutPtRegistrationID;
                }
            }
            if (reader.HasColumn("InPatientBillingInvID"))
            {
                p.InPatientBillingInvID = reader["InPatientBillingInvID"] as long?;
            }
            if (reader.HasColumn("BillingInvNum") && reader["BillingInvNum"] != DBNull.Value)
            {
                p.BillingInvNum = reader["BillingInvNum"].ToString();
            }
            if (reader.HasColumn("PaidTime"))
            {
                p.PaidTime = reader["PaidTime"] as DateTime?;
            }
            if (reader.HasColumn("Notes") && reader["Notes"] != DBNull.Value)
            {
                p.Notes = reader["Notes"].ToString();
            }
            if (reader.HasColumn("CustomerName") && reader["CustomerName"] != DBNull.Value)
            {
                p.CustomerName = reader["CustomerName"].ToString();
            }
            if (reader.HasColumn("PhoneNumber") && reader["PhoneNumber"] != DBNull.Value)
            {
                p.PhoneNumber = reader["PhoneNumber"].ToString();
            }
            if (reader.HasColumn("Address") && reader["Address"] != DBNull.Value)
            {
                p.Address = reader["Address"].ToString();
            }
            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
            }
            if (reader.HasColumn("InstructionIDCollection") && reader["InstructionIDCollection"] != DBNull.Value)
            {
                try
                {
                    XDocument InstructionIDCollection = XDocument.Load(new StringReader(reader["InstructionIDCollection"].ToString()));
                    p.FromIntPtDiagDrInstructionIDCollection = InstructionIDCollection.Element("root").Elements("item").Select(x => new InPatientInstruction
                    {
                        IntPtDiagDrInstructionID = Convert.ToInt64(x.Element("ID").Value),
                        LastModifiedDate = Convert.ToDateTime(x.Element("LastModifiedDate").Value)
                    }).ToArray();
                }
                catch
                {
                    throw new Exception("InstructionIDCollection is invalid");
                }
            }
            if (reader.HasColumn("OutDrugInvStatus") && reader["OutDrugInvStatus"] != DBNull.Value)
            {
                p.OutDrugInvStatus = reader["OutDrugInvStatus"].ToString();
            }
            if (reader.HasColumn("DSPTModifiedDate") && reader["DSPTModifiedDate"] != DBNull.Value)
            {
                p.DSPTModifiedDate = Convert.ToDateTime(reader["DSPTModifiedDate"]);
            }
            return p;
        }

        protected virtual List<OutwardDrugClinicDeptInvoice> GetOutwardDrugClinicDeptInvoiceCollectionFromReader(IDataReader reader)
        {
            var lst = new List<OutwardDrugClinicDeptInvoice>();
            while (reader.Read())
            {
                lst.Add(GetOutwardDrugClinicDeptInvoiceFromReader(reader));
            }
            return lst;
        }

        protected virtual OutwardDrugMedDeptInvoice GetOutwardDrugMedDeptInvoiceFromReader(IDataReader reader)
        {
            OutwardDrugMedDeptInvoice p = new OutwardDrugMedDeptInvoice();
            if (reader.HasColumn("outiID") && reader["outiID"] != DBNull.Value)
            {
                p.outiID = Convert.ToInt32(reader["outiID"]);
            }
            if (reader.HasColumn("OutInvID"))
            {
                p.OutInvID = reader["OutInvID"].ToString();
            }
            if (reader.HasColumn("OutDate") && reader["OutDate"] != DBNull.Value)
            {
                p.OutDate = (DateTime)reader["OutDate"];
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = reader["StaffID"] as Int64?;
            }
            if (reader.HasColumn("StaffName"))
            {
                p.StaffName = reader["StaffName"].ToString();
            }
            if (reader.HasColumn("StoreID") && reader["StoreID"] != DBNull.Value)
            {
                p.StoreID = reader["StoreID"] as long?;
                p.SelectedStorage = new RefStorageWarehouseLocation { StoreID = (long)reader["StoreID"] };
                if (reader.HasColumn("swhlName"))
                {
                    p.SelectedStorage.swhlName = reader["swhlName"].ToString();
                }
            }
            if (reader.HasColumn("TypID"))
            {
                p.TypID = reader["TypID"] as long?;
            }
            if (reader.HasColumn("HITTypeID"))
            {
                p.HITTypeID = reader["HITTypeID"] as long?;
            }

            if (reader.HasColumn("V_OutDrugInvStatus"))
            {
                p.V_OutDrugInvStatus = (long)reader["V_OutDrugInvStatus"];
            }
            if (reader.HasColumn("CustomerName"))
            {
                p.FullName = reader["CustomerName"] as string;
            }
            if (reader.HasColumn("Address"))
            {
                p.Address = reader["Address"] as string;
            }

            if (reader.HasColumn("NumberPhone"))
            {
                p.NumberPhone = reader["NumberPhone"] as string;
            }

            if (reader.HasColumn("ReturnID"))
            {
                p.ReturnID = reader["ReturnID"] as long?;
            }

            if (reader.HasColumn("ReqDrugInClinicDeptID"))
            {
                p.ReqDrugInClinicDeptID = reader["ReqDrugInClinicDeptID"] as long?;
            }
            if (reader.HasColumn("ReqNumCode"))
            {
                p.ReqNumCode = reader["ReqNumCode"].ToString();
            }

            if (reader.HasColumn("V_ByOutPriceMedDept") && reader["V_ByOutPriceMedDept"] != DBNull.Value)
            {
                p.V_ByOutPriceMedDept = (long)reader["V_ByOutPriceMedDept"];
            }
            if (reader.HasColumn("Notes"))
            {
                p.Notes = reader["Notes"].ToString();
            }
            if (reader.HasColumn("CheckedPoint"))
            {
                p.CheckedPoint = (bool)reader["CheckedPoint"];
            }
            if (reader.HasColumn("IsHICount"))
            {
                p.IsHICount = reader["IsHICount"] as bool?;
            }
            if (reader.HasColumn("V_MedProductType") && reader["V_MedProductType"] != DBNull.Value)
            {
                p.V_MedProductType = (long)reader["V_MedProductType"];
            }
            if (reader.HasColumn("OutputToID"))
            {
                p.OutputToID = reader["OutputToID"] as long?;
            }
            if (reader.HasColumn("V_OutputTo") && reader["V_OutputTo"] != DBNull.Value)
            {
                p.V_OutputTo = (long)reader["V_OutputTo"];
            }
            if (reader.HasColumn("TypName"))
            {
                p.TypName = reader["TypName"].ToString();
            }
            if (reader.HasColumn("RefGenDrugCatID_1") && reader["RefGenDrugCatID_1"] != DBNull.Value)
            {
                p.RefGenDrugCatID_1 = Convert.ToInt64(reader["RefGenDrugCatID_1"]);
            }
            if (reader.HasColumn("CategoryName") && reader["CategoryName"] != DBNull.Value)
            {
                p.CategoryName = reader["CategoryName"].ToString();
            }
            if (reader.HasColumn("PaidTime"))
            {
                p.PaidTime = reader["PaidTime"] as DateTime?;
            }
            if (reader.HasColumn("RefundTime"))
            {
                p.RefundTime = reader["RefundTime"] as DateTime?;
            }
            if (reader.HasColumn("AlreadyImported") && reader["AlreadyImported"] != DBNull.Value)
            {
                p.AlreadyImported = (bool)reader["AlreadyImported"];
            }
            if (reader.HasColumn("LockedUpdate") && reader["LockedUpdate"] != DBNull.Value)
            {
                p.IsLockedUpdate = (bool)reader["LockedUpdate"];
            }
            if (reader.HasColumn("FromClinicDept") && reader["FromClinicDept"] != DBNull.Value)
            {
                p.FromClinicDept = Convert.ToBoolean(reader["FromClinicDept"]);
            }
            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.VAT = Convert.ToDecimal(reader["VAT"]);
            }

            //KMx: Set thêm các thuộc tính bên dưới để xuất thuốc theo toa (29/11/2014 17:31).
            #region Xuất thuốc theo toa

            if (reader.HasColumn("InPatientBillingInvID") && reader["InPatientBillingInvID"] != DBNull.Value)
            {
                p.InPatientBillingInvID = reader["InPatientBillingInvID"] as long?;
            }

            if (reader.HasColumn("HICardNo") && reader["HICardNo"] != DBNull.Value)
            {
                p.HICardNo = reader["HICardNo"].ToString();
            }

            p.SelectedPrescription = new Prescription();
            if (reader.HasColumn("IssueID") && reader["IssueID"] != DBNull.Value)
            {
                p.IssueID = reader["IssueID"] as long?;
                p.SelectedPrescription.IssueID = (long)reader["IssueID"];

                if (reader.HasColumn("Issue_HisID") && reader["Issue_HisID"] != DBNull.Value)
                {
                    p.SelectedPrescription.Issue_HisID = (long)reader["Issue_HisID"];
                }
                if (reader.HasColumn("V_RegistrationType"))
                {

                    var V_RegistrationType = reader["V_RegistrationType"] as long?;
                    if (Enum.IsDefined(typeof(AllLookupValues.RegistrationType), (int)V_RegistrationType.GetValueOrDefault(0)))
                    {
                        p.SelectedPrescription.V_RegistrationType = (AllLookupValues.RegistrationType)V_RegistrationType.Value;
                    }
                    else
                    {
                        p.SelectedPrescription.V_RegistrationType = AllLookupValues.RegistrationType.Unknown;
                    }
                }

                if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
                {
                    p.SelectedPrescription.PatientID = (long)reader["PatientID"];
                }
                if (reader.HasColumn("PatientCode"))
                {
                    p.SelectedPrescription.PatientCode = reader["PatientCode"].ToString();
                }
                if (reader.HasColumn("PatientFullName") && reader["PatientFullName"] != DBNull.Value)
                {
                    p.SelectedPrescription.PatientFullName = reader["PatientFullName"].ToString();
                }

                if (reader.HasColumn("PrescriptID") && reader["PrescriptID"] != DBNull.Value)
                {
                    p.SelectedPrescription.PrescriptID = (long)reader["PrescriptID"];
                }

                if (reader.HasColumn("PtRegistrationID"))
                {
                    p.PtRegistrationID = reader["PtRegistrationID"] as long?;
                    p.SelectedPrescription.PtRegistrationID = reader["PtRegistrationID"] as long?;
                }

                if (reader.HasColumn("ForOutPatient"))
                {
                    p.SelectedPrescription.ForOutPatient = reader["ForOutPatient"] as bool?;
                }
                if (reader.HasColumn("IsHICount"))
                {
                    p.IsHICount = reader["IsHICount"] as bool?;
                }

                if (reader.HasColumn("IssuedDateTime") && reader["IssuedDateTime"] != DBNull.Value)
                {
                    p.SelectedPrescription.IssuedDateTime = reader["IssuedDateTime"] as DateTime?;
                }
                if (reader.HasColumn("IssuerStaffID") && reader["IssuerStaffID"] != DBNull.Value)
                {

                    p.SelectedPrescription.ObjIssuerStaffID = new Staff { StaffID = Convert.ToInt64(reader["IssuerStaffID"]) };
                    if (reader.HasColumn("IssuerStaffIDName"))
                    {
                        p.SelectedPrescription.ObjIssuerStaffID.FullName = reader["IssuerStaffIDName"] == null ? "" : reader["IssuerStaffIDName"].ToString();
                    }
                    if (reader.HasColumn("IssuerStaffIDPhoneNumber"))
                    {
                        p.SelectedPrescription.ObjIssuerStaffID.SPhoneNumber = reader["IssuerStaffIDPhoneNumber"] == null ? "" : reader["IssuerStaffIDPhoneNumber"].ToString();
                    }

                }
                if (reader.HasColumn("ReIssuerStaffID") && reader["ReIssuerStaffID"] != DBNull.Value)
                {
                    p.SelectedPrescription.ObjReIssuerStaffID = new Staff
                    {
                        StaffID =
                            Convert.ToInt64(reader["ReIssuerStaffID"])
                    };
                    if (reader.HasColumn("ReIssuerStaffIDName"))
                    {
                        p.SelectedPrescription.ObjReIssuerStaffID.FullName = reader["ReIssuerStaffIDName"] == null ? "" : reader["ReIssuerStaffIDName"].ToString();
                    }
                    if (reader.HasColumn("ReIssuerStaffIDPhoneNumber"))
                    {
                        p.SelectedPrescription.ObjReIssuerStaffID.SPhoneNumber = reader["ReIssuerStaffIDPhoneNumber"] == null ? "" : reader["ReIssuerStaffIDPhoneNumber"].ToString();
                    }
                }


            }
            #endregion
            if (reader.HasColumn("ReturninviID") && reader["ReturninviID"] != DBNull.Value)
            {
                p.ReturninviID = (long)reader["ReturninviID"];
            }
            if (reader.HasColumn("InvInvoiceNumber") && reader["InvInvoiceNumber"] != DBNull.Value)
            {
                p.InvInvoiceNumber = reader["InvInvoiceNumber"].ToString();
            }
            if (reader.HasColumn("SerialNumber") && reader["SerialNumber"] != DBNull.Value)
            {
                p.SerialNumber = reader["SerialNumber"].ToString();
            }
            if (reader.HasColumn("InvoiceForm") && reader["InvoiceForm"] != DBNull.Value)
            {
                p.InvoiceForm = reader["InvoiceForm"].ToString();
            }
            if (reader.HasColumn("DSPTModifiedDate") && reader["DSPTModifiedDate"] != DBNull.Value)
            {
                p.DSPTModifiedDate = Convert.ToDateTime(reader["DSPTModifiedDate"]);
            }
            return p;
        }

        protected virtual List<OutwardDrugMedDeptInvoice> GetOutwardDrugMedDeptInvoiceCollectionFromReader(IDataReader reader)
        {
            var lst = new List<OutwardDrugMedDeptInvoice>();
            while (reader.Read())
            {
                lst.Add(GetOutwardDrugMedDeptInvoiceFromReader(reader));
            }
            return lst;
        }

        protected virtual OutwardDrugClinicDept GetOutwardDrugClinicDeptFromReader(IDataReader reader, long? staffID = null)
        {
            var p = new OutwardDrugClinicDept();
            //{
            //    GenMedProductID = Convert.ToInt64(reader["GenMedProductID"]),
            //    OutID = Convert.ToInt64(reader["OutID"]),
            //    outiID = Convert.ToInt64(reader["outiID"]),
            //    InID = reader["InID"] as long?,
            //    OutQuantity = Convert.ToDecimal(reader["OutQuantity"]),
            //    OutQuantityOld = Convert.ToDecimal(reader["OutQuantity"]),
            //    //StaffID = staffID
            //};

            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                p.GenMedProductID = Convert.ToInt64(reader["GenMedProductID"]);
            }
            if (reader.HasColumn("OutID") && reader["OutID"] != DBNull.Value)
            {
                p.OutID = Convert.ToInt64(reader["OutID"]);
            }
            if (reader.HasColumn("outiID") && reader["outiID"] != DBNull.Value)
            {
                p.outiID = Convert.ToInt64(reader["outiID"]);
            }
            if (reader.HasColumn("InID") && reader["InID"] != DBNull.Value)
            {
                p.InID = Convert.ToInt32(reader["InID"]);
            }
            if (reader.HasColumn("OutQuantity") && reader["OutQuantity"] != DBNull.Value)
            {
                p.OutQuantity = Convert.ToDecimal(reader["OutQuantity"]);
                p.OutQuantityOld = Convert.ToDecimal(reader["OutQuantity"]);
            }
            p.StaffID = staffID != null ? staffID.GetValueOrDefault() : 0;

            try
            {
                #region KMx: Có tính tiền BH, tính tiền BN hay không, loại Vật tư y tế (08/12/2014 10:26).
                if (reader.HasColumn("IsCountPatient") && reader["IsCountPatient"] != DBNull.Value)
                {
                    p.IsCountPatient = (bool)reader["IsCountPatient"];
                }
                else
                {
                    p.IsCountPatient = false;
                }

                if (reader.HasColumn("IsInPackage") && reader["IsInPackage"] != DBNull.Value)
                {
                    p.IsInPackage = Convert.ToBoolean(reader["IsInPackage"]);
                }

                if (reader.HasColumn("V_MedicalMaterial") && reader["V_MedicalMaterial"] != DBNull.Value)
                {
                    if (Enum.IsDefined(typeof(AllLookupValues.V_MedicalMaterial), (long)reader["V_MedicalMaterial"]))
                    {
                        p.V_MedicalMaterial = (long)reader["V_MedicalMaterial"];
                        if (p.V_MedicalMaterial == (long)AllLookupValues.V_MedicalMaterial.VTYT_THAYTHE)
                        {
                            p.IsReplaceMedMat = true;
                        }
                        else if (p.V_MedicalMaterial == (long)AllLookupValues.V_MedicalMaterial.VTYT_TIEUHAO)
                        {
                            p.IsDisposeMedMat = true;
                        }
                    }
                    else
                    {
                        p.V_MedicalMaterial = 0;
                    }
                }
                #endregion

                if (reader.HasColumn("HIPaymentPercent") && reader["HIPaymentPercent"] != DBNull.Value)
                {
                    p.HIPaymentPercent = Convert.ToDouble(reader["HIPaymentPercent"]);
                }

                p.InwardDrugClinicDept = new InwardDrugClinicDept
                {
                    GenMedProductID = reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value ? (long?)reader["GenMedProductID"] : null,
                    InID = reader.HasColumn("InID") && reader["InID"] != DBNull.Value ? (long)reader["InID"] : 0
                };
                if (reader.HasColumn("inviID") && reader["inviID"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.inviID = (long)reader["inviID"];
                }
                if (reader.HasColumn("InQuantity") && reader["InQuantity"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.InQuantity = Convert.ToDecimal(reader["InQuantity"]);
                }
                if (reader.HasColumn("Remaining") && reader["Remaining"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.Remaining = Convert.ToDecimal(reader["Remaining"]);
                }
                if (reader.HasColumn("InBatchNumber") && reader["InBatchNumber"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.InBatchNumber = reader["InBatchNumber"].ToString();
                }
                if (reader.HasColumn("InProductionDate") && reader["InProductionDate"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.InProductionDate = reader["InProductionDate"] as DateTime?;
                }
                if (reader.HasColumn("InExpiryDate") && reader["InExpiryDate"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.InExpiryDate = reader["InExpiryDate"] as DateTime?;
                }
                if (reader.HasColumn("InBuyingPrice") && reader["InBuyingPrice"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.InBuyingPrice = (decimal)reader["InBuyingPrice"];
                }
                if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.InCost = (decimal)reader["InCost"];
                }

                if (reader.HasColumn("InwardDrug_NormalPrice") && reader["InwardDrug_NormalPrice"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.NormalPrice = (decimal)reader["InwardDrug_NormalPrice"];

                }
                if (reader.HasColumn("InwardDrug_HIPatientPrice") && reader["InwardDrug_HIPatientPrice"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.HIPatientPrice = (decimal)reader["InwardDrug_HIPatientPrice"];

                }
                if (reader.HasColumn("InwardDrug_HIAllowedPrice") && reader["InwardDrug_HIAllowedPrice"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.HIAllowedPrice = (decimal)reader["InwardDrug_HIAllowedPrice"];
                }
                if (reader.HasColumn("GenMedVersionID") && reader["GenMedVersionID"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.GenMedVersionID = Convert.ToInt64(reader["GenMedVersionID"]);
                }
                if (reader.HasColumn("IsNotVat") && reader["IsNotVat"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.IsNotVat = Convert.ToBoolean(reader["IsNotVat"]);
                }
                if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
                {
                    p.InwardDrugClinicDept.VAT = Convert.ToDecimal(reader["VAT"]);
                }
                else
                {
                    p.InwardDrugClinicDept.VAT = null;
                }
            }
            catch
            {
            }
            if (reader.HasColumn("OutClinicDeptReqID") && reader["OutClinicDeptReqID"] != DBNull.Value)
            {
                p.OutClinicDeptReqID = reader["OutClinicDeptReqID"] as long?;
            }
            if (reader.HasColumn("InwardDate") && reader["InwardDate"] != DBNull.Value)
            {
                p.InwardDate = Convert.ToDateTime(reader["InwardDate"]);
            }
            if (reader.HasColumn("InExpiryDate") && reader["InExpiryDate"] != DBNull.Value)
            {
                p.InExpiryDate = (DateTime)reader["InExpiryDate"];
            }
            if (reader.HasColumn("InBatchNumber") && reader["InBatchNumber"] != DBNull.Value)
            {
                p.InBatchNumber = reader["InBatchNumber"].ToString();
            }
            //▼====: #103
            if (reader.HasColumn("IsCountPatientCOVID") && reader["IsCountPatientCOVID"] != DBNull.Value)
            {
                p.IsCountPatientCOVID = Convert.ToBoolean(reader["IsCountPatientCOVID"]);
            }
            if (reader.HasColumn("OtherAmt") && reader["OtherAmt"] != DBNull.Value)
            {
                p.OtherAmt = Convert.ToDecimal(reader["OtherAmt"]);
            }
            //▲====: #103
            if (reader.HasColumn("OutPrice") && reader["OutPrice"] != DBNull.Value)
            {
                p.OutPrice = (decimal)reader["OutPrice"];
                p.InvoicePrice = (decimal)reader["OutPrice"];
            }

            if (reader.HasColumn("OutPriceDifference") && reader["OutPriceDifference"] != DBNull.Value)
            {
                p.OutPriceDifference = (decimal)reader["OutPriceDifference"];
            }
            if (reader.HasColumn("OutAmount") && reader["OutAmount"] != DBNull.Value)
            {
                p.OutAmount = reader["OutAmount"] as decimal?;
            }

            if (reader.HasColumn("OutAmountCoPay") && reader["OutAmountCoPay"] != DBNull.Value)
            {
                p.OutAmountCoPay = reader["OutAmountCoPay"] as decimal?;
            }

            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = reader["HIAllowedPrice"] as decimal?;
            }

            if (reader.HasColumn("Qty") && reader["Qty"] != DBNull.Value)
            {
                p.Qty = Convert.ToDecimal(reader["Qty"]);
                p.RequestQty = Convert.ToDecimal(reader["Qty"]);
            }
            if (reader.HasColumn("QtyReturn") && reader["QtyReturn"] != DBNull.Value)
            {
                p.QtyReturn = Convert.ToDecimal(reader["QtyReturn"]);
            }
            if (reader.HasColumn("OutNotes") && reader["OutNotes"] != DBNull.Value)
            {
                p.OutNotes = reader["OutNotes"].ToString();
            }

            if (reader.HasColumn("V_MedProductType"))
            {
                long? medProductType = reader["V_MedProductType"] != DBNull.Value ? (long?)reader["V_MedProductType"] : null;
                if (medProductType != null && Enum.IsDefined(typeof(AllLookupValues.MedProductType), (int)medProductType))
                {
                    p.MedProductType = (AllLookupValues.MedProductType)medProductType;
                }
                else
                {
                    p.MedProductType = AllLookupValues.MedProductType.Unknown;
                }
            }
            if (reader.HasColumn("OutHIRebate") && reader["OutHIRebate"] != DBNull.Value)
            {
                p.HIPayment = (decimal)reader["OutHIRebate"];
                p.TotalHIPayment = (reader["OutHIRebate"] as decimal?).GetValueOrDefault();
            }
            else
            {
                p.TotalHIPayment = 0;
            }
            p.TotalInvoicePrice = reader.HasColumn("OutAmount") && reader["OutAmount"] != DBNull.Value ? (decimal)reader["OutAmount"] : 0;

            if (reader.HasColumn("HIBenefit") && reader["HIBenefit"] != DBNull.Value)
            {
                p.HIBenefit = reader["HIBenefit"] as double?;
            }
            if (reader.HasColumn("HisID") && reader["HisID"] != DBNull.Value)
            {
                p.HisID = reader["HisID"] as long?;
            }
            if (reader.HasColumn("OutAmountCoPay") && reader["OutAmountCoPay"] != DBNull.Value)
            {
                p.TotalCoPayment = (decimal)reader["OutAmountCoPay"];
            }
            else
            {
                p.TotalCoPayment = 0;
            }

            if (p.IsInPackage)
            {
                p.TotalPatientPayment = 0;
            }
            else
            {
                p.TotalPatientPayment = p.TotalInvoicePrice - p.TotalHIPayment - p.OtherAmt;
            }

            if (p.HIAllowedPrice.GetValueOrDefault() == 0)
            {
                p.PriceDifference = 0;
                p.TotalPriceDifference = 0;
            }
            else
            {
                p.PriceDifference = p.InvoicePrice - p.HIAllowedPrice.GetValueOrDefault(0);
                p.TotalPriceDifference = p.TotalInvoicePrice - p.TotalHIPayment - p.TotalCoPayment;
            }

            //KMx: Nếu OutID > 0 thì mới set RecordState = UNCHANGED. Vì khi load mẫu OutID = 0, nếu để RecordState = UNCHANGED thì không lưu được (16/07/2016 14:51).
            if (p.OutID > 0)
            {
                p.EntityState = EntityState.PERSITED;
                p.RecordState = RecordState.UNCHANGED;
            }

            if (reader.HasColumn("HIBenefit") && reader["HIBenefit"] != DBNull.Value)
            {
                p.HIBenefit = reader["HIBenefit"] as double?;
            }
            if (p.TotalHIPayment > 0)
            {
                p.HiApplied = true;
            }
            else
            {
                p.HiApplied = false;
            }
            if (reader.HasColumn("IsCountHI") && reader["IsCountHI"] != DBNull.Value)
            {
                p.IsCountHI = (bool)reader["IsCountHI"];
            }
            else
            {
                p.IsCountHI = (p.TotalHIPayment > 0) ? true : false;
            }

            if (reader.HasColumn("MDose") && reader["MDose"] != DBNull.Value)
            {
                p.MDose = Convert.ToSingle(reader["MDose"]);
            }
            if (reader.HasColumn("ADose") && reader["ADose"] != DBNull.Value)
            {
                p.ADose = Convert.ToSingle(reader["ADose"]);
            }
            if (reader.HasColumn("EDose") && reader["EDose"] != DBNull.Value)
            {
                p.EDose = Convert.ToSingle(reader["EDose"]);
            }
            if (reader.HasColumn("NDose") && reader["NDose"] != DBNull.Value)
            {
                p.NDose = Convert.ToSingle(reader["NDose"]);
            }

            if (reader.HasColumn("MDoseStr") && reader["MDoseStr"] != DBNull.Value)
            {
                p.MDoseStr = reader["MDoseStr"].ToString();
            }
            if (reader.HasColumn("ADoseStr") && reader["ADoseStr"] != DBNull.Value)
            {
                p.ADoseStr = reader["ADoseStr"].ToString();
            }
            if (reader.HasColumn("EDoseStr") && reader["EDoseStr"] != DBNull.Value)
            {
                p.EDoseStr = reader["EDoseStr"].ToString();
            }
            if (reader.HasColumn("NDoseStr") && reader["NDoseStr"] != DBNull.Value)
            {
                p.NDoseStr = reader["NDoseStr"].ToString();
            }

            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.DoctorStaff = new Staff();
                p.DoctorStaff_Orig = new Staff();

                p.DoctorStaff.StaffID = Convert.ToInt64(reader["DoctorStaffID"]);
                p.DoctorStaff_Orig.StaffID = Convert.ToInt64(reader["DoctorStaffID"]);

                if (reader.HasColumn("DoctorStaffName") && reader["DoctorStaffName"] != DBNull.Value)
                {
                    p.DoctorStaff.FullName = reader["DoctorStaffName"].ToString();
                    p.DoctorStaff_Orig.FullName = reader["DoctorStaffName"].ToString();
                }
            }
            if (reader.HasColumn("MedicalInstructionDate") && reader["MedicalInstructionDate"] != DBNull.Value)
            {
                p.MedicalInstructionDate = Convert.ToDateTime(reader["MedicalInstructionDate"]);
            }
            if (reader.HasColumn("IntravenousPlan_InPtID") && reader["IntravenousPlan_InPtID"] != DBNull.Value)
            {
                p.IntravenousPlan_InPtID = Convert.ToInt64(reader["IntravenousPlan_InPtID"]);
            }
            if (reader.HasColumn("Notes") && reader["Notes"] != DBNull.Value)
            {
                p.Notes = (reader["Notes"]).ToString();
            }

            #region Copy lại, để khi cập nhật phiếu xuất, so sánh cái cũ và cái mới, nếu cái mới khác cái cũ thì đổi trạng thái cái mới là Modified (28/01/2015 10:38).
            p.IsCountHI_Orig = p.IsCountHI;
            p.IsCountPatient_Orig = p.IsCountPatient;
            p.OutQuantity_Orig = p.OutQuantity;
            p.InID_Orig = p.InID;
            p.OutNotes_Orig = p.OutNotes;
            p.MDoseStr_Orig = p.MDoseStr;
            p.ADoseStr_Orig = p.ADoseStr;
            p.EDoseStr_Orig = p.EDoseStr;
            p.NDoseStr_Orig = p.NDoseStr;
            p.V_MedicalMaterial_Orig = p.V_MedicalMaterial;
            p.MedicalInstructionDate_Orig = p.MedicalInstructionDate;
            //▼==== #132
            if (reader.HasColumn("IsCountSE") && reader["IsCountSE"] != DBNull.Value)
            {
                p.IsCountSE = (bool)reader["IsCountSE"];
            }
            //▲==== #132
            #endregion

            try
            {
                p.DrugInvoice = new OutwardDrugClinicDeptInvoice
                {
                    SelectedStaff = new Staff()
                };
                if (reader.HasColumn("outiID") && reader["outiID"] != DBNull.Value)
                {
                    p.DrugInvoice.outiID = Convert.ToInt32(reader["outiID"]);
                }
                if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
                {
                    p.DrugInvoice.PtRegistrationID = Convert.ToInt32(reader["PtRegistrationID"]);
                }
                if (reader.HasColumn("StoreID") && reader["StoreID"] != DBNull.Value)
                {
                    p.DrugInvoice.StoreID = Convert.ToInt32(reader["StoreID"]);
                }
                if (reader.HasColumn("TypID") && reader["TypID"] != DBNull.Value)
                {
                    p.DrugInvoice.TypID = Convert.ToInt32(reader["TypID"]);
                }
                if (reader.HasColumn("OutDate") && reader["OutDate"] != DBNull.Value)
                {
                    p.DrugInvoice.OutDate = Convert.ToDateTime(reader["OutDate"]);
                }
                if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
                {
                    p.DrugInvoice.StaffID = Convert.ToInt32(reader["StaffID"]);
                }
                if (reader.HasColumn("OutInvID") && reader["OutInvID"] != DBNull.Value)
                {
                    p.DrugInvoice.OutInvID = Convert.ToString(reader["OutInvID"]);
                }
                if (reader.HasColumn("CheckedPoint") && reader["CheckedPoint"] != DBNull.Value)
                {
                    p.DrugInvoice.CheckedPoint = (bool)reader["CheckedPoint"];
                }
                if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
                {
                    p.DrugInvoice.SelectedStaff.StaffID = (long)reader["StaffID"];
                    if (reader.HasColumn("StaffName") && reader["StaffName"] != DBNull.Value)
                    {
                        p.DrugInvoice.SelectedStaff.FullName = reader["StaffName"].ToString();
                    }
                }
                p.DrugInvoice.SelectedStorage = new RefStorageWarehouseLocation();
                if (reader.HasColumn("StoreID") && reader["StoreID"] != DBNull.Value)
                {
                    p.DrugInvoice.SelectedStorage.StoreID = (long)reader["StoreID"];
                    if (reader.HasColumn("StoreName") && reader["StoreName"] != DBNull.Value)
                    {
                        p.DrugInvoice.SelectedStorage.swhlName = reader["StoreName"].ToString();
                    }
                }
                p.DrugInvoice.PatientRegistration = new PatientRegistration();
                if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
                {
                    p.DrugInvoice.PatientRegistration.PtRegistrationID = Convert.ToInt32(reader["PtRegistrationID"]);
                }
                if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                {
                    p.DrugInvoice.PatientRegistration.FullName = Convert.ToString(reader["FullName"]);
                }
                if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
                {
                    p.DrugInvoice.PatientRegistration.PatientCode = Convert.ToString(reader["PatientCode"]);
                }
                if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
                {
                    p.DrugInvoice.PatientRegistration.PatientID = Convert.ToInt32(reader["PatientID"]);
                }
                if (reader.HasColumn("ExamDate") && reader["ExamDate"] != DBNull.Value)
                {
                    p.DrugInvoice.PatientRegistration.ExamDate = Convert.ToDateTime(reader["ExamDate"]);
                }

            }
            catch (Exception ex)
            {
                AxLogger.Instance.LogError(ex);
            }
            try
            {
                p.GenMedProductItem = new RefGenMedProductDetails();
                if (reader.HasColumn("Code") && reader["Code"] != DBNull.Value)
                {
                    p.GenMedProductItem.Code = Convert.ToString(reader["Code"]);
                }
                if (reader.HasColumn("HICode") && reader["HICode"] != DBNull.Value)
                {
                    p.GenMedProductItem.HICode = Convert.ToString(reader["HICode"]);
                }
                if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
                {
                    p.GenMedProductItem.BrandName = Convert.ToString(reader["BrandName"]);
                }
                if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
                {
                    p.GenMedProductItem.GenericName = Convert.ToString(reader["GenericName"]);
                }
                if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
                {
                    p.GenMedProductItem.GenMedProductID = Convert.ToInt32(reader["GenMedProductID"]);
                }
                if (reader.HasColumn("DispenseVolume") && reader["DispenseVolume"] != DBNull.Value)
                {
                    p.GenMedProductItem.DispenseVolume = Convert.ToDouble(reader["DispenseVolume"]);
                }
                if (reader.HasColumn("UnitName") && reader["UnitName"] != DBNull.Value)
                {
                    p.GenMedProductItem.SelectedUnit = new RefUnit { UnitName = reader["UnitName"].ToString() };
                }
                if (reader.HasColumn("InsuranceCover") && reader["InsuranceCover"] != DBNull.Value)
                {
                    p.GenMedProductItem.InsuranceCover = reader["InsuranceCover"] as bool?;
                }
                if (reader.HasColumn("Visa") && reader["Visa"] != DBNull.Value)
                {
                    p.GenMedProductItem.Visa = reader["Visa"].ToString();
                }
                #region dung cho ban hang
                if (reader.HasColumn("STT") && reader["STT"] != DBNull.Value)
                {
                    p.GenMedProductItem.STT = Convert.ToInt64(reader["STT"]);
                }
                if (reader.HasColumn("InID") && reader["InID"] != DBNull.Value)
                {
                    p.GenMedProductItem.InID = Convert.ToInt64(reader["InID"]);
                }
                if (reader.HasColumn("Remaining") && reader["Remaining"] != DBNull.Value)
                {
                    p.GenMedProductItem.Remaining = Convert.ToDecimal(reader["Remaining"]);
                    p.GenMedProductItem.RemainingFirst = Convert.ToDecimal(reader["Remaining"]);
                }
                if (reader.HasColumn("OutPrice") && reader["OutPrice"] != DBNull.Value)
                {
                    p.GenMedProductItem.OutPrice = Convert.ToDecimal(reader["OutPrice"]);
                }
                if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
                {
                    p.GenMedProductItem.InCost = Convert.ToDecimal(reader["InCost"]);
                }
                if (reader.HasColumn("InBatchNumber") && reader["InBatchNumber"] != DBNull.Value)
                {
                    p.GenMedProductItem.InBatchNumber = reader["InBatchNumber"].ToString();
                }
                if (reader.HasColumn("SdlDescription") && reader["SdlDescription"] != DBNull.Value)
                {
                    p.GenMedProductItem.SdlDescription = reader["SdlDescription"].ToString();
                }
                if (reader.HasColumn("InExpiryDate") && reader["InExpiryDate"] != DBNull.Value)
                {
                    p.GenMedProductItem.InExpiryDate = reader["InExpiryDate"] as DateTime?;
                }

                //KMX: Thêm 3 cột giá để load phiếu YC xuất từ kho phòng đến bệnh nhân (13/12/2014 17:11).
                if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
                {
                    p.GenMedProductItem.NormalPrice = (decimal)reader["NormalPrice"];
                }

                if (reader.HasColumn("HIPatientPrice") && reader["HIPatientPrice"] != DBNull.Value)
                {
                    p.GenMedProductItem.HIPatientPrice = (decimal)reader["HIPatientPrice"];
                }

                if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
                {
                    p.GenMedProductItem.HIAllowedPrice = (decimal)reader["HIAllowedPrice"];
                }
                if (reader.HasColumn("InCategoryCOVID") && reader["InCategoryCOVID"] != DBNull.Value)
                {
                    p.GenMedProductItem.InCategoryCOVID = (bool)reader["InCategoryCOVID"];
                }
                #endregion

                //dung cho viec tinh lai gia BH
                p.ChargeableItem.NormalPriceNew = p.InwardDrugClinicDept.NormalPrice;
                p.ChargeableItem.HIPatientPriceNew = p.InwardDrugClinicDept.NormalPrice;

                if (reader.HasColumn("InsuranceCover") && reader["InsuranceCover"] != DBNull.Value)
                {
                    if (Convert.ToBoolean(reader["InsuranceCover"]))
                    {
                        p.ChargeableItem.HIPatientPriceNew = p.InwardDrugClinicDept.HIPatientPrice;
                        p.ChargeableItem.HIAllowedPriceNew = p.InwardDrugClinicDept.HIAllowedPrice;
                    }
                    else
                    {
                        p.ChargeableItem.HIPatientPriceNew = p.InwardDrugClinicDept.NormalPrice;
                        p.ChargeableItem.HIAllowedPriceNew = 0;
                    }
                }
                /*==== #006 ====*/
                if (reader.HasColumn("MaxQtyHIAllowItem") && reader["MaxQtyHIAllowItem"] != DBNull.Value)
                {
                    p.GenMedProductItem.MaxQtyHIAllowItem = Convert.ToInt32(reader["MaxQtyHIAllowItem"]);
                }
                if (reader.HasColumn("PaymentRateOfHIAddedItem") && reader["PaymentRateOfHIAddedItem"] != DBNull.Value)
                {
                    p.GenMedProductItem.PaymentRateOfHIAddedItem = Convert.ToDouble(reader["PaymentRateOfHIAddedItem"]);
                }
                /*==== #006 ====*/
                if (reader.HasColumn("CeilingPrice1stItem") && reader["CeilingPrice1stItem"] != DBNull.Value)
                {
                    p.GenMedProductItem.CeilingPrice1stItem = Convert.ToDecimal(reader["CeilingPrice1stItem"]);
                }
                if (reader.HasColumn("CeilingPrice2ndItem") && reader["CeilingPrice2ndItem"] != DBNull.Value)
                {
                    p.GenMedProductItem.CeilingPrice2ndItem = Convert.ToDecimal(reader["CeilingPrice2ndItem"]);
                }
                if (reader.HasColumn("CeilingPrice3rdItem") && reader["CeilingPrice3rdItem"] != DBNull.Value)
                {
                    p.GenMedProductItem.CeilingPrice3rdItem = Convert.ToDecimal(reader["CeilingPrice3rdItem"]);
                }
                if (reader.HasColumn("PaymentRateOfHIAddedItem") && reader["PaymentRateOfHIAddedItem"] != DBNull.Value)
                {
                    p.GenMedProductItem.PaymentRateOfHIAddedItem = Convert.ToDouble(reader["PaymentRateOfHIAddedItem"]);
                }
                if (reader.HasColumn("LimQtyHiItemMaxPaymtID") && reader["LimQtyHiItemMaxPaymtID"] != DBNull.Value)
                {
                    p.GenMedProductItem.LimQtyAndHIPrice = new LimQtyHiItemMaxPaymtPerc();
                    p.GenMedProductItem.LimQtyAndHIPrice.LimQtyHiItemMaxPaymtID = Convert.ToInt64(reader["LimQtyHiItemMaxPaymtID"]);
                    if (reader.HasColumn("LimQtyHiItemMaxPaymtName") && reader["LimQtyHiItemMaxPaymtName"] != DBNull.Value)
                    {
                        p.GenMedProductItem.LimQtyAndHIPrice.LimQtyHiItemMaxPaymtName = reader["LimQtyHiItemMaxPaymtName"].ToString();
                    }
                    if (reader.HasColumn("ItemNumber1MaxPayAmt") && reader["ItemNumber1MaxPayAmt"] != DBNull.Value)
                    {
                        p.GenMedProductItem.LimQtyAndHIPrice.ItemNumber1MaxPayAmt = Convert.ToDecimal(reader["ItemNumber1MaxPayAmt"]);
                    }
                    if (reader.HasColumn("ItemNumber1MaxPayPerc") && reader["ItemNumber1MaxPayPerc"] != DBNull.Value)
                    {
                        p.GenMedProductItem.LimQtyAndHIPrice.ItemNumber1MaxPayPerc = Convert.ToDecimal(reader["ItemNumber1MaxPayPerc"]);
                    }
                    if (reader.HasColumn("ItemNumber1InHiGroup") && reader["ItemNumber1InHiGroup"] != DBNull.Value)
                    {
                        p.GenMedProductItem.LimQtyAndHIPrice.ItemNumber1InHiGroup = Convert.ToBoolean(reader["ItemNumber1InHiGroup"]);
                    }
                    if (reader.HasColumn("ItemNumber2MaxPayAmt") && reader["ItemNumber2MaxPayAmt"] != DBNull.Value)
                    {
                        p.GenMedProductItem.LimQtyAndHIPrice.ItemNumber2MaxPayAmt = Convert.ToDecimal(reader["ItemNumber2MaxPayAmt"]);
                    }
                    if (reader.HasColumn("ItemNumber2MaxPayPerc") && reader["ItemNumber2MaxPayPerc"] != DBNull.Value)
                    {
                        p.GenMedProductItem.LimQtyAndHIPrice.ItemNumber2MaxPayPerc = Convert.ToDecimal(reader["ItemNumber2MaxPayPerc"]);
                    }
                    if (reader.HasColumn("ItemNumber2InHiGroup") && reader["ItemNumber2InHiGroup"] != DBNull.Value)
                    {
                        p.GenMedProductItem.LimQtyAndHIPrice.ItemNumber2InHiGroup = Convert.ToBoolean(reader["ItemNumber2InHiGroup"]);
                    }
                    if (reader.HasColumn("ItemNumber3MaxPayAmt") && reader["ItemNumber3MaxPayAmt"] != DBNull.Value)
                    {
                        p.GenMedProductItem.LimQtyAndHIPrice.ItemNumber3MaxPayAmt = Convert.ToDecimal(reader["ItemNumber3MaxPayAmt"]);
                    }
                    if (reader.HasColumn("ItemNumber3MaxPayPerc") && reader["ItemNumber3MaxPayPerc"] != DBNull.Value)
                    {
                        p.GenMedProductItem.LimQtyAndHIPrice.ItemNumber3MaxPayPerc = Convert.ToDecimal(reader["ItemNumber3MaxPayPerc"]);
                    }
                    if (reader.HasColumn("ItemNumber3InHiGroup") && reader["ItemNumber3InHiGroup"] != DBNull.Value)
                    {
                        p.GenMedProductItem.LimQtyAndHIPrice.ItemNumber3InHiGroup = Convert.ToBoolean(reader["ItemNumber3InHiGroup"]);
                    }
                    if (reader.HasColumn("ItemNumber1MaxBenefit") && reader["ItemNumber1MaxBenefit"] != DBNull.Value)
                    {
                        p.GenMedProductItem.LimQtyAndHIPrice.ItemNumber1MaxBenefit = Convert.ToDecimal(reader["ItemNumber1MaxBenefit"]);
                    }
                    if (reader.HasColumn("ItemNumber2MaxBenefit") && reader["ItemNumber2MaxBenefit"] != DBNull.Value)
                    {
                        p.GenMedProductItem.LimQtyAndHIPrice.ItemNumber2MaxBenefit = Convert.ToDecimal(reader["ItemNumber2MaxBenefit"]);
                    }
                    if (reader.HasColumn("ItemNumber3MaxBenefit") && reader["ItemNumber3MaxBenefit"] != DBNull.Value)
                    {
                        p.GenMedProductItem.LimQtyAndHIPrice.ItemNumber3MaxBenefit = Convert.ToDecimal(reader["ItemNumber3MaxBenefit"]);
                    }
                }
                if (reader.HasColumn("RefGenDrugCatID_1") && reader["RefGenDrugCatID_1"] != DBNull.Value)
                {
                    p.GenMedProductItem.RefGenDrugCatID_1 = Convert.ToInt64(reader["RefGenDrugCatID_1"]);
                }
                if (reader.HasColumn("RefGenDrugCatID_2") && reader["RefGenDrugCatID_2"] != DBNull.Value)
                {
                    p.GenMedProductItem.RefGenDrugCatID_2 = Convert.ToInt64(reader["RefGenDrugCatID_2"]);
                }
            }
            catch (Exception ex)
            {
                AxLogger.Instance.LogError(ex);
            }
            if (reader.HasColumn("OutInvAdministration") && reader["OutInvAdministration"] != DBNull.Value)
            {
                p.Administration = reader["OutInvAdministration"].ToString();
                p.Administration_Orig = p.Administration;
            }
            if (reader.HasColumn("DrugDeptInIDOrig") && reader["DrugDeptInIDOrig"] != DBNull.Value)
            {
                p.DrugDeptInIDOrig = Convert.ToInt64(reader["DrugDeptInIDOrig"]);
            }
            if (reader.HasColumn("LimQtyHiItemMaxPaymtID") && reader["LimQtyHiItemMaxPaymtID"] != DBNull.Value)
            {
                p.LimQtyAndHIPrice = new LimQtyHiItemMaxPaymtPerc();
                p.LimQtyAndHIPrice.LimQtyHiItemMaxPaymtID = Convert.ToInt64(reader["LimQtyHiItemMaxPaymtID"]);
                if (reader.HasColumn("LimQtyHiItemMaxPaymtName") && reader["LimQtyHiItemMaxPaymtName"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.LimQtyHiItemMaxPaymtName = reader["LimQtyHiItemMaxPaymtName"].ToString();
                }
                if (reader.HasColumn("ItemNumber1MaxPayAmt") && reader["ItemNumber1MaxPayAmt"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber1MaxPayAmt = Convert.ToDecimal(reader["ItemNumber1MaxPayAmt"]);
                }
                if (reader.HasColumn("ItemNumber1MaxPayPerc") && reader["ItemNumber1MaxPayPerc"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber1MaxPayPerc = Convert.ToDecimal(reader["ItemNumber1MaxPayPerc"]);
                }
                if (reader.HasColumn("ItemNumber1InHiGroup") && reader["ItemNumber1InHiGroup"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber1InHiGroup = Convert.ToBoolean(reader["ItemNumber1InHiGroup"]);
                }
                if (reader.HasColumn("ItemNumber2MaxPayAmt") && reader["ItemNumber2MaxPayAmt"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber2MaxPayAmt = Convert.ToDecimal(reader["ItemNumber2MaxPayAmt"]);
                }
                if (reader.HasColumn("ItemNumber2MaxPayPerc") && reader["ItemNumber2MaxPayPerc"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber2MaxPayPerc = Convert.ToDecimal(reader["ItemNumber2MaxPayPerc"]);
                }
                if (reader.HasColumn("ItemNumber2InHiGroup") && reader["ItemNumber2InHiGroup"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber2InHiGroup = Convert.ToBoolean(reader["ItemNumber2InHiGroup"]);
                }
                if (reader.HasColumn("ItemNumber3MaxPayAmt") && reader["ItemNumber3MaxPayAmt"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber3MaxPayAmt = Convert.ToDecimal(reader["ItemNumber3MaxPayAmt"]);
                }
                if (reader.HasColumn("ItemNumber3MaxPayPerc") && reader["ItemNumber3MaxPayPerc"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber3MaxPayPerc = Convert.ToDecimal(reader["ItemNumber3MaxPayPerc"]);
                }
                if (reader.HasColumn("ItemNumber3InHiGroup") && reader["ItemNumber3InHiGroup"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber3InHiGroup = Convert.ToBoolean(reader["ItemNumber3InHiGroup"]);
                }
                if (reader.HasColumn("ItemNumber1MaxBenefit") && reader["ItemNumber1MaxBenefit"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber1MaxBenefit = Convert.ToDecimal(reader["ItemNumber1MaxBenefit"]);
                }
                if (reader.HasColumn("ItemNumber2MaxBenefit") && reader["ItemNumber2MaxBenefit"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber2MaxBenefit = Convert.ToDecimal(reader["ItemNumber2MaxBenefit"]);
                }
                if (reader.HasColumn("ItemNumber3MaxBenefit") && reader["ItemNumber3MaxBenefit"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber3MaxBenefit = Convert.ToDecimal(reader["ItemNumber3MaxBenefit"]);
                }
            }
            if (reader.HasColumn("CountValue") && reader["CountValue"] != DBNull.Value)
            {
                p.CountValue = Convert.ToInt32(reader["CountValue"]);
                if (reader.HasColumn("TickTime") && reader["TickTime"] != DBNull.Value)
                {
                    p.TickTime = Convert.ToInt32(reader["TickTime"]);
                }
            }
            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.VAT = (reader["VAT"]) as double?;
            }
            else
            {
                p.VAT = null;
            }
            if (reader.HasColumn("GenMedVersionID") && reader["GenMedVersionID"] != DBNull.Value)
            {
                p.GenMedVersionID = reader["GenMedVersionID"] as long?;
            }
            return p;
        }

        protected virtual List<OutwardDrugClinicDept> GetOutwardDrugClinicDeptCollectionFromReader(IDataReader reader)
        {
            var lst = new List<OutwardDrugClinicDept>();
            while (reader.Read())
            {
                lst.Add(GetOutwardDrugClinicDeptFromReader(reader));
            }
            return lst;
        }

        protected virtual OutwardDrugMedDept GetOutwardDrugMedDeptFromReader(IDataReader reader)
        {
            var p = new OutwardDrugMedDept { GenMedProductID = Convert.ToInt64(reader["GenMedProductID"]) };
            try
            {
                p.RefGenericDrugDetail = GetRefGenMedProductDetailsFromReader(reader);
            }
            catch
            { }


            if (reader.HasColumn("OutID"))
            {
                p.OutID = Convert.ToInt64(reader["OutID"]);
            }
            if (reader.HasColumn("outiID"))
            {
                p.outiID = Convert.ToInt64(reader["outiID"]);
            }

            //KMx: Thêm ngày 24/09/2014 16:40.
            if (p.OutID > 0)
            {
                p.RecordState = RecordState.MODIFIED;
            }

            if (reader.HasColumn("InID"))
            {
                p.InID = reader["InID"] as long?;
            }
            p.OutQuantity = Convert.ToDecimal(reader["OutQuantity"]);
            p.OutQuantityOld = Convert.ToDecimal(reader["OutQuantity"]);
            p.Qty = p.OutQuantityOld;
            if (reader.HasColumn("OutPrice") && reader["OutPrice"] != DBNull.Value)
            {
                p.OutPrice = (decimal)reader["OutPrice"];
            }
            else
            {
                p.OutPrice = 0;
            }

            //KMx: Trước đây InvoicePrice nằm trong if (reader.HasColumn("OutAmount"))
            //Nhưng bây giờ phải để InvoicePrice = OutPrice để sử dụng bên xuất thuốc theo toa của Khoa Dược (giống nhà thuốc) 
            //Nếu sau khi sửa mà những cái cũ bị ảnh hưởng thì xem lại (27/11/2014 11:19).
            p.InvoicePrice = p.OutPrice;
            p.TotalPrice = (decimal)p.OutQuantity * p.OutPrice;

            if (reader.HasColumn("Qty") && reader["Qty"] != DBNull.Value)
            {
                p.RequestQty = Convert.ToDecimal(reader["Qty"]);
            }
            if (reader.HasColumn("QtyReturn") && reader["QtyReturn"] != DBNull.Value)
            {
                p.QtyReturn = Convert.ToDecimal(reader["QtyReturn"]);
            }
            if (reader.HasColumn("OutNotes"))
            {
                p.OutNotes = reader["OutNotes"].ToString();
            }
            if (reader.HasColumn("IsLoad"))
            {
                p.IsLoad = reader["IsLoad"] as int?;
            }
            p.EntityState = EntityState.PERSITED;

            if (reader.HasColumn("IsDeleted"))
            {
                p.IsDeleted = reader["IsDeleted"] as bool?;
            }
            try
            {
                // xem lai sau
                p.InwardDrugMedDept = GetInwardDrugMedDeptFromReader(reader);
            }
            catch
            {
            }

            if (p.InwardDrugMedDept == null)
            {
                p.InwardDrugMedDept = new InwardDrugMedDept();
            }

            if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
            {
                p.InwardDrugMedDept.InCost = Convert.ToDecimal(reader["InCost"]);
            }

            if (reader.HasColumn("InwardDrug_NormalPrice") && reader["InwardDrug_NormalPrice"] != DBNull.Value)
            {
                p.InwardDrugMedDept.NormalPrice = (decimal)reader["InwardDrug_NormalPrice"];
            }
            if (reader.HasColumn("InwardDrug_HIPatientPrice") && reader["InwardDrug_HIPatientPrice"] != DBNull.Value)
            {
                p.InwardDrugMedDept.HIPatientPrice = (decimal)reader["InwardDrug_HIPatientPrice"];
            }
            if (reader.HasColumn("InwardDrug_HIAllowedPrice") && reader["InwardDrug_HIAllowedPrice"] != DBNull.Value)
            {
                p.InwardDrugMedDept.HIAllowedPrice = (decimal)reader["InwardDrug_HIAllowedPrice"];
            }
            if (reader.HasColumn("IsNotVat") && reader["IsNotVat"] != DBNull.Value)
            {
                p.InwardDrugMedDept.IsNotVat = Convert.ToBoolean(reader["IsNotVat"]);
            }
            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.InwardDrugMedDept.VAT = Convert.ToDecimal(reader["VAT"]);
            }
            else
            {
                p.InwardDrugMedDept.VAT = null;
            }

            if (reader.HasColumn("HIBenefit"))
            {
                p.HIBenefit = reader["HIBenefit"] as double?;
            }

            if (reader.HasColumn("InExpiryDate") && reader["InExpiryDate"] != DBNull.Value)
            {
                p.InExpiryDate = reader["InExpiryDate"] as DateTime?;
            }
            if (reader.HasColumn("InBatchNumber"))
            {
                p.InBatchNumber = reader["InBatchNumber"].ToString();
            }

            if (reader.HasColumn("OutPriceDifference"))
            {
                //KMx: Phải set PriceDifference, nếu không sẽ bị thiếu thông tin khi lưu xuất thuốc theo toa (29/11/2014 17:43).
                p.PriceDifference = (decimal)reader["OutPriceDifference"];
                p.TotalPriceDifference = (decimal)p.OutQuantity * p.PriceDifference;

                p.OutPriceDifference = (decimal)reader["OutPriceDifference"];
            }

            //KMx: Không hiểu tại sao lại viết như vậy (26/11/2014 10:03).
            //if (reader.HasColumn("HIAllowedPrice"))
            //{
            //    p.HIAllowedPrice = p.HIAllowedPrice.GetValueOrDefault(0);
            //}

            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = (decimal?)reader["HIAllowedPrice"];
            }

            if (reader.HasColumn("OutHIRebate") && reader["OutHIRebate"] != DBNull.Value)
            {
                p.OutHIRebate = reader["OutHIRebate"] as decimal?;
                p.HIPayment = p.OutHIRebate.GetValueOrDefault(0);
                p.TotalHIPayment = p.OutHIRebate.GetValueOrDefault(0);
            }

            if (reader.HasColumn("OutAmount"))
            {
                p.OutAmount = reader["OutAmount"] as decimal?;
                p.TotalInvoicePrice = p.OutAmount.GetValueOrDefault(0);
                //KMx: Dời dòng bên dưới lên trên và set p.InvoicePrice = p.OutPrice. Nếu không sẽ bị sai khi xuất thuốc theo toa (29//1/2014 17:40).
                //p.InvoicePrice = p.OutAmount.GetValueOrDefault(0);
            }

            if (reader.HasColumn("OutAmountCoPay") && reader["OutAmountCoPay"] != DBNull.Value)
            {
                p.OutAmountCoPay = reader["OutAmountCoPay"] as decimal?;
                p.TotalCoPayment = p.OutAmountCoPay.GetValueOrDefault(0);
            }

            p.TotalPatientPayment = p.TotalInvoicePrice - p.TotalHIPayment - p.OtherAmt;
            if (p.HIAllowedPrice.GetValueOrDefault() == 0)
            {
                p.PriceDifference = 0;
                p.TotalPriceDifference = 0;
            }
            else
            {
                p.PriceDifference = p.InvoicePrice - p.HIAllowedPrice.GetValueOrDefault(0);
                p.TotalPriceDifference = p.TotalInvoicePrice - p.TotalHIPayment - p.TotalCoPayment;
            }

            p.ObjSupplierID = new DrugDeptSupplier();
            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                //KMx: Sai.
                //p.SupplierID = Convert.ToInt64(reader.HasColumn("SupplierID"));
                p.SupplierID = Convert.ToInt64(reader["SupplierID"]);
                p.ObjSupplierID = GetDrugDeptSupplierFromReader(reader);
            }

            if (reader.HasColumn("Remaining") && reader["Remaining"] != DBNull.Value)
            {
                p.Remaining = Convert.ToDecimal(reader["Remaining"]);
            }

            if (reader.HasColumn("HIPaymentPercent") && reader["HIPaymentPercent"] != DBNull.Value)
            {
                p.HIPaymentPercent = Convert.ToDouble(reader["HIPaymentPercent"]);
            }

            //KMx: Set thêm các thuộc tính bên dưới để xuất thuốc theo toa (29/11/2014 17:31).
            #region Xuất thuốc theo toa

            if (reader.HasColumn("V_DrugType") && reader["V_DrugType"] != DBNull.Value)
            {
                p.V_DrugType = Convert.ToInt64(reader["V_DrugType"]);
            }

            //KMx: Thêm điều kiện InID > 0 để khi load phiếu YC bên Xuất hàng ký gởi không chạy vào đây. Nếu không sẽ bị lỗi (08/12/2014 11:46).
            //KMx: Không sử dụng điều kiện InID > 0 được. Vì khi ra toa, thuốc nào không có hàng sẽ không có InID, dẫn đến load toa lên bán thiếu thuốc đó.
            //Chuyển sang dùng DayRpts (10/01/2015 16:42).
            if (!string.IsNullOrWhiteSpace(reader["GenMedProductID"].ToString()) && reader.HasColumn("BrandName")
                //&& reader.HasColumn("InID") && reader["InID"] != DBNull.Value && Convert.ToInt64(reader["InID"]) > 0
                && reader.HasColumn("DayRpts") && reader["DayRpts"] != DBNull.Value)
            {
                p.GetGenMedProductForSell = GetGenMedProductForSellFromReader(reader);
            }

            if (reader.HasColumn("InsuranceCover"))
            {
                p.HI = reader["InsuranceCover"] as bool?;
            }
            if (reader.HasColumn("DayRpts") && reader["DayRpts"] != DBNull.Value)
            {
                p.DayRpts = (double)reader["DayRpts"];

            }

            if (reader.HasColumn("QtyForDay") && reader["QtyForDay"] != DBNull.Value)
            {
                p.QtyForDay = Convert.ToDecimal(reader["QtyForDay"]);

            }

            if (reader.HasColumn("QtyMaxAllowed") && reader["QtyMaxAllowed"] != DBNull.Value)
            {
                p.QtyMaxAllowed = Convert.ToDouble(reader["QtyMaxAllowed"]);
            }

            if (reader.HasColumn("QtySchedMon"))
            {
                p.QtySchedMon = reader["QtySchedMon"] as float?;
            }

            if (reader.HasColumn("QtySchedTue"))
            {
                p.QtySchedTue = reader["QtySchedTue"] as float?;
            }

            if (reader.HasColumn("QtySchedWed"))
            {
                p.QtySchedWed = reader["QtySchedWed"] as float?;
            }

            if (reader.HasColumn("QtySchedThu"))
            {
                p.QtySchedThu = reader["QtySchedThu"] as float?;
            }

            if (reader.HasColumn("QtySchedFri"))
            {
                p.QtySchedFri = reader["QtySchedFri"] as float?;
            }

            if (reader.HasColumn("QtySchedSat"))
            {
                p.QtySchedSat = reader["QtySchedSat"] as float?;
            }

            if (reader.HasColumn("QtySchedSun"))
            {
                p.QtySchedSun = reader["QtySchedSun"] as float?;
            }

            if (reader.HasColumn("SchedBeginDOW"))
            {
                p.SchedBeginDOW = reader["SchedBeginDOW"] as byte?;
            }

            if (reader.HasColumn("DispenseVolume") && reader["DispenseVolume"] != DBNull.Value)
            {
                p.DispenseVolume = (double)reader["DispenseVolume"];
            }

            #endregion
            if (reader.HasColumn("DrugDeptInIDOrig") && reader["DrugDeptInIDOrig"] != DBNull.Value)
            {
                p.DrugDeptInIDOrig = Convert.ToInt64(reader["DrugDeptInIDOrig"]);
            }
            if (reader.HasColumn("BidCode") && reader["BidCode"] != DBNull.Value)
            {
                p.BidCode = reader["BidCode"].ToString();
            }
            if (reader.HasColumn("Visa") && reader["Visa"] != DBNull.Value)
            {
                p.Visa = reader["Visa"].ToString();
            }
            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.VAT = (reader["VAT"]) as double?;
            }
            else
            {
                p.VAT = null;
            }
            return p;
        }

        protected virtual List<OutwardDrugMedDept> GetOutwardDrugMedDeptCollectionFromReader(IDataReader reader)
        {
            var lst = new List<OutwardDrugMedDept>();
            while (reader.Read())
            {
                lst.Add(GetOutwardDrugMedDeptFromReader(reader));
            }
            return lst;
        }

        protected virtual RequestDMedRscrInwardClinicDept GetRequestDMedRscrInwardClinicDeptFromReader(IDataReader reader)
        {
            var p = new RequestDMedRscrInwardClinicDept
            {
                ReqDMedRscrInClinicDeptID = (long)reader["ReqDMedRscrInClinicDeptID"],
                ReqDate = (DateTime)reader["ReqDate"],
                ReqNumCode = reader["ReqNumCode"].ToString(),
                ReqStatus = reader["ReqStatus"] as long?,
                StaffID = (long)reader["StaffID"]
            };
            p.SelectedStaff = new Staff { StaffID = p.StaffID };
            if (reader.HasColumn("FullName"))
            {
                p.SelectedStaff.FullName = reader["FullName"].ToString();
            }
            p.InDeptStoreID = reader["InDeptStoreID"] as long?;
            if (reader["InDeptStoreID"] != DBNull.Value)
            {
                p.InDeptStoreObject = new RefStorageWarehouseLocation { StoreID = (long)reader["InDeptStoreID"] };
                if (reader.HasColumn("InDeptStoreName"))
                {
                    p.InDeptStoreObject.swhlName = reader["InDeptStoreName"].ToString();
                }
            }

            p.OutFromStoreID = reader["OutFromStoreID"] as long?;
            if (reader["OutFromStoreID"] != DBNull.Value)
            {
                p.OutFromStoreObject = new RefStorageWarehouseLocation { StoreID = (long)reader["OutFromStoreID"] };
                if (reader.HasColumn("OutFromStoreName"))
                {
                    p.OutFromStoreObject.swhlName = reader["OutFromStoreName"].ToString();
                }
            }
            p.DeptID = reader["DeptID"] as long?;
            p.Comment = reader["Comment"].ToString();
            return p;
        }

        protected virtual List<RequestDMedRscrInwardClinicDept> GetRequestDMedRscrInwardClinicDeptCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RequestDMedRscrInwardClinicDept>();
            while (reader.Read())
            {
                lst.Add(GetRequestDMedRscrInwardClinicDeptFromReader(reader));
            }
            return lst;
        }

        protected virtual RequestDMedRscrInwardClinicDeptDetail GetRequestDMedRscrInwardClinicDeptDetailFromReader(IDataReader reader)
        {
            var p = new RequestDMedRscrInwardClinicDeptDetail
            {
                ReqDMedRscrDetailID = (long)reader["ReqDMedRscrDetailID"],
                ReqDMedRscrInClinicDeptID = (long)reader["ReqDMedRscrInClinicDeptID"],
                DMedRscrID = (long)reader["DMedRscrID"],
                Qty = (int)reader["Qty"],
                Note = reader["Note"].ToString(),
                EntityState = EntityState.PERSITED
            };
            //chua doc danh muc y cu
            //to do
            return p;
        }

        protected virtual List<RequestDMedRscrInwardClinicDeptDetail> GetRequestDMedRscrInwardClinicDeptDetailCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RequestDMedRscrInwardClinicDeptDetail>();
            while (reader.Read())
            {
                lst.Add(GetRequestDMedRscrInwardClinicDeptDetailFromReader(reader));
            }
            return lst;
        }

        protected virtual RequestDrugInwardClinicDept GetRequestDrugInwardClinicDeptFromReader(IDataReader reader)
        {
            var p = new RequestDrugInwardClinicDept { ReqDrugInClinicDeptID = (long)reader["ReqDrugInClinicDeptID"] };
            if (reader["ReqDate"] != DBNull.Value)
            {
                p.ReqDate = (DateTime)reader["ReqDate"];
            }
            p.ReqNumCode = reader["ReqNumCode"].ToString();
            p.ReqStatus = reader["ReqStatus"] as long?;
            p.StaffID = (long)reader["StaffID"];
            p.SelectedStaff = new Staff { StaffID = (long)reader["StaffID"] };
            if (reader.HasColumn("FullName"))
            {
                p.SelectedStaff.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("SPhoneNumber"))
            {
                p.SelectedStaff.SPhoneNumber = reader["SPhoneNumber"].ToString();
            }
            if (reader.HasColumn("SStreetAddress"))
            {
                p.SelectedStaff.SStreetAddress = reader["SStreetAddress"].ToString();
            }
            p.InDeptStoreID = reader["InDeptStoreID"] as long?;
            if (reader["InDeptStoreID"] != DBNull.Value)
            {
                p.InDeptStoreObject = new RefStorageWarehouseLocation { StoreID = (long)reader["InDeptStoreID"] };
                if (reader.HasColumn("InDeptDeptID") && reader["InDeptDeptID"] != DBNull.Value)
                {
                    p.InDeptStoreObject.DeptID = reader["InDeptDeptID"] as long?;
                }
                if (reader.HasColumn("InDeptStoreName"))
                {
                    p.InDeptStoreObject.swhlName = reader["InDeptStoreName"].ToString();
                }
            }

            p.OutFromStoreID = reader["OutFromStoreID"] as long?;
            if (reader["OutFromStoreID"] != DBNull.Value)
            {
                p.OutFromStoreObject = new RefStorageWarehouseLocation { StoreID = (long)reader["OutFromStoreID"] };
                if (reader.HasColumn("OutFromStoreName"))
                {
                    p.OutFromStoreObject.swhlName = reader["OutFromStoreName"].ToString();
                }
            }
            p.DeptID = reader["DeptID"] as long?;
            p.Comment = reader["Comment"].ToString();
            if (reader.HasColumn("DaNhanHang"))
            {
                p.DaNhanHang = reader["DaNhanHang"] as bool?;
            }
            if (reader.HasColumn("RefGenDrugCatID_1") && reader["RefGenDrugCatID_1"] != DBNull.Value)
            {
                p.RefGenDrugCatID_1 = Convert.ToInt64(reader["RefGenDrugCatID_1"]);
            }
            if (reader.HasColumn("IsApproved") && reader["IsApproved"] != DBNull.Value)
            {
                p.IsApproved = reader["IsApproved"] as bool?;
            }
            if (reader.HasColumn("ApprovedStaffID") && reader["ApprovedStaffID"] != DBNull.Value)
            {
                p.ApprovedStaffID = reader["ApprovedStaffID"] as long?;
            }
            if (reader.HasColumn("ApprovedDate") && reader["ApprovedDate"] != DBNull.Value)
            {
                p.ApprovedDate = reader["ApprovedDate"] as DateTime?;
            }
            if (reader.HasColumn("FromDate") && reader["FromDate"] != DBNull.Value)
            {
                p.FromDate = reader["FromDate"] as DateTime?;
            }
            if (reader.HasColumn("ToDate") && reader["ToDate"] != DBNull.Value)
            {
                p.ToDate = reader["ToDate"] as DateTime?;
            }

            if (reader.HasColumn("Checked") && reader["Checked"] != DBNull.Value)
            {
                p.Checked = (bool)reader["Checked"];
            }
            if (reader.HasColumn("IsInstructionFuture") && reader["IsInstructionFuture"] != DBNull.Value)
            {
                p.IsInstructionFuture = (bool)reader["IsInstructionFuture"];
            }
            return p;

        }

        protected virtual List<RequestDrugInwardClinicDept> GetRequestDrugInwardClinicDeptCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RequestDrugInwardClinicDept>();
            while (reader.Read())
            {
                lst.Add(GetRequestDrugInwardClinicDeptFromReader(reader));
            }
            return lst;
        }

        protected virtual List<ReqFoodClinicDeptDetail> GetReqFoodClinicDeptDetailCollectionFromReader(IDataReader reader)
        {
            var lst = new List<ReqFoodClinicDeptDetail>();
            while (reader.Read())
            {
                if (reader.HasColumn("ItemID") && reader["ItemID"] != DBNull.Value)
                {
                    long tempItemID = (long)reader["ItemID"];
                    if (lst.Where(x => x.ItemID == tempItemID).ToObservableCollection().Count() == 0)
                    {
                        lst.Add(GetReqFoodClinicDeptDetailFromReader(reader));
                    }
                    else
                    {
                        var p = new ReqFoodClinicDeptDetail { };
                        p = lst.Where(x => x.ItemID == tempItemID).ToObservableCollection().FirstOrDefault();
                        p.ReqQty = p.ReqQty + (decimal)reader["ReqQty"];
                        if (p.ReqFoodClinicDeptDetailLinks == null)
                        {
                            p.ReqFoodClinicDeptDetailLinks = new ObservableCollection<ReqFoodClinicDeptDetailLink>();
                        }
                        p.ReqFoodClinicDeptDetailLinks.Add(GetReqFoodClinicDeptDetailLinkFromReader(reader));
                    }
                }
            }
            return lst;
        }

        protected virtual List<ReqFoodClinicDeptDetailLink> GetReqFoodClinicDeptDetailLinkCollectionFromReader(IDataReader reader)
        {
            var lst = new List<ReqFoodClinicDeptDetailLink>();
            while (reader.Read())
            {
                lst.Add(GetReqFoodClinicDeptDetailLinkFromReader(reader));
            }
            return lst;
        }

        protected virtual List<RequestFoodClinicDept> GetRequestFoodClinicDeptCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RequestFoodClinicDept>();
            while (reader.Read())
            {
                lst.Add(GetRequestFoodClinicDeptFromReader(reader));
            }
            return lst;
        }

        protected virtual RequestFoodClinicDept GetRequestFoodClinicDeptFromReader(IDataReader reader)
        {
            var p = new RequestFoodClinicDept { ReqFoodClinicDeptID = 0 };
            if (reader.HasColumn("ReqFoodClinicDeptID") && reader["ReqFoodClinicDeptID"] != DBNull.Value)
            {
                p.ReqFoodClinicDeptID = (long)reader["ReqFoodClinicDeptID"];
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = (long)reader["StaffID"];
                p.SelectedStaff = new Staff { StaffID = (long)reader["StaffID"], FullName = reader["FullName"].ToString() };
            }
            if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
            {
                p.DeptID = (long)reader["DeptID"];
            }
            if (reader.HasColumn("ReqDate") && reader["ReqDate"] != DBNull.Value)
            {
                p.ReqDate = Convert.ToDateTime(reader["ReqDate"]);
            }
            if (reader.HasColumn("ReqNumCode") && reader["ReqNumCode"] != DBNull.Value)
            {
                p.ReqNumCode = reader["ReqNumCode"].ToString();
            }
            if (reader.HasColumn("Comment") && reader["Comment"] != DBNull.Value)
            {
                p.Comment = reader["Comment"].ToString();
            }
            if (reader.HasColumn("ReqStatus") && reader["ReqStatus"] != DBNull.Value)
            {
                p.ReqStatus = (long)reader["ReqStatus"];
            }
            if (reader.HasColumn("IsApproved") && reader["IsApproved"] != DBNull.Value)
            {
                p.IsApproved = (bool)reader["IsApproved"];
            }
            if (reader.HasColumn("ApprovedDate") && reader["ApprovedDate"] != DBNull.Value)
            {
                p.ApprovedDate = Convert.ToDateTime(reader["ApprovedDate"]);
            }
            if (reader.HasColumn("FromDate") && reader["FromDate"] != DBNull.Value)
            {
                p.FromDate = Convert.ToDateTime(reader["FromDate"]);
            }
            if (reader.HasColumn("ToDate") && reader["ToDate"] != DBNull.Value)
            {
                p.ToDate = Convert.ToDateTime(reader["ToDate"]);
            }

            return p;
        }

        protected virtual ReqFoodClinicDeptDetail GetReqFoodClinicDeptDetailFromReader(IDataReader reader)
        {
            var p = new ReqFoodClinicDeptDetail { };
            if (reader.HasColumn("ReqFoodClinicDeptDetailID") && reader["ReqFoodClinicDeptDetailID"] != DBNull.Value)
            {
                p.ReqFoodClinicDeptDetailID = (long)reader["ReqFoodClinicDeptDetailID"];
            }
            if (reader.HasColumn("ItemID") && reader["ItemID"] != DBNull.Value)
            {
                p.ItemID = (long)reader["ItemID"];
                if (reader.HasColumn("Qty") && reader["Qty"] != DBNull.Value)
                {
                    p.ReqQty = p.ReqQty + (decimal)reader["Qty"];
                }
                if (p.ReqFoodClinicDeptDetailLinks == null)
                {
                    p.ReqFoodClinicDeptDetailLinks = new ObservableCollection<ReqFoodClinicDeptDetailLink>();
                }
                p.ReqFoodClinicDeptDetailLinks.Add(GetReqFoodClinicDeptDetailLinkFromReader(reader));
            }
            if (reader.HasColumn("ReqFoodClinicDeptID") && reader["ReqFoodClinicDeptID"] != DBNull.Value)
            {
                p.ReqFoodClinicDeptID = (long)reader["ReqFoodClinicDeptID"];
            }
            if (reader.HasColumn("ReqQty") && reader["ReqQty"] != DBNull.Value)
            {
                p.ReqQty = (decimal)reader["ReqQty"];
            }
            if (reader.HasColumn("ApprovedQty") && reader["ApprovedQty"] != DBNull.Value)
            {
                p.ApprovedQty = (decimal)reader["ApprovedQty"];
            }
            if (reader.HasColumn("ApprovedNotes") && reader["ApprovedNotes"] != DBNull.Value)
            {
                p.ApprovedNotes = reader["ApprovedNotes"].ToString();
            }
            if (reader.HasColumn("DateTimeSelection") && reader["DateTimeSelection"] != DBNull.Value)
            {
                p.DateTimeSelection = Convert.ToDateTime(reader["DateTimeSelection"]);
            }
            if (reader.HasColumn("UpdatedDate") && reader["UpdatedDate"] != DBNull.Value)
            {
                p.UpdatedDate = reader["UpdatedDate"] as DateTime?;
            }
            if (reader.HasColumn("UpdatedStaffID") && reader["UpdatedStaffID"] != DBNull.Value)
            {
                var staff = new Staff { StaffID = (long)reader["UpdatedStaffID"] };
                p.UpdateDoctorStaff = staff;
            }
            if (reader.HasColumn("UpdatedStaffFullName") && reader["UpdatedStaffFullName"] != DBNull.Value)
            {
                p.UpdateDoctorStaff.FullName = reader["UpdatedStaffFullName"].ToString();
            }
            if (reader.HasColumn("MedServiceName") && reader["MedServiceName"] != DBNull.Value)
            {
                p.MedServiceName = reader["MedServiceName"].ToString();
            }
            if (reader.HasColumn("MedServiceCode") && reader["MedServiceCode"] != DBNull.Value)
            {
                p.MedServiceCode = reader["MedServiceCode"].ToString();
            }
            if (reader.HasColumn("UnitName") && reader["UnitName"] != DBNull.Value)
            {
                p.UnitName = reader["UnitName"].ToString();
            }
            return p;
        }

        protected virtual ReqFoodClinicDeptDetailLink GetReqFoodClinicDeptDetailLinkFromReader(IDataReader reader)
        {
            var p = new ReqFoodClinicDeptDetailLink { ReqFoodClinicDeptDetailLinkID = 0 };
            if (reader.HasColumn("ReqFoodClinicDeptDetailLinkID") && reader["ReqFoodClinicDeptDetailLinkID"] != DBNull.Value)
            {
                p.ReqFoodClinicDeptDetailLinkID = (long)reader["ReqFoodClinicDeptDetailLinkID"];
            }
            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.DoctorStaff = new Staff
                {
                    StaffID = (long)reader["DoctorStaffID"],
                    FullName = reader["DoctorFullName"].ToString()
                };
            }
            if (reader.HasColumn("Qty") && reader["Qty"] != DBNull.Value)
            {
                p.Qty = (decimal)reader["Qty"];
            }
            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                p.PtRegDetailID = (long)reader["PtRegDetailID"];
            }
            if (reader.HasColumn("IntPtDiagDrInstructionID") && reader["IntPtDiagDrInstructionID"] != DBNull.Value)
            {
                p.IntPtDiagDrInstructionID = reader["IntPtDiagDrInstructionID"] as long?;
            }
            if (reader.HasColumn("MarkedAsDeleted") && reader["MarkedAsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = (bool)reader["MarkedAsDeleted"];
            }
            if (reader.HasColumn("MedServiceName") && reader["MedServiceName"] != DBNull.Value)
            {
                p.MedServiceName = reader["MedServiceName"].ToString();
            }
            if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
            {
                p.MedServiceID = (long)reader["MedServiceID"];
            }
            return p;
        }

        protected virtual RequestDrugInwardClinicDeptDetail GetRequestDrugInwardClinicDeptDetailFromReader(IDataReader reader)
        {
            var p = new RequestDrugInwardClinicDeptDetail
            {
                ReqDrugInDetailID = (long)reader["ReqDrugInDetailID"],
                ReqDrugInClinicDeptID = (long)reader["ReqDrugInClinicDeptID"],
                GenMedProductID = (long)reader["GenMedProductID"]
            };
            try
            {
                p.RefGenericDrugDetail = GetRefGenMedProductDetailsFromReader(reader);
            }
            catch
            {
            }
            p.Qty = (int)reader["Qty"];
            p.Note = reader["Note"].ToString();
            if (reader.HasColumn("QtyOutward") && reader["QtyOutward"] != DBNull.Value)
            {
                p.QtyOutward = (int)reader["QtyOutward"];
            }
            if (reader.HasColumn("QtyRemaining") && reader["QtyRemaining"] != DBNull.Value)
            {
                p.QtyRemaining = (int)reader["QtyRemaining"];
            }
            p.EntityState = EntityState.PERSITED;
            return p;

        }

        protected virtual List<RequestDrugInwardClinicDeptDetail> GetRequestDrugInwardClinicDeptDetailCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RequestDrugInwardClinicDeptDetail>();
            while (reader.Read())
            {
                lst.Add(GetRequestDrugInwardClinicDeptDetailFromReader(reader));
            }
            return lst;
        }

        protected virtual ReqOutwardDrugClinicDeptPatient GetRemainingQtyForInPtRequestDrugDetails(IDataReader reader)
        {
            var p = new ReqOutwardDrugClinicDeptPatient
            {
                GenMedProductID = (long)reader["GenMedProductID"]
            };

            if (reader.HasColumn("QtyFinal") && reader["QtyFinal"] != DBNull.Value)
            {
                p.RemainingQty = (decimal)reader["QtyFinal"];
            }

            return p;
        }

        protected virtual OutwardDrugClinicDeptTemplate OutwardDrugClinicDeptTemplateFromReader(IDataReader reader)
        {
            var p = new OutwardDrugClinicDeptTemplate { OutwardDrugClinicDeptTemplateID = (long)reader["OutwardDrugClinicDeptTemplateID"] };

            if (reader.HasColumn("OutwardDrugClinicDeptTemplateName") && reader["OutwardDrugClinicDeptTemplateName"] != DBNull.Value)
            {
                p.OutwardDrugClinicDeptTemplateName = reader["OutwardDrugClinicDeptTemplateName"].ToString();
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.CreatedStaff = new Staff { StaffID = Convert.ToInt64(reader["StaffID"]) };

                if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                {
                    p.CreatedStaff.FullName = reader["FullName"].ToString();
                }
            }

            if (reader.HasColumn("V_MedProductType") && reader["V_MedProductType"] != DBNull.Value)
            {
                p.V_MedProductType = Convert.ToInt64(reader["V_MedProductType"]);
            }

            if (reader.HasColumn("CreateDate") && reader["CreateDate"] != DBNull.Value)
            {
                p.CreateDate = Convert.ToDateTime(reader["CreateDate"]);
            }
            if (reader.HasColumn("IsShared") && reader["IsShared"] != DBNull.Value)
            {
                p.IsShared = Convert.ToBoolean(reader["IsShared"]);
            }

            return p;

        }

        protected virtual List<OutwardDrugClinicDeptTemplate> GetOutwardDrugClinicDeptTemplateCollectionFromReader(IDataReader reader)
        {
            var lst = new List<OutwardDrugClinicDeptTemplate>();
            while (reader.Read())
            {
                lst.Add(OutwardDrugClinicDeptTemplateFromReader(reader));
            }
            return lst;
        }

        protected virtual OutwardDrugClinicDeptTemplateItem GetOutwardDrugClinicDeptTemplateItemFromReader(IDataReader reader)
        {
            var p = new OutwardDrugClinicDeptTemplateItem
            {
                OutwardDrugClinicDeptTemplateItemID = (long)reader["OutwardDrugClinicDeptTemplateItemID"],
                GenMedProductID = (long)reader["GenMedProductID"]
            };

            try
            {
                p.RefGenericDrugDetail = GetRefGenMedProductDetailsFromReader(reader);
            }
            catch
            {
            }

            if (reader.HasColumn("ReqOutQuantity") && reader["ReqOutQuantity"] != DBNull.Value)
            {
                p.ReqOutQuantity = Convert.ToDecimal(reader["ReqOutQuantity"]);
                p.ReqOutQuantity_Orig = p.ReqOutQuantity;
            }

            if (reader.HasColumn("ItemNote") && reader["ItemNote"] != DBNull.Value)
            {
                p.ItemNote = reader["ItemNote"].ToString();
                p.ItemNote_Orig = p.ItemNote;
            }

            p.V_RecordState = (long)AllLookupValues.V_RecordState.UNCHANGE;

            return p;

        }

        protected virtual List<OutwardDrugClinicDeptTemplateItem> GetOutwardDrugClinicDeptTemplateItemCollectionFromReader(IDataReader reader)
        {
            var lst = new List<OutwardDrugClinicDeptTemplateItem>();
            while (reader.Read())
            {
                lst.Add(GetOutwardDrugClinicDeptTemplateItemFromReader(reader));
            }
            return lst;
        }

        protected virtual ReqOutwardDrugClinicDeptPatient GetReqOutwardDrugClinicDeptPatientFromReader(IDataReader reader)
        {
            var p = new ReqOutwardDrugClinicDeptPatient
            {
                ReqDrugInClinicDeptID = (long)reader["ReqDrugInClinicDeptID"],
                GenMedProductID = (long)reader["GenMedProductID"]
            };
            if (reader.HasColumn("OutClinicDeptReqID") && reader["OutClinicDeptReqID"] != DBNull.Value)
            {
                p.OutClinicDeptReqID = (long)reader["OutClinicDeptReqID"];
            }
            try
            {
                p.RefGenericDrugDetail = GetRefGenMedProductDetailsFromReader(reader);
            }
            catch
            {
            }
            // TxD 23/03/2015 Added new field PrescribedQty 
            if (reader.HasColumn("PrescribedQty") && reader["PrescribedQty"] != DBNull.Value)
            {
                p.PrescribedQty = (decimal)reader["PrescribedQty"];
            }

            // TxD 27/04/2015 Added new field ItemVerfStat
            if (reader.HasColumn("ItemVerfStat") && reader["ItemVerfStat"] != DBNull.Value)
            {
                p.ItemVerfStat = Convert.ToInt16(reader["ItemVerfStat"]);
            }

            if (reader.HasColumn("ReqQty") && reader["ReqQty"] != DBNull.Value)
            {
                p.ReqQty = (decimal)reader["ReqQty"];
            }

            if (reader.HasColumn("ReqQtyStr") && reader["ReqQtyStr"] != DBNull.Value)
            {
                p.ReqQtyStr = reader["ReqQtyStr"].ToString();
            }

            if (reader.HasColumn("ApprovedQty") && reader["ApprovedQty"] != DBNull.Value)
            {
                p.ApprovedQty = (decimal)reader["ApprovedQty"];
            }
            p.OrgNotes = String.Empty;
            if (reader.HasColumn("Notes") && reader["Notes"] != DBNull.Value)
            {
                p.Notes = reader["Notes"].ToString();
                p.OrgNotes = reader["Notes"].ToString();
            }
            if (reader.HasColumn("QtyOutward") && reader["QtyOutward"] != DBNull.Value)
            {
                p.QtyOutward = (int)reader["QtyOutward"];
            }
            if (reader.HasColumn("QtyRemaining") && reader["QtyRemaining"] != DBNull.Value)
            {
                p.QtyRemaining = (int)reader["QtyRemaining"];
            }
            p.EntityState = EntityState.PERSITED;

            long V_RegistrationType = (long)AllLookupValues.RegistrationType.NOI_TRU;

            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                V_RegistrationType = (long)reader["V_RegistrationType"];
            }

            if(V_RegistrationType == (long)AllLookupValues.RegistrationType.NOI_TRU)
            {
                if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
                {
                    p.PtRegistrationID = reader["PtRegistrationID"] as long?;
                    if (p.PtRegistrationID > 0)
                    {
                        p.CurPatientRegistration = GetPatientRegistrationFromReader(reader);
                    }
                }
            }
            else
            {
                if (reader.HasColumn("OutPtRegistrationID") && reader["OutPtRegistrationID"] != DBNull.Value)
                {
                    p.OutPtRegistrationID = reader["OutPtRegistrationID"] as long?;
                    if (p.OutPtRegistrationID > 0)
                    {
                        p.CurPatientRegistration = GetPatientRegistrationFromReader(reader);
                    }
                }
            }
            if (reader.HasColumn("ApprovedNotes"))
            {
                p.ApprovedNotes = reader["ApprovedNotes"].ToString();
            }

            if (reader.HasColumn("StaffID"))
            {
                p.StaffID = reader["StaffID"] as long?;
            }
            if (reader.HasColumn("StaffName"))
            {
                p.StaffName = reader["StaffName"].ToString();
            }
            if (reader.HasColumn("DateTimeSelection") && reader["DateTimeSelection"] != DBNull.Value)
            {
                p.DateTimeSelection = (DateTime)reader["DateTimeSelection"];
            }

            if (reader.HasColumn("MDose") && reader["MDose"] != DBNull.Value)
            {
                p.MDose = Convert.ToSingle(reader["MDose"]);
            }
            if (reader.HasColumn("ADose") && reader["ADose"] != DBNull.Value)
            {
                p.ADose = Convert.ToSingle(reader["ADose"]);
            }
            if (reader.HasColumn("EDose") && reader["EDose"] != DBNull.Value)
            {
                p.EDose = Convert.ToSingle(reader["EDose"]);
            }
            if (reader.HasColumn("NDose") && reader["NDose"] != DBNull.Value)
            {
                p.NDose = Convert.ToSingle(reader["NDose"]);
            }

            if (reader.HasColumn("MDoseStr") && reader["MDoseStr"] != DBNull.Value)
            {
                p.MDoseStr = reader["MDoseStr"].ToString();
            }
            if (reader.HasColumn("ADoseStr") && reader["ADoseStr"] != DBNull.Value)
            {
                p.ADoseStr = reader["ADoseStr"].ToString();
            }
            if (reader.HasColumn("EDoseStr") && reader["EDoseStr"] != DBNull.Value)
            {
                p.EDoseStr = reader["EDoseStr"].ToString();
            }
            if (reader.HasColumn("NDoseStr") && reader["NDoseStr"] != DBNull.Value)
            {
                p.NDoseStr = reader["NDoseStr"].ToString();
            }

            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.DoctorStaff = new Staff();
                p.DoctorStaff.StaffID = Convert.ToInt64(reader["DoctorStaffID"]);
                if (reader.HasColumn("DoctorStaffName") && reader["DoctorStaffName"] != DBNull.Value)
                {
                    p.DoctorStaff.FullName = reader["DoctorStaffName"].ToString();
                }
            }
            if (reader.HasColumn("MedicalInstructionDate") && reader["MedicalInstructionDate"] != DBNull.Value)
            {
                p.MedicalInstructionDate = Convert.ToDateTime(reader["MedicalInstructionDate"]);
            }
            if (reader.HasColumn("RemainingQty") && reader["RemainingQty"] != DBNull.Value)
            {
                p.RemainingQty = (decimal)reader["RemainingQty"];
            }
            if (reader.HasColumn("IntPtDiagDrInstructionID") && reader["IntPtDiagDrInstructionID"] != DBNull.Value)
            {
                p.IntPtDiagDrInstructionID = reader["IntPtDiagDrInstructionID"] as long?;
            }
            //if (reader.HasColumn("IsDone") && reader["IsDone"] != DBNull.Value)
            //{
            //    p.IsDone = (bool)reader["IsDone"];
            //}
            if (reader.HasColumn("outiID") && reader["outiID"] != DBNull.Value)
            {
                p.outiID = Convert.ToInt64(reader["outiID"]);
            }
            if (reader.HasColumn("AntibioticOrdinal") && reader["AntibioticOrdinal"] != DBNull.Value)
            {
                p.AntibioticOrdinal = Convert.ToInt32(reader["AntibioticOrdinal"]);
            }
            if (reader.HasColumn("AntibioticTreatmentID") && reader["AntibioticTreatmentID"] != DBNull.Value)
            {
                p.CurrentAntibioticTreatment = new AntibioticTreatment { AntibioticTreatmentID = Convert.ToInt64(reader["AntibioticTreatmentID"]) };
                if (reader.HasColumn("AntibioticTreatmentTitle") && reader["AntibioticTreatmentTitle"] != DBNull.Value)
                {
                    p.CurrentAntibioticTreatment.AntibioticTreatmentTitle = Convert.ToString(reader["AntibioticTreatmentTitle"]);
                }
            }
            if (reader.HasColumn("IsReplaceMedMat") && reader["IsReplaceMedMat"] != DBNull.Value)
            {
                p.IsReplaceMedMat = Convert.ToBoolean(reader["IsReplaceMedMat"]);
            }
            if (reader.HasColumn("IsDisposeMedMat") && reader["IsDisposeMedMat"] != DBNull.Value)
            {
                p.IsDisposeMedMat = Convert.ToBoolean(reader["IsDisposeMedMat"]);
            }
            if (reader.HasColumn("IsCreatedOut") && reader["IsCreatedOut"] != DBNull.Value)
            {
                p.IsCreatedOutward = Convert.ToBoolean(reader["IsCreatedOut"]);
            }
            if (reader.HasColumn("UsageDistance") && reader["UsageDistance"] != DBNull.Value)
            {
                p.UsageDistance = reader["UsageDistance"].ToString();
            }
            if (reader.HasColumn("V_RouteOfAdministration") && reader["V_RouteOfAdministration"] != DBNull.Value)
            {
                p.V_RouteOfAdministration = Convert.ToInt64(reader["V_RouteOfAdministration"]);
            }
            if (reader.HasColumn("TransferRate") && reader["TransferRate"] != DBNull.Value)
            {
                p.TransferRate = Convert.ToInt32(reader["TransferRate"]);
            }
            if (reader.HasColumn("V_TransferRateUnit") && reader["V_TransferRateUnit"] != DBNull.Value)
            {
                p.V_TransferRateUnit = Convert.ToInt64(reader["V_TransferRateUnit"]);
            }
            return p;
        }

        protected virtual List<ReqOutwardDrugClinicDeptPatient> GetRemainingQtyForInPtRequestDrugFromReader(IDataReader reader)
        {
            var lst = new List<ReqOutwardDrugClinicDeptPatient>();
            while (reader.Read())
            {
                lst.Add(GetRemainingQtyForInPtRequestDrugDetails(reader));
            }
            return lst;
        }

        protected virtual List<ReqOutwardDrugClinicDeptPatient> GetReqOutwardDrugClinicDeptPatientCollectionFromReader(IDataReader reader)
        {
            var lst = new List<ReqOutwardDrugClinicDeptPatient>();
            while (reader.Read())
            {
                lst.Add(GetReqOutwardDrugClinicDeptPatientFromReader(reader));
            }
            return lst;
        }


        protected virtual RequestDrugInward GetRequestDrugInwardFromReader(IDataReader reader)
        {
            var p = new RequestDrugInward { ReqDrugInID = (long)reader["ReqDrugInID"] };
            if (reader["ReqDate"] != DBNull.Value)
            {
                p.ReqDate = (DateTime)reader["ReqDate"];
            }
            p.ReqNumCode = reader["ReqNumCode"].ToString();

            p.SelectedStaff = new Staff { StaffID = (long)reader["StaffID"] };
            if (reader.HasColumn("FullName"))
            {
                p.SelectedStaff.FullName = reader["FullName"].ToString();
            }
            p.StaffID = (long)reader["StaffID"];

            p.InDeptStoreID = reader["InDeptStoreID"] as long?;
            if (reader["InDeptStoreID"] != DBNull.Value)
            {
                p.InDeptStoreObject = new RefStorageWarehouseLocation { StoreID = (long)reader["InDeptStoreID"] };
                if (reader.HasColumn("InDeptStoreName"))
                {
                    p.InDeptStoreObject.swhlName = reader["InDeptStoreName"].ToString();
                }
            }

            p.OutFromStoreID = reader["OutFromStoreID"] as long?;
            if (reader["OutFromStoreID"] != DBNull.Value)
            {
                p.OutFromStoreObject = new RefStorageWarehouseLocation { StoreID = (long)reader["OutFromStoreID"] };
                if (reader.HasColumn("OutFromStoreName"))
                {
                    p.OutFromStoreObject.swhlName = reader["OutFromStoreName"].ToString();
                }
            }
            p.DeptID = reader["DeptID"] as long?;
            p.Comment = reader["Comment"].ToString();
            if (reader.HasColumn("DaNhanHang"))
            {
                p.DaNhanHang = reader["DaNhanHang"] as bool?;
            }
            return p;

        }

        protected virtual List<RequestDrugInward> GetRequestDrugInwardCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RequestDrugInward>();
            while (reader.Read())
            {
                lst.Add(GetRequestDrugInwardFromReader(reader));
            }
            return lst;
        }

        protected virtual RequestDrugInwardDetail GetRequestDrugInwardDetailFromReader(IDataReader reader)
        {
            var p = new RequestDrugInwardDetail
            {
                ReqDetailID = (long)reader["ReqDetailID"],
                ReqDrugInID = (long)reader["ReqDrugInID"],
                DrugID = (long)reader["DrugID"]
            };
            try
            {
                p.RefGenericDrugDetail = GetRefGenericDrugForShowFromReader(reader);
            }
            catch
            {
            }
            p.Qty = (int)reader["Qty"];
            p.Note = reader["Note"].ToString();
            if (reader.HasColumn("QtyOutward") && reader["QtyOutward"] != DBNull.Value)
            {
                p.QtyOutward = (int)reader["QtyOutward"];
            }
            if (reader.HasColumn("QtyRemaining") && reader["QtyRemaining"] != DBNull.Value)
            {
                p.QtyRemaining = (int)reader["QtyRemaining"];
            }
            p.EntityState = EntityState.PERSITED;
            return p;

        }

        protected virtual List<RequestDrugInwardDetail> GetRequestDrugInwardDetailCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RequestDrugInwardDetail>();
            while (reader.Read())
            {
                lst.Add(GetRequestDrugInwardDetailFromReader(reader));
            }
            return lst;
        }

        protected virtual CostTableMedDept GetCostTableMedDeptFromReader(IDataReader reader)
        {
            var p = new CostTableMedDept
            {
                CoID = (long)reader["CoID"],
                CoNumber = reader["CoNumber"].ToString(),
                CreateDate = Convert.ToDateTime(reader["CreateDate"]),
                ExchangeRates = Convert.ToDouble(reader["ExchangeRates"]),
                InvoiceDate = Convert.ToDateTime(reader["InvoiceDate"]),
                InvoiceNumber = reader["InvoiceNumber"].ToString(),
                Notes = reader["Notes"].ToString(),
                VAT = Convert.ToDecimal(reader["VAT"])
            };
            if (reader.HasColumn("CurrencyID") && reader["CurrencyID"] != DBNull.Value)
            {
                p.CurrencyID = reader["CurrencyID"] as long?;
                p.SelectedCurrency = new Currency { CurrencyID = (long)reader["CurrencyID"] };
                if (reader.HasColumn("CurrencyName"))
                {
                    p.SelectedCurrency.CurrencyName = reader["CurrencyName"].ToString();
                }
            }
            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.SupplierID = reader["SupplierID"] as long?;
                p.SelectedSupplier = new DrugDeptSupplier { SupplierID = (long)reader["SupplierID"] };
                if (reader.HasColumn("SupplierName"))
                {
                    p.SelectedSupplier.SupplierName = reader["SupplierName"].ToString();
                }
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = (long)reader["StaffID"];
                p.SelectedStaff = new Staff { StaffID = (long)reader["StaffID"] };
                if (reader.HasColumn("FullName"))
                {
                    p.SelectedStaff.FullName = reader["FullName"].ToString();
                }
            }
            return p;

        }

        protected virtual List<CostTableMedDept> GetCostTableMedDeptCollectionFromReader(IDataReader reader)
        {
            var lst = new List<CostTableMedDept>();
            while (reader.Read())
            {
                lst.Add(GetCostTableMedDeptFromReader(reader));
            }
            return lst;
        }

        protected virtual CostTableMedDeptList GetCostTableMedDeptListFromReader(IDataReader reader)
        {
            var p = new CostTableMedDeptList
            {
                CoListID = (long)reader["CoListID"],
                CoID = (long)reader["CoID"],
                CoListName = reader["CoListName"].ToString(),
                CoListNotes = reader["CoListNotes"].ToString(),
                TotalValue = Convert.ToDecimal(reader["TotalValue"])
            };

            #region extention member

            if (reader.HasColumn("CurrencyName"))
            {
                p.CurrencyName = reader["CurrencyName"].ToString();
            }
            if (reader.HasColumn("ExchangeRates"))
            {
                p.ExchangeRates = Convert.ToDouble(reader["ExchangeRates"]);
            }
            if (reader.HasColumn("TotalValueVAT"))
            {
                p.TotalValueVAT = Convert.ToDecimal(reader["TotalValueVAT"]);
            }
            if (reader.HasColumn("TotalValueDaDoi"))
            {
                p.TotalValueDaDoi = Convert.ToDecimal(reader["TotalValueDaDoi"]);
            }
            if (reader.HasColumn("TotalPrice"))
            {
                p.TotalPrice = Convert.ToDecimal(reader["TotalPrice"]);
            }
            if (reader.HasColumn("Rates"))
            {
                p.Rates = Convert.ToDouble(reader["Rates"]);
            }
            #endregion

            return p;
        }

        protected virtual List<CostTableMedDeptList> GetCostTableMedDeptListCollectionFromReader(IDataReader reader)
        {
            var lst = new List<CostTableMedDeptList>();
            while (reader.Read())
            {
                lst.Add(GetCostTableMedDeptListFromReader(reader));
            }
            return lst;
        }
        protected virtual List<PositionInHospital> GetPositionInHospitalCollectionFromReader(IDataReader CurrentReader)
        {
            List<PositionInHospital> mItemCollection = new List<PositionInHospital>();
            while (CurrentReader.Read())
            {
                var mItem = new PositionInHospital();
                mItem.FillData(CurrentReader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        #endregion

        #region Lin Ny Pharmacy
        protected virtual List<ContraIndicatorDrugsRelToMedCond> GetContraIndicatorDrugsRelToMedCondFromReader(IDataReader reader)
        {
            List<ContraIndicatorDrugsRelToMedCond> lst = new List<ContraIndicatorDrugsRelToMedCond>();
            while (reader.Read())
            {
                lst.Add(GetContraIndicatorDrugsRelToMedCondObjFromReader(reader));
            }
            return lst;
        }
        protected virtual ContraIndicatorDrugsRelToMedCond GetContraIndicatorDrugsRelToMedCondObjFromReader(IDataReader reader)
        {
            ContraIndicatorDrugsRelToMedCond p = new ContraIndicatorDrugsRelToMedCond();
            p.RefMedicalCondition = new RefMedContraIndicationICD();
            try
            {
                if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
                {
                    p.DrugID = (long)reader["GenMedProductID"];
                }
                if (reader.HasColumn("MedContraTypeID") && reader["MedContraTypeID"] != DBNull.Value)
                {
                    p.MCTypeID = (int)reader["MedContraTypeID"];
                }
                if (reader.HasColumn("DrugsMCTypeID") && reader["DrugsMCTypeID"] != DBNull.Value)
                {
                    p.DrugsMCTypeID = (long)reader["DrugsMCTypeID"];
                }
                if (reader.HasColumn("ICD10Code") && reader["ICD10Code"] != DBNull.Value)
                {
                    p.RefMedicalCondition.ICD10Code = reader["ICD10Code"].ToString();
                }
                if (reader.HasColumn("IsWarning") && reader["IsWarning"] != DBNull.Value)
                {
                    p.IsWarning = Convert.ToBoolean(reader["IsWarning"]);
                }

                try
                {
                    p.RefGenericDrugDetail = new RefGenericDrugDetail();
                    if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
                    {
                        p.RefGenericDrugDetail.DrugID = (long)reader["GenMedProductID"];
                    }
                    if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
                    {
                        p.RefGenericDrugDetail.BrandName = reader["BrandName"].ToString();
                    }
                }
                catch { }

                try
                {
                    p.RefMedicalConditionType = new RefMedContraIndicationTypes();
                    if (reader.HasColumn("MedContraTypeID") && reader["MedContraTypeID"] != DBNull.Value)
                    {
                        p.RefMedicalConditionType.MedContraTypeID = (int)reader["MedContraTypeID"];
                    }
                    if (reader.HasColumn("MedContraIndicationType") && reader["MedContraIndicationType"] != DBNull.Value)
                    {
                        p.RefMedicalConditionType.MedContraIndicationType = reader["MedContraIndicationType"].ToString();
                    }
                    if (reader.HasColumn("AgeFrom") && reader["AgeFrom"] != DBNull.Value)
                    {
                        p.RefMedicalConditionType.AgeFrom = reader["AgeFrom"] as int?;
                    }
                    if (reader.HasColumn("AgeTo") && reader["AgeTo"] != DBNull.Value)
                    {
                        p.RefMedicalConditionType.AgeTo = reader["AgeTo"] as int?;
                    }
                }
                catch { }
            }
            catch
            { }
            return p;
        }

        protected virtual List<DrugAndConTra> GetMedProductContraIndicatorRelToMedCondFromReader(IDataReader reader)
        {
            List<MedProductContraIndicatorRelToMedCond> lst = new List<MedProductContraIndicatorRelToMedCond>();
            while (reader.Read())
            {
                lst.Add(GetMedProductContraIndicatorRelToMedCondObjFromReader(reader));
            }

            List<DrugAndConTra> lstDrugAndContr = new List<DrugAndConTra>();
            int Cnt = 0;
            long CurDrugID = 0;
            ContraAndLstICDs curContraObj = null;
            DrugAndConTra itemDrugAndContr = null;

            foreach (var item in lst)
            {
                if (Cnt == 0)
                {
                    // Dong dau tien
                    CurDrugID = item.DrugID;
                    itemDrugAndContr = new DrugAndConTra();
                    itemDrugAndContr.ListConTraAndLstICDs = new List<ContraAndLstICDs>();
                    curContraObj = new ContraAndLstICDs();
                    curContraObj.ListICD10Code = new List<string>();
                    curContraObj.MedConTraTypeID = item.RefMedicalConditionType.MedContraTypeID;
                    curContraObj.AgeFrom = item.RefMedicalConditionType.AgeFrom;
                    curContraObj.AgeTo = item.RefMedicalConditionType.AgeTo;
                    curContraObj.V_AgeUnit = item.RefMedicalConditionType.V_AgeUnit;
                    curContraObj.IsWarning = item.IsWarning;
                    if (item.RefMedicalCondition != null && item.RefMedicalCondition.ICD10Code != null)
                    {
                        curContraObj.ListICD10Code.Add(item.RefMedicalCondition.ICD10Code);
                    }
                    itemDrugAndContr.DrugID = item.DrugID;
                    itemDrugAndContr.BrandName = item.BrandName;
                    itemDrugAndContr.ListConTraAndLstICDs.Add(curContraObj);
                    lstDrugAndContr.Add(itemDrugAndContr);
                }
                else
                {
                    // Kiem tra thuoc co trung khong
                    if (item.DrugID != CurDrugID)
                    {
                        CurDrugID = item.DrugID;
                        itemDrugAndContr = new DrugAndConTra();
                        itemDrugAndContr.ListConTraAndLstICDs = new List<ContraAndLstICDs>();
                        curContraObj = new ContraAndLstICDs();
                        curContraObj.ListICD10Code = new List<string>();
                        curContraObj.MedConTraTypeID = item.RefMedicalConditionType.MedContraTypeID;
                        curContraObj.AgeFrom = item.RefMedicalConditionType.AgeFrom;
                        curContraObj.AgeTo = item.RefMedicalConditionType.AgeTo;
                        curContraObj.V_AgeUnit = item.RefMedicalConditionType.V_AgeUnit;
                        curContraObj.IsWarning = item.IsWarning;
                        if (item.RefMedicalCondition != null && item.RefMedicalCondition.ICD10Code != null)
                        {
                            curContraObj.ListICD10Code.Add(item.RefMedicalCondition.ICD10Code);
                        }
                        itemDrugAndContr.DrugID = item.DrugID;
                        itemDrugAndContr.BrandName = item.BrandName;
                        itemDrugAndContr.ListConTraAndLstICDs.Add(curContraObj);
                        lstDrugAndContr.Add(itemDrugAndContr);
                    }
                    else
                    {
                        // Kiem tra loai chong chi dinh co trung khong
                        if (curContraObj.MedConTraTypeID != item.RefMedicalConditionType.MedContraTypeID)
                        {
                            curContraObj = new ContraAndLstICDs();
                            curContraObj.ListICD10Code = new List<string>();
                            curContraObj.MedConTraTypeID = item.RefMedicalConditionType.MedContraTypeID;
                            curContraObj.AgeFrom = item.RefMedicalConditionType.AgeFrom;
                            curContraObj.AgeTo = item.RefMedicalConditionType.AgeTo;
                            curContraObj.V_AgeUnit = item.RefMedicalConditionType.V_AgeUnit;
                            curContraObj.IsWarning = item.IsWarning;
                            if (item.RefMedicalCondition != null && item.RefMedicalCondition.ICD10Code != null)
                            {
                                curContraObj.ListICD10Code.Add(item.RefMedicalCondition.ICD10Code);
                            }
                            itemDrugAndContr.ListConTraAndLstICDs.Add(curContraObj);
                        }
                        else if (item.RefMedicalCondition != null && item.RefMedicalCondition.ICD10Code != null)
                        {
                            curContraObj.ListICD10Code.Add(item.RefMedicalCondition.ICD10Code);
                        }
                    }
                }
                Cnt++;
            }

            return lstDrugAndContr;
        }
        protected virtual MedProductContraIndicatorRelToMedCond GetMedProductContraIndicatorRelToMedCondObjFromReader(IDataReader reader)
        {
            MedProductContraIndicatorRelToMedCond p = new MedProductContraIndicatorRelToMedCond();
            p.RefMedicalConditionType = new RefMedContraIndicationTypes();
            p.RefMedicalCondition = new RefMedContraIndicationICD();
            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                p.DrugID = (long)reader["GenMedProductID"];
            }
            if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
            {
                p.BrandName = reader["BrandName"].ToString();
            }
            if (reader.HasColumn("IsWarning") && reader["IsWarning"] != DBNull.Value)
            {
                p.IsWarning = Convert.ToBoolean(reader["IsWarning"]);
            }
            if (reader.HasColumn("MedContraTypeID") && reader["MedContraTypeID"] != DBNull.Value)
            {
                p.RefMedicalConditionType.MedContraTypeID = Convert.ToInt32(reader["MedContraTypeID"]);
            }
            if (reader.HasColumn("AgeFrom") && reader["AgeFrom"] != DBNull.Value)
            {
                p.RefMedicalConditionType.AgeFrom = Convert.ToInt32(reader["AgeFrom"]);
            }
            if (reader.HasColumn("AgeTo") && reader["AgeTo"] != DBNull.Value)
            {
                p.RefMedicalConditionType.AgeTo = Convert.ToInt32(reader["AgeTo"]);
            }
            if (reader.HasColumn("V_AgeUnit") && reader["V_AgeUnit"] != DBNull.Value)
            {
                p.RefMedicalConditionType.V_AgeUnit = Convert.ToInt64(reader["V_AgeUnit"]);
            }
            if (reader.HasColumn("ICD10Code") && reader["ICD10Code"] != DBNull.Value)
            {
                p.RefMedicalCondition.ICD10Code = reader["ICD10Code"].ToString();
            }
            return p;
        }

        protected virtual Dictionary<long, List<RefGenericRelation>> GetMAPRefGenericRelationFromReader(IDataReader reader)
        {
            Dictionary<long, List<RefGenericRelation>> MAPRefGenericRelation = new Dictionary<long, List<RefGenericRelation>>();
            List<RefGenericRelation> lstRefGenericRelation = new List<RefGenericRelation>();
            while (reader.Read())
            {
                lstRefGenericRelation.Add(GetRefGenericRelationObjFromReader(reader));
            }
            if (lstRefGenericRelation != null && lstRefGenericRelation.Count > 0)
            {
                MAPRefGenericRelation = RefGenericRelation.CreateMapDictionary(lstRefGenericRelation);
            }
            return MAPRefGenericRelation;
        }

        protected virtual RefGenericRelation GetRefGenericRelationObjFromReader(IDataReader reader)
        {
            RefGenericRelation p = new RefGenericRelation();
            p.FirstGeneric = new RefGeneric();
            if (reader.HasColumn("FirstGenericID") && reader["FirstGenericID"] != DBNull.Value)
            {
                p.FirstGeneric.GenericID = (long)reader["FirstGenericID"];
            }
            p.SecondGeneric = new RefGeneric();
            if (reader.HasColumn("SecondGenericID") && reader["SecondGenericID"] != DBNull.Value)
            {
                p.SecondGeneric.GenericID = (long)reader["SecondGenericID"];
            }
            if (reader.HasColumn("SecondGenericName") && reader["SecondGenericName"] != DBNull.Value)
            {
                p.SecondGeneric.GenericName = reader["SecondGenericName"].ToString();
            }
            if (reader.HasColumn("IsSimilar") && reader["IsSimilar"] != DBNull.Value)
            {
                p.IsSimilar = Convert.ToBoolean(reader["IsSimilar"]);
            }
            if (reader.HasColumn("IsInteraction") && reader["IsInteraction"] != DBNull.Value)
            {
                p.IsInteraction = Convert.ToBoolean(reader["IsInteraction"]);
            }
            p.V_InteractionWarningLevel = new Lookup();
            if (reader.HasColumn("V_InteractionWarningLevel") && reader["V_InteractionWarningLevel"] != DBNull.Value)
            {
                p.V_InteractionWarningLevel.LookupID = (long)reader["V_InteractionWarningLevel"];
            }
            p.V_InteractionSeverityLevel = new Lookup();
            if (reader.HasColumn("V_InteractionSeverityLevel") && reader["V_InteractionSeverityLevel"] != DBNull.Value)
            {
                p.V_InteractionSeverityLevel.LookupID = (long)reader["V_InteractionSeverityLevel"];
            }
            if (reader.HasColumn("V_InteractionSeverityLevelValue") && reader["V_InteractionSeverityLevelValue"] != DBNull.Value)
            {
                p.V_InteractionSeverityLevel.ObjectValue = reader["V_InteractionSeverityLevelValue"].ToString();
            }
            return p;
        }

        protected virtual RefGenMedDrugDetails GetRefGenMedDrugDetailsFromReader(IDataReader reader)
        {
            var p = new RefGenMedDrugDetails
            {
                GenMedProductID = (long)reader["GenMedProductID"],
                MedGenDrugID = (long)reader["MedGenDrugID"]
            };
            if (reader.HasColumn("Content"))
            {
                p.Content = reader["Content"].ToString();
            }

            if (reader.HasColumn("IsConsult") && reader["IsConsult"] != DBNull.Value)
            {
                p.IsConsult = Convert.ToBoolean(reader["IsConsult"]);
            }
            if (reader.HasColumn("Composition") && reader["Composition"] != DBNull.Value)
            {
                p.Composition = reader["Composition"].ToString();
            }
            if (reader.HasColumn("Dosage") && reader["Dosage"] != DBNull.Value)
            {
                p.Dosage = reader["Dosage"].ToString();
            }
            if (reader.HasColumn("Indication") && reader["Indication"] != DBNull.Value)
            {
                p.Indication = reader["Indication"].ToString();
            }
            if (reader.HasColumn("ActiveIngredient") && reader["ActiveIngredient"] != DBNull.Value)
            {
                p.ActiveIngredient = reader["ActiveIngredient"].ToString();
            }
            if (reader.HasColumn("AdvTimeBeforeExpire") && reader["AdvTimeBeforeExpire"] != DBNull.Value)
            {
                p.AdvTimeBeforeExpire = reader["AdvTimeBeforeExpire"] as Int32?;
            }
            if (reader.HasColumn("Precaution_Warn") && reader["Precaution_Warn"] != DBNull.Value)
            {
                p.Precaution_Warn = reader["Precaution_Warn"].ToString();
            }
            if (reader.HasColumn("SideEffects") && reader["SideEffects"] != DBNull.Value)
            {
                p.SideEffects = reader["SideEffects"].ToString();
            }
            if (reader.HasColumn("KeepRefrigerated"))
            {
                p.KeepRefrigerated = reader["KeepRefrigerated"] as bool?;
            }
            if (reader.HasColumn("MaxDayPrescribed") && reader["MaxDayPrescribed"] != DBNull.Value)
            {
                p.MaxDayPrescribed = Convert.ToInt16(reader["MaxDayPrescribed"]);
            }
            if (reader.HasColumn("RefGenDrugBHYT_CatID") && reader["RefGenDrugBHYT_CatID"] != DBNull.Value)
            {
                p.RefGenDrugBHYT_CatID = reader["RefGenDrugBHYT_CatID"] as long?;
                p.CurrentRefGenDrugBHYT_Category = GetRefGenDrugBHYT_CategoryFromReader(reader);
            }
            if (reader.HasColumn("DosageForm") && reader["DosageForm"] != DBNull.Value)
            {
                p.DosageForm = reader["DosageForm"].ToString();
            }
            if (reader.HasColumn("DrugForm") && reader["DrugForm"] != DBNull.Value)
            {
                p.DrugForm = reader["DrugForm"].ToString();
            }
            if (reader.HasColumn("VidalGroup") && reader["VidalGroup"] != DBNull.Value)
            {
                p.VidalGroup = reader["VidalGroup"].ToString();
            }
            if (reader.HasColumn("V_GroupTypeForReport20") && reader["V_GroupTypeForReport20"] != DBNull.Value)
            {
                p.V_GroupTypeForReport20 = Convert.ToInt64(reader["V_GroupTypeForReport20"]);
            }
            if (reader.HasColumn("TCKTAndTCCNGroup") && reader["TCKTAndTCCNGroup"] != DBNull.Value)
            {
                p.TCKTAndTCCNGroup = reader["TCKTAndTCCNGroup"].ToString();
            }

            //▼====: #061
            if (reader.HasColumn("Contraindication") && reader["Contraindication"] != DBNull.Value)
            {
                p.Contraindication = reader["Contraindication"].ToString();
            }
            if (reader.HasColumn("IndicationInfo") && reader["IndicationInfo"] != DBNull.Value)
            {
                p.IndicationInfo = reader["IndicationInfo"].ToString();
            }
            if (reader.HasColumn("Interaction") && reader["Interaction"] != DBNull.Value)
            {
                p.Interaction = reader["Interaction"].ToString();
            }
            if (reader.HasColumn("HowToUse") && reader["HowToUse"] != DBNull.Value)
            {
                p.HowToUse = reader["HowToUse"].ToString();
            }
            if (reader.HasColumn("ReferencesDocument") && reader["ReferencesDocument"] != DBNull.Value)
            {
                p.ReferencesDocument = reader["ReferencesDocument"].ToString();
            }
            //▲====: #061

            //▼===== #065
            if (reader.HasColumn("IsAcceptRoundValue") && reader["IsAcceptRoundValue"] != DBNull.Value)
            {
                p.IsAcceptRoundValue = Convert.ToBoolean(reader["IsAcceptRoundValue"]);
            }
            if (reader.HasColumn("PrivateContent") && reader["PrivateContent"] != DBNull.Value)
            {
                p.PrivateContent = reader["PrivateContent"].ToString();
            }
            //▲===== #065 
            return p;
        }
        protected virtual List<RefGenMedDrugDetails> GetRefGenMedDrugDetailsCollectionFromReader(IDataReader reader)
        {
            List<RefGenMedDrugDetails> drugs = new List<RefGenMedDrugDetails>();
            while (reader.Read())
            {
                drugs.Add(GetRefGenMedDrugDetailsFromReader(reader));
            }
            return drugs;
        }

        protected virtual RefGenMedProductSimple GetRefGenMedProductSimpleFromReader(IDataReader reader)
        {
            RefGenMedProductSimple p = new RefGenMedProductSimple();
            p.GenMedProductID = (long)reader["GenMedProductID"];
            p.BrandName = reader["BrandName"].ToString();
            if (reader.HasColumn("GenericName"))
            {
                p.GenericName = reader["GenericName"].ToString();
            }
            if (reader.HasColumn("Code"))
            {
                p.Code = reader["Code"].ToString();
            }
            if (reader.HasColumn("UnitName"))
            {
                p.UnitName = reader["UnitName"].ToString();
            }
            if (reader.HasColumn("V_MedProductType"))
            {
                p.V_MedProductType = (long)reader["V_MedProductType"];
            }
            if (reader.HasColumn("RefGenDrugCatID_1"))
            {
                p.RefGenDrugCatID_1 = reader["RefGenDrugCatID_1"] as long?;
            }
            if (reader.HasColumn("RefGenDrugCatID_2"))
            {
                p.RefGenDrugCatID_2 = reader["RefGenDrugCatID_2"] as long?;
            }
            if (reader.HasColumn("ProductCodeRefNum") && reader["ProductCodeRefNum"] != DBNull.Value)
            {
                p.ProductCodeRefNum = reader["ProductCodeRefNum"].ToString();
            }
            return p;
        }

        protected virtual List<RefGenMedProductSimple> GetRefGenMedProductSimpleCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<RefGenMedProductSimple>();
            while (reader.Read())
            {
                drugs.Add(GetRefGenMedProductSimpleFromReader(reader));
            }
            return drugs;
        }
        protected virtual PCLExamTypeContactDrugs GetPCLExamTypeContactDrugsFromReader(IDataReader reader)
        {
            PCLExamTypeContactDrugs p = new PCLExamTypeContactDrugs();
            if (reader.HasColumn("PCLExamTypeContactDrugID") && reader["PCLExamTypeContactDrugID"] != DBNull.Value)
            {
                p.PCLExamTypeContactDrugID = (long)reader["PCLExamTypeContactDrugID"];
            }
            if (reader.HasColumn("PCLExamTypeID") && reader["PCLExamTypeID"] != DBNull.Value)
            {
                p.PCLExamTypeID = (long)reader["PCLExamTypeID"];
            }
            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                p.GenMedProductID = (long)reader["GenMedProductID"];
            }
            try
            {
                p.GenMedProduct = GetRefGenMedProductDetailsFromReader(reader);
            }
            catch
            {

            }
            return p;
        }
        protected virtual RefGenMedProductDetails GetRefGenMedProductDetailsFromReader(IDataReader reader)
        {
            RefGenMedProductDetails p = new RefGenMedProductDetails();
            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                p.GenMedProductID = (long)reader["GenMedProductID"];
            }
            if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
            {
                p.BrandName = reader["BrandName"].ToString();
            }
            if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
            {
                p.GenericName = reader["GenericName"].ToString();
            }
            if (reader.HasColumn("Code") && reader["Code"] != DBNull.Value)
            {
                p.Code = reader["Code"].ToString();
            }
            if (reader.HasColumn("ShelfName") && reader["ShelfName"] != DBNull.Value)
            {
                p.ShelfName = reader["ShelfName"].ToString();
            }
            if (reader.HasColumn("HICode") && reader["HICode"] != DBNull.Value)
            {
                p.HICode = reader["HICode"] == null ? "" : reader["HICode"].ToString();
            }
            //KMx: Chỉ sử dụng HICode, không dùng HICode2 (31/08/2015 15:35).
            //if (reader.HasColumn("HICode2") && reader["HICode2"] != DBNull.Value)
            //{
            //    p.HICode2 = reader["HICode2"].ToString();
            //}
            if (reader.HasColumn("Functions") && reader["Functions"] != DBNull.Value)
            {
                p.Functions = reader["Functions"] == null ? "" : reader["Functions"].ToString();
            }
            if (reader.HasColumn("swhlName") && reader["swhlName"] != DBNull.Value)
            {
                p.StoreName = reader["swhlName"] as string;
            }
            if (reader.HasColumn("StoreID") && reader["StoreID"] != DBNull.Value)
            {
                p.StoreID = reader["StoreID"] as long?;
            }
            if (reader.HasColumn("TechInfo") && reader["TechInfo"] != DBNull.Value)
            {
                p.TechInfo = reader["TechInfo"] == null ? "" : reader["TechInfo"].ToString();
            }

            if (reader.HasColumn("Material") && reader["Material"] != DBNull.Value)
            {
                p.Material = reader["Material"] == null ? "" : reader["Material"].ToString();
            }

            if (reader.HasColumn("Visa") && reader["Visa"] != DBNull.Value)
            {
                p.Visa = reader["Visa"] == null ? "" : reader["Visa"].ToString();
            }

            //▼====== #025
            if (reader.HasColumn("V_CatDrugType") && reader["V_CatDrugType"] != DBNull.Value)
            {
                p.V_CatDrugType = (long)reader["V_CatDrugType"];
                p.CatDrugType = new Lookup();
                p.CatDrugType.LookupID = Convert.ToInt64(reader["V_CatDrugType"]);
                if (reader.HasColumn("CatDrugType") && reader["CatDrugType"] != DBNull.Value)
                {
                    p.CatDrugType.ObjectValue = reader["CatDrugType"].ToString();
                }
            }
            if (reader.HasColumn("DrugCode") && reader["DrugCode"] != DBNull.Value)
            {
                p.DrugCode = reader["DrugCode"].ToString();
            }
            //▲====== #025


            if (reader.HasColumn("InID") && reader["InID"] != DBNull.Value)
            {
                p.InID = Convert.ToInt64(reader["InID"]);
            }

            if (reader.HasColumn("CountryID") && reader["CountryID"] != DBNull.Value)
            {
                p.CountryID = Convert.ToInt64(reader["CountryID"]);

                try
                {
                    p.SelectedCountry = GetCountryFromReader(reader);
                }
                catch
                {

                }
            }
            if (reader.HasColumn("Packaging") && reader["Packaging"] != DBNull.Value)
            {
                p.Packaging = reader["Packaging"] != DBNull.Value ? reader["Packaging"].ToString() : "";
            }

            if (reader.HasColumn("UnitID") && reader["UnitID"] != DBNull.Value)
            {
                p.UnitID = reader["UnitID"] as long?;
                p.SelectedUnit = GetUnitFromReader(reader);
            }
            if (reader.HasColumn("UnitUseID") && reader["UnitUseID"] != DBNull.Value)
            {
                p.UnitUseID = reader["UnitUseID"] as long?;
                p.SelectedUnitUse = new RefUnit();
                if (reader["UnitUseID"] != DBNull.Value)
                {
                    if (reader.HasColumn("UnitUseID"))
                    {
                        p.SelectedUnitUse.UnitID = (long)reader["UnitUseID"];
                    }
                    if (reader.HasColumn("UnitUse"))
                    {
                        p.SelectedUnitUse.UnitName = reader["UnitUse"].ToString();
                    }

                    if (reader.HasColumn("UnitUseID_Code"))
                    {
                        p.SelectedUnitUse.UnitCode = reader["UnitUseID_Code"].ToString();
                    }

                    //KMx: Ở trên set UnitUse rồi, xuống đây set nữa chi? (27/10/2014 14:59).
                    //if (reader.HasColumn("UnitUseID_Name"))
                    //{
                    //    p.SelectedUnitUse.UnitName = reader["UnitUseID_Name"].ToString();
                    //}
                }
            }
            if (reader.HasColumn("UnitPackaging") && reader["UnitPackaging"] != DBNull.Value)
            {
                p.UnitPackaging = reader["UnitPackaging"] as int?;
            }
            if (reader.HasColumn("Description") && reader["Description"] != DBNull.Value)
            {
                p.Description = reader["Description"] == null ? "" : reader["Description"].ToString();
            }

            if (reader.HasColumn("V_RouteOfAdministration") && reader["V_RouteOfAdministration"] != DBNull.Value)
            {
                p.RouteOfAdministration = new Lookup();
                p.RouteOfAdministration.LookupID = Convert.ToInt64(reader["V_RouteOfAdministration"]);

                if (reader.HasColumn("RouteOfAdministrationValue") && reader["RouteOfAdministrationValue"] != DBNull.Value)
                {
                    p.RouteOfAdministration.ObjectValue = reader["RouteOfAdministrationValue"].ToString();
                }
            }

            if (reader.HasColumn("Administration") && reader["Administration"] != DBNull.Value)
            {
                p.Administration = reader["Administration"] == null ? "" : reader["Administration"].ToString();
            }

            if (reader.HasColumn("InsuranceCover") && reader["InsuranceCover"] != DBNull.Value)
            {
                p.InsuranceCover = reader["InsuranceCover"] as bool?;
            }

            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = reader["IsActive"] as bool?;
            }

            if (reader.HasColumn("IsNotShow") && reader["IsNotShow"] != DBNull.Value)
            {
                p.IsNotShow = reader["IsNotShow"] as bool?;
            }

            if (reader.HasColumn("V_MedProductType") && reader["V_MedProductType"] != DBNull.Value)
            {
                p.V_MedProductType = Convert.ToInt64(reader["V_MedProductType"]);
            }

            if (reader.HasColumn("NumberOfEstimatedMonths") && reader["NumberOfEstimatedMonths"] != DBNull.Value)
            {
                p.NumberOfEstimatedMonths_F = Convert.ToDouble(reader["NumberOfEstimatedMonths"]);
            }

            //thuốc

            if (reader.HasColumn("PCOID") && reader["PCOID"] != DBNull.Value)
            {
                p.PCOID = reader["PCOID"] as long?;
                p.PharmaceuticalCompany = new DrugDeptPharmaceuticalCompany { PCOID = (long)reader["PCOID"] };
                if (reader.HasColumn("PCOName"))
                {
                    p.PharmaceuticalCompany.PCOName = reader["PCOName"].ToString();
                }
            }
            if (reader.HasColumn("DrugClassID") && reader["DrugClassID"] != DBNull.Value)
            {
                p.DrugClassID = reader["DrugClassID"] as long?;
                try
                {
                    p.SelectedDrugClass = GetDrugClassFromReader(reader);
                }
                catch
                { }
            }
            if (reader.HasColumn("DrugClassName") && reader["DrugClassName"] != DBNull.Value)
            {
                p.DrugClassName = reader["DrugClassName"].ToString();
            }
            if (reader.HasColumn("HosID") && reader["HosID"] != DBNull.Value)
            {
                p.HosID = reader["HosID"] as long?;
                p.CurrentHospital = new Hospital();
                p.CurrentHospital.HosID = (long)reader["HosID"];
                if (reader.HasColumn("HosName"))
                {
                    p.CurrentHospital.HosName = reader["HosName"].ToString();
                }
            }

            //KMx: Chuyển WinningHospitals thành BiddingHospital (28/07/2015 14:03).
            if (reader.HasColumn("WinningHospitals") && reader["WinningHospitals"] != DBNull.Value)
            {
                p.WinningHospitals = reader["WinningHospitals"].ToString();
            }

            if (reader.HasColumn("FactorSafety") && reader["FactorSafety"] != DBNull.Value)
            {
                p.FactorSafety = (int)reader["FactorSafety"];
            }
            if (reader.HasColumn("ProductCodeRefNum") && reader["ProductCodeRefNum"] != DBNull.Value)
            {
                p.ProductCodeRefNum = reader["ProductCodeRefNum"].ToString();
            }
            if (reader.HasColumn("RefGenDrugCatID_1") && reader["RefGenDrugCatID_1"] != DBNull.Value)
            {
                p.RefGenDrugCatID_1 = reader["RefGenDrugCatID_1"] as long?;
            }
            if (reader.HasColumn("RefGenDrugCatID_2") && reader["RefGenDrugCatID_2"] != DBNull.Value)
            {
                p.RefGenDrugCatID_2 = reader["RefGenDrugCatID_2"] as long?;
            }
            if (reader.HasColumn("DispenseVolume") && reader["DispenseVolume"] != DBNull.Value)
            {
                p.DispenseVolume = Convert.ToDouble(reader["DispenseVolume"]);
            }
            /*▼====: #017*/
            if (reader.HasColumn("Volume") && reader["Volume"] != DBNull.Value)
            {
                p.Volume = Convert.ToDouble(reader["Volume"]);
            }
            /*▲====: #017*/
            #region dung cho du tru member

            //KMx: Nếu dùng try catch như bên dưới thì khi Xuất hàng, Autocomplete tìm thuốc sẽ bị chậm vì khi tìm thuốc không có SupplierID, dẫn đến bị lỗi (05/07/2014 10:16).
            //try
            //{
            //    p.SupplierMain = GetDrugDeptSupplierFromReader(reader);
            //}
            //catch { }

            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.SupplierMain = GetDrugDeptSupplierFromReader(reader);
            }


            if (reader.HasColumn("UnitPrice") && reader["UnitPrice"] != DBNull.Value)
            {
                //p.UnitPrice = (decimal)reader["UnitPrice"];
                p.UnitPrice = Convert.ToDecimal(reader["UnitPrice"]);
            }
            if (reader.HasColumn("PackagePrice") && reader["PackagePrice"] != DBNull.Value)
            {
                //p.PackagePrice = (decimal)reader["PackagePrice"];
                p.PackagePrice = Convert.ToDecimal(reader["PackagePrice"]);
            }
            #endregion

            if (reader.HasColumn("HIPriceAllow"))
            {
                //to do
            }

            //KMx: Nếu dùng try catch như bên dưới thì khi Xuất hàng, Autocomplete tìm Y Cụ, Hóa Chất sẽ bị chậm vì khi tìm hàng, không có MedGenDrugID, dẫn đến bị lỗi (05/07/2014 10:16).
            //try
            //{
            //    p.RefGenMedDrugDetails = GetRefGenMedDrugDetailsFromReader(reader);
            //}
            //catch
            //{
            //    p.RefGenMedDrugDetails = new RefGenMedDrugDetails();
            //}

            if (reader.HasColumn("GenMedProductID") && reader.HasColumn("MedGenDrugID")
                && reader["GenMedProductID"] != DBNull.Value && reader["MedGenDrugID"] != DBNull.Value)
            {
                p.RefGenMedDrugDetails = GetRefGenMedDrugDetailsFromReader(reader);
            }
            else
            {
                p.RefGenMedDrugDetails = new RefGenMedDrugDetails();
                //▼====: #172
                if (reader.HasColumn("TCKTAndTCCNGroup") && reader["TCKTAndTCCNGroup"] != DBNull.Value)
                {
                    p.RefGenMedDrugDetails.TCKTAndTCCNGroup = reader["TCKTAndTCCNGroup"].ToString();
                }
                //▲====: #172
            }

            if (reader.HasColumn("RequestQty") && reader["RequestQty"] != DBNull.Value)
            {
                p.RequestQty = Convert.ToDecimal(reader["RequestQty"]);
            }
            if (reader.HasColumn("InBuyingPrice") && reader["InBuyingPrice"] != DBNull.Value)
            {
                p.InBuyingPrice = Convert.ToDecimal(reader["InBuyingPrice"]);
            }

            if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
            {
                p.NormalPrice = Convert.ToDecimal(reader["NormalPrice"]);
            }
            else
            {
                p.NormalPrice = 0;
            }

            if (reader.HasColumn("PriceForHIPatient") && reader["PriceForHIPatient"] != DBNull.Value)
            {
                p.HIPatientPrice = Convert.ToDecimal(reader["PriceForHIPatient"]);
            }
            else if (reader.HasColumn("HIPatientPrice") && reader["HIPatientPrice"] != DBNull.Value)
            {
                p.HIPatientPrice = Convert.ToDecimal(reader["HIPatientPrice"]);
            }
            else
            {
                p.HIPatientPrice = 0;
            }


            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = Convert.ToDecimal(reader["HIAllowedPrice"]);
            }
            else
            {
                p.HIAllowedPrice = 0;
            }

            #region dung cho ban hang

            if (reader.HasColumn("STT") && reader["STT"] != DBNull.Value)
            {
                p.STT = Convert.ToInt64(reader["STT"]);
            }
            if (reader.HasColumn("InID") && reader["InID"] != DBNull.Value)
            {
                p.InID = Convert.ToInt64(reader["InID"]);
            }
            if (reader.HasColumn("Remaining") && reader["Remaining"] != DBNull.Value)
            {
                p.Remaining = Convert.ToDecimal(reader["Remaining"]);
                p.RemainingFirst = Convert.ToDecimal(reader["Remaining"]);
            }

            //if (reader.HasColumn("SellingPrice") && reader["SellingPrice"] != DBNull.Value)
            //{
            //    p.SellingPrice = Convert.ToDecimal(reader["SellingPrice"]);
            //}
            if (reader.HasColumn("OutPrice") && reader["OutPrice"] != DBNull.Value)
            {
                p.OutPrice = Convert.ToDecimal(reader["OutPrice"]);
            }
            if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
            {
                p.InCost = Convert.ToDecimal(reader["InCost"]);
            }
            if (reader.HasColumn("InBatchNumber"))
            {
                p.InBatchNumber = reader["InBatchNumber"].ToString();
            }
            if (reader.HasColumn("SdlDescription"))
            {
                p.SdlDescription = reader["SdlDescription"].ToString();
            }
            if (reader.HasColumn("InwardDate") && reader["InwardDate"] != DBNull.Value)
            {
                p.InwardDate = Convert.ToDateTime(reader["InwardDate"]);
            }
            if (reader.HasColumn("InExpiryDate") && reader["InExpiryDate"] != DBNull.Value)
            {
                p.InExpiryDate = reader["InExpiryDate"] as DateTime?;
            }
            #endregion

            #region dung cho xuat thuoc tu khoa phong den benh nhan

            if (reader.HasColumn("OutClinicDeptReqID") && reader["OutClinicDeptReqID"] != DBNull.Value)
            {
                p.OutClinicDeptReqID = reader["OutClinicDeptReqID"] as long?;
            }
            #endregion

            if (reader.HasColumn("V_MedicalMaterial") && reader["V_MedicalMaterial"] != DBNull.Value)
            {
                if (Enum.IsDefined(typeof(AllLookupValues.V_MedicalMaterial), (long)reader["V_MedicalMaterial"]))
                {
                    p.V_MedicalMaterial = (long)reader["V_MedicalMaterial"];
                }
                else
                {
                    p.V_MedicalMaterial = 0;
                }
            }

            if (reader.HasColumn("HIPaymentPercent") && reader["HIPaymentPercent"] != DBNull.Value)
            {
                p.HIPaymentPercent = Convert.ToDouble(reader["HIPaymentPercent"]);
            }

            if (reader.HasColumn("HIProductCode5084") && reader["HIProductCode5084"] != DBNull.Value)
            {
                p.HIProductCode5084 = reader["HIProductCode5084"].ToString();
            }

            if (reader.HasColumn("IsWatchOutQty") && reader["IsWatchOutQty"] != DBNull.Value)
            {
                p.IsWatchOutQty = Convert.ToBoolean(reader["IsWatchOutQty"]);
            }
            if (reader.HasColumn("LimitedOutQty") && reader["LimitedOutQty"] != DBNull.Value)
            {
                p.LimitedOutQty = Convert.ToInt32(reader["LimitedOutQty"]);
            }
            if (reader.HasColumn("RemainWarningLevel1") && reader["RemainWarningLevel1"] != DBNull.Value)
            {
                p.RemainWarningLevel1 = Convert.ToInt32(reader["RemainWarningLevel1"]);
            }
            if (reader.HasColumn("RemainWarningLevel2") && reader["RemainWarningLevel2"] != DBNull.Value)
            {
                p.RemainWarningLevel2 = Convert.ToInt32(reader["RemainWarningLevel2"]);
            }
            if (reader.HasColumn("IsDonatedGoods") && reader["IsDonatedGoods"] != DBNull.Value)
            {
                p.IsDonatedGoods = Convert.ToBoolean(reader["IsDonatedGoods"]);
            }
            #region Những properties dùng để báo cáo mẫu 20 mới (28/07/2015 15:37).
            //KMx: Chuyển WinningHospitals thành BiddingHospital (28/07/2015 14:03).
            if (reader.HasColumn("BiddingHospital") && reader["BiddingHospital"] != DBNull.Value)
            {
                p.BiddingHospital = reader["BiddingHospital"].ToString();
            }
            if (reader.HasColumn("ReportBrandName") && reader["ReportBrandName"] != DBNull.Value)
            {
                p.ReportBrandName = reader["ReportBrandName"].ToString();
            }
            if (reader.HasColumn("BidDecisionNumAndOrdinalNum") && reader["BidDecisionNumAndOrdinalNum"] != DBNull.Value)
            {
                p.BidDecisionNumAndOrdinalNum = reader["BidDecisionNumAndOrdinalNum"].ToString();
            }
            if (reader.HasColumn("BidDecisionNumAndEffectiveDate") && reader["BidDecisionNumAndEffectiveDate"] != DBNull.Value)
            {
                p.BidDecisionNumAndEffectiveDate = reader["BidDecisionNumAndEffectiveDate"].ToString();
            }
            if (reader.HasColumn("BidEffectiveDate") && reader["BidEffectiveDate"] != DBNull.Value)
            {
                p.BidEffectiveDate = reader["BidEffectiveDate"].ToString();
            }
            if (reader.HasColumn("BidExpirationDate") && reader["BidExpirationDate"] != DBNull.Value)
            {
                p.BidExpirationDate = reader["BidExpirationDate"].ToString();
            }
            if (reader.HasColumn("OtherDecisionNumAndEffectiveDate") && reader["OtherDecisionNumAndEffectiveDate"] != DBNull.Value)
            {
                p.OtherDecisionNumAndEffectiveDate = reader["OtherDecisionNumAndEffectiveDate"].ToString();
            }
            if (reader.HasColumn("IsHighTechService") && reader["IsHighTechService"] != DBNull.Value)
            {
                p.IsHighTechService = Convert.ToBoolean(reader["IsHighTechService"]);
            }
            if (reader.HasColumn("TechServiceCode") && reader["TechServiceCode"] != DBNull.Value)
            {
                p.TechServiceCode = reader["TechServiceCode"].ToString();
            }
            if (reader.HasColumn("IsStamp") && reader["IsStamp"] != DBNull.Value)
            {
                p.IsStamp = Convert.ToBoolean(reader["IsStamp"]);
            }
            if (reader.HasColumn("NumOfUse") && reader["NumOfUse"] != DBNull.Value)
            {
                p.NumOfUse = Convert.ToDouble(reader["NumOfUse"]);
            }
            if (reader.HasColumn("MaxHIPay") && reader["MaxHIPay"] != DBNull.Value)
            {
                p.MaxHIPay = Convert.ToDecimal(reader["MaxHIPay"]);
            }
            if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
            {
                p.Note = reader["Note"].ToString();
            }
            #endregion
            if (reader.HasColumn("TLThanhToan") && reader["TLThanhToan"] != DBNull.Value)
            {
                p.TLThanhToan = Convert.ToDecimal(reader["TLThanhToan"]);
            }
            if (reader.HasColumn("MaxQtyHIAllowItem") && reader["MaxQtyHIAllowItem"] != DBNull.Value)
            {
                p.MaxQtyHIAllowItem = Convert.ToInt32(reader["MaxQtyHIAllowItem"]);
            }

            if (reader.HasColumn("BidID") && reader["BidID"] != DBNull.Value)
            {
                p.BidID = (long)reader["BidID"];
            }
            if (reader.HasColumn("BidName") && reader["BidName"] != DBNull.Value)
            {
                p.BidName = reader["BidName"].ToString();
            }
            if (reader.HasColumn("HIReportGroupCode") && reader["HIReportGroupCode"] != DBNull.Value)
            {
                p.HIReportGroupCode = reader["HIReportGroupCode"].ToString();
            }
            if (reader.HasColumn("BidCode") && reader["BidCode"] != DBNull.Value)
            {
                p.BidCode = reader["BidCode"].ToString();
            }
            if (reader.HasColumn("V_ProductScope") && reader["V_ProductScope"] != DBNull.Value)
            {
                p.V_ProductScope = (long)reader["V_ProductScope"];
            }
            if (reader.HasColumn("HITTypeID") && reader["HITTypeID"] != DBNull.Value)
            {
                p.HITTypeID = (long)reader["HITTypeID"];
            }
            if (reader.HasColumn("AppliedMedItemFollow04Cer") && reader["AppliedMedItemFollow04Cer"] != DBNull.Value)
            {
                p.AppliedMedItemFollow04Cer = Convert.ToBoolean(reader["AppliedMedItemFollow04Cer"]);
            }
            if (reader.HasColumn("DSPTModifiedDate") && reader["DSPTModifiedDate"] != DBNull.Value)
            {
                p.DSPTModifiedDate = Convert.ToDateTime(reader["DSPTModifiedDate"]);
            }
            /*▼====: #041*/
            if (reader.HasColumn("GenericID") && reader["GenericID"] != DBNull.Value)
            {
                p.GenericID = Convert.ToInt64(reader["GenericID"]);
                p.SelectedGeneric = new DrugClass();
                p.SelectedGeneric.DrugClassID = Convert.ToInt64(reader["GenericID"]);

                if (reader.HasColumn("RefGenericName") && reader["RefGenericName"] != DBNull.Value)
                {
                    p.SelectedGeneric.FaName = reader["RefGenericName"].ToString();
                }
                if (reader.HasColumn("RefGenericCode") && reader["RefGenericCode"] != DBNull.Value)
                {
                    p.SelectedGeneric.DrugClassCode = reader["RefGenericCode"].ToString();
                }
            }
            /*▲====: #041*/
            if (reader.HasColumn("BidCode") && reader["BidCode"] != DBNull.Value)
            {
                p.BidCode = reader["BidCode"].ToString();
            }

            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.SupplierMain = new DrugDeptSupplier { SupplierID = (long)reader["SupplierID"] };
                if (reader.HasColumn("SupplierName") && reader["SupplierName"] != DBNull.Value)
                {
                    p.SupplierMain.SupplierName = reader["SupplierName"].ToString();
                }
                if (reader.HasColumn("SupplierCode") && reader["SupplierCode"] != DBNull.Value)
                {
                    p.SupplierMain.SupplierCode = reader["SupplierCode"].ToString();
                }
            }
            if (reader.HasColumn("BidRemainingQty") && reader["BidRemainingQty"] != DBNull.Value)
            {
                p.BidRemainingQty = Convert.ToInt32(reader["BidRemainingQty"]);
            }
            if (reader.HasColumn("ApprovedQty") && reader["ApprovedQty"] != DBNull.Value)
            {
                p.ApprovedQty = Convert.ToInt32(reader["ApprovedQty"]);
            }
            if (reader.HasColumn("BidInCost") && reader["BidInCost"] != DBNull.Value)
            {
                p.BidInCost = Convert.ToDecimal(reader["BidInCost"]);
            }
            if (reader.HasColumn("LastID") && reader["LastID"] != DBNull.Value)
            {
                p.LastID = (long)reader["LastID"];
            }
            if (reader.HasColumn("LastCode") && reader["LastCode"] != DBNull.Value)
            {
                p.LastCode = reader["LastCode"].ToString();
            }
            if (reader.HasColumn("CeilingPrice1stItem") && reader["CeilingPrice1stItem"] != DBNull.Value)
            {
                p.CeilingPrice1stItem = Convert.ToDecimal(reader["CeilingPrice1stItem"]);
            }
            if (reader.HasColumn("CeilingPrice2ndItem") && reader["CeilingPrice2ndItem"] != DBNull.Value)
            {
                p.CeilingPrice2ndItem = Convert.ToDecimal(reader["CeilingPrice2ndItem"]);
            }
            if (reader.HasColumn("CeilingPrice3rdItem") && reader["CeilingPrice3rdItem"] != DBNull.Value)
            {
                p.CeilingPrice3rdItem = Convert.ToDecimal(reader["CeilingPrice3rdItem"]);
            }
            if (reader.HasColumn("PaymentRateOfHIAddedItem") && reader["PaymentRateOfHIAddedItem"] != DBNull.Value)
            {
                p.PaymentRateOfHIAddedItem = Convert.ToDouble(reader["PaymentRateOfHIAddedItem"]);
            }
            if (reader.HasColumn("BidDetailID") && reader["BidDetailID"] != DBNull.Value)
            {
                p.BidDetail = new BidDetail();
                p.BidDetail.BidDetailID = (long)reader["BidDetailID"];
                if (reader.HasColumn("ContractNo") && reader["ContractNo"] != DBNull.Value)
                {
                    p.BidDetail.ContractNo = Convert.ToString(reader["ContractNo"]);
                }
            }
            if (reader.HasColumn("DrugDeptInIDOrig") && reader["DrugDeptInIDOrig"] != DBNull.Value)
            {
                p.DrugDeptInIDOrig = Convert.ToInt64(reader["DrugDeptInIDOrig"]);
            }
            if (reader.HasColumn("V_InstructionOrdinalType") && reader["V_InstructionOrdinalType"] != DBNull.Value)
            {
                p.V_InstructionOrdinalType = Convert.ToInt64(reader["V_InstructionOrdinalType"]);
            }
            if (reader.HasColumn("MinDayOrdinalContinueIsAllowable") && reader["MinDayOrdinalContinueIsAllowable"] != DBNull.Value)
            {
                p.MinDayOrdinalContinueIsAllowable = Convert.ToInt16(reader["MinDayOrdinalContinueIsAllowable"]);
            }

            if (reader.HasColumn("IsNotVat") && reader["IsNotVat"] != DBNull.Value)
            {
                p.IsNotVat = Convert.ToBoolean(reader["IsNotVat"]);
            }
            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.VAT = Convert.ToDouble(reader["VAT"]);
            }
            else
            {
                p.VAT = null;
            }
            //▼===== 20200708 TTM: Dùng cho toa thuốc xuất viện lập phiếu lĩnh
            if (reader.HasColumn("ADoseStr") && reader["ADoseStr"] != DBNull.Value)
            {
                p.ADoseStr = reader["ADoseStr"].ToString();
            }
            if (reader.HasColumn("ADose") && reader["ADose"] != DBNull.Value)
            {
                p.ADose = Convert.ToSingle(reader["ADose"]);
            }
            if (reader.HasColumn("EDose") && reader["EDose"] != DBNull.Value)
            {
                p.EDose = Convert.ToSingle(reader["EDose"]);
            }
            if (reader.HasColumn("MDose") && reader["MDose"] != DBNull.Value)
            {
                p.MDose = Convert.ToSingle(reader["MDose"]);
            }
            if (reader.HasColumn("NDose") && reader["NDose"] != DBNull.Value)
            {
                p.NDose = Convert.ToSingle(reader["NDose"]);
            }
            if (reader.HasColumn("ADoseStr") && reader["ADoseStr"] != DBNull.Value)
            {
                p.ADoseStr = reader["ADoseStr"].ToString();
            }
            if (reader.HasColumn("EDoseStr") && reader["EDoseStr"] != DBNull.Value)
            {
                p.EDoseStr = reader["EDoseStr"].ToString();
            }
            if (reader.HasColumn("MDoseStr") && reader["MDoseStr"] != DBNull.Value)
            {
                p.MDoseStr = reader["MDoseStr"].ToString();
            }
            if (reader.HasColumn("NDoseStr") && reader["NDoseStr"] != DBNull.Value)
            {
                p.NDoseStr = reader["NDoseStr"].ToString();
            }
            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.Staff = new Staff();
                p.Staff.StaffID = Convert.ToInt64(reader["DoctorStaffID"]);
                if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                {
                    p.Staff.FullName = reader["FullName"].ToString();
                }
            }
            if (reader.HasColumn("MedicalInstructionDate") && reader["MedicalInstructionDate"] != DBNull.Value)
            {
                p.MedicalInstructionDate = Convert.ToDateTime(reader["MedicalInstructionDate"]);
            }
            if (reader.HasColumn("GenMedVersionID") && reader["GenMedVersionID"] != DBNull.Value)
            {
                p.GenMedVersionID = reader["GenMedVersionID"] as long?;
            }
            //▲===== 
            if (reader.HasColumn("LimQtyHiItemMaxPaymtID") && reader["LimQtyHiItemMaxPaymtID"] != DBNull.Value)
            {
                p.LimQtyAndHIPrice = new LimQtyHiItemMaxPaymtPerc();
                p.LimQtyAndHIPrice.LimQtyHiItemMaxPaymtID = Convert.ToInt64(reader["LimQtyHiItemMaxPaymtID"]);
                if (reader.HasColumn("LimQtyHiItemMaxPaymtName") && reader["LimQtyHiItemMaxPaymtName"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.LimQtyHiItemMaxPaymtName = reader["LimQtyHiItemMaxPaymtName"].ToString();
                }
                if (reader.HasColumn("ItemNumber1MaxPayAmt") && reader["ItemNumber1MaxPayAmt"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber1MaxPayAmt = Convert.ToDecimal(reader["ItemNumber1MaxPayAmt"]);
                }
                if (reader.HasColumn("ItemNumber1MaxPayPerc") && reader["ItemNumber1MaxPayPerc"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber1MaxPayPerc = Convert.ToDecimal(reader["ItemNumber1MaxPayPerc"]);
                }
                if (reader.HasColumn("ItemNumber1InHiGroup") && reader["ItemNumber1InHiGroup"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber1InHiGroup = Convert.ToBoolean(reader["ItemNumber1InHiGroup"]);
                }
                if (reader.HasColumn("ItemNumber2MaxPayAmt") && reader["ItemNumber2MaxPayAmt"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber2MaxPayAmt = Convert.ToDecimal(reader["ItemNumber2MaxPayAmt"]);
                }
                if (reader.HasColumn("ItemNumber2MaxPayPerc") && reader["ItemNumber2MaxPayPerc"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber2MaxPayPerc = Convert.ToDecimal(reader["ItemNumber2MaxPayPerc"]);
                }
                if (reader.HasColumn("ItemNumber2InHiGroup") && reader["ItemNumber2InHiGroup"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber2InHiGroup = Convert.ToBoolean(reader["ItemNumber2InHiGroup"]);
                }
                if (reader.HasColumn("ItemNumber3MaxPayAmt") && reader["ItemNumber3MaxPayAmt"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber3MaxPayAmt = Convert.ToDecimal(reader["ItemNumber3MaxPayAmt"]);
                }
                if (reader.HasColumn("ItemNumber3MaxPayPerc") && reader["ItemNumber3MaxPayPerc"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber3MaxPayPerc = Convert.ToDecimal(reader["ItemNumber3MaxPayPerc"]);
                }
                if (reader.HasColumn("ItemNumber3InHiGroup") && reader["ItemNumber3InHiGroup"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber3InHiGroup = Convert.ToBoolean(reader["ItemNumber3InHiGroup"]);
                }
                if (reader.HasColumn("ItemNumber1MaxBenefit") && reader["ItemNumber1MaxBenefit"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber1MaxBenefit = Convert.ToDecimal(reader["ItemNumber1MaxBenefit"]);
                }
                if (reader.HasColumn("ItemNumber2MaxBenefit") && reader["ItemNumber2MaxBenefit"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber2MaxBenefit = Convert.ToDecimal(reader["ItemNumber2MaxBenefit"]);
                }
                if (reader.HasColumn("ItemNumber3MaxBenefit") && reader["ItemNumber3MaxBenefit"] != DBNull.Value)
                {
                    p.LimQtyAndHIPrice.ItemNumber3MaxBenefit = Convert.ToDecimal(reader["ItemNumber3MaxBenefit"]);
                }
            }
            if (reader.HasColumn("NgoaiDinhSuat") && reader["NgoaiDinhSuat"] != DBNull.Value)
            {
                p.NgoaiDinhSuat = Convert.ToBoolean(reader["NgoaiDinhSuat"]);
            }
            if (reader.HasColumn("InCategoryCOVID") && reader["InCategoryCOVID"] != DBNull.Value)
            {
                p.InCategoryCOVID = Convert.ToBoolean(reader["InCategoryCOVID"]);
            }
            //▼====: #125
            if (reader.HasColumn("Notes") && reader["Notes"] != DBNull.Value)
            {
                p.Notes = Convert.ToString(reader["Notes"]);
            }
            //▲====: #125
            //▼====: #132
            if (reader.HasColumn("inviID") && reader["inviID"] != DBNull.Value)
            {
                p.inviID = Convert.ToInt64(reader["inviID"]);
            }
            if (reader.HasColumn("InvID") && reader["InvID"] != DBNull.Value)
            {
                p.InvID = Convert.ToString(reader["InvID"]);
            }
            //▲====: #132
            //▼====: #166
            if (reader.HasColumn("PartVT") && reader["PartVT"] != DBNull.Value)
            {
                p.PartVT = Convert.ToInt32(reader["PartVT"]);
            }
            if (reader.HasColumn("BinomialName") && reader["BinomialName"] != DBNull.Value)
            {
                p.BinomialName = Convert.ToString(reader["BinomialName"]);
            }
            if (reader.HasColumn("Origin") && reader["Origin"] != DBNull.Value)
            {
                p.Origin = Convert.ToString(reader["Origin"]);
            }
            if (reader.HasColumn("V_DrugFormulationMethod") && reader["V_DrugFormulationMethod"] != DBNull.Value)
            {
                p.V_DrugFormulationMethod = Convert.ToInt64(reader["V_DrugFormulationMethod"]);
            }
            if (reader.HasColumn("PharmaceuticalCode") && reader["PharmaceuticalCode"] != DBNull.Value)
            {
                p.PharmaceuticalCode = Convert.ToString(reader["PharmaceuticalCode"]);
            }
            if (reader.HasColumn("AverageAttritionRate") && reader["AverageAttritionRate"] != DBNull.Value)
            {
                p.AverageAttritionRate = Convert.ToDouble(reader["AverageAttritionRate"]);
            }
            if (reader.HasColumn("BalancedAttritionRate") && reader["BalancedAttritionRate"] != DBNull.Value)
            {
                p.BalancedAttritionRate = Convert.ToDouble(reader["BalancedAttritionRate"]);
            }
            if (reader.HasColumn("V_PaymentSource") && reader["V_PaymentSource"] != DBNull.Value)
            {
                p.V_PaymentSource = Convert.ToInt64(reader["V_PaymentSource"]);
            }
            //▲====: #166
            if (reader.HasColumn("ModifiedLog") && reader["ModifiedLog"] != DBNull.Value)
            {
                p.ModifiedLog = Convert.ToString(reader["ModifiedLog"]);
            }
            return p;
        }

        protected virtual List<RefGenMedProductDetails> GetRefGenMedProductDetailsCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<RefGenMedProductDetails>();
            while (reader.Read())
            {
                drugs.Add(GetRefGenMedProductDetailsFromReader(reader));
            }
            return drugs;
        }

        protected virtual List<PCLExamTypeContactDrugs> GetPCLExamTypeContactDrugsCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<PCLExamTypeContactDrugs>();
            while (reader.Read())
            {
                drugs.Add(GetPCLExamTypeContactDrugsFromReader(reader));
            }
            return drugs;
        }

        protected virtual DrugDeptEstimationForPO GetDrugDeptEstimationForPOFromReader(IDataReader reader)
        {
            var p = new DrugDeptEstimationForPO
            {
                DrugDeptEstimatePoID = (long)reader["DrugDeptEstimatePoID"],
                DateOfEstimation = (DateTime)reader["DateOfEstimation"],
                EstimationCode = reader["EstimationCode"].ToString(),
                EstRemark = reader["EstRemark"].ToString(),
                StaffID = (long)reader["StaffID"],
                V_MedProductType = reader["V_MedProductType"] as long?,
                V_EstimateType = reader["V_EstimateType"] as long?
            };
            if (reader.HasColumn("FullName"))
            {
                p.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("ObjectValue"))
            {
                p.ObjectValue = reader["ObjectValue"].ToString();
            }
            if (reader.HasColumn("DaDatHang"))
            {
                p.IsOrder = reader["DaDatHang"] as bool?;
            }
            p.IsForeign = false;
            if (reader.HasColumn("IsForeign"))
            {
                p.IsForeign = reader["IsForeign"] as bool?;
            }
            if (reader.HasColumn("RefGenDrugCatID_1") && reader["RefGenDrugCatID_1"] != DBNull.Value)
            {
                p.RefGenDrugCatID_1 = (long)reader["RefGenDrugCatID_1"];
            }
            if (reader.HasColumn("BidID") && reader["BidID"] != DBNull.Value)
            {
                p.BidID = (long)reader["BidID"];
            }
            return p;
        }
        protected virtual List<DrugDeptEstimationForPO> GetDrugDeptEstimationForPOCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<DrugDeptEstimationForPO>();
            while (reader.Read())
            {
                drugs.Add(GetDrugDeptEstimationForPOFromReader(reader));
            }
            return drugs;
        }

        protected virtual DrugDeptEstimationForPoDetail GetDrugDeptEstimationForPoDetailFromReader(IDataReader reader)
        {
            var p = new DrugDeptEstimationForPoDetail
            {
                DrugDeptEstPoDetailID = Convert.ToInt64(reader["DrugDeptEstPoDetailID"]),
                DrugDeptEstimatePoID = Convert.ToInt64(reader["DrugDeptEstimatePoID"])
            };
            if (reader.HasColumn("AdjustedQty") && reader["AdjustedQty"] != DBNull.Value)
            {
                p.AdjustedQty = Convert.ToInt32(reader["AdjustedQty"]);
            }
            if (reader.HasColumn("EstimatedQty") && reader["EstimatedQty"] != DBNull.Value)
            {
                p.EstimatedQty_F = Convert.ToDouble(reader["EstimatedQty"]);
            }
            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                p.GenMedProductID = Convert.ToInt64(reader["GenMedProductID"]);
            }
            if (reader.HasColumn("OutAverageQty") && reader["OutAverageQty"] != DBNull.Value)
            {
                p.OutAverageQty = Convert.ToInt32(reader["OutAverageQty"]);
            }
            if (reader.HasColumn("OutQtyLastTwelveMonths") && reader["OutQtyLastTwelveMonths"] != DBNull.Value)
            {
                p.OutQtyLastTwelveMonths = Convert.ToInt32(reader["OutQtyLastTwelveMonths"]);
            }
            if (reader.HasColumn("OutQtyPrevFirstMonth") && reader["OutQtyPrevFirstMonth"] != DBNull.Value)
            {
                p.OutQtyPrevFirstMonth = Convert.ToInt32(reader["OutQtyPrevFirstMonth"]);
            }
            if (reader.HasColumn("OutQtyPrevSecondMonth") && reader["OutQtyPrevSecondMonth"] != DBNull.Value)
            {
                p.OutQtyPrevSecondMonth = Convert.ToInt32(reader["OutQtyPrevSecondMonth"]);
            }
            if (reader.HasColumn("OutQtyPrevThirdMonth") && reader["OutQtyPrevThirdMonth"] != DBNull.Value)
            {
                p.OutQtyPrevThirdMonth = Convert.ToInt32(reader["OutQtyPrevThirdMonth"]);
            }
            if (reader.HasColumn("OutQtyPrevFourthMonth") && reader["OutQtyPrevFourthMonth"] != DBNull.Value)
            {
                p.OutQtyPrevFourthMonth = Convert.ToInt32(reader["OutQtyPrevFourthMonth"]);
            }
            if (reader.HasColumn("Priority") && reader["Priority"] != DBNull.Value)
            {
                p.Priority = Convert.ToDouble(reader["Priority"]);
            }
            if (reader.HasColumn("RemainQty") && reader["RemainQty"] != DBNull.Value)
            {
                p.RemainQty = Convert.ToInt32(reader["RemainQty"]);
            }
            if (reader.HasColumn("ToDateOutQty") && reader["ToDateOutQty"] != DBNull.Value)
            {
                p.ToDateOutQty = Convert.ToInt32(reader["ToDateOutQty"]);
            }
            if (reader.HasColumn("QtyPackaging") && reader["QtyPackaging"] != DBNull.Value)
            {
                p.QtyPackaging = Convert.ToInt32(reader["QtyPackaging"]);
            }
            p.RefGenMedProductDetails = GetRefGenMedProductDetailsFromReader(reader);
            if (reader.HasColumn("NumberOfEstimatedMonths") && reader["NumberOfEstimatedMonths"] != DBNull.Value)
            {
                p.NumberOfEstimatedMonths_F = Convert.ToDouble(reader["NumberOfEstimatedMonths"]);
            }
            if (reader.HasColumn("TotalPrice") && reader["TotalPrice"] != DBNull.Value)
            {
                //p.TotalPrice = (decimal)reader["TotalPrice"];
                p.TotalPrice = Convert.ToDecimal(reader["TotalPrice"]);
            }
            if (reader.HasColumn("BidRemainingQty") && reader["BidRemainingQty"] != DBNull.Value)
            {
                p.BidRemainingQty = Convert.ToInt32(reader["BidRemainingQty"]);
            }
            if (reader.HasColumn("BidDetailID") && reader["BidDetailID"] != DBNull.Value)
            {
                p.BidDetailID = Convert.ToInt64(reader["BidDetailID"]);
            }
            //Thêm cột dự trù mới 20210831
            if (reader.HasColumn("OutQty") && reader["OutQty"] != DBNull.Value)
            {
                p.OutQty_F = Convert.ToInt32(reader["OutQty"]);
            }
            if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
            {
                p.EstimationNote = reader["Note"].ToString();
            }
            //▼====: #159
            if (reader.HasColumn("ReqDrugInClinicDeptIDList"))
            {
                p.ReqDrugInClinicDeptIDList = reader["ReqDrugInClinicDeptIDList"].ToString();
            }
            //▲====: #159
            p.EntityState = EntityState.PERSITED;
            return p;
        }
        protected virtual List<DrugDeptEstimationForPoDetail> GetDrugDeptEstimationForPoDetailCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<DrugDeptEstimationForPoDetail>();
            while (reader.Read())
            {
                drugs.Add(GetDrugDeptEstimationForPoDetailFromReader(reader));
            }
            return drugs;
        }

        protected virtual DrugDeptEstimationForPODetailExt GetDrugDeptEstimationForPODetailExtFromReader(IDataReader reader)
        {
            var p = new DrugDeptEstimationForPODetailExt
            {
                DrugDeptEstimationForPoDetail = GetDrugDeptEstimationForPoDetailFromReader(reader),
                EntityState = EntityState.PERSITED
            };
            if (reader.HasColumn("Code"))
            {
                p.Code = reader["Code"].ToString();
            }
            return p;
        }

        protected virtual List<DrugDeptEstimationForPODetailExt> GetDrugDeptEstimationForPODetailExtCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<DrugDeptEstimationForPODetailExt>();
            while (reader.Read())
            {
                drugs.Add(GetDrugDeptEstimationForPODetailExtFromReader(reader));
            }
            return drugs;
        }

        protected virtual DrugDeptPurchaseOrder GetDrugDeptPurchaseOrderFromReader(IDataReader reader)
        {
            var p = new DrugDeptPurchaseOrder
            {
                DrugDeptPoID = (long)reader["DrugDeptPoID"],
                DrugDeptEstimatePoID = reader["DrugDeptEstimatePoID"] as long?,
                PONumber = reader["PONumber"].ToString(),
                OrderDate = reader["OrderDate"] as DateTime?,
                StaffID = (long)reader["StaffID"],
                V_MedProductType = reader["V_MedProductType"] as long?,
                CurrencyID = (long)reader["CurrencyID"]
            };
            if (reader.HasColumn("ExchangeRates") && reader["ExchangeRates"] != DBNull.Value)
            {
                p.ExchangeRates = Convert.ToDouble(reader["ExchangeRates"]);
            }
            p.SupplierID = (long)reader["SupplierID"];
            p.IsForeign = (bool)reader["IsForeign"];
            p.DeliveryDayNo = (int)reader["DeliveryDayNo"];
            p.DeliveryMoneyDayNo = (int)reader["DeliveryMoneyDayNo"];
            p.RecDateCreated = (DateTime)reader["RecDateCreated"];
            p.VAT = (double)reader["VAT"];
            p.PoNotes = reader["PoNotes"].ToString();
            try
            {
                p.DrugDeptEstimationForPO = GetDrugDeptEstimationForPOFromReader(reader);
            }
            catch
            {
                //ko can thiet hien thi cai nay
            }
            try
            {
                p.SelectedSupplier = GetDrugDeptSupplierFromReader(reader);
            }
            catch
            {
                //kp can thiet hien thi cai nay
            }
            p.SelectedStaff = new Staff();
            if (reader.HasColumn("FullName"))
            {
                p.SelectedStaff.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("V_PurchaseOrderStatus") && reader["V_PurchaseOrderStatus"] != DBNull.Value)
            {
                p.V_PurchaseOrderStatus = (long)reader["V_PurchaseOrderStatus"];
            }
            if (reader.HasColumn("V_PurchaseOrderStatusName"))
            {
                p.V_PurchaseOrderStatusName = reader["V_PurchaseOrderStatusName"].ToString();
            }
            if (reader.HasColumn("V_PaymentMode") && reader["V_PaymentMode"] != DBNull.Value)
            {
                p.V_PaymentMode = (long)reader["V_PaymentMode"];
            }
            if (reader.HasColumn("BidID") && reader["BidID"] != DBNull.Value)
            {
                p.BidID = (long)reader["BidID"];
            }
            return p;
        }
        protected virtual List<DrugDeptPurchaseOrder> GetDrugDeptPurchaseOrderCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<DrugDeptPurchaseOrder>();
            while (reader.Read())
            {
                drugs.Add(GetDrugDeptPurchaseOrderFromReader(reader));
            }
            return drugs;
        }

        protected virtual DrugDeptPurchaseOrderDetail GetDrugDeptPurchaseOrderDetailFromReader(IDataReader reader)
        {
            var p = new DrugDeptPurchaseOrderDetail
            {
                DrugDeptPoDetailID = (long)reader["DrugDeptPoDetailID"],
                DrugDeptPoID = (long)reader["DrugDeptPoID"],
                GenMedProductID = (long)reader["GenMedProductID"]
            };
            try
            {
                p.RefGenMedProductDetail = GetRefGenMedProductDetailsFromReader(reader);
                p.Code = reader["Code"].ToString();
            }
            catch
            {
                //khong can hien thi
            }


            Lookup item = new Lookup();
            item.LookupID = (long)AllLookupValues.V_GoodsType.HANGMUA;
            item.ObjectValue = "Hàng mua";
            p.V_GoodsType = item;
            p.PoUnitQty = (int)reader["PoUnitQty"];
            p.EstimateQty = (int)reader["EstimateQty"];
            if (reader.HasColumn("PoPackageQty") && reader["PoPackageQty"] != DBNull.Value)
            {
                p.PoPackageQty = (double)reader["PoPackageQty"];
            }

            if (reader.HasColumn("Ordered"))
            {
                p.OrderedQty = (int)reader["Ordered"];
            }
            if (reader.HasColumn("IsUnitPackage"))
            {
                p.IsUnitPackage = reader["IsUnitPackage"] as bool?;
            }
            p.UnitPrice = Convert.ToDecimal(reader["UnitPrice"]);
            p.PackagePrice = Convert.ToDecimal(reader["PackagePrice"]);
            p.WaitingDeliveryQty = (int)reader["WaitingDeliveryQty"];
            p.PoNotes = reader["PoNotes"].ToString();
            p.EntityState = EntityState.PERSITED;

            //KMx: Không sử dụng InQty nữa, vì khi set vào InQty thì nó tự động set InQuantity. Bây giờ tính toán ở Database rồi set thẳng vào InQuantity luôn (04/12/2014 10:47).
            //if (reader.HasColumn("InQty") && reader["InQty"] != DBNull.Value)
            //{
            //    p.InQty = Convert.ToInt32(reader["InQty"]);
            //}

            if (reader.HasColumn("InQuantity") && reader["InQuantity"] != DBNull.Value)
            {
                p.InQuantity = Convert.ToInt32(reader["InQuantity"]);
            }

            if (reader.HasColumn("PONumber"))
            {
                p.PONumber = reader["PONumber"].ToString();
            }
            if (reader.HasColumn("NoWaiting"))
            {
                p.NoWaiting = reader["NoWaiting"] as bool?;
            }
            if (reader.HasColumn("UnitPackaging") && reader["UnitPackaging"] != DBNull.Value)
            {
                if (p.IsUnitPackage.GetValueOrDefault())
                {
                    p.PoUnitQty = Convert.ToInt32(Math.Round((double)reader["PoPackageQty"], 0)) * (reader["UnitPackaging"] as int?).GetValueOrDefault(0);
                }
                else
                {
                    if ((reader["UnitPackaging"] as int?).GetValueOrDefault(1) != 0)
                    {
                        p.PackageQuantity = (int)reader["PoUnitQty"] / (reader["UnitPackaging"] as int?).GetValueOrDefault(1);
                    }
                }
            }
            if (reader.HasColumn("DrugDeptEstPoDetailID") && reader["DrugDeptEstPoDetailID"] != DBNull.Value)
            {
                p.DrugDeptEstPoDetailID = Convert.ToInt64(reader["DrugDeptEstPoDetailID"]);
            }
            if (reader.HasColumn("IsNotVatPurchase") && reader["IsNotVatPurchase"] != DBNull.Value)
            {
                p.IsNotVat = Convert.ToBoolean(reader["IsNotVatPurchase"]);
            }
            if (reader.HasColumn("VATPurchase") && reader["VATPurchase"] != DBNull.Value)
            {
                p.VAT = Convert.ToDouble(reader["VATPurchase"]);
            }
            else
            {
                p.VAT = null;
            }
            return p;
        }
        protected virtual List<DrugDeptPurchaseOrderDetail> GetDrugDeptPurchaseOrderDetailCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<DrugDeptPurchaseOrderDetail>();
            while (reader.Read())
            {
                drugs.Add(GetDrugDeptPurchaseOrderDetailFromReader(reader));
            }
            return drugs;
        }

        protected virtual DrugDeptStockTakes GetDrugDeptStockTakesFromReader(IDataReader reader)
        {
            var p = new DrugDeptStockTakes
            {
                DrugDeptStockTakeID = (long)reader["DrugDeptStockTakeID"],
                StockTakingDate = (DateTime)reader["StockTakingDate"],
                StockTakePeriodName = reader["StockTakePeriodName"].ToString(),
                StockTakeNotes = reader["StockTakeNotes"].ToString(),
                StoreID = (long)reader["StoreID"]
            };
            if (reader.HasColumn("StaffID"))
            {
                p.StaffID = (long)reader["StaffID"];
            }
            if (reader.HasColumn("FullName"))
            {
                p.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("swhlName"))
            {
                p.swhlName = reader["swhlName"].ToString();
            }
            if (reader.HasColumn("V_MedProductType"))
            {
                p.V_MedProductType = (long)reader["V_MedProductType"];
            }
            if (reader.HasColumn("V_StockTakeType") && reader["V_StockTakeType"] != DBNull.Value)
            {
                p.V_StockTakeType = Convert.ToInt64(reader["V_StockTakeType"]);
            }
            if (reader.HasColumn("StockTakeTypeName") && reader["StockTakeTypeName"] != DBNull.Value)
            {
                p.StockTakeTypeName = reader["StockTakeTypeName"].ToString();
            }
            if (reader.HasColumn("IsFinished") && reader["IsFinished"] != DBNull.Value)
            {
                p.IsFinished = Convert.ToBoolean(reader["IsFinished"]);
            }
            if (reader.HasColumn("IsRefresh") && reader["IsRefresh"] != DBNull.Value)
            {
                p.IsRefresh = Convert.ToBoolean(reader["IsRefresh"]);
            }
            if (reader.HasColumn("IsLocked") && reader["IsLocked"] != DBNull.Value)
            {
                p.IsLocked = Boolean.Parse(reader["IsLocked"].ToString());
            }
            return p;
        }
        protected virtual List<DrugDeptStockTakes> GetDrugDeptStockTakesCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<DrugDeptStockTakes>();
            while (reader.Read())
            {
                drugs.Add(GetDrugDeptStockTakesFromReader(reader));
            }
            return drugs;
        }

        protected virtual DrugDeptStockTakeDetails GetDrugDeptStockTakeDetailsFromReader(IDataReader reader)
        {
            var p = new DrugDeptStockTakeDetails
            {
                DrugDeptStockTakeDetailID = (long)reader["DrugDeptStockTakeDetailID"],
                DrugDeptStockTakeID = (long)reader["DrugDeptStockTakeID"]
            };
            if (reader.HasColumn("NewestInwardPrice") && reader["NewestInwardPrice"] != DBNull.Value)
            {
                p.NewestInwardPrice = Convert.ToDecimal(reader["NewestInwardPrice"]);
            }

            if (reader.HasColumn("Code") && reader["Code"] != DBNull.Value)
            {
                p.Code = reader["Code"].ToString();
            }
            if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
            {
                p.BrandName = reader["BrandName"].ToString();
            }
            if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
            {
                p.GenericName = reader["GenericName"].ToString();
            }

            if (reader.HasColumn("Packaging") && reader["Packaging"] != DBNull.Value)
            {
                p.Packaging = reader["Packaging"].ToString();
            }

            if (reader.HasColumn("ShelfName") && reader["ShelfName"] != DBNull.Value)
            {
                p.ShelfName = reader["ShelfName"].ToString();
            }

            if (reader.HasColumn("UnitName") && reader["UnitName"] != DBNull.Value)
            {
                p.UnitName = reader["UnitName"].ToString();
            }

            if (reader.HasColumn("CaculatedQty") && reader["CaculatedQty"] != DBNull.Value)
            {
                p.CaculatedQty = Convert.ToInt32(reader["CaculatedQty"]);
            }
            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                p.GenMedProductID = Convert.ToInt64(reader["GenMedProductID"]);
            }
            if (reader.HasColumn("ActualQty") && reader["ActualQty"] != DBNull.Value)
            {
                p.ActualQty = Convert.ToInt32(reader["ActualQty"]);
            }
            if (reader.HasColumn("Price") && reader["Price"] != DBNull.Value)
            {
                p.Price = Convert.ToDecimal(reader["Price"]);
            }
            if (reader.HasColumn("Notes") && reader["Notes"] != DBNull.Value)
            {
                p.Notes = reader["Notes"].ToString();
            }

            if (reader.HasColumn("GetBegin") && (bool)reader["GetBegin"])
            {
                p.EntityState = EntityState.NEW;
            }
            else
            {
                p.EntityState = EntityState.PERSITED;
            }
            if (reader.HasColumn("RowActionStatusFlag") && reader["RowActionStatusFlag"] != DBNull.Value)
            {
                p.RowActionStatusFlag = Convert.ToInt16(reader["RowActionStatusFlag"]);
            }
            if (reader.HasColumn("ProductCodeRefNum") && reader["ProductCodeRefNum"] != DBNull.Value)
            {
                p.ProductCodeRefNum = reader["ProductCodeRefNum"].ToString();
            }
            if (reader.HasColumn("FinalAmount") && reader["FinalAmount"] != DBNull.Value)
            {
                p.FinalAmount = Convert.ToDecimal(reader["FinalAmount"]);
            }
            if (reader.HasColumn("BidDetailID") && reader["BidDetailID"] != DBNull.Value)
            {
                p.BidDetailID = Convert.ToInt64(reader["BidDetailID"]);
            }
            if (reader.HasColumn("BidCode") && reader["BidCode"] != DBNull.Value)
            {
                p.BidCode = Convert.ToString(reader["BidCode"]);
            }
            return p;
        }
        protected virtual List<DrugDeptStockTakeDetails> GetDrugDeptStockTakeDetailsCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<DrugDeptStockTakeDetails>();
            while (reader.Read())
            {
                drugs.Add(GetDrugDeptStockTakeDetailsFromReader(reader));
            }
            return drugs;
        }

        protected virtual PharmacyOutwardDrugReport GetPharmacyOutwardDrugReportFromReader(IDataReader reader)
        {
            var p = new PharmacyOutwardDrugReport
            {
                PharmacyOutRepID = (long)reader["PharmacyOutRepID"],
                RecCreatedDate = reader["RecCreatedDate"] as DateTime?,
                ReportDate = reader["ReportDate"] as DateTime?,
                RepStaffID = Convert.ToInt64(reader["RepStaffID"]),
                V_PharmacyOutRepType = (long)reader["V_PharmacyOutRepType"],
                RepDateFrom = Convert.ToDateTime(reader["RepDateFrom"]),
                RepDateTo = Convert.ToDateTime(reader["RepDateTo"])
            };
            if (reader.HasColumn("FullName"))
            {
                p.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("V_PharmacyOutRepTypeName"))
            {
                p.V_PharmacyOutRepTypeName = reader["V_PharmacyOutRepTypeName"].ToString();
            }
            if (reader.HasColumn("Title"))
            {
                p.Title = reader["Title"].ToString();
            }
            return p;
        }
        protected virtual List<PharmacyOutwardDrugReport> GetPharmacyOutwardDrugReportCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<PharmacyOutwardDrugReport>();
            while (reader.Read())
            {
                drugs.Add(GetPharmacyOutwardDrugReportFromReader(reader));
            }
            return drugs;
        }

        protected virtual PharmacyOutwardDrugReportDetail GetPharmacyOutwardDrugReportDetailFromReader(IDataReader reader)
        {
            var p = new PharmacyOutwardDrugReportDetail();
            if (reader.HasColumn("PharmacyOutRepDetID") && reader["PharmacyOutRepDetID"] != DBNull.Value)
            {
                p.PharmacyOutRepDetID = (long)reader["PharmacyOutRepDetID"];
            }
            if (reader.HasColumn("PharmacyOutRepID") && reader["PharmacyOutRepID"] != DBNull.Value)
            {
                p.PharmacyOutRepID = (long)reader["PharmacyOutRepID"];
            }
            if (reader.HasColumn("OutiID") && reader["OutiID"] != DBNull.Value)
            {
                p.OutiID = (long)reader["OutiID"];
            }

            if (reader.HasColumn("OutInvID"))
            {
                p.OutInvID = reader["OutInvID"].ToString();
            }
            if (reader.HasColumn("OutInvIDString"))
            {
                p.OutInvIDString = reader["OutInvIDString"].ToString();
            }
            if (reader.HasColumn("AmountCoPay") && reader["AmountCoPay"] != DBNull.Value)
            {
                p.AmountCoPay = (decimal)reader["AmountCoPay"];
            }
            if (reader.HasColumn("CustomerName"))
            {
                p.CustomerName = reader["CustomerName"].ToString();
            }
            if (reader.HasColumn("FullName"))
            {
                p.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("OutAmount") && reader["OutAmount"] != DBNull.Value)
            {
                p.OutAmount = (decimal)reader["OutAmount"];
            }
            if (reader.HasColumn("OutHIRebate") && reader["OutHIRebate"] != DBNull.Value)
            {
                p.OutHIRebate = (decimal)reader["OutHIRebate"];
            }
            if (reader.HasColumn("PatientPayment") && reader["PatientPayment"] != DBNull.Value)
            {
                p.PatientPayment = (decimal)reader["PatientPayment"];
            }
            if (reader.HasColumn("PtInsuranceBenefit") && reader["PtInsuranceBenefit"] != DBNull.Value)
            {
                p.PtInsuranceBenefit = Convert.ToDouble(reader["PtInsuranceBenefit"]);
            }
            if (reader.HasColumn("StaffID"))
            {
                p.StaffID = reader["StaffID"] as long?;
            }
            if (reader.HasColumn("StoreID"))
            {
                p.StoreID = reader["StoreID"] as long?;
            }
            if (reader.HasColumn("TotalCost") && reader["TotalCost"] != DBNull.Value)
            {
                p.TotalCost = (decimal)reader["TotalCost"];
            }
            return p;
        }
        protected virtual List<PharmacyOutwardDrugReportDetail> GetPharmacyOutwardDrugReportDetailCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<PharmacyOutwardDrugReportDetail>();
            while (reader.Read())
            {
                drugs.Add(GetPharmacyOutwardDrugReportDetailFromReader(reader));
            }
            return drugs;
        }

        protected virtual HealthInsuranceReport GetHealthInsuranceReportFromReader(IDataReader reader)
        {
            var p = new HealthInsuranceReport();

            if (reader.HasColumn("HIReportID") && reader["HIReportID"] != DBNull.Value)
            {
                p.HIReportID = Convert.ToInt64(reader["HIReportID"]);
            }
            if (reader.HasColumn("Title") && reader["Title"] != DBNull.Value)
            {
                p.Title = reader["Title"].ToString();
            }
            if (reader.HasColumn("FromDate") && reader["FromDate"] != DBNull.Value)
            {
                p.FromDate = Convert.ToDateTime(reader["FromDate"]);
            }
            if (reader.HasColumn("ToDate") && reader["ToDate"] != DBNull.Value)
            {
                p.ToDate = Convert.ToDateTime(reader["ToDate"]);
            }
            if (reader.HasColumn("V_ReportStatus") && reader["V_ReportStatus"] != DBNull.Value)
            {
                p.V_ReportStatus = Convert.ToInt64(reader["V_ReportStatus"]);
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.Staff = new Staff();
                p.Staff.StaffID = Convert.ToInt64(reader["StaffID"]);

                if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                {
                    p.Staff.FullName = reader["FullName"].ToString();
                }
            }
            if (reader.HasColumn("V_HIReportTypeID") && reader["V_HIReportTypeID"] != DBNull.Value)
            {
                p.V_HIReportType = new Lookup();
                p.V_HIReportType.LookupID = Convert.ToInt64(reader["V_HIReportTypeID"]);
                if (reader.HasColumn("V_HIReportTypeValue") && reader["V_HIReportTypeValue"] != DBNull.Value)
                {
                    p.V_HIReportType.ObjectValue = reader["V_HIReportTypeValue"].ToString();
                }
            }
            if (reader.HasColumn("IncludeBeforeFromDate") && reader["IncludeBeforeFromDate"] != DBNull.Value)
            {
                p.IncludeBeforeFromDate = Convert.ToBoolean(reader["IncludeBeforeFromDate"]);
            }
            if (reader.HasColumn("ReportAppliedCode") && reader["ReportAppliedCode"] != DBNull.Value)
            {
                p.ReportAppliedCode = reader["ReportAppliedCode"].ToString();
            }
            if (reader.HasColumn("IsReportAppliedCode") && reader["IsReportAppliedCode"] != DBNull.Value)
            {
                p.IsReportAppliedCode = Convert.ToBoolean(reader["IsReportAppliedCode"]);
            }
            return p;
        }
        protected virtual List<HealthInsuranceReport> GetHealthInsuranceReportCollectionFromReader(IDataReader reader)
        {
            var HIReportList = new List<HealthInsuranceReport>();
            while (reader.Read())
            {
                HIReportList.Add(GetHealthInsuranceReportFromReader(reader));
            }
            return HIReportList;
        }


        //----Dinh them
        protected virtual ClinicDeptStockTakes GetClinicDeptStockTakesFromReader(IDataReader reader)
        {
            var p = new ClinicDeptStockTakes
            {
                ClinicDeptStockTakeID = (long)reader["ClinicDeptStockTakeID"],
                StockTakingDate = (DateTime)reader["StockTakingDate"],
                StockTakePeriodName = reader["StockTakePeriodName"].ToString(),
                StockTakeNotes = reader["StockTakeNotes"].ToString(),
                StoreID = (long)reader["StoreID"]
            };
            if (reader.HasColumn("StaffID"))
            {
                p.StaffID = (long)reader["StaffID"];
            }
            if (reader.HasColumn("FullName"))
            {
                p.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("V_MedProductType"))
            {
                p.V_MedProductType = (long)reader["V_MedProductType"];
            }
            if (reader.HasColumn("Notes"))
            {
                p.Notes = reader["Notes"].ToString();
            }
            if (reader.HasColumn("swhlName"))
            {
                p.swhlName = reader["swhlName"].ToString();
            }
            if (reader.HasColumn("V_StockTakeType") && reader["V_StockTakeType"] != DBNull.Value)
            {
                p.V_StockTakeType = Convert.ToInt64(reader["V_StockTakeType"]);
            }
            if (reader.HasColumn("StockTakeTypeName") && reader["StockTakeTypeName"] != DBNull.Value)
            {
                p.StockTakeTypeName = reader["StockTakeTypeName"].ToString();
            }
            // VuTTM
            if (reader.HasColumn("IsLocked") && reader["IsLocked"] != DBNull.Value)
            {
                p.IsLocked = Boolean.Parse(reader["IsLocked"].ToString());
            }
            return p;
        }
        protected virtual List<ClinicDeptStockTakes> GetClinicDeptStockTakesCollectionFromReader(IDataReader reader)
        {
            var clinics = new List<ClinicDeptStockTakes>();
            while (reader.Read())
            {
                clinics.Add(GetClinicDeptStockTakesFromReader(reader));
            }
            return clinics;
        }

        protected virtual ClinicDeptStockTakeDetails GetClinicDeptStockTakeDetailsFromReader(IDataReader reader)
        {
            var p = new ClinicDeptStockTakeDetails
            {
                ClinicDeptStockTakeDetailID = (long)reader["ClinicDeptStockTakeDetailID"],
                ClinicDeptStockTakeID = (long)reader["ClinicDeptStockTakeID"]
            };
            //try
            //{
            //    p.RefGenMedProductDetails = GetRefGenMedProductDetailsFromReader(reader);
            //}
            //catch
            //{ }

            if (reader.HasColumn("Code") && reader["Code"] != DBNull.Value)
            {
                p.Code = reader["Code"].ToString();
            }
            if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
            {
                p.BrandName = reader["BrandName"].ToString();
            }
            if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
            {
                p.GenericName = reader["GenericName"].ToString();
            }
            if (reader.HasColumn("UnitName") && reader["UnitName"] != DBNull.Value)
            {
                p.UnitName = reader["UnitName"].ToString();
            }

            p.CaculatedQty = Convert.ToDecimal(reader["CaculatedQty"]);
            p.GenMedProductID = (long)reader["GenMedProductID"];
            p.ActualQty = Convert.ToDecimal(reader["ActualQty"]);
            if (reader.HasColumn("FinalAmount") && reader["FinalAmount"] != DBNull.Value)
            {
                p.FinalAmount = Convert.ToDecimal(reader["FinalAmount"]);
            }
            if (reader.HasColumn("GetBegin") && (bool)reader["GetBegin"])
            {
                p.EntityState = EntityState.NEW;
            }
            else
            {
                p.EntityState = EntityState.PERSITED;
            }
            if (reader.HasColumn("Notes") && reader["Notes"] != DBNull.Value)
            {
                p.Notes = reader["Notes"].ToString();
            }

            if (reader.HasColumn("RowActionStatusFlag") && reader["RowActionStatusFlag"] != DBNull.Value)
            {
                p.RowActionStatusFlag = Convert.ToInt16(reader["RowActionStatusFlag"]);
            }

            return p;
        }
        protected virtual List<ClinicDeptStockTakeDetails> GetClinicDeptStockTakeDetailsCollectionFromReader(IDataReader reader)
        {
            var Clinics = new List<ClinicDeptStockTakeDetails>();
            while (reader.Read())
            {
                Clinics.Add(GetClinicDeptStockTakeDetailsFromReader(reader));
            }
            return Clinics;
        }


        protected virtual PharmacyEstimationForPO GetPharmacyEstimationForPOFromReader(IDataReader reader)
        {
            var p = new PharmacyEstimationForPO
            {
                PharmacyEstimatePoID = (long)reader["PharmacyEstimatePoID"],
                DateOfEstimation = (DateTime)reader["DateOfEstimation"],
                EstimationCode = reader["EstimationCode"].ToString(),
                EstRemark = reader["EstRemark"].ToString()
            };
            if (reader.HasColumn("StaffID"))
            {
                p.StaffID = (long)reader["StaffID"];
            }
            if (reader.HasColumn("V_MedProductType"))
            {
                p.V_MedProductType = reader["V_MedProductType"] as long?;
            }
            if (reader.HasColumn("V_EstimateType"))
            {
                p.V_EstimateType = reader["V_EstimateType"] as long?;
            }
            if (reader.HasColumn("FullName"))
            {
                p.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("ObjectValue"))
            {
                p.ObjectValue = reader["ObjectValue"].ToString();
            }
            if (reader.HasColumn("DaDatHang"))
            {
                p.IsOrder = reader["DaDatHang"] as bool?;
            }

            return p;
        }
        protected virtual List<PharmacyEstimationForPO> GetPharmacyEstimationForPOCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<PharmacyEstimationForPO>();
            while (reader.Read())
            {
                drugs.Add(GetPharmacyEstimationForPOFromReader(reader));
            }
            return drugs;
        }

        protected virtual PharmacyEstimationForPODetail GetPharmacyEstimationForPODetailFromReader(IDataReader reader)
        {
            var p = new PharmacyEstimationForPODetail();

            if (reader.HasColumn("PharmacyEstimatePoDetailID") && reader["PharmacyEstimatePoDetailID"] != DBNull.Value)
            {
                p.PharmacyEstimatePoDetailID = Convert.ToInt64(reader["PharmacyEstimatePoDetailID"]);
            }

            if (reader.HasColumn("PharmacyEstimatePoID") && reader["PharmacyEstimatePoID"] != DBNull.Value)
            {
                p.PharmacyEstimatePoID = Convert.ToInt64(reader["PharmacyEstimatePoID"]);
            }

            if (reader.HasColumn("AdjustedQty") && reader["AdjustedQty"] != DBNull.Value)
            {
                p.AdjustedQty = Convert.ToInt32(reader["AdjustedQty"]);
            }

            if (reader.HasColumn("EstimatedQty") && reader["EstimatedQty"] != DBNull.Value)
            {
                p.EstimatedQty_F = Convert.ToDouble(reader["EstimatedQty"]);
            }

            if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
            {
                p.DrugID = Convert.ToInt64(reader["DrugID"]);
            }

            if (reader.HasColumn("OutAverageQty") && reader["OutAverageQty"] != DBNull.Value)
            {
                p.OutAverageQty = Convert.ToInt32(reader["OutAverageQty"]);
            }

            if (reader.HasColumn("OutQtyLastTwelveMonths") && reader["OutQtyLastTwelveMonths"] != DBNull.Value)
            {
                p.OutQtyLastTwelveMonths = Convert.ToInt32(reader["OutQtyLastTwelveMonths"]);
            }

            if (reader.HasColumn("OutQtyPrevFirstMonth") && reader["OutQtyPrevFirstMonth"] != DBNull.Value)
            {
                p.OutQtyPrevFirstMonth = Convert.ToInt32(reader["OutQtyPrevFirstMonth"]);
            }

            if (reader.HasColumn("OutQtyPrevSecondMonth") && reader["OutQtyPrevSecondMonth"] != DBNull.Value)
            {
                p.OutQtyPrevSecondMonth = Convert.ToInt32(reader["OutQtyPrevSecondMonth"]);
            }

            if (reader.HasColumn("OutQtyPrevThirdMonth") && reader["OutQtyPrevThirdMonth"] != DBNull.Value)
            {
                p.OutQtyPrevThirdMonth = Convert.ToInt32(reader["OutQtyPrevThirdMonth"]);
            }

            if (reader.HasColumn("OutQtyPrevFourthMonth") && reader["OutQtyPrevFourthMonth"] != DBNull.Value)
            {
                p.OutQtyPrevFourthMonth = Convert.ToInt32(reader["OutQtyPrevFourthMonth"]);
            }

            if (reader.HasColumn("Priority") && reader["Priority"] != DBNull.Value)
            {
                p.Priority = Convert.ToDouble(reader["Priority"]);
            }

            if (reader.HasColumn("RemainQty") && reader["RemainQty"] != DBNull.Value)
            {
                p.RemainQty = Convert.ToInt32(reader["RemainQty"]);
            }

            if (reader.HasColumn("ToDateOutQty") && reader["ToDateOutQty"] != DBNull.Value)
            {
                p.ToDateOutQty = Convert.ToInt32(reader["ToDateOutQty"]);
            }

            if (reader.HasColumn("PackageQty") && reader["PackageQty"] != DBNull.Value)
            {
                p.PackageQty = Convert.ToDouble(reader["PackageQty"]);
            }
            p.RefGenMedProductDetails = GetRefGenericDrugForShowFromReader(reader);

            if (reader.HasColumn("NumberOfEstimatedMonths") && reader["NumberOfEstimatedMonths"] != DBNull.Value)
            {
                p.NumberOfEstimatedMonths_F = Convert.ToDouble(reader["NumberOfEstimatedMonths"]);
            }

            if (reader.HasColumn("TotalPrice") && reader["TotalPrice"] != DBNull.Value)
            {
                p.TotalPrice = Convert.ToDecimal(reader["TotalPrice"]);
            }

            p.EntityState = EntityState.PERSITED;
            return p;
        }

        protected virtual List<PharmacyEstimationForPODetail> GetPharmacyEstimationForPODetailCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<PharmacyEstimationForPODetail>();
            while (reader.Read())
            {
                drugs.Add(GetPharmacyEstimationForPODetailFromReader(reader));
            }
            return drugs;
        }

        protected virtual PharmacyEstimationForPODetailExt GetPharmacyEstimationForPODetailExtFromReader(IDataReader reader)
        {
            var p = new PharmacyEstimationForPODetailExt
            {
                PharmacyEstimatePoDetailID = (long)reader["PharmacyEstimatePoDetailID"],
                PharmacyEstimationForPODetail = GetPharmacyEstimationForPODetailFromReader(reader),
                EntityState = EntityState.PERSITED
            };

            if (reader.HasColumn("DrugCode"))
            {
                p.DrugCode = reader["DrugCode"].ToString();
            }
            return p;
        }

        protected virtual List<PharmacyEstimationForPODetailExt> GetPharmacyEstimationForPODetailExtCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<PharmacyEstimationForPODetailExt>();
            while (reader.Read())
            {
                drugs.Add(GetPharmacyEstimationForPODetailExtFromReader(reader));
            }
            return drugs;
        }

        protected virtual PharmacyStockTakes GetPharmacyStockTakesFromReader(IDataReader reader)
        {
            var p = new PharmacyStockTakes
            {
                PharmacyStockTakeID = (long)reader["PharmacyStockTakeID"],
                StockTakingDate = (DateTime)reader["StockTakingDate"],
                StockTakePeriodName = reader["StockTakePeriodName"].ToString(),
                StockTakeNotes = reader["StockTakeNotes"].ToString(),
                StoreID = (long)reader["StoreID"]
            };
            if (reader.HasColumn("StaffID"))
            {
                p.StaffID = (long)reader["StaffID"];
            }
            if (reader.HasColumn("swhlName"))
            {
                p.swhlName = reader["swhlName"].ToString();
            }
            if (reader.HasColumn("IsFinished") && reader["IsFinished"] != DBNull.Value)
            {
                p.IsFinished = Convert.ToBoolean(reader["IsFinished"]);
            }
            if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
            {
                p.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("IsRefresh") && reader["IsRefresh"] != DBNull.Value)
            {
                p.IsRefresh = Convert.ToBoolean(reader["IsRefresh"]);
            }
            if (reader.HasColumn("IsLocked") && reader["IsLocked"] != DBNull.Value)
            {
                p.IsLocked = Convert.ToBoolean(reader["IsLocked"]);
            }
            return p;
        }
        protected virtual List<PharmacyStockTakes> GetPharmacyStockTakesCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<PharmacyStockTakes>();
            while (reader.Read())
            {
                drugs.Add(GetPharmacyStockTakesFromReader(reader));
            }
            return drugs;
        }

        protected virtual PharmacyStockTakeDetails GetPharmacyStockTakeDetailsFromReader(IDataReader reader)
        {
            var p = new PharmacyStockTakeDetails
            {
                PharmacyStockTakeDetailID = (long)reader["PharmacyStockTakeDetailID"],
                PharmacyStockTakeID = (long)reader["PharmacyStockTakeID"],
                CaculatedQty = (int)reader["CaculatedQty"],
                DrugID = (long)reader["DrugID"],
                ActualQty = (int)reader["ActualQty"],
                Price = Convert.ToDecimal(reader["Price"]),
                Notes = reader["Notes"].ToString()
            };
            if (reader.HasColumn("NewestInwardPrice") && reader["NewestInwardPrice"] != DBNull.Value)
            {
                p.NewestInwardPrice = Convert.ToDecimal(reader["NewestInwardPrice"]);
            }
            if (reader.HasColumn("InBatchNumber") && reader["InBatchNumber"] != DBNull.Value)
            {
                p.InBatchNumber = reader["InBatchNumber"].ToString();
            }
            if (reader.HasColumn("InExpiryDate") && reader["InExpiryDate"] != DBNull.Value)
            {
                p.InExpiryDate = Convert.ToDateTime(reader["InExpiryDate"]);
            }
            if (reader.HasColumn("DrugCode"))
            {
                p.DrugCode = reader["DrugCode"].ToString();
            }
            if (reader.HasColumn("BrandName"))
            {
                p.BrandName = reader["BrandName"].ToString();
            }
            if (reader.HasColumn("GenericName"))
            {
                p.GenericName = reader["GenericName"].ToString();
            }
            if (reader.HasColumn("Packaging") && reader["Packaging"] != DBNull.Value)
            {
                p.Packaging = reader["Packaging"].ToString();
            }

            if (reader.HasColumn("UnitName"))
            {
                p.UnitName = reader["UnitName"].ToString();
            }

            if (reader.HasColumn("GetBegin") && (bool)reader["GetBegin"])
            {
                p.EntityState = EntityState.NEW;
            }
            else
            {
                p.EntityState = EntityState.PERSITED;
            }
            return p;
        }
        protected virtual List<PharmacyStockTakeDetails> GetPharmacyStockTakeDetailsCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<PharmacyStockTakeDetails>();
            while (reader.Read())
            {
                drugs.Add(GetPharmacyStockTakeDetailsFromReader(reader));
            }
            return drugs;
        }


        protected virtual PharmacyPurchaseOrder GetPharmacyPurchaseOrderFromReader(IDataReader reader)
        {
            var p = new PharmacyPurchaseOrder
            {
                PharmacyPoID = (long)reader["PharmacyPoID"],
                PharmacyEstimatePoID = (long)reader["PharmacyEstimatePoID"],
                PONumber = reader["PONumber"].ToString(),
                OrderDate = reader["OrderDate"] as DateTime?,
                StaffID = (long)reader["StaffID"],
                CurrencyID = (long)reader["CurrencyID"],
                ExchangeRates = (double)reader["ExchangeRates"],
                SupplierID = (long)reader["SupplierID"],
                IsForeign = (bool)reader["IsForeign"],
                DeliveryDate = reader["DeliveryDate"] as DateTime?,
                ExpectedDeliveryDate = reader["ExpectedDeliveryDate"] as DateTime?,
                DeliveryDayNo = (int)reader["DeliveryDayNo"],
                DeliveryMoneyDayNo = (int)reader["DeliveryMoneyDayNo"],
                RecDateCreated = (DateTime)reader["RecDateCreated"],
                VAT = (double)reader["VAT"],
                PoNotes = reader["PoNotes"].ToString()
            };


            try
            {
                p.PharmacyEstimationForPO = GetPharmacyEstimationForPOFromReader(reader);
            }
            catch
            {
                //ko can thiet hien thi cai nay
            }
            try
            {
                p.SelectedSupplier = GetSupplierFromReader(reader);
            }
            catch
            {
                //kp can thiet hien thi cai nay
            }
            p.SelectedStaff = new Staff();
            if (reader.HasColumn("FullName"))
            {
                p.SelectedStaff.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("V_PurchaseOrderStatus") && reader["V_PurchaseOrderStatus"] != DBNull.Value)
            {
                p.V_PurchaseOrderStatus = (long)reader["V_PurchaseOrderStatus"];
            }
            if (reader.HasColumn("V_PurchaseOrderStatusName"))
            {
                p.V_PurchaseOrderStatusName = reader["V_PurchaseOrderStatusName"].ToString();
            }
            if (reader.HasColumn("V_PaymentMode") && reader["V_PaymentMode"] != DBNull.Value)
            {
                p.V_PaymentMode = (long)reader["V_PaymentMode"];
            }
            return p;
        }
        protected virtual List<PharmacyPurchaseOrder> GetPharmacyPurchaseOrderCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<PharmacyPurchaseOrder>();
            while (reader.Read())
            {
                drugs.Add(GetPharmacyPurchaseOrderFromReader(reader));
            }
            return drugs;
        }

        protected virtual PharmacyPurchaseOrderDetail GetPharmacyPurchaseOrderDetailFromReader(IDataReader reader)
        {
            var p = new PharmacyPurchaseOrderDetail
            {
                PharmacyPoDetailID = (long)reader["PharmacyPoDetailID"],
                PharmacyPoID = (long)reader["PharmacyPoID"],
                DrugID = (long)reader["DrugID"],
                PoUnitQty = (int)reader["PoUnitQty"],
                PoPackageQty = Convert.ToDouble(reader["PoPackageQty"]),
                PackageQuantity = Convert.ToDouble(reader["PoPackageQty"]),
                EstimateQty = (int)reader["EstimateQty"]
            };
            try
            {
                p.RefGenericDrugDetail = GetRefDrugGenericDetailFromReader(reader);
                p.DrugCode = reader["DrugCode"].ToString();
            }
            catch
            {
                //khong can hien thi
            }
            if (reader.HasColumn("Ordered"))
            {
                p.OrderedQty = (int)reader["Ordered"];
            }
            if (reader.HasColumn("IsUnitPackage"))
            {
                p.IsUnitPackage = reader["IsUnitPackage"] as bool?;
            }
            p.UnitPrice = (decimal)reader["UnitPrice"];
            p.PackagePrice = (decimal)reader["PackagePrice"];
            p.WaitingDeliveryQty = (int)reader["WaitingDeliveryQty"];
            p.PoNotes = reader["PoNotes"].ToString();
            p.EntityState = EntityState.PERSITED;

            if (reader.HasColumn("InQty") && reader["InQty"] != DBNull.Value)
            {
                p.InQty = Convert.ToInt32(reader["InQty"]);
            }
            if (reader.HasColumn("PONumber"))
            {
                p.PONumber = reader["PONumber"].ToString();
            }
            if (reader.HasColumn("NoWaiting"))
            {
                p.NoWaiting = reader["NoWaiting"] as bool?;
            }
            p.V_GoodsType = new Lookup { LookupID = (long)AllLookupValues.V_GoodsType.HANGMUA, ObjectValue = "Hàng mua" };

            if (reader.HasColumn("IsNotVat") && reader["IsNotVat"] != DBNull.Value)
            {
                p.IsNotVat = Convert.ToBoolean(reader["IsNotVat"]);
            }
            return p;
        }
        protected virtual List<PharmacyPurchaseOrderDetail> GetPharmacyPurchaseOrderDetailCollectionFromReader(IDataReader reader)
        {
            var drugs = new List<PharmacyPurchaseOrderDetail>();
            while (reader.Read())
            {
                drugs.Add(GetPharmacyPurchaseOrderDetailFromReader(reader));
            }
            return drugs;
        }

        #endregion

        #region Lin Ny Consultation

        protected virtual DiseasesReference GetRefDiseasesFromReader(IDataReader reader)
        {
            var p = new DiseasesReference();
            if (reader.HasColumn("IDCode"))
            {
                p.IDCode = (long)reader["IDCode"];
            }
            else
            {
                p.IDCode = 0;
            }
            if (reader.HasColumn("ICD10Code") && reader["ICD10Code"] != DBNull.Value)
            {
                p.ICD10Code = reader["ICD10Code"].ToString();
            }
            if (reader.HasColumn("DiseaseName") && reader["DiseaseName"] != DBNull.Value)
            {
                p.DiseaseName = reader["DiseaseName"].ToString();
            }
            if (reader.HasColumn("DiseaseNameVN") && reader["DiseaseNameVN"] != DBNull.Value)
            {
                p.DiseaseNameVN = reader["DiseaseNameVN"].ToString();
            }
            if (reader.HasColumn("DiagnosisFinal") && reader["DiagnosisFinal"] != DBNull.Value)
            {
                p.DiagnosisFinal = reader["DiagnosisFinal"].ToString();
            }
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = (bool)reader["IsActive"];
            }
            if (reader.HasColumn("TotalQuantity") && reader["TotalQuantity"] != DBNull.Value)
            {
                p.TotalQuantity = Convert.ToInt32(reader["TotalQuantity"]);
            }
            if (reader.HasColumn("TotalMinute") && reader["TotalMinute"] != DBNull.Value)
            {
                p.TotalMinute = Convert.ToInt32(reader["TotalMinute"]);
            }
            if (reader.HasColumn("TotalAmount") && reader["TotalAmount"] != DBNull.Value)
            {
                p.TotalAmount = Convert.ToDecimal(reader["TotalAmount"]);
            }
            if (reader.HasColumn("Frequency") && reader["Frequency"] != DBNull.Value)
            {
                p.Frequency = Convert.ToDecimal(reader["Frequency"]);
            }
            //▼====: #089
            if (reader.HasColumn("NotBeMain") && reader["NotBeMain"] != DBNull.Value)
            {
                p.NotBeMain = Convert.ToBoolean(reader["NotBeMain"]);
            }
            //▲====: #089
            //▼====: #144
            if (reader.HasColumn("IsNewInYear") && reader["IsNewInYear"] != DBNull.Value)
            {
                p.IsNewInYear = Convert.ToBoolean(reader["IsNewInYear"]);
            }
            //▲====: #144 
            //▼====: #167
            if (reader.HasColumn("IsLongTermIllness") && reader["IsLongTermIllness"] != DBNull.Value)
            {
                p.IsLongTermIllness = Convert.ToBoolean(reader["IsLongTermIllness"]);
            }
            //▲====: #167
            //▼====: #170
            if (reader.HasColumn("ICD10CodeFromYHCT") && reader["ICD10CodeFromYHCT"] != DBNull.Value)
            {
                p.IsICD10CodeYHCT = !string.IsNullOrWhiteSpace(Convert.ToString(reader["ICD10CodeFromYHCT"]));
                p.ICD10CodeFromYHCT = Convert.ToString(reader["ICD10CodeFromYHCT"]);
            }
            //▲====: #170
            return p;
        }
        protected virtual List<DiseasesReference> GetRefDiseasesCollectionFromReader(IDataReader reader)
        {
            var icd10s = new List<DiseasesReference>();
            while (reader.Read())
            {
                icd10s.Add(GetRefDiseasesFromReader(reader));
            }
            return icd10s;
        }

        protected virtual RefICD9 GetRefICD9FromReader(IDataReader reader)
        {
            var p = new RefICD9();
            if (reader.HasColumn("ICD9ID") && reader["ICD9ID"] != DBNull.Value)
            {
                p.ICD9ID = Convert.ToInt64(reader["ICD9ID"]);
            }

            if (reader.HasColumn("ICD9Code") && reader["ICD9Code"] != DBNull.Value)
            {
                p.ICD9Code = reader["ICD9Code"].ToString();
            }

            if (reader.HasColumn("ProcedureName") && reader["ProcedureName"] != DBNull.Value)
            {
                p.ProcedureName = reader["ProcedureName"].ToString();
            }

            return p;
        }
        protected virtual List<RefICD9> GetRefICD9CollectionFromReader(IDataReader reader)
        {
            var ICD9List = new List<RefICD9>();
            while (reader.Read())
            {
                ICD9List.Add(GetRefICD9FromReader(reader));
            }
            return ICD9List;
        }
       
        protected virtual Staff GetStaffFullNameFromReader(IDataReader reader)
        {
            var p = new Staff { StaffID = (long)reader["StaffID"], FullName = reader["CatgStaffFullName"].ToString() };
            if (reader.HasColumn("V_StaffCatType") && reader["V_StaffCatType"] != DBNull.Value)
            {
                p.RefStaffCategory = new RefStaffCategory();
                p.RefStaffCategory.V_StaffCatType = (long)reader["V_StaffCatType"];
                if (reader.HasColumn("StaffCatgDescription") && reader["StaffCatgDescription"] != DBNull.Value)
                {
                    p.RefStaffCategory.StaffCatgDescription = reader["StaffCatgDescription"].ToString();
                }
            }
            if (reader.HasColumn("StaffCatgID") && reader["StaffCatgID"] != DBNull.Value)
            {
                p.StaffCatgID = (long)reader["StaffCatgID"];
            }
            /*▼====: #028*/
            if (reader.HasColumn("CertificateNumber") && reader["CertificateNumber"] != DBNull.Value)
            {
                p.SCertificateNumber = reader["CertificateNumber"] as string;
            }
            /*▲====: #028*/
            if (reader.HasColumn("SCode") && reader["SCode"] != DBNull.Value)
            {
                p.SCode = reader["SCode"] as string;
            }
            if (reader.HasColumn("HiddenFullNameOnReport") && reader["HiddenFullNameOnReport"] != DBNull.Value)
            {
                p.HiddenFullNameOnReport = Convert.ToBoolean(reader["HiddenFullNameOnReport"]);
            }
            if (reader.HasColumn("ListDeptResponsibilities") && reader["ListDeptResponsibilities"] != DBNull.Value)
            {
                p.ListDeptResponsibilities = reader["ListDeptResponsibilities"] as string;
            }
            if (reader.HasColumn("UserDomain") && reader["UserDomain"] != DBNull.Value)
            {
                p.UserDomain = reader["UserDomain"] as string;
            }
            if (reader.HasColumn("SocialInsuranceNumber") && reader["SocialInsuranceNumber"] != DBNull.Value)
            {
                p.SocialInsuranceNumber = reader["SocialInsuranceNumber"] as string;
            }
            if (reader.HasColumn("IsStopUsing") && reader["IsStopUsing"] != DBNull.Value)
            {
                p.IsStopUsing = Convert.ToBoolean(reader["IsStopUsing"]);
            }
            if (reader.HasColumn("IsOvertimeWorking") && reader["IsOvertimeWorking"] != DBNull.Value)
            {
                p.IsOvertimeWorking = Convert.ToBoolean(reader["IsOvertimeWorking"]);
            }
            //▼====: #156
            if (reader.HasColumn("MaLienThongBacSi") && reader["MaLienThongBacSi"] != DBNull.Value)
            {
                p.MaLienThongBacSi = reader["MaLienThongBacSi"].ToString();
            }
            if (reader.HasColumn("MatKhauLienThongBacSi") && reader["MatKhauLienThongBacSi"] != DBNull.Value)
            {
                p.MatKhauLienThongBacSi = reader["MatKhauLienThongBacSi"].ToString();
            }
            if (reader.HasColumn("MaDinhDanhBsi") && reader["MaDinhDanhBsi"] != DBNull.Value)
            {
                p.MaDinhDanhBsi = reader["MaDinhDanhBsi"].ToString();
            }
            //▲====: #156
            if (reader.HasColumn("IsUnitLeader") && reader["IsUnitLeader"] != DBNull.Value)
            {
                p.IsUnitLeader = Convert.ToBoolean(reader["IsUnitLeader"]);
            }
            if (reader.HasColumn("PrintTitle") && reader["PrintTitle"] != DBNull.Value)
            {
                p.PrintTitle = Convert.ToString(reader["PrintTitle"]);
            }
            if (reader.HasColumn("ListPCLResultParamImpID") && reader["ListPCLResultParamImpID"] != DBNull.Value)
            {
                p.ListPCLResultParamImpID = Convert.ToString(reader["ListPCLResultParamImpID"]);
            }
            if (reader.HasColumn("V_JobPosition") && reader["V_JobPosition"] != DBNull.Value)
            {
                p.V_JobPosition = Convert.ToInt64(reader["V_JobPosition"]);
            }
            //▼==== #188
            if (reader.HasColumn("ListPCLResultParamImpIDForDoctor") && reader["ListPCLResultParamImpIDForDoctor"] != DBNull.Value)
            {
                p.ListPCLResultParamImpIDForDoctor = Convert.ToString(reader["ListPCLResultParamImpIDForDoctor"]);
            }
            //▲==== #188
            return p;
        }
        protected virtual List<Staff> GetStaffFullNameCollectionFromReader(IDataReader reader)
        {
            var Staffs = new List<Staff>();
            while (reader.Read())
            {
                Staffs.Add(GetStaffFullNameFromReader(reader));
            }
            return Staffs;
        }

        protected virtual MedicalRecordTemplate GetMedRecTemplateFromReader(IDataReader reader)
        {
            var p = new MedicalRecordTemplate
            {
                MDRptTemplateID = (long)reader["MDRptTemplateID"],
                TemplateName = reader["TemplateName"].ToString(),
                TemplateFilePath = reader["TemplateFilePath"].ToString()
            };
            return p;
        }
        protected virtual List<MedicalRecordTemplate> GetMedRecTemplateCollectionFromReader(IDataReader reader)
        {
            var lst = new List<MedicalRecordTemplate>();
            while (reader.Read())
            {
                lst.Add(GetMedRecTemplateFromReader(reader));
            }
            return lst;
        }

        protected virtual DiagnosisIcd10Items GetDiagnosisIcd10ItemsFromReader(IDataReader reader)
        {
            var p = new DiagnosisIcd10Items();
            if (reader.HasColumn("DiagIcd10ItemID") && reader["DiagIcd10ItemID"] != DBNull.Value)
            {
                p.DiagIcd10ItemID = (long)reader["DiagIcd10ItemID"];
            }
            if (reader.HasColumn("DiagnosisIcd10ListID") && reader["DiagnosisIcd10ListID"] != DBNull.Value)
            {
                p.DiagnosisIcd10ListID = (long)reader["DiagnosisIcd10ListID"];
            }
            if (reader.HasColumn("ICD10Code") && reader["ICD10Code"] != DBNull.Value)
            {
                p.ICD10Code = reader["ICD10Code"].ToString();
            }
            if (reader.HasColumn("IsMain") && reader["IsMain"] != DBNull.Value)
            {
                p.IsMain = (bool)reader["IsMain"];
            }
            if (reader.HasColumn("IsCongenital") && reader["IsCongenital"] != DBNull.Value)
            {
                p.IsCongenital = (bool)reader["IsCongenital"];
            }
            p.DiseasesReference = GetRefDiseasesFromReader(reader);
            if (reader.HasColumn("V_DiagIcdStatus") && reader["V_DiagIcdStatus"] != DBNull.Value)
            {
                p.V_DiagIcdStatus = (long)reader["V_DiagIcdStatus"];
                p.LookupStatus = new Lookup { LookupID = (long)reader["V_DiagIcdStatus"] };
                if (reader.HasColumn("ObjectValue") && reader["ObjectValue"] != DBNull.Value)
                {
                    p.LookupStatus.ObjectValue = reader["ObjectValue"].ToString();
                }
            }
            if (reader.HasColumn("IsInvalid") && reader["IsInvalid"] != DBNull.Value)
            {
                p.IsInvalid = Convert.ToBoolean(reader["IsInvalid"]);
            }
            if (reader.HasColumn("IsRequireSubICD") && reader["IsRequireSubICD"] != DBNull.Value)
            {
                p.IsRequireSubICD = Convert.ToBoolean(reader["IsRequireSubICD"]);
            }
            return p;
        }
        protected virtual List<DiagnosisIcd10Items> GetDiagnosisIcd10ItemsCollectionFromReader(IDataReader reader)
        {
            var lst = new List<DiagnosisIcd10Items>();
            while (reader.Read())
            {
                lst.Add(GetDiagnosisIcd10ItemsFromReader(reader));
            }
            return lst;
        }

        protected virtual string ConvertDiagnosisIcd10ItemsToXML(IList<DiagnosisIcd10Items> items)
        {
            if (items != null)
            {
                var sb = new StringBuilder();
                sb.Append("<ICD10s>");
                foreach (var details in items)
                {
                    if (details.DiseasesReference == null) continue;
                    sb.Append("<RecInfo>");
                    sb.AppendFormat("<ICD10Code>{0}</ICD10Code>", details.ICD10Code);
                    sb.AppendFormat("<V_DiagIcdStatus>{0}</V_DiagIcdStatus>", details.LookupStatus == null ? "" : details.LookupStatus.LookupID.ToString());
                    sb.AppendFormat("<IsMain>{0}</IsMain>", details.IsMain);
                    sb.AppendFormat("<IsCongenital>{0}</IsCongenital>", details.IsCongenital);
                    sb.AppendFormat("<IsRequireSubICD>{0}</IsRequireSubICD>", details.IsRequireSubICD);
                    sb.AppendFormat("<ICD10CodeForYHCT>{0}</ICD10CodeForYHCT>", details.DiseasesReference.ICD10CodeFromYHCT);
                    sb.Append("</RecInfo>");
                }
                sb.Append("</ICD10s>");
                return sb.ToString();
            }
            else
            {
                return null;
            }
        }

        protected virtual DiagnosisICD9Items GetDiagnosisICD9ItemsFromReader(IDataReader reader)
        {
            var p = new DiagnosisICD9Items();

            if (reader.HasColumn("DiagICD9ItemID") && reader["DiagICD9ItemID"] != DBNull.Value)
            {
                p.DiagICD9ItemID = Convert.ToInt64(reader["DiagICD9ItemID"]);
            }
            if (reader.HasColumn("DiagnosisICD9ListID") && reader["DiagnosisICD9ListID"] != DBNull.Value)
            {
                p.DiagnosisICD9ListID = Convert.ToInt64(reader["DiagnosisICD9ListID"]);
            }
            if (reader.HasColumn("ICD9Code") && reader["ICD9Code"] != DBNull.Value)
            {
                p.ICD9Code = reader["ICD9Code"].ToString();
            }

            p.RefICD9 = GetRefICD9FromReader(reader);

            if (reader.HasColumn("IsMain"))
            {
                p.IsMain = Convert.ToBoolean(reader["IsMain"]);
            }

            if (reader.HasColumn("IsCongenital"))
            {
                p.IsCongenital = Convert.ToBoolean(reader["IsCongenital"]);
            }

            return p;
        }

        protected virtual List<DiagnosisICD9Items> GetDiagnosisICD9ItemsCollectionFromReader(IDataReader reader)
        {
            var lst = new List<DiagnosisICD9Items>();
            while (reader.Read())
            {
                lst.Add(GetDiagnosisICD9ItemsFromReader(reader));
            }
            return lst;
        }

        protected virtual string ConvertDiagnosisICD9ItemsToXML(IList<DiagnosisICD9Items> items)
        {
            if (items != null)
            {
                var sb = new StringBuilder();
                sb.Append("<ICD9s>");
                foreach (var details in items)
                {
                    if (details.RefICD9 == null) continue;
                    sb.Append("<RecInfo>");
                    sb.AppendFormat("<ICD9Code>{0}</ICD9Code>", details.ICD9Code);
                    sb.AppendFormat("<IsMain>{0}</IsMain>", details.IsMain);
                    sb.AppendFormat("<IsCongenital>{0}</IsCongenital>", details.IsCongenital);
                    sb.Append("</RecInfo>");
                }
                sb.Append("</ICD9s>");
                return sb.ToString();
            }
            else
            {
                return null;
            }
        }


        protected virtual DiagnosisIcd10List GetDiagnosisIcd10ListFromReader(IDataReader reader)
        {
            var p = new DiagnosisIcd10List
            {
                ICD10ListID = (long)reader["ICD10ListID"],
                ServiceRecID = reader["ServiceRecID"] as long?,
                DiagnosisIcd10ListID = (long)reader["DiagnosisIcd10ListID"],
                PatientServiceRecord = new PatientServiceRecord()
            };
            try
            {
                p.PatientServiceRecord.ServiceRecID = (long)reader["ServiceRecID"];
            }
            catch
            {
                p.PatientServiceRecord.ServiceRecID = 0;
            }
            p.PatientServiceRecord.PtRegistrationID = reader["PtRegistrationID"] as long?;
            try
            {
                p.PatientServiceRecord.PtRegistrationCode = reader["PtRegistrationCode"].ToString();
            }
            catch
            { }
            p.PatientServiceRecord.Staff = new Staff();
            p.PatientServiceRecord.StaffID = reader["DoctorID"] as long?;
            p.PatientServiceRecord.Staff.FullName = reader["DoctorName"].ToString();
            p.PatientServiceRecord.Staff.SPhoneNumber = reader["DrPhoneNumber"].ToString();
            p.PatientServiceRecord.PatientRecID = reader["PatientRecID"] as long?;
            p.PatientServiceRecord.PatientMedicalFileID = reader["PatientMedicalFileID"] as long?;
            try
            {
                p.PatientServiceRecord.ExamDate = (DateTime)reader["ExamDate"];
            }
            catch
            {
                p.PatientServiceRecord.ExamDate = DateTime.Now;
            }
            try
            {
                p.PatientServiceRecord.V_ProcessingType = (long)reader["V_ProcessingType"];
            }
            catch
            {
                p.PatientServiceRecord.V_ProcessingType = 0;
            }


            p.PatientServiceRecord.LookupProcessingType = new Lookup();
            try
            {
                p.PatientServiceRecord.LookupProcessingType.LookupID = (long)reader["V_ProcessingType"];
            }
            catch
            {
                p.PatientServiceRecord.LookupProcessingType.LookupID = 0;
            }
            p.PatientServiceRecord.LookupProcessingType.ObjectValue = reader["ProcessingType"].ToString();

            p.PatientServiceRecord.LookupBehaving = new Lookup();
            try
            {
                p.PatientServiceRecord.LookupBehaving.LookupID = (long)reader["V_Behaving"];

                p.PatientServiceRecord.V_Behaving = (long)reader["V_Behaving"];

            }
            catch
            {
                p.PatientServiceRecord.LookupBehaving.LookupID = 0;
                p.PatientServiceRecord.V_Behaving = 0;
            }

            p.PatientServiceRecord.LookupBehaving.ObjectValue = reader["Behaving"].ToString();

            p.PatientServiceRecord.PatientMedicalRecord = new PatientMedicalRecord
            {
                PatientRecID = (long)reader["PatientRecID"],
                PatientID = reader["PatientID"] as long?,
                NationalMedicalCode =
                                                                      reader["NationalMedicalCode"].ToString(),
                CreatedDate = reader["CreatedDate"] as DateTime?
            };

            return p;
        }
        protected virtual List<DiagnosisIcd10List> GetDiagnosisIcd10ListCollectionFromReader(IDataReader reader)
        {
            var lst = new List<DiagnosisIcd10List>();
            while (reader.Read())
            {
                lst.Add(GetDiagnosisIcd10ListFromReader(reader));
            }
            return lst;
        }

        protected virtual DiagnosisTreatment GetDiagTrmtFromReader(IDataReader reader)
        {
            var p = new DiagnosisTreatment();
            if (reader.HasColumn("DTItemID") && reader["DTItemID"] != DBNull.Value)
            {
                p.DTItemID = (long)reader["DTItemID"];
            }
            else
            {
                p.DTItemID = 0;
            }
            if (reader.HasColumn("AdmissionDate") && reader["AdmissionDate"] != DBNull.Value)
            {
                p.AdmissionInfo = new InPatientAdmDisDetails();
                p.AdmissionInfo.AdmissionDate = Convert.ToDateTime(reader["AdmissionDate"]);
            }
            if (reader.HasColumn("ServiceRecID") && reader["ServiceRecID"] != DBNull.Value)
            {
                p.ServiceRecID = reader["ServiceRecID"] as long?;
            }

            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                p.PtRegDetailID = reader["PtRegDetailID"] as long?;
            }

            if (reader.HasColumn("OrientedTreatment") && reader["OrientedTreatment"] != DBNull.Value)
            {
                p.OrientedTreatment = reader["OrientedTreatment"].ToString();
            }

            if (reader.HasColumn("ICD10List") && reader["ICD10List"] != DBNull.Value)
            {
                p.ICD10List = reader["ICD10List"].ToString();
            }

            if (reader.HasColumn("Treatment") && reader["Treatment"] != DBNull.Value)
            {
                p.Treatment = reader["Treatment"].ToString();
            }

            if (reader.HasColumn("DoctorComments") && reader["DoctorComments"] != DBNull.Value)
            {
                p.DoctorComments = reader["DoctorComments"].ToString();
            }

            if (reader.HasColumn("Diagnosis") && reader["Diagnosis"] != DBNull.Value)
            {
                p.Diagnosis = reader["Diagnosis"].ToString();
            }
            else
            {
                p.Diagnosis = "";
            }

            if (reader.HasColumn("DiagnosisFinal") && reader["DiagnosisFinal"] != DBNull.Value)
            {
                p.DiagnosisFinal = reader["DiagnosisFinal"].ToString();
            }
            else
            {
                p.DiagnosisFinal = "";
            }
            if (reader.HasColumn("DiagnosisOther") && reader["DiagnosisOther"] != DBNull.Value)
            {
                p.DiagnosisOther = reader["DiagnosisOther"].ToString();
            }
            else
            {
                p.DiagnosisOther = "";
            }
            if (reader.HasColumn("ReasonHospitalStay") && reader["ReasonHospitalStay"] != DBNull.Value)
            {
                p.ReasonHospitalStay = reader["ReasonHospitalStay"].ToString();
            }
            else
            {
                p.ReasonHospitalStay = "";
            }
            if (reader.HasColumn("DiseaseStage") && reader["DiseaseStage"] != DBNull.Value)
            {
                p.DiseaseStage = reader["DiseaseStage"].ToString();
            }
            else
            {
                p.DiseaseStage = "";
            }
            if (reader.HasColumn("AdmissionCriteriaList") && reader["AdmissionCriteriaList"] != DBNull.Value)
            {
                p.AdmissionCriteriaList = reader["AdmissionCriteriaList"].ToString();
            }
            else
            {
                p.AdmissionCriteriaList = "";
            }
            try
            {
                p.DiagnosisPriorityView = p.Diagnosis;
            }
            catch
            {
                p.DiagnosisPriorityView = p.DiagnosisFinal;
            }


            if (reader.HasColumn("DiagnosisForDrug") && reader["DiagnosisForDrug"] != DBNull.Value)
            {
                p.DiagnosisForDrug = reader["DiagnosisForDrug"].ToString();
            }

            if (reader.HasColumn("MDRptTemplateID") && reader["MDRptTemplateID"] != DBNull.Value)
            {
                p.MDRptTemplateID = (long)reader["MDRptTemplateID"];
            }
            else
            {
                p.MDRptTemplateID = 0;
            }


            //KMx: Dời V_DiagnosisType từ PatientServiceRecord sang DiagnosisTreatment vì 1 service record có thể chứa nhiều chẩn đoán (chỉ áp dụng nội trú).
            if (reader.HasColumn("V_DiagnosisType") && reader["V_DiagnosisType"] != DBNull.Value)
            {
                p.V_DiagnosisType = Convert.ToInt64(reader["V_DiagnosisType"]);

                p.LookupDiagnosis = new Lookup();

                p.LookupDiagnosis.LookupID = Convert.ToInt64(reader["V_DiagnosisType"]);
                if (reader.HasColumn("DiagnosisTypeName"))
                {
                    p.LookupDiagnosis.ObjectValue = reader["DiagnosisTypeName"].ToString();
                }
            }

            if (reader.HasColumn("DeptIDCreated") && reader["DeptIDCreated"] != DBNull.Value)
            {
                p.Department = new RefDepartment();
                p.Department.DeptID = Convert.ToInt64(reader["DeptIDCreated"]);

                if (reader.HasColumn("DeptNameCreated") && reader["DeptNameCreated"] != DBNull.Value)
                {
                    p.Department.DeptName = reader["DeptNameCreated"].ToString();
                }
                if (reader.HasColumn("IsTreatmentForCOVID") && reader["IsTreatmentForCOVID"] != DBNull.Value)
                {
                    p.Department.IsTreatmentForCOVID = Convert.ToBoolean(reader["IsTreatmentForCOVID"]);
                }
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////


            p.PatientServiceRecord = new PatientServiceRecord();

            if (reader.HasColumn("ServiceRecID") && reader["ServiceRecID"] != DBNull.Value)
            {
                p.PatientServiceRecord.ServiceRecID = (long)reader["ServiceRecID"];
            }
            else
            {
                p.PatientServiceRecord.ServiceRecID = 0;
            }

            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PtRegistrationID = reader["PtRegistrationID"] as long?;
            }

            if (reader.HasColumn("PtRegistrationCode") && reader["PtRegistrationCode"] != DBNull.Value)
            {
                p.PatientServiceRecord.PtRegistrationCode = reader["PtRegistrationCode"].ToString();
            }

            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PtRegDetailID = reader["PtRegDetailID"] as long?;
            }
            try
            {
                if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
                {
                    p.DoctorStaffID = Convert.ToInt64(reader["DoctorStaffID"]);

                    p.ObjDoctorStaffID = new Staff { StaffID = Convert.ToInt64(reader["DoctorStaffID"]) };
                    if (reader.HasColumn("DoctorName") && reader["DoctorName"] != DBNull.Value)
                    {
                        p.ObjDoctorStaffID.FullName = reader["DoctorName"] == null ? "" : reader["DoctorName"].ToString();
                    }

                    if (reader.HasColumn("DrPhoneNumber") && reader["DrPhoneNumber"] != DBNull.Value)
                    {
                        p.ObjDoctorStaffID.SPhoneNumber = reader["DrPhoneNumber"].ToString();
                    }
                }
            }
            catch
            {
                p.ObjDoctorStaffID = new Staff();
                p.DoctorStaffID = 0;
                p.ObjDoctorStaffID.StaffID = 0;
            }

            if (reader.HasColumn("PatientRecID") && reader["PatientRecID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PatientRecID = reader["PatientRecID"] as long?;
            }

            if (reader.HasColumn("PatientMedicalFileID") && reader["PatientMedicalFileID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PatientMedicalFileID = reader["PatientMedicalFileID"] as long?;
            }
            p.PatientServiceRecord.ExamDate = DateTime.Now;
            if (reader.HasColumn("ExamDate") && reader["ExamDate"] != DBNull.Value)
            {
                p.PatientServiceRecord.ExamDate = Convert.ToDateTime(reader["ExamDate"]);
            }
            p.PatientServiceRecord.V_ProcessingType = 0;
            if (reader.HasColumn("V_ProcessingType") && reader["V_ProcessingType"] != DBNull.Value)
            {
                p.PatientServiceRecord.V_ProcessingType = (long)reader["V_ProcessingType"];
            }

            p.PatientServiceRecord.LookupProcessingType = new Lookup();
            if (reader.HasColumn("V_ProcessingType") && reader["V_ProcessingType"] != DBNull.Value)
            {
                p.PatientServiceRecord.LookupProcessingType.LookupID = (long)reader["V_ProcessingType"];
            }
            if (reader.HasColumn("ProcessingType") && reader["ProcessingType"] != DBNull.Value)
            {
                p.PatientServiceRecord.LookupProcessingType.ObjectValue = reader["ProcessingType"].ToString();
            }
            p.PatientServiceRecord.LookupBehaving = new Lookup();
            p.PatientServiceRecord.V_Behaving = 0;
            if (reader.HasColumn("V_Behaving") && reader["V_Behaving"] != DBNull.Value)
            {
                p.PatientServiceRecord.LookupBehaving.LookupID = (long)reader["V_Behaving"];
                p.PatientServiceRecord.V_Behaving = (long)reader["V_Behaving"];
            }
            p.PatientServiceRecord.LookupDiagnosis = new Lookup();
            p.PatientServiceRecord.V_DiagnosisType = 0;
            if (reader.HasColumn("V_DiagnosisType") && reader["V_DiagnosisType"] != DBNull.Value)
            {
                p.PatientServiceRecord.LookupDiagnosis.LookupID = (long)reader["V_DiagnosisType"];
                p.PatientServiceRecord.V_DiagnosisType = (long)reader["V_DiagnosisType"];
            }
            if (reader.HasColumn("DiagnosisTypeName") && reader["DiagnosisTypeName"] != DBNull.Value)
            {
                p.PatientServiceRecord.LookupDiagnosis.ObjectValue = reader["DiagnosisTypeName"].ToString();
            }

            if (reader.HasColumn("Behaving") && reader["Behaving"] != DBNull.Value)
            {
                p.PatientServiceRecord.LookupBehaving.ObjectValue = reader["Behaving"].ToString();
            }

            p.PatientServiceRecord.PatientMedicalRecord = new PatientMedicalRecord();
            if (reader.HasColumn("PatientRecID") && reader["PatientRecID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PatientMedicalRecord.PatientRecID = (long)reader["PatientRecID"];
            }

            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PatientMedicalRecord.PatientID = reader["PatientID"] as long?;
            }

            if (reader.HasColumn("NationalMedicalCode") && reader["NationalMedicalCode"] != DBNull.Value)
            {
                p.PatientServiceRecord.PatientMedicalRecord.NationalMedicalCode = reader["NationalMedicalCode"].ToString();
            }

            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.PatientServiceRecord.PatientMedicalRecord.CreatedDate = reader["CreatedDate"] as DateTime?;
            }

            if (reader.HasColumn("LatestPrescriptID") && reader["LatestPrescriptID"] != DBNull.Value)
            {
                p.LatestPrescriptID = reader["LatestPrescriptID"] as long?;
            }

            if (reader.HasColumn("PrescriptID") && reader["PrescriptID"] != DBNull.Value)
            {
                p.PrescriptID = reader["PrescriptID"] as long?;
            }

            if (reader.HasColumn("IssueID") && reader["IssueID"] != DBNull.Value)
            {
                p.IssueID = reader["IssueID"] as long?;
            }

            if (reader.HasColumn("DiagnosisDate") && reader["DiagnosisDate"] != DBNull.Value)
            {
                p.DiagnosisDate = (DateTime)reader["DiagnosisDate"];
            }
            if (reader.HasColumn("InPtDeptGuid") && reader["InPtDeptGuid"] != DBNull.Value)
            {
                p.InPtDeptGuid = reader["InPtDeptGuid"] as Guid?;
            }
            if (reader.HasColumn("HeartFailureType") && reader["HeartFailureType"] != DBNull.Value)
            {
                p.HeartFailureType = Convert.ToBoolean(reader["HeartFailureType"]);
            }
            else
            {
                p.HeartFailureType = false;
            }
            //==== #001
            if (reader.HasColumn("IntPtDiagDrInstructionID") && reader["IntPtDiagDrInstructionID"] != DBNull.Value)
            {
                p.IntPtDiagDrInstructionID = (long)reader["IntPtDiagDrInstructionID"];
            }
            if (reader.HasColumn("Pulse") && reader["Pulse"] != DBNull.Value)
            {
                p.Pulse = Convert.ToDecimal(reader["Pulse"]);
            }
            if (reader.HasColumn("BloodPressure") && reader["BloodPressure"] != DBNull.Value)
            {
                p.BloodPressure = Convert.ToDecimal(reader["BloodPressure"]);
            }
            //▼==== #131
            if (reader.HasColumn("RespiratoryRate") && reader["RespiratoryRate"] != DBNull.Value)
            {
                p.RespiratoryRate = Convert.ToDecimal(reader["RespiratoryRate"]);
            }
            //▲==== #131
            if (reader.HasColumn("Temperature") && reader["Temperature"] != DBNull.Value)
            {
                p.Temperature = Convert.ToDecimal(reader["Temperature"]);
            }
            if (reader.HasColumn("SpO2") && reader["SpO2"] != DBNull.Value)
            {
                p.SpO2 = Convert.ToDecimal(reader["SpO2"]);
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                if (Enum.IsDefined(typeof(AllLookupValues.RegistrationType), Convert.ToInt32(reader["V_RegistrationType"])))
                    p.V_RegistrationType = (AllLookupValues.RegistrationType)Enum.Parse(typeof(AllLookupValues.RegistrationType), reader["V_RegistrationType"].ToString());
            }
            //==== #001
            if (reader.HasColumn("KLSTriGiac") && reader["KLSTriGiac"] != DBNull.Value)
            {
                p.KLSTriGiac = reader["KLSTriGiac"].ToString();
            }
            if (reader.HasColumn("KLSNiemMac") && reader["KLSNiemMac"] != DBNull.Value)
            {
                p.KLSNiemMac = reader["KLSNiemMac"].ToString();
            }
            if (reader.HasColumn("KLSKetMac") && reader["KLSKetMac"] != DBNull.Value)
            {
                p.KLSKetMac = reader["KLSKetMac"].ToString();
            }
            if (reader.HasColumn("KLSTuyenGiap") && reader["KLSTuyenGiap"] != DBNull.Value)
            {
                p.KLSTuyenGiap = reader["KLSTuyenGiap"].ToString();
            }
            if (reader.HasColumn("KLSHachBachHuyet") && reader["KLSHachBachHuyet"] != DBNull.Value)
            {
                p.KLSHachBachHuyet = reader["KLSHachBachHuyet"].ToString();
            }
            if (reader.HasColumn("KLSPhoi") && reader["KLSPhoi"] != DBNull.Value)
            {
                p.KLSPhoi = reader["KLSPhoi"].ToString();
            }
            if (reader.HasColumn("KLSTim") && reader["KLSTim"] != DBNull.Value)
            {
                p.KLSTim = reader["KLSTim"].ToString();
            }
            if (reader.HasColumn("KLSBung") && reader["KLSBung"] != DBNull.Value)
            {
                p.KLSBung = reader["KLSBung"].ToString();
            }
            if (reader.HasColumn("KLSTMH") && reader["KLSTMH"] != DBNull.Value)
            {
                p.KLSTMH = reader["KLSTMH"].ToString();
            }
            /*▼====: #038*/
            if (reader.HasColumn("V_TreatmentType") && reader["V_TreatmentType"] != DBNull.Value)
            {
                p.V_TreatmentType = (long)reader["V_TreatmentType"];
            }
            if (reader.HasColumn("TreatmentType") && reader["TreatmentType"] != DBNull.Value)
            {
                p.TreatmentType = Convert.ToString(reader["TreatmentType"]);
            }
            /*▲====: #038*/
            if (reader.HasColumn("MarkedDelete") && reader["MarkedDelete"] != DBNull.Value)
            {
                p.MarkedDelete = Convert.ToBoolean(reader["MarkedDelete"]);
            }
            if (reader.HasColumn("ICD10List") && reader["ICD10List"] != DBNull.Value)
            {
                p.ICD10List = reader["ICD10List"].ToString();
            }
            if (reader.HasColumn("ICD10Code") && reader["ICD10Code"] != DBNull.Value)
            {
                p.ICD10Code = reader["ICD10Code"].ToString();
            }
            if (reader.HasColumn("InPatientDeptDetailID") && reader["InPatientDeptDetailID"] != DBNull.Value)
            {
                p.DeptDetail = new DiagnosisDeptDetail
                {
                    InPatientDeptDetailID = (long)reader["InPatientDeptDetailID"]
                };
                if (reader.HasColumn("DeptName") && reader["DeptName"] != DBNull.Value)
                {
                    p.DeptDetail.DeptName = Convert.ToString(reader["DeptName"]);
                }
                if (reader.HasColumn("LocationName") && reader["LocationName"] != DBNull.Value)
                {
                    p.DeptDetail.LocationName = Convert.ToString(reader["LocationName"]);
                }
                if (reader.HasColumn("DeptEntrySeqNum") && reader["DeptEntrySeqNum"] != DBNull.Value)
                {
                    p.DeptDetail.DeptEntrySeqNum = Convert.ToInt16(reader["DeptEntrySeqNum"]);
                }
            }
            if (reader.HasColumn("LowerBloodPressure") && reader["LowerBloodPressure"] != DBNull.Value)
            {
                p.LowerBloodPressure = Convert.ToDecimal(reader["LowerBloodPressure"]);
            }
            if (reader.HasColumn("VersionNumber") && reader["VersionNumber"] != DBNull.Value)
            {
                p.VersionNumber = Convert.ToInt32(reader["VersionNumber"]);
            }
            if (reader.HasColumn("IsAdmission") && reader["IsAdmission"] != DBNull.Value)
            {
                p.IsAdmission = Convert.ToBoolean(reader["IsAdmission"]);
            }
            if (reader.HasColumn("ConfirmedForInPatientDeptDetailID") && reader["ConfirmedForInPatientDeptDetailID"] != DBNull.Value)
            {
                p.ConfirmedForInPatientDeptDetailID = Convert.ToInt64(reader["ConfirmedForInPatientDeptDetailID"]);
            }
            if (reader.HasColumn("ConfirmedForPrescriptID") && reader["ConfirmedForPrescriptID"] != DBNull.Value)
            {
                p.ConfirmedForPrescriptID = Convert.ToInt64(reader["ConfirmedForPrescriptID"]);
            }
            if (reader.HasColumn("ConfimedForPreAndDischarge") && reader["ConfimedForPreAndDischarge"] != DBNull.Value)
            {
                p.ConfimedForPreAndDischarge = Convert.ToInt32(reader["ConfimedForPreAndDischarge"]);
            }
            if (reader.HasColumn("IsTreatmentCOVID") && reader["IsTreatmentCOVID"] != DBNull.Value)
            {
                p.IsTreatmentCOVID = Convert.ToBoolean(reader["IsTreatmentCOVID"]);
            }
            return p;
        }
        protected virtual List<DiagnosisTreatment> GetDiagTrmtCollectionFromReader(IDataReader reader)
        {
            var lst = new List<DiagnosisTreatment>();
            while (reader.Read())
            {
                lst.Add(GetDiagTrmtFromReader(reader));
            }
            return lst;
        }
        protected virtual DiagnosisTreatment GetDiagTrmtItemFromReader(IDataReader reader)
        {
            var obj = new DiagnosisTreatment();
            var idx = 0;
            while (reader.Read() && idx < 1)
            {
                obj = GetDiagTrmtFromReader(reader);
                idx++;
            }
            return obj;

        }

        protected virtual PatientMedicalRecord GetPMRsFromReader(IDataReader reader)
        {
            var p = new PatientMedicalRecord
            {
                PatientRecID = (long)reader["PatientRecID"],
                PatientID = reader["PatientID"] as long?,
                NationalMedicalCode = reader["NationalMedicalCode"].ToString(),
                PatientRecBarCode = reader["PatientRecBarCode"].ToString(),
                CreatedDate = reader["CreatedDate"] as DateTime?,
                FinishedDate = reader["FinishedDate"] as DateTime?
            };

            if (reader.HasColumn("ExamDate") && reader["ExamDate"] != DBNull.Value)
            {
                p.ExamDate = (DateTime)reader["ExamDate"];
            }
            if (reader.HasColumn("LatestPrescriptionID"))
            {
                p.LatestPrescriptionID = reader["LatestPrescriptionID"] as long?;
            }

            if (reader.HasColumn("PtRegistrationID"))
            {
                p.PtRegistrationID = reader["PtRegistrationID"] as long?;
            }
            return p;
        }
        protected virtual List<PatientMedicalRecord> GetPMRsCollectionFromReader(IDataReader reader)
        {
            var lst = new List<PatientMedicalRecord>();
            while (reader.Read())
            {
                lst.Add(GetPMRsFromReader(reader));
            }
            return lst;
        }
        protected virtual PatientMedicalRecord GetPMRItemFromReader(IDataReader reader)
        {
            var obj = new PatientMedicalRecord();
            var idx = 0;
            while (reader.Read() && idx < 1)
            {
                obj = GetPMRsFromReader(reader);
                idx++;
            }
            return obj;

        }

        protected virtual PatientMedicalFile GetPatientMedicalFileFromReader(IDataReader reader)
        {
            var p = new PatientMedicalFile
            {
                PatientMedicalFileID = Convert.ToInt64(reader["PatientMedicalFileID"]),
                PatientRecID = Convert.ToInt64(reader["PatientRecID"]),
                FileBarcodeNumber = reader["FileBarcodeNumber"].ToString(),
                FileCodeNumber = reader["FileCodeNumber"].ToString(),
                StorageFileName = reader["StorageFileName"].ToString(),
                StorageFilePath = reader["StorageFilePath"].ToString(),
                RecCreatedDate = (DateTime)reader["RecCreatedDate"]
            };
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = Convert.ToBoolean(reader["IsActive"]);
            }
            if (reader.HasColumn("LocName") && reader["LocName"] != DBNull.Value)
            {
                p.LocName = reader["LocName"].ToString();
            }
            return p;
        }
        protected virtual List<PatientMedicalFile> GetPatientMedicalFileCollectionFromReader(IDataReader reader)
        {
            var lst = new List<PatientMedicalFile>();
            while (reader.Read())
            {
                lst.Add(GetPatientMedicalFileFromReader(reader));
            }
            return lst;
        }

        protected virtual Prescription GetPrescriptionFromReader(IDataReader reader)
        {
            var p = new Prescription
            {
                PrescriptID = (long)reader["PrescriptID"],
                ConsultantID = reader["ConsultantDoctorID"] as long?,
                ConsultantDoctor = new Staff()
            };
            if (reader.HasColumn("ConsultantDoctorID") && reader["ConsultantDoctorID"] != DBNull.Value)
            {
                p.ConsultantDoctor.StaffID = (long)reader["ConsultantDoctorID"];

                if (reader.HasColumn("ConsultantDoctorFullName"))
                {
                    p.ConsultantDoctor.FullName = reader["ConsultantDoctorFullName"].ToString();
                }
            }

            p.HaveBeenConsulted = reader["HaveBeenConsulted"] as bool?;

            p.AppointmentID = reader["AppointmentID"] as int?;
            p.AppointmentDate = reader["AppointmentDate"] as DateTime?;

            p.Diagnosis = reader["Diagnosis"].ToString();
            p.DoctorAdvice = reader["DoctorAdvice"].ToString();
            p.ForOutPatient = reader["ForOutPatient"] as bool?;
            p.V_PrescriptionType = reader["V_PrescriptionType"] as long?;
            p.LookupPrescriptionType = new Lookup
            {
                LookupID = (long)reader["V_PrescriptionType"],
                ObjectValue = reader["PrescriptionType"].ToString()
            };
            //▼====== #039
            if (reader.HasColumn("IsEmptyPrescription") && reader["IsEmptyPrescription"] != DBNull.Value)
            {
                p.PreNoDrug = Convert.ToBoolean(reader["IsEmptyPrescription"]);
            }
            //▲====== #039
            //Get latest prescription issue history
            p.PrescriptionIssueHistory = new PrescriptionIssueHistory
            {
                ServiceRecID = reader["ServiceRecID"] as long?,
                PrescriptID = reader["PrescriptID"] as long?
            };
            //ny them 
            //▼====== #039
            if (reader.HasColumn("IsOutCatConfirmed") && reader["IsOutCatConfirmed"] != DBNull.Value)
            {
                p.PrescriptionIssueHistory.IsOutCatConfirmed = Convert.ToBoolean(reader["IsOutCatConfirmed"]);
            }
            //▲====== #039
            if (reader.HasColumn("IssueID") && reader["IssueID"] != DBNull.Value)
            {
                p.PrescriptionIssueHistory.IssueID = (long)reader["IssueID"];
                p.IssueID = (long)reader["IssueID"];
            }
            p.PrescriptionIssueHistory.IssuedDateTime = (DateTime)reader["IssuedDateTime"];

            if (reader.HasColumn("OrigCreatorDoctorNames") && reader["OrigCreatorDoctorNames"] != DBNull.Value)
            {
                p.PrescriptionIssueHistory.OrigCreatorDoctorNames = reader["OrigCreatorDoctorNames"].ToString();
            }

            //▼===== #064: Do cách cũ không có code thực hiện nữa nên comment lại chuyển SecretaryStaff => cách đọc dữ liệu mới.
            if (reader.HasColumn("MedSecretaryID") && reader["MedSecretaryID"] != DBNull.Value)
            {
                p.SecretaryStaff = new Staff();
                p.SecretaryStaff.StaffID = (long)reader["MedSecretaryID"];
                if (reader.HasColumn("MedSecretaryName") && reader["MedSecretaryName"] != DBNull.Value)
                {
                    p.SecretaryStaff.FullName = reader["MedSecretaryName"].ToString();
                }
            }
            //p.SecretaryStaff = new Staff();
            //if (reader.HasColumn("SecretaryStaffID") && reader["SecretaryStaffID"] != DBNull.Value)
            //{
            //    p.PrescriptionIssueHistory.SecretaryStaffID = (long)reader["SecretaryStaffID"];
            //    p.SecretaryStaff.StaffID = (long)reader["SecretaryStaffID"];
            //}

            //if (reader.HasColumn("SecretaryFullName") && reader["SecretaryFullName"] != DBNull.Value)
            //{
            //    p.PrescriptionIssueHistory.SecretaryStaffID = (long)reader["SecretaryFullName"];
            //    p.SecretaryStaff.FullName = reader["SecretaryFullName"].ToString();
            //}
            //▲===== #064
            if (reader.HasColumn("IssuerStaffID") && reader["IssuerStaffID"] != DBNull.Value)
            {
                p.ObjIssuerStaffID = new Staff { StaffID = Convert.ToInt64(reader["IssuerStaffID"]) };
                if (reader.HasColumn("IssuerStaffIDName"))
                {
                    p.ObjIssuerStaffID.FullName = reader["IssuerStaffIDName"] == null ? "" : reader["IssuerStaffIDName"].ToString();
                    if (string.IsNullOrEmpty(p.PrescriptionIssueHistory.OrigCreatorDoctorNames))
                    {
                        p.PrescriptionIssueHistory.OrigCreatorDoctorNames = p.ObjIssuerStaffID.FullName;
                    }
                }
                if (reader.HasColumn("IssuerStaffIDPhoneNumber"))
                {
                    p.ObjIssuerStaffID.SPhoneNumber = reader["IssuerStaffIDPhoneNumber"] == null ? "" : reader["IssuerStaffIDPhoneNumber"].ToString();
                }
            }


            if (reader.HasColumn("ReIssuerStaffID") && reader["ReIssuerStaffID"] != DBNull.Value)
            {
                p.ObjReIssuerStaffID = new Staff { StaffID = Convert.ToInt64(reader["ReIssuerStaffID"]) };
                if (reader.HasColumn("ReIssuerStaffIDName"))
                {
                    p.ObjReIssuerStaffID.FullName = reader["ReIssuerStaffIDName"] == null ? "" : reader["ReIssuerStaffIDName"].ToString();
                }
                if (reader.HasColumn("ReIssuerStaffIDPhoneNumber"))
                {
                    p.ObjReIssuerStaffID.SPhoneNumber = reader["ReIssuerStaffIDPhoneNumber"] == null ? "" : reader["ReIssuerStaffIDPhoneNumber"].ToString();
                }
            }


            p.PrescriptionIssueHistory.TimesNumberIsPrinted = reader["TimesNumberIsPrinted"] as byte?;
            p.PrescriptionIssueHistory.V_PrescriptionNotes = reader["V_PrescriptionNotes"] as long?;
            if (p.PrescriptionIssueHistory.V_PrescriptionNotes != null)
            {
                p.PrescriptionIssueHistory.LookupPrescriptionNotes = new Lookup
                {
                    LookupID =
                                                                                 (long)reader["V_PrescriptionNotes"],
                    ObjectValue =
                                                                                 reader["PrescriptionNotes"].ToString()
                };
            }
            if (reader.HasColumn("V_PrescriptionIssuedCase") && reader["V_PrescriptionIssuedCase"] != DBNull.Value)
            {
                p.PrescriptionIssueHistory.V_PrescriptionIssuedCase = reader["V_PrescriptionIssuedCase"] as long?;
            }
            if (p.PrescriptionIssueHistory.V_PrescriptionIssuedCase != null)
            {
                p.PrescriptionIssueHistory.LookupPrescriptionIssuedCase = new Lookup
                {
                    LookupID =
                                                                                      (long)
                                                                                      reader["V_PrescriptionIssuedCase"],
                    ObjectValue =
                                                                                      reader["PrescriptionIssuedCase"].
                                                                                      ToString()
                };
            }

            //Get PatientServiceRecords Info
            p.PrescriptionIssueHistory.PatientServiceRecord = new PatientServiceRecord
            {
                ServiceRecID = (long)reader["ServiceRecID"],
                PtRegistrationID =
                                                                          reader["PtRegistrationID"] as long?
                                                                    ,
                PatientMedicalFileID = reader["PatientMedicalFileID"] as long?
            };

            if (reader.HasColumn("PtRegistrationCode"))
            {
                p.PrescriptionIssueHistory.PatientServiceRecord.PtRegistrationCode = reader["PtRegistrationCode"].ToString();
            }

            p.PrescriptionIssueHistory.PatientServiceRecord.StaffID = reader["DoctorID"] as long?;
            p.PrescriptionIssueHistory.PatientServiceRecord.ExamDate = (DateTime)reader["ExamDate"];
            p.PrescriptionIssueHistory.PatientServiceRecord.V_ProcessingType = reader["V_ProcessingType"] as long?;
            p.PrescriptionIssueHistory.PatientServiceRecord.LookupProcessingType = new Lookup
            {
                LookupID =
                                                                                               (long)
                                                                                               reader["V_ProcessingType"
                                                                                                   ],
                ObjectValue =
                                                                                               reader["ProcessingType"].
                                                                                               ToString()
            };
            p.PrescriptionIssueHistory.PatientServiceRecord.V_Behaving = reader["V_Behaving"] as long?;
            p.PrescriptionIssueHistory.PatientServiceRecord.LookupBehaving = new Lookup
            {
                LookupID =
                                                                                         (long)reader["V_Behaving"],
                ObjectValue =
                                                                                         reader["Behaving"].ToString()
            };

            if (reader.HasColumn("FullName"))
            {
                p.PatientFullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("PatientCode"))
            {
                p.PatientCode = reader["PatientCode"].ToString();
            }
            if (reader.HasColumn("HICardNo"))
            {
                p.HICardNo = reader["HICardNo"].ToString();
            }
            if (reader.HasColumn("PrescriptDetailsStr"))
            {
                p.PrescriptDetailsStr = reader["PrescriptDetailsStr"].ToString();
            }
            if (reader.HasColumn("IsSold") && reader["IsSold"] != DBNull.Value)
            {
                p.IsSold = (bool)reader["IsSold"];
            }

            if (reader.HasColumn("V_RegistrationType"))
            {
                var V_RegistrationType = reader["V_RegistrationType"] as long?;
                if (Enum.IsDefined(typeof(AllLookupValues.RegistrationType), (int)V_RegistrationType.GetValueOrDefault(0)))
                {
                    p.V_RegistrationType = (AllLookupValues.RegistrationType)V_RegistrationType.Value;
                }
                else
                {
                    p.V_RegistrationType = AllLookupValues.RegistrationType.Unknown;
                }
            }
            return p;
        }
        protected virtual List<Prescription> GetPrescriptionCollectionFromReader(IDataReader reader)
        {
            var lst = new List<Prescription>();
            while (reader.Read())
            {
                lst.Add(GetPrescriptionFromReader(reader));
            }
            return lst;
        }
        protected virtual Prescription GetPtPrescriptionFromReader(IDataReader reader)
        {
            var p = new Prescription();

            if (reader.HasColumn("PrescriptID") && reader["PrescriptID"] != DBNull.Value)
            {
                p.PrescriptID = (long)reader["PrescriptID"];
            }
            if (reader.HasColumn("Issue_HisID") && reader["Issue_HisID"] != DBNull.Value)
            {
                p.Issue_HisID = (long)reader["Issue_HisID"];
            }
            p.ConsultantDoctor = new Staff();
            if (reader.HasColumn("ConsultantDoctorID") && reader["ConsultantDoctorID"] != DBNull.Value)
            {
                p.ConsultantID = reader["ConsultantDoctorID"] as long?;
                p.ConsultantDoctor.StaffID = (long)reader["ConsultantDoctorID"];

                if (reader.HasColumn("ConsultantDoctorFullName") && reader["ConsultantDoctorFullName"] != DBNull.Value)
                {
                    p.ConsultantDoctor.FullName = reader["ConsultantDoctorFullName"].ToString();
                }
            }
            //▼====== #039
            if (reader.HasColumn("IsEmptyPrescription") && reader["IsEmptyPrescription"] != DBNull.Value)
            {
                p.PreNoDrug = Convert.ToBoolean(reader["IsEmptyPrescription"]);
            }
            //▲====== #039
            if (reader.HasColumn("HaveBeenConsulted") && reader["HaveBeenConsulted"] != DBNull.Value)
            {
                var bTemp = reader["HaveBeenConsulted"] as bool?;

                p.HaveBeenConsulted = bTemp ?? false;
            }

            if (reader.HasColumn("NeedToHoldConsultation") && reader["NeedToHoldConsultation"] != DBNull.Value)
            {
                p.NeedToHoldConsultation = (bool)reader["NeedToHoldConsultation"];
            }

            if (reader.HasColumn("AppointmentID") && reader["AppointmentID"] != DBNull.Value)
            {
                p.AppointmentID = reader["AppointmentID"] as long?;
            }

            p.HasAppointment = false;
            if (p.AppointmentID != null && p.AppointmentID > 0)
            {
                p.HasAppointment = true;
            }

            if (reader.HasColumn("AppointmentDate") && reader["AppointmentDate"] != DBNull.Value)
            {
                p.AppointmentDate = reader["AppointmentDate"] as DateTime?;
            }

            //if (reader.HasColumn("AppointmentNDay"))
            //{
            //    p.NDay = reader["AppointmentNDay"] as int?;
            //}
            if (reader.HasColumn("NDay") && reader["NDay"] != DBNull.Value)
            {
                p.NDay = Convert.ToInt16(reader["NDay"]);
            }

            if (reader.HasColumn("Diagnosis") && reader["Diagnosis"] != DBNull.Value)
            {
                p.Diagnosis = reader["Diagnosis"].ToString();
            }

            if (reader.HasColumn("DoctorAdvice") && reader["DoctorAdvice"] != DBNull.Value)
            {
                p.DoctorAdvice = reader["DoctorAdvice"].ToString();
            }

            if (reader.HasColumn("ForOutPatient") && reader["ForOutPatient"] != DBNull.Value)
            {
                p.ForOutPatient = reader["ForOutPatient"] as bool?;
            }

            if (reader.HasColumn("V_PrescriptionType") && reader["V_PrescriptionType"] != DBNull.Value)
            {
                p.V_PrescriptionType = reader["V_PrescriptionType"] as long?;
            }

            if (reader.HasColumn("V_PrescriptionIssuedCase") && reader["V_PrescriptionIssuedCase"] != DBNull.Value)
            {
                p.V_PrescriptionIssuedCase = reader["V_PrescriptionIssuedCase"] as long?;
            }

            p.LookupPrescriptionType = new Lookup();
            try
            {
                p.LookupPrescriptionType.LookupID = (long)reader["V_PrescriptionType"];
            }
            catch
            {
                p.LookupPrescriptionType.LookupID = 2401; //Drug (2401)( or Disposable Medical Resources (2402);
            }

            if (reader.HasColumn("PrescriptionType") && reader["PrescriptionType"] != DBNull.Value)
            {
                p.LookupPrescriptionType.ObjectValue = reader["PrescriptionType"].ToString();
            }

            //if (reader.HasColumn("OrigCreatorDoctorNames") && reader["OrigCreatorDoctorNames"] != DBNull.Value)
            //{
            //    p.PrescriptionIssueHistory.OrigCreatorDoctorNames = reader["OrigCreatorDoctorNames"].ToString();
            //}

            if (reader.HasColumn("CreatorStaffID") && reader["CreatorStaffID"] != DBNull.Value)
            {
                p.CreatorStaffID = (long)reader["CreatorStaffID"];
                p.ObjCreatorStaffID = new Staff { StaffID = (long)reader["CreatorStaffID"] };
                if (reader.HasColumn("CreatorStaffIDName"))
                {
                    p.ObjCreatorStaffID.FullName = reader["CreatorStaffIDName"] == null ? "" : reader["CreatorStaffIDName"].ToString();
                }
                if (reader.HasColumn("CreatorStaffIDPhoneNumber"))
                {
                    p.ObjCreatorStaffID.SPhoneNumber = reader["CreatorStaffIDPhoneNumber"] == null ? "" : reader["CreatorStaffIDPhoneNumber"].ToString();
                }
            }

            if (reader.HasColumn("ModifierStaffID") && reader["ModifierStaffID"] != DBNull.Value)
            {
                p.ModifierStaffID = (long)reader["ModifierStaffID"];
                p.ObjModifierStaffID = new Staff { StaffID = (long)reader["ModifierStaffID"] };
                if (reader.HasColumn("ModifierStaffIDName"))
                {
                    p.ObjModifierStaffID.FullName = reader["ModifierStaffIDName"] == null ? "" : reader["ModifierStaffIDName"].ToString();
                }
                if (reader.HasColumn("ModifierStaffIDPhoneNumber"))
                {
                    p.ObjModifierStaffID.SPhoneNumber = reader["ModifierStaffIDPhoneNumber"] == null ? "" : reader["ModifierStaffIDPhoneNumber"].ToString();
                }
            }

            if (reader.HasColumn("RecDateCreated") && reader["RecDateCreated"] != DBNull.Value)
            {
                p.RecDateCreated = Convert.ToDateTime(reader["RecDateCreated"]);
            }


            //Get latest prescription issue history
            if (reader.HasColumn("IssuedDateTime") && reader["IssuedDateTime"] != DBNull.Value)
            {
                p.IssuedDateTime = reader["IssuedDateTime"] as DateTime?;
            }

            if (reader.HasColumn("OrigIssuedDateTime") && reader["OrigIssuedDateTime"] != DBNull.Value)
            {
                p.OrigIssuedDateTime = reader["OrigIssuedDateTime"] as DateTime?;
            }

            if (reader.HasColumn("TimesNumberIsPrinted") && reader["TimesNumberIsPrinted"] != DBNull.Value)
            {
                p.TimesNumberIsPrinted = reader["TimesNumberIsPrinted"] as byte?;
            }

            //Get PatientServiceRecords Info
            if (reader.HasColumn("ServiceRecID") && reader["ServiceRecID"] != DBNull.Value)
            {
                p.ServiceRecID = reader["ServiceRecID"] as long?;
            }


            try
            {
                p.PtRegistrationID = reader["PtRegistrationID"] as long?;
                p.PtRegistrationCode = reader["PtRegistrationCode"].ToString();
                if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
                {

                    var V_RegistrationType = reader["V_RegistrationType"] as long?;
                    if (Enum.IsDefined(typeof(AllLookupValues.RegistrationType), (int)V_RegistrationType.GetValueOrDefault(0)))
                    {
                        p.V_RegistrationType = (AllLookupValues.RegistrationType)V_RegistrationType.Value;
                    }
                    else
                    {
                        p.V_RegistrationType = AllLookupValues.RegistrationType.Unknown;
                    }
                }

            }
            catch
            {
            }

            //if (reader.HasColumn("OrigCreatorDoctorNames") && reader["OrigCreatorDoctorNames"] != DBNull.Value)
            //{
            //    p.PrescriptionIssueHistory.OrigCreatorDoctorNames = reader["OrigCreatorDoctorNames"].ToString();
            //}

            if (reader.HasColumn("IssuerStaffID") && reader["IssuerStaffID"] != DBNull.Value)
            {
                p.ObjIssuerStaffID = new Staff { StaffID = Convert.ToInt64(reader["IssuerStaffID"]) };
                if (reader.HasColumn("IssuerStaffIDName"))
                {
                    p.ObjIssuerStaffID.FullName = reader["IssuerStaffIDName"] == null ? "" : reader["IssuerStaffIDName"].ToString();
                }
                if (reader.HasColumn("IssuerStaffIDPhoneNumber"))
                {
                    p.ObjIssuerStaffID.SPhoneNumber = reader["IssuerStaffIDPhoneNumber"] == null ? "" : reader["IssuerStaffIDPhoneNumber"].ToString();
                }
            }


            if (reader.HasColumn("ReIssuerStaffID") && reader["ReIssuerStaffID"] != DBNull.Value)
            {
                p.ObjReIssuerStaffID = new Staff { StaffID = Convert.ToInt64(reader["ReIssuerStaffID"]) };
                if (reader.HasColumn("ReIssuerStaffIDName"))
                {
                    p.ObjReIssuerStaffID.FullName = reader["ReIssuerStaffIDName"] == null ? "" : reader["ReIssuerStaffIDName"].ToString();
                }
                if (reader.HasColumn("ReIssuerStaffIDPhoneNumber"))
                {
                    p.ObjReIssuerStaffID.SPhoneNumber = reader["ReIssuerStaffIDPhoneNumber"] == null ? "" : reader["ReIssuerStaffIDPhoneNumber"].ToString();
                }
            }


            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.ObjDoctorStaffID = new Staff();
                p.ObjDoctorStaffID.StaffID = Convert.ToInt64(reader["DoctorStaffID"]);
                if (reader.HasColumn("DoctorStaffIDName"))
                {
                    p.ObjDoctorStaffID.FullName = reader["DoctorStaffIDName"] == null ? "" : reader["DoctorStaffIDName"].ToString();
                }
                if (reader.HasColumn("DoctorStaffIDPhoneNumber"))
                {
                    p.ObjDoctorStaffID.SPhoneNumber = reader["DoctorStaffIDPhoneNumber"] == null ? "" : reader["DoctorStaffIDPhoneNumber"].ToString();
                }
            }


            try
            {
                p.ExamDate = (DateTime)reader["ExamDate"];
            }
            catch
            {
                p.ExamDate = null;
            }

            if (reader.HasColumn("V_ProcessingType") && reader["V_ProcessingType"] != DBNull.Value)
            {
                p.V_ProcessingType = reader["V_ProcessingType"] as long?;
            }

            if (reader.HasColumn("ProcessingType") && reader["ProcessingType"] != DBNull.Value)
            {
                p.ProcessingType = reader["ProcessingType"].ToString();
            }

            if (reader.HasColumn("V_Behaving") && reader["V_Behaving"] != DBNull.Value)
            {
                p.V_Behaving = reader["V_Behaving"] as long?;
            }

            if (reader.HasColumn("Behaving") && reader["Behaving"] != DBNull.Value)
            {
                p.Behaving = reader["Behaving"].ToString();
            }

            //get PatientMedicalRecords
            if (reader.HasColumn("PatientRecID") && reader["PatientRecID"] != DBNull.Value)
            {
                p.PatientRecID = (long)reader["PatientRecID"];
            }

            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientID = reader["PatientID"] as long?;
            }

            if (reader.HasColumn("NationalMedicalCode") && reader["NationalMedicalCode"] != DBNull.Value)
            {
                p.NationalMedicalCode = reader["NationalMedicalCode"].ToString();
            }

            if (reader.HasColumn("PatientRecBarCode") && reader["PatientRecBarCode"] != DBNull.Value)
            {
                p.PatientRecBarCode = reader["PatientRecBarCode"].ToString();
            }

            if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
            {
                p.PatientFullName = reader["FullName"].ToString();
            }


            if (reader.HasColumn("AllergiesString") && reader["AllergiesString"] != DBNull.Value)
            {
                p.AllergiesString = reader["AllergiesString"].ToString();
            }

            if (reader.HasColumn("WarningString") && reader["WarningString"] != DBNull.Value)
            {
                p.WarningString = reader["WarningString"].ToString();
            }

            if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
            {
                p.PatientCode = reader["PatientCode"].ToString();
            }
            if (reader.HasColumn("HICardNo") && reader["HICardNo"] != DBNull.Value)
            {
                p.HICardNo = reader["HICardNo"].ToString();
            }
            if (reader.HasColumn("PrescriptDetailsStr") && reader["PrescriptDetailsStr"] != DBNull.Value)
            {
                p.PrescriptDetailsStr = reader["PrescriptDetailsStr"].ToString();
            }
            if (reader.HasColumn("IsSold") && reader["IsSold"] != DBNull.Value)
            {
                p.IsSold = (bool)reader["IsSold"];
            }
            if (reader.HasColumn("IssueID") && reader["IssueID"] != DBNull.Value)
            {
                p.IssueID = (long)reader["IssueID"];
            }


            try
            {
                p.ObjDiagnosisTreatment = GetDiagTrmtFromReader(reader);

                if (p.PrescriptionIssueHistory == null)
                {
                    p.PrescriptionIssueHistory = new PrescriptionIssueHistory();
                }

                p.PrescriptionIssueHistory.PtRegDetailID = p.ObjDiagnosisTreatment.PtRegDetailID;

                if (reader.HasColumn("OrigCreatorDoctorNames") && reader["OrigCreatorDoctorNames"] != DBNull.Value)
                {
                    p.PrescriptionIssueHistory.OrigCreatorDoctorNames = (string)reader["OrigCreatorDoctorNames"];
                }

                if (reader.HasColumn("DeptLocID") && reader["DeptLocID"] != DBNull.Value)
                {
                    p.PrescriptionIssueHistory.DeptLocID = (long)reader["DeptLocID"];
                }

                if (reader.HasColumn("HisID") && reader["HisID"] != DBNull.Value)
                {
                    p.PrescriptionIssueHistory.HisID = (long)reader["HisID"];
                }

                //▼====== #039
                if (reader.HasColumn("IsOutCatConfirmed") && reader["IsOutCatConfirmed"] != DBNull.Value)
                {
                    p.PrescriptionIssueHistory.IsOutCatConfirmed = Convert.ToBoolean(reader["IsOutCatConfirmed"]);
                }
                //▲====== #039
            }
            catch
            {
                p.ObjDiagnosisTreatment = null;
            }


            if (reader.HasColumn("IssueID") && reader["IssueID"] != DBNull.Value)
            {
                p.IssueID = Convert.ToInt64(reader["IssueID"]);
            }

            if (reader.HasColumn("OriginalPrescriptID") && reader["OriginalPrescriptID"] != DBNull.Value)
            {
                p.OriginalPrescriptID = Convert.ToInt64(reader["OriginalPrescriptID"]);
            }

            if (reader.HasColumn("RefGenDrugCatID_1") && reader["RefGenDrugCatID_1"] != DBNull.Value)
            {
                p.RefGenDrugCatID_1 = Convert.ToInt64(reader["RefGenDrugCatID_1"]);
            }

            if (reader.HasColumn("CategoryName") && reader["CategoryName"] != DBNull.Value)
            {
                p.CategoryName = reader["CategoryName"].ToString();
            }

            //KMx: Toa nội trú, thêm Khoa tạo toa xuất viện (06/03/2015 16:49).
            if (reader.HasColumn("IssueDeptID") && reader["IssueDeptID"] != DBNull.Value)
            {
                p.Department = new RefDepartment();
                p.Department.DeptID = Convert.ToInt64(reader["IssueDeptID"]);

                if (reader.HasColumn("IssueDeptName") && reader["IssueDeptName"] != DBNull.Value)
                {
                    p.Department.DeptName = reader["IssueDeptName"].ToString();
                }
            }
            if (reader.HasColumn("IsEmptyPrescription") && reader["IsEmptyPrescription"] != DBNull.Value)
            {
                p.IsEmptyPrescription = Convert.ToBoolean(reader["IsEmptyPrescription"]);
            }
            /*▼====: #042*/
            if (reader.HasColumn("PrescriptionIssueCode") && reader["PrescriptionIssueCode"] != DBNull.Value)
            {
                p.PrescriptionIssueCode = reader["PrescriptionIssueCode"].ToString();
            }
            /*▲====: #042*/
            if (reader.HasColumn("MedNameUseOnlyForCheckConsultation") && reader["MedNameUseOnlyForCheckConsultation"] != DBNull.Value)
            {
                p.MedNameUseOnlyForCheckConsultation = reader["MedNameUseOnlyForCheckConsultation"].ToString();
            }
            if (reader.HasColumn("MedSecretaryID") && reader["MedSecretaryID"] != DBNull.Value)
            {
                p.SecretaryStaff = new Staff();
                p.SecretaryStaff.StaffID = (long)reader["MedSecretaryID"];
                if (reader.HasColumn("MedSecretaryName") && reader["MedSecretaryName"] != DBNull.Value)
                {
                    p.SecretaryStaff.FullName = reader["MedSecretaryName"].ToString();
                }
            }
            if (reader.HasColumn("Reason") && reader["Reason"] != DBNull.Value)
            {
                p.Reason = reader["Reason"].ToString();
            }
            if (reader.HasColumn("ConfirmedDTItemID") && reader["ConfirmedDTItemID"] != DBNull.Value)
            {
                p.ConfirmedDTItemID = (long)reader["ConfirmedDTItemID"];
            }
            return p;
        }
        protected virtual Prescription GetChoNhanThuocFromReader(IDataReader reader)
        {
            var p = new Prescription();
            //▼==== #123
            if (reader.HasColumn("PrescriptID") && reader["PrescriptID"] != DBNull.Value)
            {
                p.PrescriptID = (long)reader["PrescriptID"];
            }
            //▲==== #123
            //▼==== #134
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = (long)reader["PtRegistrationID"];
            }
            //▲==== #134
            if (reader.HasColumn("PrescriptionIssueCode") && reader["PrescriptionIssueCode"] != DBNull.Value)
            {
                p.PrescriptionIssueCode = reader["PrescriptionIssueCode"].ToString();
            }
            if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
            {
                p.ObjIssuerStaffID = new Staff();
                p.ObjIssuerStaffID.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
            {
                p.PatientCode = reader["PatientCode"].ToString();
            }
            if (reader.HasColumn("PatientName") && reader["PatientName"] != DBNull.Value)
            {
                p.PatientFullName = reader["PatientName"].ToString();
            }
            try
            {
                p.OutwardDrugInvoices = new ObservableCollection<OutwardDrugInvoice>();
                if (reader.HasColumn("outiID") && reader["outiID"] != DBNull.Value)
                {
                    p.OutwardDrugInvoices.Add(new OutwardDrugInvoice { outiID = (long)reader["outiID"] });
                    if (reader.HasColumn("OutInvID") && reader["OutInvID"] != DBNull.Value)
                    {
                        p.OutwardDrugInvoices[0].OutInvID = reader["OutInvID"].ToString();
                    }
                    if (reader.HasColumn("V_OutDrugInvStatus") && reader["V_OutDrugInvStatus"] != DBNull.Value)
                    {
                        p.OutwardDrugInvoices[0].V_OutDrugInvStatus = (long)reader["V_OutDrugInvStatus"];
                    }
                    if (reader.HasColumn("ColectDrugSeqNum") && reader["ColectDrugSeqNum"] != DBNull.Value)
                    {
                        p.OutwardDrugInvoices[0].ColectDrugSeqNum = (int)reader["ColectDrugSeqNum"];
                    }
                    try
                    {
                        if (reader.HasColumn("IsWaiting") && reader["IsWaiting"] != DBNull.Value)
                        {
                            p.OutwardDrugInvoices[0].IsWaiting = (bool)reader["IsWaiting"];
                        }
                    }
                    catch
                    {
                        p.OutwardDrugInvoices[0].IsWaiting = false;
                    }
                    try
                    {
                        if (reader.HasColumn("CountPrint") && reader["CountPrint"] != DBNull.Value)
                        {
                            p.OutwardDrugInvoices[0].CountPrint = (int)reader["CountPrint"];
                        }
                    }
                    catch
                    {
                        p.OutwardDrugInvoices[0].CountPrint = 0;
                    }
                }
            }
            catch
            {
                p.OutwardDrugInvoices = null;
            }
            //if (reader.HasColumn("StoreServiceSeqNum") && reader["StoreServiceSeqNum"] != DBNull.Value)
            //{
            //    p.PrescriptionIssueHistory = new PrescriptionIssueHistory();
            //    p.PrescriptionIssueHistory.StoreServiceSeqNum = Int16.Parse(reader["StoreServiceSeqNum"].ToString());
            //}
            return p;
        }

        //▼==== #134
        protected virtual Prescription GetChoSoanThuocFromReader(IDataReader reader)
        {
            var p = new Prescription();
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = (long)reader["PtRegistrationID"];
            }
            if (reader.HasColumn("PrescriptionIssueCode") && reader["PrescriptionIssueCode"] != DBNull.Value)
            {
                p.PrescriptionIssueCode = reader["PrescriptionIssueCode"].ToString();
            }
            if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
            {
                p.ObjIssuerStaffID = new Staff();
                p.ObjIssuerStaffID.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
            {
                p.PatientCode = reader["PatientCode"].ToString();
            }
            if (reader.HasColumn("PatientName") && reader["PatientName"] != DBNull.Value)
            {
                p.PatientFullName = reader["PatientName"].ToString();
            }
            if (reader.HasColumn("IsWaiting") && reader["IsWaiting"] != DBNull.Value)
            {
                p.IsWaiting = (bool)reader["IsWaiting"];
            }
            if (reader.HasColumn("CountPrint") && reader["CountPrint"] != DBNull.Value)
            {
                p.CountPrint = (int)reader["CountPrint"];
            }
            if (reader.HasColumn("PreCheck") && reader["PreCheck"] != DBNull.Value)
            {
                p.PreCheck = (bool)reader["PreCheck"];
            }
            if (reader.HasColumn("HIReportID") && reader["HIReportID"] != DBNull.Value)
            {
                p.HIReportID = (long)reader["HIReportID"];
            }
            if (reader.HasColumn("LocationName") && reader["LocationName"] != DBNull.Value)
            {
                p.Location = new Location();
                p.Location.LocationName = reader["LocationName"].ToString();
            }
            //▼==== #141
            if (reader.HasColumn("StoreServiceSeqNumStr") && reader["StoreServiceSeqNumStr"] != DBNull.Value)
            {
                p.StoreServiceSeqNumStr = reader["StoreServiceSeqNumStr"].ToString();
            }
            //▲==== #141
            if (reader.HasColumn("StoreServiceSeqNum") && reader["StoreServiceSeqNum"] != DBNull.Value)
            {
                p.PrescriptionIssueHistory = new PrescriptionIssueHistory();
                p.PrescriptionIssueHistory.StoreServiceSeqNum = Int16.Parse(reader["StoreServiceSeqNum"].ToString());
            }
            //▼==== #144
            if (reader.HasColumn("IsPri") && reader["IsPri"] != DBNull.Value)
            {
                p.IsPri = (bool)reader["IsPri"];
            }
            //▲==== #144
            return p;
        }
        protected virtual List<Prescription> GetChoSoanThuocListFromReader(IDataReader reader)
        {
            var lst = new List<Prescription>();
            while (reader.Read())
            {
                lst.Add(GetChoSoanThuocFromReader(reader));
            }
            return lst;
        }
        //▲==== #134

        protected virtual List<Prescription> GetPtPrescriptionCollectionFromReader(IDataReader reader)
        {
            var lst = new List<Prescription>();
            while (reader.Read())
            {
                lst.Add(GetPtPrescriptionFromReader(reader));
            }
            return lst;
        }
        protected virtual List<Prescription> GetChoNhanThuocListFromReader(IDataReader reader)
        {
            var lst = new List<Prescription>();
            while (reader.Read())
            {
                lst.Add(GetChoNhanThuocFromReader(reader));
            }
            return lst;
        }
        protected virtual Prescription GetPtPrescriptionItemFromReader(IDataReader reader)
        {
            var obj = new Prescription();
            var idx = 0;
            while (reader.Read() && idx < 1)
            {
                obj = GetPtPrescriptionFromReader(reader);
                idx++;
            }
            return obj;

        }
        //▼====== #031
        protected virtual string GetPtPrescriptionDetailFromReader(IDataReader reader)
        {
            string details = null;
            if (reader.HasColumn("PrescriptDetailsStr") && reader["PrescriptDetailsStr"] != DBNull.Value)
            {
                details = reader["PrescriptDetailsStr"].ToString();
            }
            return details;
        }
        protected virtual string GetPtPrescriptionDetailCollectionFromReader(IDataReader reader)
        {
            string lst = null;
            while (reader.Read())
            {
                lst = GetPtPrescriptionDetailFromReader(reader);
            }
            return lst;
        }
        //▲====== #031
        public virtual List<ChooseDose> InitChooseDose()
        {
            var chooseDoses = new List<ChooseDose>();
            chooseDoses.Clear();
            chooseDoses.Add(new ChooseDose { ID = 1, Name = "S" });
            chooseDoses.Add(new ChooseDose { ID = 2, Name = "Tr" });
            chooseDoses.Add(new ChooseDose { ID = 3, Name = "Ch" });
            chooseDoses.Add(new ChooseDose { ID = 4, Name = "T" });
            chooseDoses.Add(new ChooseDose { ID = 5, Name = "S-Tr" });
            chooseDoses.Add(new ChooseDose { ID = 6, Name = "S-Ch" });
            chooseDoses.Add(new ChooseDose { ID = 7, Name = "S-T" });
            chooseDoses.Add(new ChooseDose { ID = 8, Name = "Tr-Ch" });
            chooseDoses.Add(new ChooseDose { ID = 9, Name = "Tr-T" });
            chooseDoses.Add(new ChooseDose { ID = 10, Name = "Ch-T" });
            chooseDoses.Add(new ChooseDose { ID = 11, Name = "S-Tr-Ch" });
            chooseDoses.Add(new ChooseDose { ID = 12, Name = "S-Tr-T" });
            chooseDoses.Add(new ChooseDose { ID = 13, Name = "S-Ch-T" });
            chooseDoses.Add(new ChooseDose { ID = 14, Name = "Tr-Ch-T" });
            chooseDoses.Add(new ChooseDose { ID = 15, Name = "S-Tr-Ch-T" });



            return chooseDoses;
        }
        public virtual ChooseDose GetItemChooseDose(int id)
        {
            var chooseDoses = InitChooseDose();
            var item = chooseDoses.Where(x => x.ID == id);
            return item.FirstOrDefault();

        }
        //▼===== #066
        protected virtual PrescriptionDetail GetDrugDescriptionCollectionFromReader(IDataReader reader)
        {
            var DrugInfor = new PrescriptionDetail();
            while (reader.Read())
            {
                DrugInfor = GetDrugDescriptionFromReaderBase(reader);
            }
            return DrugInfor;
        }
        protected virtual PrescriptionDetail GetDrugDescriptionFromReaderBase(IDataReader reader)
        {
            var p = new PrescriptionDetail();
            if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
            {
                p.BrandName = reader["BrandName"].ToString();
            }
            p.RefGenericDrugDetail = new RefGenericDrugDetail();
            if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
            {
                p.RefGenericDrugDetail.GenericName = reader["GenericName"].ToString();
            }
            if (reader.HasColumn("SdlDescription") && reader["SdlDescription"] != DBNull.Value)
            {
                p.RefGenericDrugDetail.SdlDescription = reader["SdlDescription"].ToString();
            }
            if (reader.HasColumn("Indication") && reader["Indication"] != DBNull.Value)
            {
                p.RefGenericDrugDetail.Indication = reader["Indication"].ToString();
            }
            if (reader.HasColumn("Contraindication") && reader["Contraindication"] != DBNull.Value)
            {
                p.RefGenericDrugDetail.Contraindication = reader["Contraindication"].ToString();
            }
            if (reader.HasColumn("Interaction") && reader["Interaction"] != DBNull.Value)
            {
                p.RefGenericDrugDetail.Interaction = reader["Interaction"].ToString();
            }
            if (reader.HasColumn("HowToUse") && reader["HowToUse"] != DBNull.Value)
            {
                p.RefGenericDrugDetail.HowToUse = reader["HowToUse"].ToString();
            }
            if (reader.HasColumn("ReferencesDocument") && reader["ReferencesDocument"] != DBNull.Value)
            {
                p.RefGenericDrugDetail.ReferencesDocument = reader["ReferencesDocument"].ToString();
            }
            return p;
        }
        //▲===== #066
        protected virtual PrescriptionDetail GetPrescriptionDetailFromReaderBase(IDataReader reader)
        {
            var p = new PrescriptionDetail
            {
                isSave = true
            };
            if (reader.HasColumn("IssueID") && reader["IssueID"] != DBNull.Value)
            {
                p.IssueID = (long)reader["IssueID"];
            }
            if (reader.HasColumn("PrescriptDetailID") && reader["PrescriptDetailID"] != DBNull.Value)
            {
                p.PrescriptDetailID = (long)reader["PrescriptDetailID"];
            }
            if (reader.HasColumn("PrescriptID") && reader["PrescriptID"] != DBNull.Value)
            {
                p.PrescriptID = (long)reader["PrescriptID"];
            }
            if (reader.HasColumn("Qty") && reader["Qty"] != DBNull.Value)
            {
                p.Qty = (double)reader["Qty"];
                p.RealQty = (double)reader["Qty"];
            }
            p.SelectedDrugForPrescription = GetDrugForSellVisitorFromReader(reader);
            if (reader.HasColumn("Strength") && reader["Strength"] != DBNull.Value)
            {
                p.Strength = Convert.ToString(reader["Strength"]);
            }

            p.V_DrugType = (long)AllLookupValues.V_DrugType.THUOC_THONGTHUONG;
            if (reader.HasColumn("V_DrugType") && reader["V_DrugType"] != DBNull.Value)
            {
                p.V_DrugType = (long)reader["V_DrugType"] > 0 ? (long)reader["V_DrugType"]
                    : (long)AllLookupValues.V_DrugType.THUOC_THONGTHUONG;
            }
            p.DrugType = new Lookup { LookupID = p.V_DrugType };
            switch (p.V_DrugType)
            {
                case (long)AllLookupValues.V_DrugType.THUOC_THONGTHUONG:
                    p.DrugType.ObjectValue = "T"; break;
                //case (long)AllLookupValues.V_DrugType.THUOC_NGOAIDANH_MUC:
                //    p.isComboDrugType = false;
                //    p.DrugType.ObjectValue = "N"; break;
                case (long)AllLookupValues.V_DrugType.THUOC_UONGKHICAN:
                    p.DrugType.ObjectValue = "C"; break;
                case (long)AllLookupValues.V_DrugType.THUOC_UONGLICHTUAN:
                    p.DrugType.ObjectValue = "L"; break;
                default: p.DrugType.ObjectValue = "T"; break;
            }


            //if (reader.HasColumn("HasSchedules") && reader["HasSchedules"] != DBNull.Value)
            //{
            //    p.HasSchedules = Convert.ToBoolean(reader["HasSchedules"]);
            //}

            p.EntityState = EntityState.PERSITED;
            try
            {
                p.BeOfHIMedicineList = (bool)reader["BeOfHIMedicineList"];
            }
            catch
            {
                p.BeOfHIMedicineList = false;
            }
            if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
            {
                p.DrugID = reader["DrugID"] as long?;
                if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
                {
                    p.BrandName = reader["BrandName"].ToString();
                }
                if (reader.HasColumn("UnitName") && reader["UnitName"] != DBNull.Value)
                {
                    p.UnitName = reader["UnitName"].ToString();
                }
                p.RefGenericDrugDetail = new RefGenericDrugDetail { DrugID = (long)reader["DrugID"] };
                if (reader.HasColumn("V_CatDrugType") && reader["V_CatDrugType"] != DBNull.Value)
                {
                    p.RefGenericDrugDetail.V_CatDrugType = (long)reader["V_CatDrugType"];
                    //p.CatDrugType = new Lookup();
                    //p.CatDrugType.LookupID = Convert.ToInt64(reader["V_CatDrugType"]);
                    //if (reader.HasColumn("CatDrugType") && reader["CatDrugType"] != DBNull.Value)
                    //{
                    //    p.CatDrugType.ObjectValue = reader["CatDrugType"].ToString();
                    //}
                }
                if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
                {
                    p.RefGenericDrugDetail.GenericName = reader["GenericName"].ToString();
                }
            }
            if (reader.HasColumn("DrugInstructionNotes") && reader["DrugInstructionNotes"] != DBNull.Value)
            {
                p.DrugInstructionNotes = reader["DrugInstructionNotes"].ToString();
            }
            //if (p.isNotInCat
            //    && !p.SelectedDrugForPrescription.BrandName.Contains(" *"))
            //{
            //    p.SelectedDrugForPrescription.BrandName += " *";
            //}
            //if (p.V_DrugType == (long)AllLookupValues.V_DrugType.THUOC_UONGKHICAN
            //    && !p.DrugInstructionNotes.Contains("Uống khi cần"))
            //{
            //    p.DrugInstructionNotes += " - Uống khi cần";
            //}
            if (reader.HasColumn("ADose") && reader["ADose"] != DBNull.Value)
            {
                p.ADose = reader["ADose"] as float?;
            }
            if (reader.HasColumn("EDose") && reader["EDose"] != DBNull.Value)
            {
                p.EDose = reader["EDose"] as float?;
            }
            if (reader.HasColumn("MDose") && reader["MDose"] != DBNull.Value)
            {
                p.MDose = (float)reader["MDose"];
            }
            if (reader.HasColumn("NDose") && reader["NDose"] != DBNull.Value)
            {
                p.NDose = reader["NDose"] as float?;
            }
            if (reader.HasColumn("ADoseStr") && reader["ADoseStr"] != DBNull.Value)
            {
                p.ADoseStr = reader["ADoseStr"].ToString();// ChangeLieuDungToString(p.ADose.GetValueOrDefault());
            }
            if (reader.HasColumn("EDoseStr") && reader["EDoseStr"] != DBNull.Value)
            {
                p.EDoseStr = reader["EDoseStr"].ToString();// ChangeLieuDungToString(p.EDose.GetValueOrDefault());
            }
            if (reader.HasColumn("MDoseStr") && reader["MDoseStr"] != DBNull.Value)
            {
                p.MDoseStr = reader["MDoseStr"].ToString(); //ChangeLieuDungToString(p.MDose);
            }
            if (reader.HasColumn("NDoseStr") && reader["NDoseStr"] != DBNull.Value)
            {
                p.NDoseStr = reader["NDoseStr"].ToString();// ChangeLieuDungToString(p.NDose.GetValueOrDefault());
            }
            p.ChooseDose = new ChooseDose();
            if (p.MDose == p.ADose && p.NDose == p.EDose && p.EDose == p.MDose)
            {
                p.dosage = p.MDose;
                p.ChooseDose = this.GetItemChooseDose(1);
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.MDoseStr;
            }
            else if (p.MDose == p.ADose && p.ADose == p.EDose && p.NDose == 0)
            {
                p.dosage = p.MDose;
                p.ChooseDose = this.GetItemChooseDose(2);
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.MDoseStr;
            }
            else if (p.MDose == p.ADose && p.MDose == p.NDose && p.EDose == 0)
            {
                p.dosage = p.MDose;
                p.ChooseDose = this.GetItemChooseDose(3);
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.MDoseStr;
            }
            else if (p.MDose == p.EDose && p.MDose == p.NDose && p.ADose == 0)
            {
                p.dosage = p.MDose;
                p.ChooseDose = this.GetItemChooseDose(4);
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.MDoseStr;
            }
            else if (p.ADose == p.EDose && p.ADose == p.NDose && p.MDose == 0)
            {
                p.dosage = p.ADose.Value;
                p.ChooseDose = this.GetItemChooseDose(5);
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.MDoseStr;
            }
            else if (p.MDose == p.ADose && p.EDose == p.NDose && p.EDose == 0)
            {
                p.dosage = p.MDose;
                p.ChooseDose = this.GetItemChooseDose(6);
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.MDoseStr;
            }
            else if (p.MDose == p.EDose && p.ADose == p.NDose && p.NDose == 0)
            {
                p.dosage = p.MDose;
                p.ChooseDose = this.GetItemChooseDose(7);
                p.dosageStr = p.MDoseStr;
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
            }
            else if (p.MDose == p.NDose && p.ADose == p.EDose && p.ADose == 0)
            {
                p.dosage = p.MDose;
                p.ChooseDose = this.GetItemChooseDose(8);
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.MDoseStr;
            }
            else if (p.ADose == p.EDose && p.MDose == p.NDose && p.MDose == 0)
            {
                p.dosage = p.ADose.Value;
                p.ChooseDose = this.GetItemChooseDose(9);
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.ADoseStr;
            }
            else if (p.ADose == p.NDose && p.MDose == p.EDose && p.MDose == 0)
            {
                p.dosage = p.ADose.Value;
                p.ChooseDose = this.GetItemChooseDose(10);
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.ADoseStr;
            }
            else if (p.EDose == p.NDose && p.MDose == p.ADose && p.MDose == 0)
            {
                p.dosage = p.EDose.Value;
                p.ChooseDose = this.GetItemChooseDose(11);
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.EDoseStr;
            }
            else if (p.MDose != 0 && p.ADose == p.EDose && p.ADose == p.NDose && p.ADose == 0)
            {
                p.dosage = p.MDose;
                p.ChooseDose = this.GetItemChooseDose(12);
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.MDoseStr;
            }
            else if (p.ADose != 0 && p.MDose == p.EDose && p.MDose == p.NDose && p.MDose == 0)
            {
                p.dosage = p.ADose.Value;
                p.ChooseDose = this.GetItemChooseDose(13);
                p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.ADoseStr;
            }
            else if (p.EDose != 0 && p.MDose == p.ADose && p.MDose == p.NDose && p.MDose == 0)
            {
                p.dosage = p.EDose.Value;
                p.ChooseDose = this.GetItemChooseDose(14);
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.EDoseStr;
            }
            else if (p.NDose != 0 && p.MDose == p.ADose && p.MDose == p.EDose && p.MDose == 0)
            {
                p.dosage = p.NDose.Value;
                p.ChooseDose = this.GetItemChooseDose(15);
                //p.dosageStr = ChangeLieuDungToString(p.dosage);
                p.dosageStr = p.NDoseStr;
            }

            p.IsDrugNotInCat = false;

            if (reader.HasColumn("IsDrugNotInCat") && reader["IsDrugNotInCat"] != DBNull.Value)
            {
                p.IsDrugNotInCat = Convert.ToBoolean(reader["IsDrugNotInCat"]);
            }

            if (reader.HasColumn("Content") && reader["Content"] != DBNull.Value)
            {
                p.Content = reader["Content"].ToString();
            }

            if (reader.HasColumn("Administration") && reader["Administration"] != DBNull.Value)
            {
                p.Administration = reader["Administration"].ToString();
            }

            if (reader.HasColumn("DayExtended") && reader["DayExtended"] != DBNull.Value)
            {
                p.DayExtended = Convert.ToDouble(reader["DayExtended"]);
            }

            if (reader.HasColumn("DayRpts") && reader["DayRpts"] != DBNull.Value)
            {
                p.DayRpts = Convert.ToDouble(reader["DayRpts"]);
            }

            if (reader.HasColumn("Qty") && reader["Qty"] != DBNull.Value)
            {
                p.Qty = Convert.ToDouble(reader["Qty"]);
            }

            if (reader.HasColumn("QtyMaxAllowed") && reader["QtyMaxAllowed"] != DBNull.Value)
            {
                p.QtyMaxAllowed = Convert.ToDouble(reader["QtyMaxAllowed"]);
            }

            if (reader.HasColumn("QtyForDay") && reader["QtyForDay"] != DBNull.Value)
            {
                p.QtyForDay = reader["QtyForDay"] as float?;
            }

            if (reader.HasColumn("QtySchedMon") && reader["QtySchedMon"] != DBNull.Value)
            {
                p.QtySchedMon = reader["QtySchedMon"] as float?;
            }

            if (reader.HasColumn("QtySchedTue") && reader["QtySchedTue"] != DBNull.Value)
            {
                p.QtySchedTue = reader["QtySchedTue"] as float?;
            }

            if (reader.HasColumn("QtySchedWed") && reader["QtySchedWed"] != DBNull.Value)
            {
                p.QtySchedWed = reader["QtySchedWed"] as float?;
            }

            if (reader.HasColumn("QtySchedThu") && reader["QtySchedThu"] != DBNull.Value)
            {
                p.QtySchedThu = reader["QtySchedThu"] as float?;
            }

            if (reader.HasColumn("QtySchedFri") && reader["QtySchedFri"] != DBNull.Value)
            {
                p.QtySchedFri = reader["QtySchedFri"] as float?;
            }

            if (reader.HasColumn("QtySchedSat") && reader["QtySchedSat"] != DBNull.Value)
            {
                p.QtySchedSat = reader["QtySchedSat"] as float?;
            }

            if (reader.HasColumn("QtySchedSun") && reader["QtySchedSun"] != DBNull.Value)
            {
                p.QtySchedSun = reader["QtySchedSun"] as float?;
            }

            if (reader.HasColumn("SchedBeginDOW") && reader["SchedBeginDOW"] != DBNull.Value)
            {
                p.SchedBeginDOW = reader["SchedBeginDOW"] as byte?;
            }
            //▼====== #040
            if (reader.HasColumn("RefGenDrugCatID_1") && reader["RefGenDrugCatID_1"] != DBNull.Value)
            {
                p.RefGenDrugCatID_1 = reader["RefGenDrugCatID_1"] as long?;
            }
            if (reader.HasColumn("RefPharmacyDrugCatID") && reader["RefPharmacyDrugCatID"] != DBNull.Value)
            {
                p.RefGenericDrugDetail.RefPharmacyDrugCatID = reader["RefPharmacyDrugCatID"] as long?;
            }
            //▲====== #040
            p.RealDay = Convert.ToInt32(p.DayRpts + p.DayExtended);
            if (reader.HasColumn("IsContraIndicator") && reader["IsContraIndicator"] != DBNull.Value)
            {
                p.IsContraIndicator = Convert.ToBoolean(reader["IsContraIndicator"]);
            }
            if (reader.HasColumn("V_RouteOfAdministration") && reader["V_RouteOfAdministration"] != DBNull.Value)
            {
                p.V_RouteOfAdministration = Convert.ToInt64(reader["V_RouteOfAdministration"]);
            }
            if (reader.HasColumn("UsageDistance") && reader["UsageDistance"] != DBNull.Value)
            {
                p.UsageDistance = Convert.ToString(reader["UsageDistance"]);
            }
            return p;
        }

        //KMx: Chuyển hàm này vào trong ePrescriptionsProvider.cs. Để ở đây code chạy loằng ngoằng (23/10/2014 11:40).
        //protected virtual List<PrescriptionDetail> GetPrescriptionDetailCollectionFromReader(IDataReader reader)
        //{
        //    var lst = new List<PrescriptionDetail>();
        //    int index = 0;
        //    while (reader.Read())
        //    {
        //        var p = GetPrescriptionDetailFromReader(reader);
        //        p.Index = index;
        //        lst.Add(p);
        //        index++;
        //    }

        //    return lst;
        //}


        protected virtual FeeDrug GetPatientPaymentOldFromReader(IDataReader reader)
        {
            var p = new FeeDrug
            {
                TransactionID = (long)reader["TransactionID"],
                Amount = (long)reader["Amount"],
                PriceDifference = (long)reader["PriceDifference"],
                HealthInsuranceRebate = (long)reader["HealthInsuranceRebate"],
                PayAmount = (long)reader["PayAmount"]
            };
            return p;
        }

        protected virtual PrescriptionIssueHistory GetPtPrescriptIssueHisFromReader(IDataReader reader)
        {
            var p = new PrescriptionIssueHistory { PrescriptID = reader["PrescriptID"] as long? };

            if (reader.HasColumn("IssueID") && reader["IssueID"] != DBNull.Value)
            {
                p.IssueID = (long)reader["IssueID"];
            }

            if (reader.HasColumn("AppointmentID") && reader["AppointmentID"] != DBNull.Value)
            {
                p.AppointmentID = Convert.ToInt32(reader["AppointmentID"]);
            }

            //KMx: Lấy thêm 3 thuộc tính bên dưới để khi Cập nhật toa thuốc (khác ngày hiện tại) thì xin lại số thứ tự. Không lấy lại STT của toa cũ nếu khác ngày hiện tại.
            if (reader.HasColumn("IssuedDateTime") && reader["IssuedDateTime"] != DBNull.Value)
            {
                p.IssuedDateTime = (DateTime)reader["IssuedDateTime"];
            }

            if (reader.HasColumn("StoreServiceSeqNum") && reader["StoreServiceSeqNum"] != DBNull.Value)
            {
                p.StoreServiceSeqNum = Int16.Parse(reader["StoreServiceSeqNum"].ToString());
            }

            if (reader.HasColumn("StoreServiceSeqNumType") && reader["StoreServiceSeqNumType"] != DBNull.Value)
            {
                p.StoreServiceSeqNumType = (byte)reader["StoreServiceSeqNumType"];
            }
            //------Modified Date: 2014/02/20 09:29------//

            if (reader.HasColumn("OrigIssuedDateTime") && reader["OrigIssuedDateTime"] != DBNull.Value)
            {
                p.OrigIssuedDateTime = (DateTime)reader["OrigIssuedDateTime"];
            }

            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                p.PtRegDetailID = (long)reader["PtRegDetailID"];
            }

            //From primPrescription
            if (reader.HasColumn("OriginalPrescriptID") && reader["OriginalPrescriptID"] != DBNull.Value)
            {
                p.OriginalPrescriptID = reader["OriginalPrescriptID"] as long?;
            }
            if (reader.HasColumn("Creator") && reader["Creator"] != DBNull.Value)
            {
                p.Creator = reader["Creator"].ToString();
            }

            if (reader.HasColumn("HisID") && reader["HisID"] != DBNull.Value)
            {
                p.HisID = (long)reader["HisID"];
            }

            if (reader.HasColumn("Author") && reader["Author"] != DBNull.Value)
            {
                p.Author = reader["Author"].ToString();
            }
            if (reader.HasColumn("IssuedDateTime") && reader["IssuedDateTime"] != DBNull.Value)
            {
                p.IssuedDateTime = reader["IssuedDateTime"] as DateTime?;
            }

            if (reader.HasColumn("OrigCreatorDoctorNames") && reader["OrigCreatorDoctorNames"] != DBNull.Value)
            {
                p.OrigCreatorDoctorNames = reader["OrigCreatorDoctorNames"].ToString();
            }


            if (reader.HasColumn("IssuerStaffID") && reader["IssuerStaffID"] != DBNull.Value)
            {
                p.IssuerStaffID = Convert.ToInt64(reader["IssuerStaffID"]);
                p.ObjIssuerStaffID = new Staff { StaffID = Convert.ToInt64(reader["IssuerStaffID"]) };
                if (reader.HasColumn("IssuerStaffIDName"))
                {
                    p.ObjIssuerStaffID.FullName = reader["IssuerStaffIDName"] == null ? "" : reader["IssuerStaffIDName"].ToString();
                    if (string.IsNullOrEmpty(p.OrigCreatorDoctorNames))
                    {
                        p.OrigCreatorDoctorNames = p.ObjIssuerStaffID.FullName;
                    }
                }
                if (reader.HasColumn("IssuerStaffIDPhoneNumber") && reader["IssuerStaffIDPhoneNumber"] != DBNull.Value)
                {
                    p.ObjIssuerStaffID.SPhoneNumber = reader["IssuerStaffIDPhoneNumber"] == null ? "" : reader["IssuerStaffIDPhoneNumber"].ToString();
                }
            }

            if (reader.HasColumn("ReIssuerStaffID") && reader["ReIssuerStaffID"] != DBNull.Value)
            {
                p.ObjReIssuerStaffID = new Staff { StaffID = Convert.ToInt64(reader["ReIssuerStaffID"]) };
                if (reader.HasColumn("ReIssuerStaffIDName") && reader["ReIssuerStaffIDName"] != DBNull.Value)
                {
                    p.ObjReIssuerStaffID.FullName = reader["ReIssuerStaffIDName"] == null ? "" : reader["ReIssuerStaffIDName"].ToString();
                }
                if (reader.HasColumn("ReIssuerStaffIDPhoneNumber") && reader["ReIssuerStaffIDPhoneNumber"] != DBNull.Value)
                {
                    p.ObjReIssuerStaffID.SPhoneNumber = reader["ReIssuerStaffIDPhoneNumber"] == null ? "" : reader["ReIssuerStaffIDPhoneNumber"].ToString();
                }
            }

            if (reader.HasColumn("PrescriptionNotes") && reader["PrescriptionNotes"] != DBNull.Value)
            {
                p.PrescriptionNotes = reader["PrescriptionNotes"].ToString();
            }
            if (reader.HasColumn("TimesNumberIsPrinted") && reader["TimesNumberIsPrinted"] != DBNull.Value)
            {
                p.TimesNumberIsPrinted = (byte)reader["TimesNumberIsPrinted"];
            }
            if (p.LookupPrescriptionIssuedCase == null)
                p.LookupPrescriptionIssuedCase = new Lookup();
            if (reader.HasColumn("PrescriptionIssuedCase") && reader["PrescriptionIssuedCase"] != DBNull.Value)
            {
                p.LookupPrescriptionIssuedCase.ObjectValue = reader["PrescriptionIssuedCase"].ToString();
            }
            p.Prescription = GetPtPrescriptionFromReader(reader);
            return p;
        }
        protected virtual List<PrescriptionIssueHistory> GetPtPrescriptIssueHisCollectionFromReader(IDataReader reader)
        {
            var lst = new List<PrescriptionIssueHistory>();
            while (reader.Read())
            {
                lst.Add(GetPtPrescriptIssueHisFromReader(reader));
            }
            return lst;
        }

        protected virtual PCLExamGroup GetExamGroupFromReader(IDataReader reader)
        {
            var p = new PCLExamGroup
            {
                PCLExamGroupID = (long)reader["PCLExamGroupID"],
                PCLExamGroupName = reader["PCLExamGroupName"].ToString(),
                DeptID = reader["DeptID"] as long?
            };

            return p;
        }
        protected virtual List<PCLExamGroup> GetExamGroupCollectionsFromReader(IDataReader reader)
        {
            var p = new List<PCLExamGroup>();
            while (reader.Read())
            {
                p.Add(GetExamGroupFromReader(reader));
            }
            return p;
        }

        protected virtual PCLExamType GetPtPCLLabRefExamTypesByReqIDFromReader(IDataReader reader)
        {
            var p = new PCLExamType
            {
                PCLExamTypeID = (long)reader["PCLExamTypeID"],
                PCLExamTypeName = reader["PCLExamTypeName"].ToString()
            };

            if (reader.HasColumn("V_NewPriceType") && reader["V_NewPriceType"] != DBNull.Value)
            {
                p.V_NewPriceType = Convert.ToInt32(reader["V_NewPriceType"]);
            }
            return p;
        }
        protected virtual List<PCLExamType> GetPtPCLLabRefExamTypesByReqIDColectionsFromReader(IDataReader reader)
        {
            var p = new List<PCLExamType>();
            while (reader.Read())
            {
                p.Add(GetPtPCLLabRefExamTypesByReqIDFromReader(reader));
            }
            return p;

        }

        protected virtual PCLExamTypeMedServiceDefItem GetPCLExamTypeMedServiceDefItemFromReader(IDataReader reader)
        {
            var p = new PCLExamTypeMedServiceDefItem
            {
                PCLExamTypeMedServDefID = Convert.ToInt64(reader["PCLExamTypeMedServDefID"]),
                PCLExamTypeID = reader["PCLExamTypeID"] as Int64?,
                MedServiceID = reader["MedServiceID"] as Int64?,
                RecCreatedDate = reader["RecCreatedDate"] as DateTime?,
                ActiveFromDate = reader["ActiveFromDate"] as DateTime?,
                ActiveToDate = reader["ActiveToDate"] as DateTime?,
                IsActive = reader["IsActive"] as bool?,
                ObjPCLExamType = new PCLExamType()
            };

            if (reader["PCLExamTypeID"] != DBNull.Value)
            {
                p.ObjPCLExamType.PCLExamTypeID = Convert.ToInt64(reader["PCLExamTypeID"]);
                p.ObjPCLExamType.IDCode = reader["IDCode"] as Int64?;
                p.ObjPCLExamType.PCLExamTypeName = reader["PCLExamTypeName"] == null ? "" : reader["PCLExamTypeName"].ToString();
                p.ObjPCLExamType.PCLExamTypeDescription = reader["PCLExamTypeDescription"] == null ? "" : reader["PCLExamTypeDescription"].ToString();
                p.ObjPCLExamType.PCLExamTypeCode = reader["PCLExamTypeCode"] == null ? "" : reader["PCLExamTypeCode"].ToString();
                p.ObjPCLExamType.IsActive = reader["IsActive"] as bool?;
                p.ObjPCLExamType.HIApproved = reader["HIApproved"] as bool?;
                p.ObjPCLExamType.IsExternalExam = reader["IsExternalExam"] as bool?;

            }
            return p;
        }
        protected virtual List<PCLExamTypeMedServiceDefItem> GetPCLExamTypeMedServiceDefItemColectionsFromReader(IDataReader reader)
        {
            var p = new List<PCLExamTypeMedServiceDefItem>();
            while (reader.Read())
            {
                p.Add(GetPCLExamTypeMedServiceDefItemFromReader(reader));
            }
            return p;
        }

        protected virtual PCLExamTypePrice GetPCLExamTypePriceFromReader(IDataReader reader)
        {
            var p = new PCLExamTypePrice();

            if (reader.HasColumn("PCLExamTypePriceID"))
            {
                p.PCLExamTypePriceID = 0;
                try
                {
                    p.PCLExamTypePriceID = (long)reader["PCLExamTypePriceID"];
                }
                catch
                {

                }
            }

            if (reader.HasColumn("PCLExamTypeID"))
            {
                p.PCLExamTypeID = Convert.ToInt64(reader["PCLExamTypeID"]);
            }

            if (reader.HasColumn("PCLExamTypePriceListID") && reader["PCLExamTypePriceListID"] != DBNull.Value)
            {
                p.PCLExamTypePriceListID = reader["PCLExamTypePriceListID"] as long?;
            }

            if (reader.HasColumn("PCLExamTypeCode"))
            {
                p.PCLExamTypeCode = reader["PCLExamTypeCode"] == null ? "" : reader["PCLExamTypeCode"].ToString().Trim();
            }

            if (reader.HasColumn("PCLExamTypeName"))
            {
                p.PCLExamTypeName = reader["PCLExamTypeName"] == null ? "" : reader["PCLExamTypeName"].ToString().Trim();
            }

            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                try
                {
                    //p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
                    p.RecCreatedDate = reader.GetDateTime(reader.GetOrdinal("RecCreatedDate"));
                }
                catch
                { }
            }
            if (reader.HasColumn("StaffID"))
            {
                try
                {
                    p.StaffID = reader["StaffID"] as long?;
                    p.ObjStaffID = new Staff { StaffID = p.StaffID.Value };

                    if (reader.HasColumn("StaffIDName"))
                    {
                        p.ObjStaffID.FullName = reader["StaffIDName"] == null ? "" : reader["StaffIDName"].ToString().Trim();
                    }
                }
                catch
                { }
            }

            if (reader.HasColumn("NormalPrice"))
            {
                p.NormalPrice = 0;
                try
                {
                    p.NormalPrice = (decimal)reader["NormalPrice"];
                }
                catch
                {
                }
            }

            if (reader.HasColumn("PriceForHIPatient"))
            {
                p.PriceForHIPatient = 0;
                try
                {
                    p.PriceForHIPatient = reader["PriceForHIPatient"] as decimal?;
                }
                catch
                { }
            }

            if (reader.HasColumn("HIAllowedPrice"))
            {
                p.HIAllowedPrice = 0;
                try
                {
                    p.HIAllowedPrice = reader["HIAllowedPrice"] as decimal?;
                }
                catch
                {
                }
            }

            if (reader.HasColumn("EffectiveDate"))
            {
                try
                {
                    p.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"]);
                }
                catch
                {
                }
            }

            //Ext Prop cho Lưới Tạo Bảng Giá Hàng Loạt
            p.NormalPrice_Old = p.NormalPrice;
            p.PriceForHIPatient_Old = p.PriceForHIPatient;
            p.HIAllowedPrice_Old = p.HIAllowedPrice;
            //Ext Prop cho Lưới Tạo Bảng Giá Hàng Loạt


            return p;
        }
        protected virtual List<PCLExamTypePrice> GetPCLExamTypePriceColectionsFromReader(IDataReader reader)
        {
            var p = new List<PCLExamTypePrice>();
            while (reader.Read())
            {
                p.Add(GetPCLExamTypePriceFromReader(reader));
            }
            return p;
        }

        //Show list vua chon tu UI Left dataList 
        protected virtual PCLExamTypeMedServiceDefItem GetPCLExamTypeMedServiceDefItemShowChooseFromReader(IDataReader reader)
        {
            var p = new PCLExamTypeMedServiceDefItem { ObjPCLExamType = new PCLExamType() };
            if (reader["PCLExamTypeID"] != DBNull.Value)
            {
                p.ObjPCLExamType.PCLExamTypeID = Convert.ToInt64(reader["PCLExamTypeID"]);
                p.ObjPCLExamType.IDCode = reader["IDCode"] as Int64?;
                p.ObjPCLExamType.PCLExamTypeName = reader["PCLExamTypeName"] == null ? "" : reader["PCLExamTypeName"].ToString();
                p.ObjPCLExamType.PCLExamTypeDescription = reader["PCLExamTypeDescription"] == null ? "" : reader["PCLExamTypeDescription"].ToString();
                p.ObjPCLExamType.PCLExamTypeCode = reader["PCLExamTypeCode"] == null ? "" : reader["PCLExamTypeCode"].ToString();
                p.ObjPCLExamType.IsActive = reader["IsActive"] as bool?;
                p.ObjPCLExamType.HIApproved = reader["HIApproved"] as bool?;


            }
            return p;
        }
        protected virtual List<PCLExamTypeMedServiceDefItem> GetPCLExamTypeMedServiceDefItemShowChooseColectionsFromReader(IDataReader reader)
        {
            var p = new List<PCLExamTypeMedServiceDefItem>();
            while (reader.Read())
            {
                p.Add(GetPCLExamTypeMedServiceDefItemShowChooseFromReader(reader));
            }
            return p;
        }
        //Show list vua chon tu UI Left dataList 

        protected virtual List<PatientPCLImagingResult> GetPatientPCLImagingResultColectionsFromReader(IDataReader reader)
        {
            var p = new List<PatientPCLImagingResult>();
            while (reader.Read())
            {
                p.Add(GetPatientPCLImagingResultFromReader(reader));
            }
            return p;
        }

        public virtual PatientPCLImagingResult GetPatientPCLImagingResultFromReader(IDataReader reader)
        {
            var p = new PatientPCLImagingResult();
            p.TestingAgency = new TestingAgency();
            if (reader.HasColumn("AgencyID") && reader["AgencyID"] != DBNull.Value)
            {
                p.AgencyID = reader["AgencyID"] as long?;
                p.TestingAgency.AgencyID = (long)reader["AgencyID"];
            }

            if (reader.HasColumn("AgencyName") && reader["AgencyName"] != DBNull.Value)
            {
                p.TestingAgency.AgencyName = reader["AgencyName"].ToString();
            }

            if (reader.HasColumn("DiagnoseOnPCLExam") && reader["DiagnoseOnPCLExam"] != DBNull.Value)
            {
                p.DiagnoseOnPCLExam = reader["DiagnoseOnPCLExam"].ToString();
            }
            //p.Doctor
            if (reader.HasColumn("IsExternalExam") && reader["IsExternalExam"] != DBNull.Value)
            {
                p.IsExternalExam = reader["IsExternalExam"] as bool?;
            }
            // p.PatientFullName
            //▼====: #180
            p.PatientPCLRequest = new PatientPCLRequest();
            if (reader.HasColumn("PatientPCLReqID") && reader["PatientPCLReqID"] != DBNull.Value)
            {
                p.PatientPCLReqID = reader["PatientPCLReqID"] as long?;               
                p.PatientPCLRequest.PatientPCLReqID = Convert.ToInt64(reader["PatientPCLReqID"]);
            }
            if (reader.HasColumn("HL7FillerOrderNumber") && reader["HL7FillerOrderNumber"] != DBNull.Value)
            {
                p.PatientPCLRequest.HL7FillerOrderNumber = reader["HL7FillerOrderNumber"].ToString();
            }
            //▲====: #180
            // p.PatientPCLRequest
            //p.PCLExamType
            p.PCLExamType = new PCLExamType();
            if (reader.HasColumn("PCLExamTypeID") && reader["PCLExamTypeID"] != DBNull.Value)
            {
                p.PCLExamTypeID = (long)reader["PCLExamTypeID"];
                p.PCLExamType.PCLExamTypeID = (long)reader["PCLExamTypeID"];
            }

            if (reader.HasColumn("PCLExamTypeName") && reader["PCLExamTypeName"] != DBNull.Value)
            {
                p.PCLExamType.PCLExamTypeName = reader["PCLExamTypeName"].ToString();
            }
            //▼====: #180
            if (reader.HasColumn("PCLExamTypeCode") && reader["PCLExamTypeCode"] != DBNull.Value)
            {
                p.PCLExamType.PCLExamTypeCode = reader["PCLExamTypeCode"].ToString();
            }
            if (reader.HasColumn("PCLExamTypeSubCategoryID") && reader["PCLExamTypeSubCategoryID"] != DBNull.Value)
            {
                p.PCLExamType.ObjPCLExamTypeSubCategoryID = new PCLExamTypeSubCategory();
                p.PCLExamType.ObjPCLExamTypeSubCategoryID.PCLExamTypeSubCategoryID = Convert.ToInt64(reader["PCLExamTypeSubCategoryID"]);
                if (reader.HasColumn("IsSendToPAC") && reader["IsSendToPAC"] != DBNull.Value)
                {
                    p.PCLExamType.ObjPCLExamTypeSubCategoryID.IsSendToPAC = Convert.ToBoolean(reader["IsSendToPAC"].ToString());
                }
                if (reader.HasColumn("SubCategoryCodeToPAC") && reader["SubCategoryCodeToPAC"] != DBNull.Value)
                {
                    p.PCLExamType.ObjPCLExamTypeSubCategoryID.SubCategoryCodeToPAC = reader["SubCategoryCodeToPAC"].ToString();
                }
            }
            //▲====: #180

            //p.PCLRequestForm
            if (reader.HasColumn("PCLExtRefID") && reader["PCLExtRefID"] != DBNull.Value)
            {
                p.PCLExtRefID = reader["PCLExtRefID"] as long?;
            }
            //p.PCLResultFileStorageDetails
            p.PCLExamDate = (DateTime)reader["PCLExamDate"];
            p.PCLExamForOutPatient = reader["PCLExamForOutPatient"] as bool?;
            if (reader.HasColumn("PCLImgResultID") && reader["PCLImgResultID"] != DBNull.Value)
            {
                p.PCLImgResultID = (long)reader["PCLImgResultID"];
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = reader["StaffID"] as long?;
                p.Staff = new Staff { StaffID = p.StaffID.GetValueOrDefault(0) };
                if (reader.HasColumn("StaffFullName") && reader["StaffFullName"] != DBNull.Value)
                {
                    p.Staff.FullName = Convert.ToString(reader["StaffFullName"]);
                }
            }
            if (reader.HasColumn("ResultExplanation") && reader["ResultExplanation"] != DBNull.Value)
            {
                p.ResultExplanation = reader["ResultExplanation"].ToString();
            }
            /*==== #005 ====*/
            if (reader.HasColumn("Height") && reader["Height"] != DBNull.Value)
            {
                p.Height = Convert.ToDouble(reader["Height"]);
            }
            if (reader.HasColumn("Weight") && reader["Weight"] != DBNull.Value)
            {
                p.Weight = Convert.ToDouble(reader["Weight"]);
            }
            if (reader.HasColumn("BSA") && reader["BSA"] != DBNull.Value)
            {
                p.BSA = Convert.ToDouble(reader["BSA"]);
            }
            if (reader.HasColumn("ICD10List") && reader["ICD10List"] != DBNull.Value)
            {
                p.ICD10List = reader["ICD10List"].ToString();
            }
            /*==== #005 ====*/
            /*▼====: #023*/
            if (reader.HasColumn("HIRepResourceCode") && reader["HIRepResourceCode"] != DBNull.Value)
            {
                p.HIRepResourceCode = reader["HIRepResourceCode"].ToString();
            }
            /*▲====: #023*/
            if (reader.HasColumn("TemplateResultString") && reader["TemplateResultString"] != DBNull.Value)
            {
                p.TemplateResultString = reader["TemplateResultString"].ToString();
            }
            if (reader.HasColumn("NumberOfFilmsReceived") && reader["NumberOfFilmsReceived"] != DBNull.Value)
            {
                p.NumberOfFilmsReceived = Convert.ToInt16(reader["NumberOfFilmsReceived"]);
            }
            if (reader.HasColumn("PtRegistrationCode") && reader["PtRegistrationCode"] != DBNull.Value)
            {
                p.PtRegistrationCode = Convert.ToString(reader["PtRegistrationCode"]);
            }
            //▼====== #046
            if (reader.HasColumn("PerformedDate") && reader["PerformedDate"] != DBNull.Value)
            {
                p.PerformedDate = Convert.ToDateTime(reader["PerformedDate"]);
            }

            if (reader.HasColumn("PerformStaffID") && reader["PerformStaffID"] != DBNull.Value)
            {
                p.PerformStaffID = Convert.ToInt32(reader["PerformStaffID"]);
            }

            //▼====: #180
            if (reader.HasColumn("PerformStaffCode") && reader["PerformStaffCode"] != DBNull.Value)
            {
                p.PerformStaffCode = reader["PerformStaffCode"].ToString();
            }
            if (reader.HasColumn("PerformStaffFullName") && reader["PerformStaffFullName"] != DBNull.Value)
            {
                p.PerformStaffFullName = reader["PerformStaffFullName"].ToString();
            }
            if (reader.HasColumn("PerformStaffPrefix") && reader["PerformStaffPrefix"] != DBNull.Value)
            {
                p.PerformStaffPrefix = reader["PerformStaffPrefix"].ToString();
            }
            if (reader.HasColumn("ResultStaffID") && reader["ResultStaffID"] != DBNull.Value)
            {
                p.ResultStaffID = Convert.ToInt32(reader["ResultStaffID"]);
            }
            if (reader.HasColumn("ResultStaffPrefix") && reader["ResultStaffPrefix"] != DBNull.Value)
            {
                p.ResultStaffPrefix = reader["ResultStaffPrefix"].ToString();
            }
            if (reader.HasColumn("ResultStaffFullName") && reader["ResultStaffFullName"] != DBNull.Value)
            {
                p.ResultStaffFullName = reader["ResultStaffFullName"].ToString();
            }
            if (reader.HasColumn("ResultStaffCode") && reader["ResultStaffCode"] != DBNull.Value)
            {
                p.ResultStaffCode = reader["ResultStaffCode"].ToString();
            }
            //▲====== #046
            if (reader.HasColumn("Suggest") && reader["Suggest"] != DBNull.Value)
            {
                p.Suggest = reader["Suggest"].ToString();
            }
            //▲====: #180
            if (reader.HasColumn("TemplateResultDescription") && reader["TemplateResultDescription"] != DBNull.Value)
            {
                p.TemplateResultDescription = reader["TemplateResultDescription"].ToString();
            }
            if (reader.HasColumn("TemplateResult") && reader["TemplateResult"] != DBNull.Value)
            {
                p.TemplateResult = reader["TemplateResult"].ToString();
            }
            //▼==== #177
            if (reader.HasColumn("SpecimenID") && reader["SpecimenID"] != DBNull.Value)
            {
                p.SpecimenID = Convert.ToInt64(reader["SpecimenID"]);
            }
            if (reader.HasColumn("SampleQuality") && reader["SampleQuality"] != DBNull.Value)
            {
                p.SampleQuality = Convert.ToString(reader["SampleQuality"]);
            }
            p.PatientPCLRequest = new PatientPCLRequest();
            if (reader.HasColumn("ReceptionTime") && reader["ReceptionTime"] != DBNull.Value)
            {
                p.PatientPCLRequest.ReceptionTime = Convert.ToDateTime(reader["ReceptionTime"]);
            }
            //▲==== #177
            //▼====: #187
            if (reader.HasColumn("HL7FillerOrderNumber") && reader["HL7FillerOrderNumber"] != DBNull.Value)
            {
                p.PatientPCLRequest.HL7FillerOrderNumber = reader["HL7FillerOrderNumber"].ToString();
            }
            //▲====: #187
            return p;
        }

        public virtual PatientPCLRequest GetPatientPCLRequestFromReader(IDataReader reader)
        {
            var p = new PatientPCLRequest();

            /*▼====: #021*/
            if (reader.HasColumn("V_ExamRegStatus") && reader["V_ExamRegStatus"] != DBNull.Value)
            {
                p.V_ExamRegStatus = (long)(reader["V_ExamRegStatus"]);
            }
            /*▲====: #021*/
            // 20190122 TNHX: Get V_PCLMainCategory
            if (reader.HasColumn("V_PCLMainCategory") && reader["V_PCLMainCategory"] != DBNull.Value)
            {
                p.V_PCLMainCategory = (long)(reader["V_PCLMainCategory"]);
            }
            if (reader.HasColumn("PCLRequestNumID") && reader["PCLRequestNumID"] != DBNull.Value)
            {
                p.PCLRequestNumID = reader["PCLRequestNumID"].ToString();
            }

            if (reader.HasColumn("Diagnosis") && reader["Diagnosis"] != DBNull.Value)
            {
                p.Diagnosis = reader["Diagnosis"].ToString();
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = reader["StaffID"] as long?;
            }

            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.DoctorStaffID = reader["DoctorStaffID"] as long?;
            }

            if (reader.HasColumn("ICD10List") && reader["ICD10List"] != DBNull.Value)
            {
                p.ICD10List = reader["ICD10List"].ToString();
            }

            if (reader.HasColumn("InPatientBillingInvID") && reader["InPatientBillingInvID"] != DBNull.Value)
            {
                p.InPatientBillingInvID = reader["InPatientBillingInvID"] as long?;
            }

            if (reader.HasColumn("RegStaffFullName") && reader["RegStaffFullName"] != DBNull.Value)
            {
                p.PCLStaffFullName = reader["RegStaffFullName"].ToString();
            }

            if (reader.HasColumn("DoctorComments") && reader["DoctorComments"] != DBNull.Value)
            {
                p.DoctorComments = reader["DoctorComments"].ToString();
            }

            if (reader.HasColumn("IsExternalExam") && reader["IsExternalExam"] != DBNull.Value)
            {
                p.IsExternalExam = reader["IsExternalExam"] as bool? ?? false;
            }

            if (reader.HasColumn("IsImported") && reader["IsImported"] != DBNull.Value)
            {
                p.IsImported = reader["IsImported"] as bool? ?? false;
            }
            if (reader.HasColumn("IsCaseOfEmergency") && reader["IsCaseOfEmergency"] != DBNull.Value)
            {
                p.IsCaseOfEmergency = reader["IsCaseOfEmergency"] as bool?;
            }

            if (p.IsCaseOfEmergency == null)
                p.IsCaseOfEmergency = false;
            if (reader.HasColumn("PatientPCLReqID") && reader["PatientPCLReqID"] != DBNull.Value)
            {
                p.PatientPCLReqID = (long)reader["PatientPCLReqID"];
            }
            p.PatientServiceRecord = new PatientServiceRecord();
            if (reader.HasColumn("ExamDate") && reader["ExamDate"] != DBNull.Value)
            {
                p.PatientServiceRecord.ExamDate = (DateTime)reader["ExamDate"];
            }

            if (reader.HasColumn("PatientRecID") && reader["PatientRecID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PatientRecID = reader["PatientRecID"] as long?;
            }

            if (reader.HasColumn("PatientMedicalFileID") && reader["PatientMedicalFileID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PatientMedicalFileID = reader["PatientMedicalFileID"] as long?;
            }

            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PtRegistrationID = reader["PtRegistrationID"] as long?;
            }
            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PtRegDetailID = reader["PtRegDetailID"] as long?;
            }
            if (reader.HasColumn("PtRegistrationCode") && reader["PtRegistrationCode"] != DBNull.Value)
            {
                p.PatientServiceRecord.PtRegistrationCode = reader["PtRegistrationCode"].ToString();
            }
            if (reader.HasColumn("ServiceRecID") && reader["ServiceRecID"] != DBNull.Value)
            {
                p.PatientServiceRecord.ServiceRecID = (long)reader["ServiceRecID"];

                p.ServiceRecID = (long)reader["ServiceRecID"];
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.PatientServiceRecord.StaffID = reader["StaffID"] as long?;
            }
            try
            {
                if (reader.HasColumn("RequestedDoctorName") && reader["RequestedDoctorName"] != DBNull.Value)
                {
                    p.PatientServiceRecord.Staff = new Staff { FullName = reader["RequestedDoctorName"].ToString() };
                }

            }
            catch
            {
            }
            try
            {
                if (reader.HasColumn("V_Behaving") && reader["V_Behaving"] != DBNull.Value)
                {
                    p.PatientServiceRecord.V_Behaving = reader["V_Behaving"] as long?;
                }
                if (reader.HasColumn("V_ProcessingType") && reader["V_ProcessingType"] != DBNull.Value)
                {
                    p.PatientServiceRecord.V_ProcessingType = reader["V_ProcessingType"] as long?;
                }


            }
            catch
            { }

            try
            {
                if (reader.HasColumn("ExamDate") && reader["ExamDate"] != DBNull.Value)
                {
                    p.ExamDate = reader["ExamDate"] as DateTime?;
                }

            }
            catch
            {
                p.ExamDate = null;
            }
            if (reader.HasColumn("ReqFromDeptID") && reader["ReqFromDeptID"] != DBNull.Value)
            {
                p.RequestedDepartment = new RefDepartment { DeptID = Convert.ToInt64(reader["ReqFromDeptID"]) };
                if (reader.HasColumn("ReqFromDeptName") && reader["ReqFromDeptName"] != DBNull.Value)
                {
                    p.RequestedDepartment.DeptName = reader["ReqFromDeptName"].ToString();
                }
                //▼====: #087
                p.ReqFromDeptID = Convert.ToInt64(reader["ReqFromDeptID"]);
                //▲====: #087
            }
            p.RecordState = RecordState.UNCHANGED;

            if (reader.HasColumn("PatientPCLRequest_MarkedAsDeleted") && reader["PatientPCLRequest_MarkedAsDeleted"] != DBNull.Value) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
            {
                if (reader["PatientPCLRequest_MarkedAsDeleted"] != DBNull.Value)
                {
                    p.MarkedAsDeleted = (bool)reader["PatientPCLRequest_MarkedAsDeleted"];
                }
                else
                {
                    p.MarkedAsDeleted = false;
                }
            }
            else if (reader.HasColumn("MarkedAsDeleted") && reader["MarkedAsDeleted"] != DBNull.Value) //Roi moi tinh toi field trong bang cua no.
            {
                if (reader["MarkedAsDeleted"] != DBNull.Value)
                {
                    p.MarkedAsDeleted = (bool)reader["MarkedAsDeleted"];
                }
                else
                {
                    p.MarkedAsDeleted = false;
                }
            }

            if (p.MarkedAsDeleted)
            {
                p.RecordState = RecordState.DELETED;
                p.EntityState = EntityState.DELETED_PERSITED;
            }
            else
            {
                p.EntityState = EntityState.PERSITED;
            }

            if (reader.HasColumn("V_PCLRequestType") && reader["V_PCLRequestType"] != DBNull.Value)
            {
                if (Enum.IsDefined(typeof(AllLookupValues.V_PCLRequestType), (long)reader["V_PCLRequestType"]))
                {
                    p.V_PCLRequestType = (AllLookupValues.V_PCLRequestType)(long)reader["V_PCLRequestType"];
                }
                else
                {
                    p.V_PCLRequestType = AllLookupValues.V_PCLRequestType.UNKNOWN;
                }
            }
            else
            {
                p.V_PCLRequestType = AllLookupValues.V_PCLRequestType.UNKNOWN;
            }

            if (reader.HasColumn("V_PCLRequestStatus") && reader["V_PCLRequestStatus"] != DBNull.Value)
            {
                if (Enum.IsDefined(typeof(AllLookupValues.V_PCLRequestStatus), (long)reader["V_PCLRequestStatus"]))
                {
                    p.V_PCLRequestStatus = (AllLookupValues.V_PCLRequestStatus)(long)reader["V_PCLRequestStatus"];
                }
                else
                {
                    //throw new Exception(eHCMSResources.Z1778_G1_OutOfRange);
                }
            }
            else
            {
                p.V_PCLRequestStatus = AllLookupValues.V_PCLRequestStatus.OPEN;
            }

            if (reader.HasColumn("PatientPCLRequest_PaidTime") && reader["PatientPCLRequest_PaidTime"] != DBNull.Value) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
            {
                p.PaidTime = reader["PatientPCLRequest_PaidTime"] as DateTime?;
            }
            else if (reader.HasColumn("PaidTime") && reader["PaidTime"] != DBNull.Value) //Roi moi tinh toi field trong bang cua no.
            {
                p.PaidTime = reader["PaidTime"] as DateTime?;
            }


            if (reader.HasColumn("PatientPCLRequest_RefundTime") && reader["PatientPCLRequest_RefundTime"] != DBNull.Value) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
            {
                p.RefundTime = reader["PatientPCLRequest_RefundTime"] as DateTime?;
            }
            else if (reader.HasColumn("RefundTime") && reader["RefundTime"] != DBNull.Value) //Roi moi tinh toi field trong bang cua no.
            {
                p.RefundTime = reader["RefundTime"] as DateTime?;
            }

            if (reader.HasColumn("PatientPCLRequest_CreatedDate") && reader["PatientPCLRequest_CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = (DateTime)reader["PatientPCLRequest_CreatedDate"];
            }
            else if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = (DateTime)reader["CreatedDate"];
            }

            if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
            {
                p.FullName = reader["FullName"] == null ? "" : reader["FullName"].ToString().Trim();
            }

            if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
            {
                p.PatientCode = reader["PatientCode"] == null ? "" : reader["PatientCode"].ToString().Trim();
            }


            if (reader.HasColumn("AgencyID") && reader["AgencyID"] != DBNull.Value)//thuc ra la HosID
            {
                p.AgencyID = reader["AgencyID"] as long?;
            }


            if (reader.HasColumn("HosName") && reader["HosName"] != DBNull.Value)
            {
                p.HosName = reader["HosName"].ToString();
            }

            if (reader.HasColumn("ReqFromDeptLocID") && reader["ReqFromDeptLocID"] != DBNull.Value)
            {
                p.ReqFromDeptLocID = reader["ReqFromDeptLocID"] as long?;
            }

            if (reader.HasColumn("ReqFromDeptLocIDName") && reader["ReqFromDeptLocIDName"] != DBNull.Value)
            {
                p.ReqFromDeptLocIDName = reader["ReqFromDeptLocIDName"] == null ? "" : reader["ReqFromDeptLocIDName"].ToString().Trim();
            }

            if (reader.HasColumn("RequestCreatedFrom") && reader["RequestCreatedFrom"] != DBNull.Value)
            {
                p.RequestCreatedFrom = reader["RequestCreatedFrom"] == null ? 0 : Convert.ToInt16(reader["RequestCreatedFrom"]);
            }

            if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
            {
                p.DeptID = reader["DeptID"] as long?;
            }


            if (reader.HasColumn("DeptLocID") && reader["DeptLocID"] != DBNull.Value)
            {
                p.DeptLocID = Convert.ToInt64(reader["DeptLocID"]);
            }


            if (reader.HasColumn("ServiceSeqNum") && reader["ServiceSeqNum"] != DBNull.Value)
            {
                p.ServiceSeqNum = int.Parse(reader["ServiceSeqNum"].ToString());
            }


            if (reader.HasColumn("ServiceSeqNumType") && reader["ServiceSeqNumType"] != DBNull.Value)
            {
                p.ServiceSeqNumType = byte.Parse(reader["ServiceSeqNumType"].ToString());
            }


            if (reader.HasColumn("PCLDeptLocIDName") && reader["PCLDeptLocIDName"] != DBNull.Value)
            {
                p.PCLDeptLocIDName = reader["PCLDeptLocIDName"] == null ? "" : reader["PCLDeptLocIDName"].ToString().Trim();
            }

            if (reader.HasColumn("StaffIDName") && reader["StaffIDName"] != DBNull.Value)
            {
                p.StaffIDName = reader["StaffIDName"] == null ? "" : reader["StaffIDName"].ToString().Trim();
            }

            if (reader.HasColumn("StaffIDPhoneNumber") && reader["StaffIDPhoneNumber"] != DBNull.Value)
            {
                p.StaffIDPhoneNumber = reader["StaffIDPhoneNumber"] == null ? "" : reader["StaffIDPhoneNumber"].ToString().Trim();
            }

            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = reader["PtRegistrationID"] == null ? 0 : (long)reader["PtRegistrationID"];
            }
            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                p.PtRegDetailID = reader["PtRegDetailID"] == null ? 0 : (long)reader["PtRegDetailID"];
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                p.V_RegistrationType = (long)reader["V_RegistrationType"];
            }

            if (reader.HasColumn("V_RegistrationStatus") && reader["V_RegistrationStatus"] != DBNull.Value)
            {
                p.V_RegistrationStatus = (long)reader["V_RegistrationStatus"];
            }


            if (reader.HasColumn("V_PCLRequestStatusName"))
            {
                p.V_PCLRequestStatusName = reader["V_PCLRequestStatusName"] == null ? "" : reader["V_PCLRequestStatusName"].ToString().Trim();
            }

            if (reader.HasColumn("DTItemID") && reader["DTItemID"] != DBNull.Value)
            {
                p.DTItemID = (long)reader["DTItemID"];
            }

            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientID = (long)reader["PatientID"];
            }
            bool ageOnly = true;
            if (reader.HasColumn("DOB") && reader["DOB"] != DBNull.Value)
            {
                ageOnly = (bool)reader["AgeOnly"];
            }
            if (reader.HasColumn("DOB") && reader["DOB"] != DBNull.Value)
            {
                DateTime? DOB = reader["DOB"] as DateTime?;
                if (DOB != null)
                {
                    if (!ageOnly)
                    {
                        p.DOB = DOB.Value.ToShortDateString();
                    }
                    else
                    {
                        p.DOB = DOB.Value.Year.ToString();
                    }
                }
            }

            //LabCom
            p.ObjPatientPCLRequest_LABCom = new PatientPCLRequest_LABCom();

            if (reader.HasColumn("SoPhieuChiDinh") && reader["SoPhieuChiDinh"] != DBNull.Value)
            {
                p.ObjPatientPCLRequest_LABCom.SoPhieuChiDinh = reader["SoPhieuChiDinh"].ToString().Trim();
            }

            if (reader.HasColumn("MaDichVu") && reader["MaDichVu"] != DBNull.Value)
            {
                p.ObjPatientPCLRequest_LABCom.MaDichVu = reader["MaDichVu"].ToString().Trim();
            }
            //LabCom

            if (reader.HasColumn("ReceiptNumber") && reader["ReceiptNumber"] != DBNull.Value)
            {
                p.ReceiptNumber = reader["ReceiptNumber"] as string;
            }

            #region Dung Cho Luu Ket Qua CLS
            //▼====: #180
            p.PCLExamTypeItem = new PCLExamType();
            if (reader.HasColumn("PCLExamTypeName") && reader["PCLExamTypeName"] != DBNull.Value)
            {                
                p.PCLExamTypeName = reader["PCLExamTypeName"].ToString().Trim();
                p.PCLExamTypeItem.PCLExamTypeName = reader["PCLExamTypeName"].ToString().Trim();
            }
            //▲====: #180
            if (reader.HasColumn("V_ExamRegStatusName") && reader["V_ExamRegStatusName"] != DBNull.Value)
            {
                p.V_ExamRegStatusName = reader["V_ExamRegStatusName"].ToString().Trim();
            }
            if (reader.HasColumn("PCLExamTypeID"))
            {
                p.PCLExamTypeID = reader["PCLExamTypeID"] as long?;
                //▼====: #180
                p.PCLExamTypeItem.PCLExamTypeID = Convert.ToInt64(reader["PCLExamTypeID"]);
                //▲====: #180
            }
            if (reader.HasColumn("PCLReqItemID"))
            {
                p.PCLReqItemID = reader["PCLReqItemID"] as long?;
            }
            //PCLReqItemID
            if (reader.HasColumn("PCLResultParamImpID"))
            {
                p.PCLResultParamImpID = reader["PCLResultParamImpID"] as long?;
                //▼====: #180
                p.PCLExamTypeItem.PCLResultParamImpID = reader["PCLResultParamImpID"] as long?;
                //▲====: #180
            }
            if (reader.HasColumn("ParamEnum") && reader["ParamEnum"] != DBNull.Value)
            {
                p.ParamEnum = Convert.ToInt32(reader["ParamEnum"]) as int?;
            }
            #endregion


            if (reader.HasColumn("IsAllowToPayAfter") && reader["IsAllowToPayAfter"] != DBNull.Value)
            {
                p.IsAllowToPayAfter = Convert.ToInt16(reader["IsAllowToPayAfter"]);
            }
            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.DoctorStaffID = (long)reader["DoctorStaffID"];
            }
            if (reader.HasColumn("MedicalInstructionDate") && reader["MedicalInstructionDate"] != DBNull.Value)
            {
                p.MedicalInstructionDate = Convert.ToDateTime(reader["MedicalInstructionDate"]);
            }
            if (reader.HasColumn("ResultDate") && reader["ResultDate"] != DBNull.Value)
            {
                p.ResultDate = Convert.ToDateTime(reader["ResultDate"]);
            }
            if (reader.HasColumn("TemplateFileName") && reader["TemplateFileName"] != DBNull.Value)
            {
                p.TemplateFileName = reader["TemplateFileName"].ToString();
            }
            if (reader.HasColumn("DefaultNumFilmsRecv") && reader["DefaultNumFilmsRecv"] != DBNull.Value)
            {
                p.DefaultNumFilmsRecv = Convert.ToInt16(reader["DefaultNumFilmsRecv"]);
            }
            if (reader.HasColumn("AllowToPayAfter") && reader["AllowToPayAfter"] != DBNull.Value)
            {
                p.AllowToPayAfter = Convert.ToBoolean(reader["AllowToPayAfter"]);
            }
            if (reader.HasColumn("PatientClassID") && reader["PatientClassID"] != DBNull.Value)
            {
                p.PatientClassID = (long)reader["PatientClassID"];
            }
            if (reader.HasColumn("DoctorIDName") && reader["DoctorIDName"] != DBNull.Value)
            {
                p.DoctorIDName = reader["DoctorIDName"] == null ? "" : reader["DoctorIDName"].ToString().Trim();
            }
            if (reader.HasColumn("IsTransferredToRIS") && reader["IsTransferredToRIS"] != DBNull.Value)
            {
                p.IsTransferredToRIS = Convert.ToBoolean(reader["IsTransferredToRIS"]);
            }
            if (reader.HasColumn("IsCancelTransferredToRIS") && reader["IsCancelTransferredToRIS"] != DBNull.Value)
            {
                p.IsCancelTransferredToRIS = Convert.ToBoolean(reader["IsCancelTransferredToRIS"]);
            }
            if (reader.HasColumn("IntPtDiagDrInstructionID") && reader["IntPtDiagDrInstructionID"] != DBNull.Value)
            {
                p.IntPtDiagDrInstructionID = Convert.ToInt64(reader["IntPtDiagDrInstructionID"]);
            }
            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                p.RecCreatedDate = (DateTime)reader["RecCreatedDate"];
            }
            //▼===== #067
            if (reader.HasColumn("HosClientID") && reader["HosClientID"] != DBNull.Value)
            {
                p.HosClientID = (long)reader["HosClientID"];
            }
            if (reader.HasColumn("HosClientContractID") && reader["HosClientContractID"] != DBNull.Value)
            {
                p.HosClientContractID = (long)reader["HosClientContractID"];
            }
            if (reader.HasColumn("ContractNo") && reader["ContractNo"] != DBNull.Value)
            {
                p.ContractNo = reader["ContractNo"].ToString();
            }
            if (reader.HasColumn("CompanyName") && reader["CompanyName"] != DBNull.Value)
            {
                p.CompanyName = reader["CompanyName"].ToString();
            }
            if (reader.HasColumn("ContractName") && reader["ContractName"] != DBNull.Value)
            {
                p.ContractName = reader["ContractName"].ToString();
            }
            //▲===== #067
            if (reader.HasColumn("PerformStaffID") && reader["PerformStaffID"] != DBNull.Value)
            {
                p.PerformStaffID = (long)reader["PerformStaffID"];
            }
            if (reader.HasColumn("PerformStaffName") && reader["PerformStaffName"] != DBNull.Value)
            {
                p.PerformStaffName = reader["PerformStaffName"].ToString();
            }
            if (reader.HasColumn("V_ReportForm") && reader["V_ReportForm"] != DBNull.Value)
            {
                p.V_ReportForm = (long)reader["V_ReportForm"];
            }
            if (reader.HasColumn("HisID") && reader["HisID"] != DBNull.Value)
            {
                p.HisID = (long)reader["HisID"];
            }
            if (reader.HasColumn("IsWaitResult") && reader["IsWaitResult"] != DBNull.Value)
            {
                p.IsWaitResult = (bool)reader["IsWaitResult"];
            }
            if (reader.HasColumn("IsDone") && reader["IsDone"] != DBNull.Value)
            {
                p.IsDone = (bool)reader["IsDone"];
            }
            if (reader.HasColumn("IsHaveWaitResult") && reader["IsHaveWaitResult"] != DBNull.Value)
            {
                p.IsHaveWaitResult = (bool)reader["IsHaveWaitResult"];
            }
            if (reader.HasColumn("PCLExamTypeTemplateResult") && reader["PCLExamTypeTemplateResult"] != DBNull.Value)
            {
                p.PCLExamTypeTemplateResult = reader["PCLExamTypeTemplateResult"].ToString();
            }
            if (reader.HasColumn("V_TransactionStatus") && reader["V_TransactionStatus"] != DBNull.Value)
            {
                p.V_TransactionStatus = Convert.ToInt64(reader["V_TransactionStatus"]);
            }
            if (reader.HasColumn("TransactionStatus") && reader["TransactionStatus"] != DBNull.Value)
            {
                p.TransactionStatus = Convert.ToString(reader["TransactionStatus"]);
            }
            if (reader.HasColumn("ResponseDate") && reader["ResponseDate"] != DBNull.Value)
            {
                p.ResponseDate = Convert.ToDateTime(reader["ResponseDate"]);
            }
            if (reader.HasColumn("ResultID") && reader["ResultID"] != DBNull.Value)
            {
                p.ResultID = Convert.ToInt64(reader["ResultID"]);
            }
            //▼====: #180
            if (reader.HasColumn("RequestedDoctorPrefix") && reader["RequestedDoctorPrefix"] != DBNull.Value)
            {
                p.RequestedDoctorPrefix = Convert.ToString(reader["RequestedDoctorPrefix"]);
            }
            if (reader.HasColumn("RequestedDoctorCode") && reader["RequestedDoctorCode"] != DBNull.Value)
            {
                p.RequestedDoctorCode = Convert.ToString(reader["RequestedDoctorCode"]);
            }
            if (reader.HasColumn("RequestedDoctorName") && reader["RequestedDoctorName"] != DBNull.Value)
            {
                p.RequestedDoctorName = Convert.ToString(reader["RequestedDoctorName"]);
            }
            p.PCLExamTypeItem.ObjPCLExamTypeSubCategoryID = new PCLExamTypeSubCategory();
            if (reader.HasColumn("PCLExamTypeCode") && reader["PCLExamTypeCode"] != DBNull.Value)
            {
                p.PCLExamTypeItem.PCLExamTypeCode = Convert.ToString(reader["PCLExamTypeCode"]);
            }
            if (reader.HasColumn("PCLExamTypeSubCategoryID") && reader["PCLExamTypeSubCategoryID"] != DBNull.Value)
            {
                p.PCLExamTypeItem.ObjPCLExamTypeSubCategoryID.PCLExamTypeSubCategoryID = Convert.ToInt64(reader["PCLExamTypeSubCategoryID"]);
            }
            if (reader.HasColumn("SubCategoryCodeToPAC") && reader["SubCategoryCodeToPAC"] != DBNull.Value)
            {
                p.PCLExamTypeItem.ObjPCLExamTypeSubCategoryID.SubCategoryCodeToPAC = Convert.ToString(reader["SubCategoryCodeToPAC"]);
            }
            if (reader.HasColumn("HL7OrderStatus") && reader["HL7OrderStatus"] != DBNull.Value)
            {
                p.HL7OrderStatus = Convert.ToInt64(reader["HL7OrderStatus"]);
            }
            if (reader.HasColumn("HL7FillerOrderNumber") && reader["HL7FillerOrderNumber"] != DBNull.Value)
            {
                p.HL7FillerOrderNumber = Convert.ToString(reader["HL7FillerOrderNumber"]);
            }
            //▲====: #180
            if (reader.HasColumn("SendDate") && reader["SendDate"] != DBNull.Value)
            {
                p.SendDate = Convert.ToDateTime(reader["SendDate"]);
            }

            if(reader.HasColumn("PatientCellPhoneNumber") && reader["PatientCellPhoneNumber"] != DBNull.Value)
            {
                p.Patient = new Patient();
                p.Patient.PatientCellPhoneNumber = Convert.ToString(reader["PatientCellPhoneNumber"]);
            }
            return p;
        }
        public virtual List<PatientPCLRequest> GetPatientPCLRequestCollectionFromReader(IDataReader reader)
        {
            var p = new List<PatientPCLRequest>();
            while (reader.Read())
            {
                p.Add(GetPatientPCLRequestFromReader(reader));
            }
            return p;
        }

        public virtual PatientPCLRequest_Ext GetPatientPCLRequestExtFromReader(IDataReader reader)
        {
            var p = new PatientPCLRequest_Ext();
            if (reader.HasColumn("PCLRequestNumID"))
            {
                p.PCLRequestNumID = reader["PCLRequestNumID"].ToString();
            }

            if (reader.HasColumn("Diagnosis"))
            {
                p.Diagnosis = reader["Diagnosis"].ToString();
            }

            if (reader.HasColumn("StaffID"))
            {
                p.StaffID = reader["StaffID"] as long?;
            }

            if (reader.HasColumn("RegStaffFullName") && reader["RegStaffFullName"] != DBNull.Value)
            {
                p.PCLStaffFullName = reader["RegStaffFullName"].ToString();
            }

            if (reader.HasColumn("DoctorComments"))
            {
                p.DoctorComments = reader["DoctorComments"].ToString();
            }

            if (reader.HasColumn("IsExternalExam"))
            {
                p.IsExternalExam = reader["IsExternalExam"] as bool? ?? false;
            }

            if (reader.HasColumn("IsImported"))
            {
                p.IsImported = reader["IsImported"] as bool? ?? false;
            }
            if (reader.HasColumn("IsCaseOfEmergency"))
            {
                p.IsCaseOfEmergency = reader["IsCaseOfEmergency"] as bool?;
            }

            if (p.IsCaseOfEmergency == null)
                p.IsCaseOfEmergency = false;

            if (reader.HasColumn("PatientPCLReqExtID"))
            {
                p.PatientPCLReqExtID = (long)reader["PatientPCLReqExtID"];
            }

            p.PatientServiceRecord = new PatientServiceRecord();
            if (reader.HasColumn("ExamDate"))
            {
                p.PatientServiceRecord.ExamDate = (DateTime)reader["ExamDate"];
            }

            if (reader.HasColumn("PatientRecID"))
            {
                p.PatientServiceRecord.PatientRecID = reader["PatientRecID"] as long?;
            }

            if (reader.HasColumn("PatientMedicalFileID") && reader["PatientMedicalFileID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PatientMedicalFileID = reader["PatientMedicalFileID"] as long?;
            }

            if (reader.HasColumn("PtRegistrationID"))
            {
                p.PtRegistrationID = (long)reader["PtRegistrationID"];
                p.PatientServiceRecord.PtRegistrationID = reader["PtRegistrationID"] as long?;
            }

            if (reader.HasColumn("PtRegistrationCode"))
            {
                p.PatientServiceRecord.PtRegistrationCode = reader["PtRegistrationCode"].ToString();
            }
            if (reader.HasColumn("ServiceRecID") && reader["ServiceRecID"] != DBNull.Value)
            {
                p.PatientServiceRecord.ServiceRecID = (long)reader["ServiceRecID"];

                p.ServiceRecID = (long)reader["ServiceRecID"];
            }
            if (reader.HasColumn("StaffID"))
            {
                p.PatientServiceRecord.StaffID = reader["StaffID"] as long?;
            }
            try
            {
                p.PatientServiceRecord.Staff = new Staff { FullName = reader["RequestedDoctorName"].ToString() };
            }
            catch
            {
            }
            try
            {

                p.PatientServiceRecord.V_Behaving = reader["V_Behaving"] as long?;
                p.PatientServiceRecord.V_ProcessingType = reader["V_ProcessingType"] as long?;
            }
            catch
            { }

            try
            {
                p.ExamDate = reader["ExamDate"] as DateTime?;
            }
            catch
            {
                p.ExamDate = null;
            }

            try
            {
                p.RequestedDoctorName = reader["RequestedDoctorName"].ToString();
            }
            catch
            {
                p.RequestedDoctorName = "";
            }

            p.RecordState = RecordState.UNCHANGED;

            if (reader.HasColumn("PatientPCLRequest_MarkedAsDeleted")) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
            {
                if (reader["PatientPCLRequest_MarkedAsDeleted"] != DBNull.Value)
                {
                    p.MarkedAsDeleted = (bool)reader["PatientPCLRequest_MarkedAsDeleted"];
                }
                else
                {
                    p.MarkedAsDeleted = false;
                }
            }
            else if (reader.HasColumn("MarkedAsDeleted")) //Roi moi tinh toi field trong bang cua no.
            {
                if (reader["MarkedAsDeleted"] != DBNull.Value)
                {
                    p.MarkedAsDeleted = (bool)reader["MarkedAsDeleted"];
                }
                else
                {
                    p.MarkedAsDeleted = false;
                }
            }

            if (p.MarkedAsDeleted)
            {
                p.RecordState = RecordState.DELETED;
                p.EntityState = EntityState.DELETED_PERSITED;
            }
            else
            {
                p.EntityState = EntityState.PERSITED;
            }

            if (reader.HasColumn("V_PCLRequestType") && reader["V_PCLRequestType"] != DBNull.Value)
            {
                if (Enum.IsDefined(typeof(AllLookupValues.V_PCLRequestType), (long)reader["V_PCLRequestType"]))
                {
                    p.V_PCLRequestType = (AllLookupValues.V_PCLRequestType)(long)reader["V_PCLRequestType"];
                }
                else
                {
                    p.V_PCLRequestType = AllLookupValues.V_PCLRequestType.UNKNOWN;
                }
            }
            else
            {
                p.V_PCLRequestType = AllLookupValues.V_PCLRequestType.UNKNOWN;
            }

            if (reader.HasColumn("V_PCLRequestStatus") && reader["V_PCLRequestStatus"] != DBNull.Value)
            {
                if (Enum.IsDefined(typeof(AllLookupValues.V_PCLRequestStatus), (long)reader["V_PCLRequestStatus"]))
                {
                    p.V_PCLRequestStatus = (AllLookupValues.V_PCLRequestStatus)(long)reader["V_PCLRequestStatus"];
                }
                else
                {
                    throw new Exception(eHCMSResources.Z1778_G1_OutOfRange);
                }
            }
            else
            {
                p.V_PCLRequestStatus = AllLookupValues.V_PCLRequestStatus.OPEN;
            }

            if (reader.HasColumn("PatientPCLRequest_PaidTime")) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
            {
                p.PaidTime = reader["PatientPCLRequest_PaidTime"] as DateTime?;
            }
            else if (reader.HasColumn("PaidTime")) //Roi moi tinh toi field trong bang cua no.
            {
                p.PaidTime = reader["PaidTime"] as DateTime?;
            }


            if (reader.HasColumn("PatientPCLRequest_RefundTime")) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
            {
                p.RefundTime = reader["PatientPCLRequest_RefundTime"] as DateTime?;
            }
            else if (reader.HasColumn("RefundTime")) //Roi moi tinh toi field trong bang cua no.
            {
                p.RefundTime = reader["RefundTime"] as DateTime?;
            }

            if (reader.HasColumn("PatientPCLRequest_CreatedDate"))
            {
                p.RefundTime = reader["PatientPCLRequest_CreatedDate"] as DateTime?;
            }
            else if (reader.HasColumn("CreatedDate"))
            {
                p.CreatedDate = (DateTime)reader["CreatedDate"];
            }

            if (reader.HasColumn("FullName"))
            {
                p.FullName = reader["FullName"] == null ? "" : reader["FullName"].ToString().Trim();
            }

            if (reader.HasColumn("PatientCode"))
            {
                p.PatientCode = reader["PatientCode"] == null ? "" : reader["PatientCode"].ToString().Trim();
            }

            if (reader.HasColumn("AgencyID"))//thuc ra la HosID
            {
                p.AgencyID = reader["AgencyID"] as long?;
            }


            if (reader.HasColumn("HosName"))
            {
                p.HosName = reader["HosName"].ToString();
            }

            if (reader.HasColumn("ReqFromDeptLocID"))
            {
                p.ReqFromDeptLocID = reader["ReqFromDeptLocID"] as long?;
            }

            if (reader.HasColumn("ReqFromDeptLocIDName"))
            {
                p.ReqFromDeptLocIDName = reader["ReqFromDeptLocIDName"] == null ? "" : reader["ReqFromDeptLocIDName"].ToString().Trim();
            }

            if (reader.HasColumn("DeptID"))
            {
                p.DeptID = reader["DeptID"] as long?;
            }


            if (reader.HasColumn("DeptLocID") && reader["DeptLocID"] != DBNull.Value)
            {
                p.DeptLocID = Convert.ToInt64(reader["DeptLocID"]);
            }


            if (reader.HasColumn("ServiceSeqNum") && reader["ServiceSeqNum"] != DBNull.Value)
            {
                p.ServiceSeqNum = int.Parse(reader["ServiceSeqNum"].ToString());
            }


            if (reader.HasColumn("ServiceSeqNumType") && reader["ServiceSeqNumType"] != DBNull.Value)
            {
                p.ServiceSeqNumType = byte.Parse(reader["ServiceSeqNumType"].ToString());
            }


            if (reader.HasColumn("PCLDeptLocIDName"))
            {
                p.PCLDeptLocIDName = reader["PCLDeptLocIDName"] == null ? "" : reader["PCLDeptLocIDName"].ToString().Trim();
            }

            if (reader.HasColumn("StaffIDName"))
            {
                p.StaffIDName = reader["StaffIDName"] == null ? "" : reader["StaffIDName"].ToString().Trim();
            }

            if (reader.HasColumn("StaffIDPhoneNumber"))
            {
                p.StaffIDPhoneNumber = reader["StaffIDPhoneNumber"] == null ? "" : reader["StaffIDPhoneNumber"].ToString().Trim();
            }

            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = reader["PtRegistrationID"] == null ? 0 : (long)reader["PtRegistrationID"];
            }

            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                p.V_RegistrationType = (long)reader["V_RegistrationType"];
            }

            if (reader.HasColumn("V_RegistrationStatus") && reader["V_RegistrationStatus"] != DBNull.Value)
            {
                p.V_RegistrationStatus = (long)reader["V_RegistrationStatus"];
            }


            if (reader.HasColumn("V_PCLRequestStatusName"))
            {
                p.V_PCLRequestStatusName = reader["V_PCLRequestStatusName"] == null ? "" : reader["V_PCLRequestStatusName"].ToString().Trim();
            }

            if (reader.HasColumn("DTItemID") && reader["DTItemID"] != DBNull.Value)
            {
                p.DTItemID = (long)reader["DTItemID"];
            }

            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientID = (long)reader["PatientID"];
            }

            //LabCom
            p.ObjPatientPCLRequest_LABCom = new PatientPCLRequest_LABCom();

            if (reader.HasColumn("SoPhieuChiDinh") && reader["SoPhieuChiDinh"] != DBNull.Value)
            {
                p.ObjPatientPCLRequest_LABCom.SoPhieuChiDinh = reader["SoPhieuChiDinh"].ToString().Trim();
            }

            if (reader.HasColumn("MaDichVu") && reader["MaDichVu"] != DBNull.Value)
            {
                p.ObjPatientPCLRequest_LABCom.MaDichVu = reader["MaDichVu"].ToString().Trim();
            }
            //LabCom

            #region Dung Cho Luu Ket Qua CLS
            if (reader.HasColumn("PCLExamTypeName") && reader["PCLExamTypeName"] != DBNull.Value)
            {
                p.PCLExamTypeName = reader["PCLExamTypeName"].ToString().Trim();
            }
            if (reader.HasColumn("V_ExamRegStatusName") && reader["V_ExamRegStatusName"] != DBNull.Value)
            {
                p.V_ExamRegStatusName = reader["V_ExamRegStatusName"].ToString().Trim();
            }
            if (reader.HasColumn("PCLExamTypeID"))
            {
                p.PCLExamTypeID = reader["PCLExamTypeID"] as long?;
            }
            if (reader.HasColumn("PCLReqItemID"))
            {
                p.PCLReqItemID = reader["PCLReqItemID"] as long?;
            }
            //PCLReqItemID
            if (reader.HasColumn("PCLResultParamImpID"))
            {
                p.PCLResultParamImpID = reader["PCLResultParamImpID"] as long?;
            }
            if (reader.HasColumn("ParamEnum"))
            {
                p.ParamEnum = reader["ParamEnum"] as int?;
            }

            if (reader.HasColumn("HosName"))
            {
                p.HosName = reader["HosName"].ToString();
            }

            #endregion

            return p;
        }
        public virtual List<PatientPCLRequest_Ext> GetPatientPCLRequestExtCollectionFromReader(IDataReader reader)
        {
            var p = new List<PatientPCLRequest_Ext>();
            while (reader.Read())
            {
                p.Add(GetPatientPCLRequestExtFromReader(reader));
            }
            return p;
        }

        public virtual PCLSection GetPCLSectionFromReader(IDataReader reader)
        {
            var p = new PCLSection
            {
                PCLSectionID = (long)reader["PCLSectionID"],
                PCLSectionName = reader["PCLSectionName"] as string,
                //▼==== #179
                PCLSectionNameEng = reader["PCLSectionNameEng"] as string
                //▲==== #179
            };
            if (p.PCLFormID > 0 && reader.HasColumn("PCLFormName"))
            {
                p.PCLForm = GetPCLFormsFromReader(reader);
            }
            return p;
        }
        public virtual List<PCLSection> GetPCLSectionCollectionFromReader(IDataReader reader)
        {
            var p = new List<PCLSection>();
            while (reader.Read())
            {
                p.Add(GetPCLSectionFromReader(reader));
            }
            return p;
        }

        //▼==== #126
        public virtual List<PCLExamType> GetPCLExamTypeCollectionFromReader(IDataReader reader)
        {
            var p = new List<PCLExamType>();
            while (reader.Read())
            {
                p.Add(GetPCLExamTypeFromReader(reader));
            }
            return p;
        }
        //▲==== #126

        public virtual PCLItem GetPCLItemFromReader(IDataReader reader)
        {
            var p = new PCLItem
            {
                PCLItemID = (long)reader["PCLItemID"],
                PCLSectionID = (long)reader["PCLSectionID"],
                PCLExamTypeID = (long)reader["PCLExamTypeID"],
                Idx = reader["Idx"] as byte?,
                PCLExamType = GetPCLExamTypeFromReader(reader)
            };


            if (p.PCLExamType != null)
            {
                p.HIAllowedPrice = p.PCLExamType.HIAllowedPrice;
                p.NormalPrice = p.PCLExamType.NormalPrice;
                p.HIPatientPrice = p.PCLExamType.HIPatientPrice;
            }

            if (reader.HasColumn("PCLSectionID"))
            {
                try
                {
                    p.PCLSection = GetPCLSectionFromReader(reader);
                }
                catch
                {
                }
            }

            return p;
        }
        public virtual List<PCLItem> GetPCLItemCollectionFromReader(IDataReader reader)
        {
            var p = new List<PCLItem>();
            while (reader.Read())
            {
                p.Add(GetPCLItemFromReader(reader));
            }
            return p;
        }

        protected virtual PatientPCLRequestDetail GetPatientPCLRequestDetailsFromReader(IDataReader reader, long? staffID = null)
        {
            var p = new PatientPCLRequestDetail
            {
                PCLReqItemID = (long)reader["PCLReqItemID"],
                PCLExamTypeID = (long)reader["PCLExamTypeID"],
                PatientPCLReqID = (long)reader["PatientPCLReqID"],
                NumberOfTest = reader["NumberOfTest"] as byte?,
                HIAllowedPrice = reader["HIAllowedPrice"] as decimal?,
                InvoicePrice = (decimal)reader["Price"],
                TotalHIPayment = (reader["TotalHIPayment"] as decimal?).GetValueOrDefault(),
                TotalInvoicePrice = (reader["Amount"] as decimal?).GetValueOrDefault(),
                TotalCoPayment = (reader["AmountCoPay"] as decimal?).GetValueOrDefault()
            };
            if (staffID.GetValueOrDefault(0) > 0)
            {
                p.StaffID = staffID;
            }
            //KMx: Vì lý do tạo bill, không sử dụng prop NumberOfTest mà sử dụng Qty để đồng nhất với Dịch vụ, nên phải set Qty = NumberOfTest, nếu không thì SL hiển thị không đúng (15/12/2014 09:41).
            if (reader.HasColumn("NumberOfTest") && reader["NumberOfTest"] != DBNull.Value)
            {
                p.Qty = Convert.ToDecimal(reader["NumberOfTest"]);
            }

            #region KMx: Có tính tiền BH, tính tiền BN hay không (11/12/2014 14:50).
            if (reader.HasColumn("IsCountHI") && reader["IsCountHI"] != DBNull.Value)
            {
                p.IsCountHI = (bool)reader["IsCountHI"];
            }
            //else
            //{
            //    p.IsCountHI = false;
            //}

            if (reader.HasColumn("IsCountPatient") && reader["IsCountPatient"] != DBNull.Value)
            {
                p.IsCountPatient = (bool)reader["IsCountPatient"];
            }
            else
            {
                p.IsCountPatient = false;
            }

            if (reader.HasColumn("IsInPackage") && reader["IsInPackage"] != DBNull.Value)
            {
                p.IsInPackage = Convert.ToBoolean(reader["IsInPackage"]);
            }

            #endregion

            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.DoctorStaff = new Staff();
                p.DoctorStaff.StaffID = Convert.ToInt64(reader["DoctorStaffID"]);

                if (reader.HasColumn("DoctorStaffName") && reader["DoctorStaffName"] != DBNull.Value)
                {
                    p.DoctorStaff.FullName = reader["DoctorStaffName"].ToString();
                }
                if (reader.HasColumn("StaffCatgID") && reader["StaffCatgID"] != DBNull.Value)
                {
                    p.DoctorStaff.StaffCatgID = (long)reader["StaffCatgID"];
                }
                if (reader.HasColumn("SCode") && reader["SCode"] != DBNull.Value)
                {
                    p.DoctorStaff.SCode = reader["SCode"].ToString();
                }
            }

            if (reader.HasColumn("PerformDoctorStaffID") && reader["PerformDoctorStaffID"] != DBNull.Value)
            {
                p.PerformDoctorStaff = new Staff();
                p.PerformDoctorStaff.StaffID = Convert.ToInt64(reader["PerformDoctorStaffID"]);

                if (reader.HasColumn("PerformDoctorStaffName") && reader["PerformDoctorStaffName"] != DBNull.Value)
                {
                    p.PerformDoctorStaff.FullName = reader["PerformDoctorStaffName"].ToString();
                }
            }
            if (reader.HasColumn("ResultDoctorStaffID") && reader["ResultDoctorStaffID"] != DBNull.Value)
            {
                p.ResultDoctorStaff = new Staff();
                p.ResultDoctorStaff.StaffID = Convert.ToInt64(reader["ResultDoctorStaffID"]);

                if (reader.HasColumn("ResultDoctorStaffName") && reader["ResultDoctorStaffName"] != DBNull.Value)
                {
                    p.ResultDoctorStaff.FullName = reader["ResultDoctorStaffName"].ToString();
                }
            }

            if (reader.HasColumn("MedicalInstructionDate") && reader["MedicalInstructionDate"] != DBNull.Value)
            {
                p.MedicalInstructionDate = Convert.ToDateTime(reader["MedicalInstructionDate"]);
                p.MedicalInstructionDateStr = Convert.ToDateTime(reader["MedicalInstructionDate"]).ToString("dd/MM/yyy");
            }

            if (reader.HasColumn("ResultDate") && reader["ResultDate"] != DBNull.Value)
            {
                p.ResultDate = Convert.ToDateTime(reader["ResultDate"]);
            }

            if (reader.HasColumn("HIBenefit") && reader["HIBenefit"] != DBNull.Value)
            {
                p.HIBenefit = Convert.ToDouble(reader["HIBenefit"]);
            }
            if (p.HIBenefit.GetValueOrDefault(0) > 0)
            {
                p.HiApplied = true;
            }
            else
            {
                p.HiApplied = false;
            }
            if (reader.HasColumn("IsCountHI") && reader["IsCountHI"] != DBNull.Value)
            {
                p.IsCountHI = (bool)reader["IsCountHI"];
            }
            else
            {
                p.IsCountHI = (p.HIBenefit.GetValueOrDefault(0) > 0) ? true : false;
            }
            //▼====: #103
            if (reader.HasColumn("OtherAmt") && reader["OtherAmt"] != DBNull.Value)
            {
                p.OtherAmt = (decimal)(reader["OtherAmt"]);
            }
            if (reader.HasColumn("IsCountPatientCOVID") && reader["IsCountPatientCOVID"] != DBNull.Value)
            {
                p.IsCountPatientCOVID = Convert.ToBoolean(reader["IsCountPatientCOVID"]);
            }
            //▲====: #103
            if (reader.HasColumn("DiscountAmt") && reader["DiscountAmt"] != DBNull.Value)
            {
                p.DiscountAmt = Convert.ToDecimal(reader["DiscountAmt"]);
            }
            if (reader.HasColumn("PromoDiscProgID") && reader["PromoDiscProgID"] != DBNull.Value)
            {
                p.PromoDiscProgID = reader["PromoDiscProgID"] as long?;
            }
            if (p.IsInPackage)
            {
                p.TotalPatientPayment = 0;
            }
            else
            {
                p.TotalPatientPayment = p.TotalInvoicePrice - p.TotalHIPayment - p.DiscountAmt - p.OtherAmt;
            }

            p.PriceDifference = p.InvoicePrice - p.HIAllowedPrice.GetValueOrDefault(0);
            p.TotalPriceDifference = p.TotalInvoicePrice - p.TotalHIPayment - p.TotalCoPayment;

            p.RecordState = RecordState.UNCHANGED;
            p.EntityState = EntityState.PERSITED;

            if (reader.HasColumn("RegStaffFullName") && reader["RegStaffFullName"] != DBNull.Value)
            {
                p.RegStaffFullName = reader["RegStaffFullName"].ToString();
            }

            if (reader.HasColumn("ServiceSeqNum") && reader["ServiceSeqNum"] != DBNull.Value)
            {
                p.ServiceSeqNum = (int)reader["ServiceSeqNum"];
            }
            if (reader.HasColumn("ServiceSeqNum_Old") && reader["ServiceSeqNum_Old"] != DBNull.Value)
            {
                p.ServiceSeqNum_Old = (int)reader["ServiceSeqNum_Old"];
            }

            if (reader.HasColumn("PatientPCLRequestDetails_PaidStaffID")) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
            {
                p.PaidStaffID = (long)reader["PatientPCLRequestDetails_PaidStaffID"];
            }
            else if (reader.HasColumn("PaidStaffID") && reader["PaidStaffID"] != DBNull.Value)
            {
                p.PaidStaffID = (long)reader["PaidStaffID"];
            }
            if (reader.HasColumn("PaidStaffName") && reader["PaidStaffName"] != DBNull.Value)
            {
                p.PaidStaffName = reader["PaidStaffName"].ToString();
            }

            if (reader.HasColumn("CancelStaffName") && reader["CancelStaffName"] != DBNull.Value)
            {
                p.CancelStaffName = reader["CancelStaffName"].ToString();
            }

            if (reader.HasColumn("ServiceSeqNumType"))
            {
                p.ServiceSeqNumType = (byte)reader["ServiceSeqNumType"];
            }
            p.ServiceSeqNumString = AxHelper.GetSequenceNumber(p.ServiceSeqNumType, p.ServiceSeqNum);


            if (reader.HasColumn("PatientPCLRequestDetails_MarkedAsDeleted")) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
            {
                if (reader["PatientPCLRequestDetails_MarkedAsDeleted"] != DBNull.Value)
                {
                    p.MarkedAsDeleted = (bool)reader["PatientPCLRequestDetails_MarkedAsDeleted"];
                }
                else
                {
                    p.MarkedAsDeleted = false;
                }
            }
            else if (reader.HasColumn("MarkedAsDeleted")) //Roi moi tinh toi field trong bang cua no.
            {
                if (reader["MarkedAsDeleted"] != DBNull.Value)
                {
                    p.MarkedAsDeleted = (bool)reader["MarkedAsDeleted"];
                }
                else
                {
                    p.MarkedAsDeleted = false;
                }
            }

            if (p.MarkedAsDeleted)
            {
                p.RecordState = RecordState.DELETED;
                p.EntityState = EntityState.DELETED_PERSITED;
            }

            if (reader.HasColumn("CreatedDate"))
            {
                p.CreatedDate = (DateTime)reader["CreatedDate"];
            }
            else
            {
                p.CreatedDate = DateTime.MinValue;
            }

            if (reader.HasColumn("PatientPCLRequestDetails_V_ExamRegStatus")) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
            {
                if (reader["PatientPCLRequestDetails_V_ExamRegStatus"] != DBNull.Value)
                {
                    p.V_ExamRegStatus = (long)reader["PatientPCLRequestDetails_V_ExamRegStatus"];
                }
            }
            else if (reader.HasColumn("V_ExamRegStatus")) //Roi moi tinh toi field trong bang cua no.
            {
                if (reader["V_ExamRegStatus"] != DBNull.Value)
                {
                    p.V_ExamRegStatus = (long)reader["V_ExamRegStatus"];
                }
            }


            if (Enum.IsDefined(typeof(AllLookupValues.ExamRegStatus), (int)p.V_ExamRegStatus))
            {
                p.ExamRegStatus = (AllLookupValues.ExamRegStatus)p.V_ExamRegStatus;
            }
            else
            {
                p.ExamRegStatus = AllLookupValues.ExamRegStatus.KHONG_XAC_DINH;
            }

            try
            {
                p.PCLExamType = GetPCLExamTypeFromReader(reader);
                if (p.PCLExamType != null && reader.HasColumn("ModalityCode") && reader["ModalityCode"] != DBNull.Value)
                {
                    p.PCLExamType.ModalityCode = Convert.ToString(reader["ModalityCode"]);
                }
            }
            catch
            {
                p.PCLExamType = null;
            }

            if (reader.HasColumn("DeptLocID") && reader["DeptLocID"] != DBNull.Value)
            {
                p.DeptLocation = GetDeptLocationFromReader(reader);
            }

            var pclItemPrice = p.PCLExamType as IChargeableItemPrice;
            pclItemPrice.HIAllowedPrice = p.HIAllowedPrice;
            pclItemPrice.HIPatientPrice = p.InvoicePrice;
            pclItemPrice.NormalPrice = p.InvoicePrice;
            if (reader.HasColumn("HIBenefit"))
            {
                p.HIBenefit = reader["HIBenefit"] as double?;
            }
            if (reader.HasColumn("HisID") && reader["HisID"] != DBNull.Value)
            {
                p.HisID = reader["HisID"] as long?;
            }
            if (reader.HasColumn("PatientPCLRequestDetails_PaidTime")) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
            {
                p.PaidTime = reader["PatientPCLRequestDetails_PaidTime"] as DateTime?;
            }
            else if (reader.HasColumn("PaidTime")) //Roi moi tinh toi field trong bang cua no.
            {
                p.PaidTime = reader["PaidTime"] as DateTime?;
            }


            if (reader.HasColumn("PatientPCLRequestDetails_RefundTime")) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
            {
                p.RefundTime = reader["PatientPCLRequestDetails_RefundTime"] as DateTime?;
            }
            else if (reader.HasColumn("RefundTime")) //Roi moi tinh toi field trong bang cua no.
            {
                p.RefundTime = reader["RefundTime"] as DateTime?;
            }

            if (reader.HasColumn("V_ExamRegStatusName"))
            {
                p.V_ExamRegStatusName = reader["V_ExamRegStatusName"] == null ? "" : reader["V_ExamRegStatusName"].ToString().Trim();
            }

            if (reader.HasColumn("PCLSectionName"))
            {
                p.PCLSectionName = reader["PCLSectionName"] == null ? "" : reader["PCLSectionName"].ToString().Trim();
            }

            //dung de tinh lai BH
            if (reader.HasColumn("HIAllowedPriceNew") && reader["HIAllowedPriceNew"] != DBNull.Value)
            {
                p.ChargeableItem.HIAllowedPriceNew = reader["HIAllowedPriceNew"] as decimal?;
            }
            if (reader.HasColumn("HIPatientPriceNew") && reader["HIPatientPriceNew"] != DBNull.Value)
            {
                p.ChargeableItem.HIPatientPriceNew = Convert.ToDecimal(reader["HIPatientPriceNew"]);
            }

            if (reader.HasColumn("NormalPriceNew") && reader["NormalPriceNew"] != DBNull.Value)
            {
                p.ChargeableItem.NormalPriceNew = Convert.ToDecimal(reader["NormalPriceNew"]);
            }

            if (reader.HasColumn("PCLReqDetailCancelStaffID") && reader["PCLReqDetailCancelStaffID"] != DBNull.Value)
            {
                p.PCLReqDetailCancelStaffID = (long)(reader["PCLReqDetailCancelStaffID"]);
            }

            if (reader.HasColumn("SpecialNote") && reader["SpecialNote"] != DBNull.Value)
            {
                p.SpecialNote = reader["SpecialNote"].ToString();
                if (string.IsNullOrEmpty(p.SpecialNote))
                {

                }
            }

            if (reader.HasColumn("PriceType_PCLDetails") && reader["PriceType_PCLDetails"] != DBNull.Value)
            {
                p.V_NewPriceType = Convert.ToInt32(reader["PriceType_PCLDetails"]);
            }
            if (reader.HasColumn("ReasonChangePrice") && reader["ReasonChangePrice"] != DBNull.Value)
            {
                p.ReasonChangePrice = reader["ReasonChangePrice"].ToString();
            }
            //dung de tinh lai BH
            if (reader.HasColumn("PCLRequestNumID") && reader["PCLRequestNumID"] != DBNull.Value)
            {
                p.InvoiceID = reader["PCLRequestNumID"].ToString();
            }
            // 20181212 TNHX [BM0005404] Doesn't print PhieuChiDinh if Doctor already printed it 
            // dung de kiem tra PCL dc chi dinh tu Phong Kham
            if (reader.HasColumn("RequestedByDoctor") && reader["RequestedByDoctor"] != DBNull.Value)
            {
                p.RequestedByDoctor = Convert.ToInt32(reader["RequestedByDoctor"]);
            }

            //20190629 TTM: Thuộc tính IsDoctorChooseHI và DiagnosisForCheck chỉ sử dụng cho màn hình Kiểm tra LSKB của bác sĩ.
            if (reader.HasColumn("IsDoctorChooseHI") && reader["IsDoctorChooseHI"] != DBNull.Value)
            {
                p.IsDoctorChooseHI = Convert.ToBoolean(reader["IsDoctorChooseHI"]);
                if (reader.HasColumn("DiagnosisForCheck") && reader["DiagnosisForCheck"] != DBNull.Value)
                {
                    p.DiagnosisForCheck = reader["DiagnosisForCheck"].ToString();
                }
            }
            if (reader.HasColumn("AppointmentID") && reader["AppointmentID"] != DBNull.Value)
            {
                p.AppointmentID = Convert.ToInt64(reader["AppointmentID"]);
            }
            if (reader.HasColumn("AppointmentDate") && reader["AppointmentDate"] != DBNull.Value)
            {
                p.AppointmentDate = Convert.ToDateTime(reader["AppointmentDate"]);
            }
            //if (reader.HasColumn("Notes") && reader["Notes"] != DBNull.Value)
            //{
            //    p.Notes = reader["Notes"].ToString();
            //}
            //if (reader.HasColumn("IsDone") && reader["IsDone"] != DBNull.Value)
            //{
            //    p.IsDone = (bool)reader["IsDone"];
            //}
            if (reader.HasColumn("PatientPCLReqID") && reader["PatientPCLReqID"] != DBNull.Value)
            {
                p.PatientPCLRequest = new PatientPCLRequest();
                p.PatientPCLRequest.PatientPCLReqID = Convert.ToInt64(reader["PatientPCLReqID"]);
                if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
                {
                    p.PatientPCLRequest.Patient = new Patient();
                    p.PatientPCLRequest.Patient.PatientID = Convert.ToInt64(reader["PatientID"]);
                    if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
                    {
                        p.PatientPCLRequest.Patient.PatientCode = Convert.ToString(reader["PatientCode"]);
                    }
                    if (reader.HasColumn("PatientFullName") && reader["PatientFullName"] != DBNull.Value)
                    {
                        p.PatientPCLRequest.FullName = Convert.ToString(reader["PatientFullName"]);
                        p.PatientPCLRequest.Patient.FullName = Convert.ToString(reader["PatientFullName"]);
                    }
                }
                if (reader.HasColumn("V_PCLRequestType") && reader["V_PCLRequestType"] != DBNull.Value)
                {
                    p.PatientPCLRequest.V_PCLRequestType = (AllLookupValues.V_PCLRequestType)Convert.ToInt64(reader["V_PCLRequestType"]);
                }
                if (reader.HasColumn("V_PCLMainCategory") && reader["V_PCLMainCategory"] != DBNull.Value)
                {
                    p.PatientPCLRequest.V_PCLMainCategory = Convert.ToInt64(reader["V_PCLMainCategory"]);
                }
                //▼====: #087
                if (reader.HasColumn("ReqFromDeptID") && reader["ReqFromDeptID"] != DBNull.Value)
                {
                    p.PatientPCLRequest.ReqFromDeptID = Convert.ToInt64(reader["ReqFromDeptID"]);
                }
                //▲====: #087
            }
            if (reader.HasColumn("HosClientContractID") && reader["HosClientContractID"] != DBNull.Value)
            {
                p.HosClientContractID = Convert.ToInt64(reader["HosClientContractID"]);
            }
            if (reader.HasColumn("Result") && reader["Result"] != DBNull.Value)
            {
                p.Result = reader["Result"].ToString();
            }
            //▼====: #132
            if (reader.HasColumn("IsCountSE") && reader["IsCountSE"] != DBNull.Value)
            {
                p.IsCountSE = (bool)reader["IsCountSE"];
            }
            //▲====: #132
            return p;
        }
        //==== #001
        protected virtual List<InPatientInstruction> GetInPatientInstructionCollectionFromReader(IDataReader reader)
        {
            List<InPatientInstruction> mInPatientInstructionCollection = new List<InPatientInstruction>();
            while (reader.Read())
            {
                InPatientInstruction mInPatientInstruction = new InPatientInstruction();
                if (reader.HasColumn("IntPtDiagDrInstructionID") && reader["IntPtDiagDrInstructionID"] != DBNull.Value)
                {
                    mInPatientInstruction.IntPtDiagDrInstructionID = (long)reader["IntPtDiagDrInstructionID"];
                }
                if (reader.HasColumn("InstructionDate") && reader["InstructionDate"] != DBNull.Value)
                {
                    mInPatientInstruction.InstructionDate = Convert.ToDateTime(reader["InstructionDate"]);
                }
                if (reader.HasColumn("PulseAndBloodPressure") && reader["PulseAndBloodPressure"] != DBNull.Value)
                {
                    mInPatientInstruction.PulseAndBloodPressure = reader["PulseAndBloodPressure"].ToString();
                }
                //▼==== #131
                if (reader.HasColumn("RespiratoryRate") && reader["RespiratoryRate"] != DBNull.Value)
                {
                    mInPatientInstruction.RespiratoryRate = reader["RespiratoryRate"].ToString();
                }
                //▲==== #131
                if (reader.HasColumn("SpO2") && reader["SpO2"] != DBNull.Value)
                {
                    mInPatientInstruction.SpO2 = reader["SpO2"].ToString();
                }
                if (reader.HasColumn("Temperature") && reader["Temperature"] != DBNull.Value)
                {
                    mInPatientInstruction.Temperature = reader["Temperature"].ToString();
                }
                if (reader.HasColumn("Sense") && reader["Sense"] != DBNull.Value)
                {
                    mInPatientInstruction.Sense = reader["Sense"].ToString();
                }
                if (reader.HasColumn("BloodSugar") && reader["BloodSugar"] != DBNull.Value)
                {
                    mInPatientInstruction.BloodSugar = reader["BloodSugar"].ToString();
                }
                if (reader.HasColumn("Urine") && reader["Urine"] != DBNull.Value)
                {
                    mInPatientInstruction.Urine = reader["Urine"].ToString();
                }
                if (reader.HasColumn("ECG") && reader["ECG"] != DBNull.Value)
                {
                    mInPatientInstruction.ECG = reader["ECG"].ToString();
                }
                if (reader.HasColumn("PhysicalExamOther") && reader["PhysicalExamOther"] != DBNull.Value)
                {
                    mInPatientInstruction.PhysicalExamOther = reader["PhysicalExamOther"].ToString();
                }
                if (reader.HasColumn("Nebulized") && reader["Nebulized"] != DBNull.Value)
                {
                    mInPatientInstruction.Nebulized = reader["Nebulized"].ToString();
                }
                if (reader.HasColumn("Diet") && reader["Diet"] != DBNull.Value)
                {
                    mInPatientInstruction.Diet = reader["Diet"].ToString();
                }
                if (reader.HasColumn("LevelCare") && reader["LevelCare"] != DBNull.Value)
                {
                    mInPatientInstruction.LevelCare = (long)reader["LevelCare"];
                    if (reader.HasColumn("V_LevelCare") && reader["V_LevelCare"] != DBNull.Value)
                    {
                        mInPatientInstruction.V_LevelCare = new Lookup { LookupID = mInPatientInstruction.LevelCare, ObjectValue = reader["V_LevelCare"].ToString() };
                    }
                }
                if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
                {
                    mInPatientInstruction.DoctorStaff = new Staff
                    {
                        StaffID = (long)reader["DoctorStaffID"]
                    };
                    if (reader.HasColumn("DoctorFullName") && reader["DoctorFullName"] != DBNull.Value)
                    {
                        mInPatientInstruction.DoctorStaff.FullName = reader["DoctorFullName"].ToString();
                    }
                }
                if (reader.HasColumn("DepLocID") && reader["DepLocID"] != DBNull.Value)
                {
                    mInPatientInstruction.LocationInDept = new DeptLocation { DeptLocationID = (long)reader["DepLocID"] };
                    if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
                    {
                        mInPatientInstruction.LocationInDept.DeptID = (long)reader["DeptID"];
                    }
                    mInPatientInstruction.LocationInDept.Location = new Location();
                    if (reader.HasColumn("LID") && reader["LID"] != DBNull.Value)
                    {
                        mInPatientInstruction.LocationInDept.Location.LID = (long)reader["LID"];
                    }
                    if (reader.HasColumn("LocationName") && reader["LocationName"] != DBNull.Value)
                    {
                        mInPatientInstruction.LocationInDept.Location.LocationName = reader["LocationName"].ToString();
                    }
                }
                if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
                {
                    mInPatientInstruction.Department = new RefDepartment { DeptID = (long)reader["DeptID"] };
                    if (reader.HasColumn("DeptName") && reader["DeptName"] != DBNull.Value)
                    {
                        mInPatientInstruction.Department.DeptName = reader["DeptName"].ToString();
                    }
                }
                if (reader.HasColumn("InPatientDeptDetailID") && reader["InPatientDeptDetailID"] != DBNull.Value)
                {
                    mInPatientInstruction.InPatientDeptDetailID = (long)reader["InPatientDeptDetailID"];
                }
                if (reader.HasColumn("BedPatientID") && reader["BedPatientID"] != DBNull.Value)
                {
                    mInPatientInstruction.BedPatientID = (long)reader["BedPatientID"];
                }
                if (reader.HasColumn("IsCreatedOutward") && reader["IsCreatedOutward"] != DBNull.Value)
                {
                    mInPatientInstruction.IsCreatedOutward = Convert.ToBoolean(reader["IsCreatedOutward"]);
                }
                if (reader.HasColumn("LastModifiedDate") && reader["LastModifiedDate"] != DBNull.Value)
                {
                    mInPatientInstruction.LastModifiedDate = Convert.ToDateTime(reader["LastModifiedDate"]);
                }
                if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
                {
                    mInPatientInstruction.Staff = new Staff();
                    mInPatientInstruction.Staff.StaffID = (long)reader["StaffID"];
                }
                if (reader.HasColumn("InstructionOther") && reader["InstructionOther"] != DBNull.Value)
                {
                    mInPatientInstruction.InstructionOther = reader["InstructionOther"].ToString();
                }
                if (reader.HasColumn("PulseAndBloodPressure") && reader["PulseAndBloodPressure"] != DBNull.Value)
                {
                    mInPatientInstruction.PulseAndBloodPressure = reader["PulseAndBloodPressure"].ToString();
                }
                //▼==== #131
                if (reader.HasColumn("RespiratoryRate") && reader["RespiratoryRate"] != DBNull.Value)
                {
                    mInPatientInstruction.RespiratoryRate = reader["RespiratoryRate"].ToString();
                }
                //▲==== #131
                mInPatientInstructionCollection.Add(mInPatientInstruction);
            }
            return mInPatientInstructionCollection;
        }
        protected virtual List<TransmissionMonitor> GetInPatientTransmissionMonitorCollectionFromReader(IDataReader reader)
        {
            List<TransmissionMonitor> mTransmissionMonitorCollection = new List<TransmissionMonitor>();
            while (reader.Read())
            {
                TransmissionMonitor mTransmissionMonitor = new TransmissionMonitor();
                if (reader.HasColumn("TransmissionMonitorID") && reader["TransmissionMonitorID"] != DBNull.Value)
                {
                    mTransmissionMonitor.TransmissionMonitorID = (long)reader["TransmissionMonitorID"];
                }
                if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
                {
                    mTransmissionMonitor.PtRegistrationID = (long)reader["PtRegistrationID"];
                }
                if (reader.HasColumn("IntPtDiagDrInstructionID") && reader["IntPtDiagDrInstructionID"] != DBNull.Value)
                {
                    mTransmissionMonitor.IntPtDiagDrInstructionID = (long)reader["IntPtDiagDrInstructionID"];
                }
                if (reader.HasColumn("OutClinicDeptReqID") && reader["OutClinicDeptReqID"] != DBNull.Value)
                {
                    mTransmissionMonitor.OutClinicDeptReqID = (long)reader["OutClinicDeptReqID"];
                }
                if (reader.HasColumn("TransAmount") && reader["TransAmount"] != DBNull.Value)
                {
                    mTransmissionMonitor.TransAmount = (int)reader["TransAmount"];
                }
                if (reader.HasColumn("TransSpeed") && reader["TransSpeed"] != DBNull.Value)
                {
                    mTransmissionMonitor.TransSpeed = (int)reader["TransSpeed"];
                }
                if (reader.HasColumn("StartTime") && reader["StartTime"] != DBNull.Value)
                {
                    mTransmissionMonitor.StartTime = Convert.ToDateTime(reader["StartTime"]);
                }
                if (reader.HasColumn("EndTime") && reader["EndTime"] != DBNull.Value)
                {
                    mTransmissionMonitor.EndTime = Convert.ToDateTime(reader["EndTime"]);
                }
                if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
                {
                    mTransmissionMonitor.StaffID = Convert.ToInt64(reader["StaffID"]);
                }
                if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
                {
                    mTransmissionMonitor.BrandName = Convert.ToString(reader["BrandName"]);
                }
                if (reader.HasColumn("Qty") && reader["Qty"] != DBNull.Value)
                {
                    mTransmissionMonitor.Qty = Convert.ToDouble(reader["Qty"]);
                }
                if (reader.HasColumn("InBatchNumber") && reader["InBatchNumber"] != DBNull.Value)
                {
                    mTransmissionMonitor.InBatchNumber = Convert.ToString(reader["InBatchNumber"]);
                }
                if (reader.HasColumn("UsageDistance") && reader["UsageDistance"] != DBNull.Value)
                {
                    mTransmissionMonitor.UsageDistance = Convert.ToString(reader["UsageDistance"]);
                }

                mTransmissionMonitorCollection.Add(mTransmissionMonitor);
            }
            return mTransmissionMonitorCollection;
        }
        protected virtual List<Intravenous> GetIntravenousListFromReader(IDataReader reader)
        {
            List<Intravenous> IntravenousList = new List<Intravenous>();
            while (reader.Read())
            {
                Intravenous mIntravenous = new Intravenous();
                if (reader.HasColumn("IntravenousPlan_InPtID") && reader["IntravenousPlan_InPtID"] != DBNull.Value)
                {
                    mIntravenous.IntravenousID = (long)reader["IntravenousPlan_InPtID"];
                }
                if (IntravenousList.Any(x => x.IntravenousID == mIntravenous.IntravenousID))
                {
                    mIntravenous = IntravenousList.Where(x => x.IntravenousID == mIntravenous.IntravenousID).First();
                    mIntravenous.IntravenousDetails.Add(GetReqOutwardDrugClinicDeptPatientFromReader(reader));
                }
                else
                {
                    //if (reader.HasColumn("IntPtDiagDrInstructionID") && reader["IntPtDiagDrInstructionID"] != DBNull.Value)
                    //{
                    //    mIntravenous.IntPtDiagDrInstructionID = Convert.ToDateTime(reader["IntPtDiagDrInstructionID"]);
                    //}
                    if (reader.HasColumn("V_InfusionType") && reader["V_InfusionType"] != DBNull.Value)
                    {
                        mIntravenous.V_InfusionType = new Lookup { LookupID = (long)reader["V_InfusionType"] };
                        if (reader.HasColumn("InfusionType") && reader["InfusionType"] != DBNull.Value)
                        {
                            mIntravenous.V_InfusionType.ObjectValue = reader["InfusionType"].ToString();
                        }
                    }
                    if (reader.HasColumn("V_InfusionProcessType") && reader["V_InfusionProcessType"] != DBNull.Value)
                    {
                        mIntravenous.V_InfusionProcessType = new Lookup { LookupID = (long)reader["V_InfusionProcessType"] };
                        if (reader.HasColumn("InfusionProcessType") && reader["InfusionProcessType"] != DBNull.Value)
                        {
                            mIntravenous.V_InfusionProcessType.ObjectValue = reader["InfusionProcessType"].ToString();
                        }
                    }
                    if (reader.HasColumn("FlowRate") && reader["FlowRate"] != DBNull.Value)
                    {
                        mIntravenous.FlowRate = Convert.ToString(reader["FlowRate"]);
                    }
                    if (reader.HasColumn("InfusionTime") && reader["InfusionTime"] != DBNull.Value)
                    {
                        mIntravenous.InfusionTime = Convert.ToDecimal(reader["InfusionTime"]);
                    }
                    if (reader.HasColumn("NumOfTimes") && reader["NumOfTimes"] != DBNull.Value)
                    {
                        mIntravenous.NumOfTimes = Convert.ToString(reader["NumOfTimes"]);
                    }
                    if (reader.HasColumn("TimeInterval") && reader["TimeInterval"] != DBNull.Value)
                    {
                        mIntravenous.TimeInterval = Convert.ToInt16(reader["TimeInterval"]);
                    }
                    if (reader.HasColumn("V_TimeIntervalUnit") && reader["V_TimeIntervalUnit"] != DBNull.Value)
                    {
                        mIntravenous.V_TimeIntervalUnit = new Lookup { LookupID = (long)reader["V_TimeIntervalUnit"] };
                        if (reader.HasColumn("TimeIntervalUnit") && reader["TimeIntervalUnit"] != DBNull.Value)
                        {
                            mIntravenous.V_TimeIntervalUnit.ObjectValue = reader["TimeIntervalUnit"].ToString();
                        }
                    }
                    if (reader.HasColumn("StartDateTime") && reader["StartDateTime"] != DBNull.Value)
                    {
                        mIntravenous.StartDateTime = Convert.ToDateTime(reader["StartDateTime"]);
                    }
                    if (reader.HasColumn("StopDateTime") && reader["StopDateTime"] != DBNull.Value)
                    {
                        mIntravenous.StopDateTime = Convert.ToDateTime(reader["StopDateTime"]);
                    }
                    mIntravenous.IntravenousDetails = new ObservableCollection<ReqOutwardDrugClinicDeptPatient>();
                    mIntravenous.IntravenousDetails.Add(GetReqOutwardDrugClinicDeptPatientFromReader(reader));
                    if (mIntravenous.IntravenousID == 0)
                        IntravenousList.Insert(0, mIntravenous);
                    else
                        IntravenousList.Add(mIntravenous);
                }
            }

            return IntravenousList;
        }
        //==== #001
        public virtual List<PatientPCLRequestDetail> GetPatientPCLRequestDetailsCollectionFromReader(IDataReader reader)
        {
            var p = new List<PatientPCLRequestDetail>();
            while (reader.Read())
            {
                p.Add(GetPatientPCLRequestDetailsFromReader(reader));
            }
            return p;
        }

        protected virtual PatientPCLRequestDetail_Ext GetPatientPCLRequestDetailsExtFromReader(IDataReader reader, long? staffID = null)
        {
            var p = new PatientPCLRequestDetail_Ext
            {
                PCLReqItemExtID = (long)reader["PCLReqItemExtID"],
                PCLExamTypeID = (long)reader["PCLExamTypeID"],
                NumberOfTest = reader["NumberOfTest"] as byte?,
                StaffID = staffID,
                HIAllowedPrice = reader["HIAllowedPrice"] as decimal?,
                InvoicePrice = (decimal)reader["Price"],
                TotalHIPayment = (reader["TotalHIPayment"] as decimal?).GetValueOrDefault(),
                TotalInvoicePrice = (reader["Amount"] as decimal?).GetValueOrDefault(),
                TotalCoPayment = (reader["AmountCoPay"] as decimal?).GetValueOrDefault()
            };

            try
            {
                if (reader.HasColumn("PatientPCLReqExtID") && reader["PatientPCLReqExtID"] != DBNull.Value)
                {
                    p.PatientPCLReqExtID = (long)(reader["PatientPCLReqExtID"]);
                }

                //if (reader.HasColumn("PCLExamTypeName") && reader["PCLExamTypeName"] != DBNull.Value)
                //{
                //    p.PCLExamType PCLExamTypeName = reader["PCLExamTypeName"].ToString();
                //}

                if (reader.HasColumn("PCLReqItemExtID") && reader["PCLReqItemExtID"] != DBNull.Value)
                {
                    p.PCLReqItemExtID = (long)(reader["PCLReqItemExtID"]);
                }

                if (reader.HasColumn("HIBenefit") && reader["HIBenefit"] != DBNull.Value)
                {
                    p.HIBenefit = Convert.ToDouble(reader["HIBenefit"]);
                }
                if (p.HIBenefit.GetValueOrDefault(0) > 0)
                {
                    p.HiApplied = true;
                }
                else
                {
                    p.HiApplied = false;
                }
                if (reader.HasColumn("IsCountHI") && reader["IsCountHI"] != DBNull.Value)
                {
                    p.IsCountHI = (bool)reader["IsCountHI"];
                }
                else
                {
                    p.IsCountHI = (p.HIBenefit.GetValueOrDefault(0) > 0) ? true : false;
                }
                p.TotalPatientPayment = p.TotalInvoicePrice - p.TotalHIPayment - p.OtherAmt;
                p.PriceDifference = p.InvoicePrice - p.HIAllowedPrice.GetValueOrDefault(0);
                p.TotalPriceDifference = p.TotalInvoicePrice - p.TotalHIPayment - p.TotalCoPayment;

                p.RecordState = RecordState.UNCHANGED;
                p.EntityState = EntityState.PERSITED;

                if (reader.HasColumn("RegStaffFullName") && reader["RegStaffFullName"] != DBNull.Value)
                {
                    p.RegStaffFullName = reader["RegStaffFullName"].ToString();
                }

                if (reader.HasColumn("ServiceSeqNum") && reader["ServiceSeqNum"] != DBNull.Value)
                {
                    p.ServiceSeqNum = (int)reader["ServiceSeqNum"];
                }
                if (reader.HasColumn("ServiceSeqNumType"))
                {
                    p.ServiceSeqNumType = (byte)reader["ServiceSeqNumType"];
                }
                p.ServiceSeqNumString = AxHelper.GetSequenceNumber(p.ServiceSeqNumType, p.ServiceSeqNum);


                if (reader.HasColumn("PatientPCLRequestDetails_MarkedAsDeleted")) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
                {
                    if (reader["PatientPCLRequestDetails_MarkedAsDeleted"] != DBNull.Value)
                    {
                        p.MarkedAsDeleted = (bool)reader["PatientPCLRequestDetails_MarkedAsDeleted"];
                    }
                    else
                    {
                        p.MarkedAsDeleted = false;
                    }
                }
                else if (reader.HasColumn("MarkedAsDeleted")) //Roi moi tinh toi field trong bang cua no.
                {
                    if (reader["MarkedAsDeleted"] != DBNull.Value)
                    {
                        p.MarkedAsDeleted = (bool)reader["MarkedAsDeleted"];
                    }
                    else
                    {
                        p.MarkedAsDeleted = false;
                    }
                }

                if (p.MarkedAsDeleted)
                {
                    p.RecordState = RecordState.DELETED;
                    p.EntityState = EntityState.DELETED_PERSITED;
                }

                if (reader.HasColumn("CreatedDate"))
                {
                    p.CreatedDate = (DateTime)reader["CreatedDate"];
                }
                else
                {
                    p.CreatedDate = DateTime.MinValue;
                }

                if (reader.HasColumn("PatientPCLRequestDetails_V_ExamRegStatus")) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
                {
                    if (reader["PatientPCLRequestDetails_V_ExamRegStatus"] != DBNull.Value)
                    {
                        p.V_ExamRegStatus = (long)reader["PatientPCLRequestDetails_V_ExamRegStatus"];
                    }
                }
                else if (reader.HasColumn("V_ExamRegStatus")) //Roi moi tinh toi field trong bang cua no.
                {
                    if (reader["V_ExamRegStatus"] != DBNull.Value)
                    {
                        p.V_ExamRegStatus = (long)reader["V_ExamRegStatus"];
                    }
                }


                if (Enum.IsDefined(typeof(AllLookupValues.ExamRegStatus), (int)p.V_ExamRegStatus))
                {
                    p.ExamRegStatus = (AllLookupValues.ExamRegStatus)p.V_ExamRegStatus;
                }
                else
                {
                    p.ExamRegStatus = AllLookupValues.ExamRegStatus.KHONG_XAC_DINH;
                }

                try
                {
                    p.PCLExamType = GetPCLExamTypeFromReader(reader);
                }
                catch
                {
                    p.PCLExamType = null;
                }

                if (reader.HasColumn("DeptLocID") && reader["DeptLocID"] != DBNull.Value)
                {
                    p.DeptLocation = GetDeptLocationFromReader(reader);
                }

                var pclItemPrice = p.PCLExamType as IChargeableItemPrice;
                pclItemPrice.HIAllowedPrice = p.HIAllowedPrice;
                pclItemPrice.HIPatientPrice = p.InvoicePrice;
                pclItemPrice.NormalPrice = p.InvoicePrice;
                if (reader.HasColumn("HIBenefit"))
                {
                    p.HIBenefit = reader["HIBenefit"] as double?;
                }
                if (reader.HasColumn("HisID") && reader["HisID"] != DBNull.Value)
                {
                    p.HisID = reader["HisID"] as long?;
                }
                if (reader.HasColumn("PaidTime")) //Roi moi tinh toi field trong bang cua no.
                {
                    p.PaidTime = reader["PaidTime"] as DateTime?;
                }
                else
                    if (reader.HasColumn("detailPaidTime")) // Uu tien truong hop nay. So trung thuoc field name voi may thang khac
                {
                    p.PaidTime = reader["detailPaidTime"] as DateTime?;
                }


                if (reader.HasColumn("RefundTime")) //Roi moi tinh toi field trong bang cua no.
                {
                    p.RefundTime = reader["RefundTime"] as DateTime?;
                }
                else
                    if (reader.HasColumn("detailRefundTime")) //Roi moi tinh toi field trong bang cua no.
                {
                    p.RefundTime = reader["detailRefundTime"] as DateTime?;
                }

                if (reader.HasColumn("V_ExamRegStatusName"))
                {
                    p.V_ExamRegStatusName = reader["V_ExamRegStatusName"] == null ? "" : reader["V_ExamRegStatusName"].ToString().Trim();
                }

                if (reader.HasColumn("PCLSectionName"))
                {
                    p.PCLSectionName = reader["PCLSectionName"] == null ? "" : reader["PCLSectionName"].ToString().Trim();
                }

                //dung de tinh lai BH
                if (reader.HasColumn("HIAllowedPriceNew"))
                {
                    p.ChargeableItem.HIAllowedPriceNew = reader["HIAllowedPriceNew"] as decimal?;
                }
                if (reader.HasColumn("HIPatientPriceNew"))
                {
                    p.ChargeableItem.HIPatientPriceNew = Convert.ToDecimal(reader["HIPatientPriceNew"]);
                }

                if (reader.HasColumn("NormalPriceNew"))
                {
                    p.ChargeableItem.NormalPriceNew = Convert.ToDecimal(reader["NormalPriceNew"]);
                }
                try
                {
                    p.patientPCLRequest_Ext = GetPatientPCLRequestExtFromReader(reader);
                }
                catch (Exception)
                {

                }

            }
            catch (Exception ex)
            {
                AxLogger.Instance.LogError(ex);
            }
            //dung de tinh lai BH
            return p;
        }
        //▼====: #095
        public virtual List<PCLExamAccordingICD> GetPCLExamAccordingICDCollectionFromReader(IDataReader reader)
        {
            var p = new List<PCLExamAccordingICD>();
            while (reader.Read())
            {
                p.Add(GetPCLExamAccordingICDFromReader(reader));
            }
            return p;
        }

        protected virtual PCLExamAccordingICD GetPCLExamAccordingICDFromReader(IDataReader reader, long? staffID = null)
        {
            var p = new PCLExamAccordingICD();
            if (reader.HasColumn("MedicalInstructionDate") && reader["MedicalInstructionDate"] != DBNull.Value)
            {
                p.MedicalInstructionDate = Convert.ToDateTime(reader["MedicalInstructionDate"]);
                p.MedicalInstructionDateStr = Convert.ToDateTime(reader["MedicalInstructionDate"]).ToString("dd/MM/yyy");
            }
            if (reader.HasColumn("PCLExamTypeID") && reader["PCLExamTypeID"] != DBNull.Value)
            {
                p.PCLExamTypeID = Convert.ToInt64(reader["PCLExamTypeID"]);
                p.PCLExamType = new PCLExamType();
                try
                {
                    p.PCLExamType = GetPCLExamTypeFromReader(reader);
                }
                catch (Exception ex)
                {

                }
            }
            return p;
        }
        //▲====: #095
        protected virtual AdmissionExamination GetAdmissionExaminationFromReader(IDataReader reader)
        {
            var p = new AdmissionExamination();
            if (reader.HasColumn("AdmissionExaminationID") && reader["AdmissionExaminationID"] != DBNull.Value)
            {
                p.AdmissionExaminationID = Convert.ToInt64(reader["AdmissionExaminationID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("ReferralDiagnosis") && reader["ReferralDiagnosis"] != DBNull.Value)
            {
                p.ReferralDiagnosis = Convert.ToString(reader["ReferralDiagnosis"]);
            }
            if (reader.HasColumn("PathologicalProcess") && reader["PathologicalProcess"] != DBNull.Value)
            {
                p.PathologicalProcess = Convert.ToString(reader["PathologicalProcess"]);
            }
            if (reader.HasColumn("MedicalHistory") && reader["MedicalHistory"] != DBNull.Value)
            {
                p.MedicalHistory = Convert.ToString(reader["MedicalHistory"]);
            }
            if (reader.HasColumn("FamilyMedicalHistory") && reader["FamilyMedicalHistory"] != DBNull.Value)
            {
                p.FamilyMedicalHistory = Convert.ToString(reader["FamilyMedicalHistory"]);
            }
            if (reader.HasColumn("FullBodyExamination") && reader["FullBodyExamination"] != DBNull.Value)
            {
                p.FullBodyExamination = Convert.ToString(reader["FullBodyExamination"]);
            }
            if (reader.HasColumn("PartialExamination") && reader["PartialExamination"] != DBNull.Value)
            {
                p.PartialExamination = Convert.ToString(reader["PartialExamination"]);
            }
            if (reader.HasColumn("PclResult") && reader["PclResult"] != DBNull.Value)
            {
                p.PclResult = Convert.ToString(reader["PclResult"]);
            }
            if (reader.HasColumn("DrugTreatment") && reader["DrugTreatment"] != DBNull.Value)
            {
                p.DrugTreatment = Convert.ToString(reader["DrugTreatment"]);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaffID = Convert.ToInt64(reader["CreatedStaffID"]);
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("LogModified") && reader["LogModified"] != DBNull.Value)
            {
                p.LogModified = Convert.ToString(reader["LogModified"]);
            }
            //▼====: #111
            if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
            {
                p.DeptID = Convert.ToInt64(reader["DeptID"]);
            }
            if (reader.HasColumn("ReasonAdmission") && reader["ReasonAdmission"] != DBNull.Value)
            {
                p.ReasonAdmission = Convert.ToString(reader["ReasonAdmission"]);
            }
            if (reader.HasColumn("Notes") && reader["Notes"] != DBNull.Value)
            {
                p.Notes = Convert.ToString(reader["Notes"]);
            }
            if (reader.HasColumn("DiagnosisResult") && reader["DiagnosisResult"] != DBNull.Value)
            {
                p.DiagnosisResult = Convert.ToString(reader["DiagnosisResult"]);
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                p.V_RegistrationType = Convert.ToInt64(reader["V_RegistrationType"]);
            }
            //▲====: #111
            return p;
        }
        protected virtual SelfDeclaration GetSelfDeclarationFromReader(IDataReader reader)
        {
            var p = new SelfDeclaration();
            if (reader.HasColumn("SelfDeclarationSheetID") && reader["SelfDeclarationSheetID"] != DBNull.Value)
            {
                p.SelfDeclarationSheetID = Convert.ToInt64(reader["SelfDeclarationSheetID"]);
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientID = Convert.ToInt64(reader["PatientID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                p.V_RegistrationType = Convert.ToInt64(reader["V_RegistrationType"]);
            }
            if (reader.HasColumn("Answer1") && reader["Answer1"] != DBNull.Value)
            {
                p.Answer1 = Convert.ToBoolean(reader["Answer1"]);
            }
            if (reader.HasColumn("Answer1_Count") && reader["Answer1_Count"] != DBNull.Value)
            {
                p.Answer1_Count = Convert.ToInt32(reader["Answer1_Count"]);
            }
            if (reader.HasColumn("Answer1_Drug") && reader["Answer1_Drug"] != DBNull.Value)
            {
                p.Answer1_Drug = Convert.ToString(reader["Answer1_Drug"]);
            }
            if (reader.HasColumn("Answer1_Solve") && reader["Answer1_Solve"] != DBNull.Value)
            {
                p.Answer1_Solve = Convert.ToString(reader["Answer1_Solve"]);
            }
            if (reader.HasColumn("Answer2") && reader["Answer2"] != DBNull.Value)
            {
                p.Answer2 = Convert.ToBoolean(reader["Answer2"]);
            }
            if (reader.HasColumn("Answer2_Count") && reader["Answer2_Count"] != DBNull.Value)
            {
                p.Answer2_Count = Convert.ToInt32(reader["Answer2_Count"]);
            }
            if (reader.HasColumn("Answer2_Drug") && reader["Answer2_Drug"] != DBNull.Value)
            {
                p.Answer2_Drug = Convert.ToString(reader["Answer2_Drug"]);
            }
            if (reader.HasColumn("Answer2_Solve") && reader["Answer2_Solve"] != DBNull.Value)
            {
                p.Answer2_Solve = Convert.ToString(reader["Answer2_Solve"]);
            }
            if (reader.HasColumn("Answer3") && reader["Answer3"] != DBNull.Value)
            {
                p.Answer3 = Convert.ToBoolean(reader["Answer3"]);
            }
            if (reader.HasColumn("Answer3_Count") && reader["Answer3_Count"] != DBNull.Value)
            {
                p.Answer3_Count = Convert.ToInt32(reader["Answer3_Count"]);
            }
            if (reader.HasColumn("Answer3_Drug") && reader["Answer3_Drug"] != DBNull.Value)
            {
                p.Answer3_Drug = Convert.ToString(reader["Answer3_Drug"]);
            }
            if (reader.HasColumn("Answer3_Solve") && reader["Answer3_Solve"] != DBNull.Value)
            {
                p.Answer3_Solve = Convert.ToString(reader["Answer3_Solve"]);
            }
            if (reader.HasColumn("Answer4") && reader["Answer4"] != DBNull.Value)
            {
                p.Answer4 = Convert.ToBoolean(reader["Answer4"]);
            }
            if (reader.HasColumn("Answer4_Count") && reader["Answer4_Count"] != DBNull.Value)
            {
                p.Answer4_Count = Convert.ToInt32(reader["Answer4_Count"]);
            }
            if (reader.HasColumn("Answer4_Drug") && reader["Answer4_Drug"] != DBNull.Value)
            {
                p.Answer4_Drug = Convert.ToString(reader["Answer4_Drug"]);
            }
            if (reader.HasColumn("Answer4_Solve") && reader["Answer4_Solve"] != DBNull.Value)
            {
                p.Answer4_Solve = Convert.ToString(reader["Answer4_Solve"]);
            }
            if (reader.HasColumn("Answer5") && reader["Answer5"] != DBNull.Value)
            {
                p.Answer5 = Convert.ToBoolean(reader["Answer5"]);
            }
            if (reader.HasColumn("Answer5_Count") && reader["Answer5_Count"] != DBNull.Value)
            {
                p.Answer5_Count = Convert.ToInt32(reader["Answer5_Count"]);
            }
            if (reader.HasColumn("Answer5_Drug") && reader["Answer5_Drug"] != DBNull.Value)
            {
                p.Answer5_Drug = Convert.ToString(reader["Answer5_Drug"]);
            }
            if (reader.HasColumn("Answer5_Solve") && reader["Answer5_Solve"] != DBNull.Value)
            {
                p.Answer5_Solve = Convert.ToString(reader["Answer5_Solve"]);
            }
            if (reader.HasColumn("Answer6") && reader["Answer6"] != DBNull.Value)
            {
                p.Answer6 = Convert.ToBoolean(reader["Answer6"]);
            }
            if (reader.HasColumn("Answer6_Count") && reader["Answer6_Count"] != DBNull.Value)
            {
                p.Answer6_Count = Convert.ToInt32(reader["Answer6_Count"]);
            }
            if (reader.HasColumn("Answer6_Drug") && reader["Answer6_Drug"] != DBNull.Value)
            {
                p.Answer6_Drug = Convert.ToString(reader["Answer6_Drug"]);
            }
            if (reader.HasColumn("Answer6_Solve") && reader["Answer6_Solve"] != DBNull.Value)
            {
                p.Answer6_Solve = Convert.ToString(reader["Answer6_Solve"]);
            }
            //▼==== #158
            if (reader.HasColumn("RelativeFullName") && reader["RelativeFullName"] != DBNull.Value)
            {
                p.RelativeFullName = Convert.ToString(reader["RelativeFullName"]);
            }
            if (reader.HasColumn("RelativeAge") && reader["RelativeAge"] != DBNull.Value)
            {
                p.RelativeAge = Convert.ToString(reader["RelativeAge"]);
            }
            if (reader.HasColumn("Relationship") && reader["Relationship"] != DBNull.Value)
            {
                p.Relationship = Convert.ToString(reader["Relationship"]);
            }
            if (reader.HasColumn("RelativePhone") && reader["RelativePhone"] != DBNull.Value)
            {
                p.RelativePhone = Convert.ToString(reader["RelativePhone"]);
            }
            if (reader.HasColumn("TotalCost") && reader["TotalCost"] != DBNull.Value)
            {
                p.TotalCost = Convert.ToDecimal(reader["TotalCost"]);
            }
            //▲==== #158
            return p;
        }

        //▼==== #160
        protected virtual List<InfectionControl> GetInfectionControlCollectionFromReader(IDataReader reader)
        {
            List<InfectionControl> InfectionControl = new List<InfectionControl>();
            try
            {
                while (reader.Read())
                {
                    InfectionControl.Add(GetInfectionControlFromReader(reader));
                }
            }
            catch { }

            return InfectionControl;
        }

        protected virtual InfectionControl GetInfectionControlFromReader(IDataReader reader)
        {
            var p = new InfectionControl();
            if (reader.HasColumn("InfectionControlID") && reader["InfectionControlID"] != DBNull.Value)
            {
                p.InfectionControlID = Convert.ToInt64(reader["InfectionControlID"]);
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientID = Convert.ToInt64(reader["PatientID"]);
            }
            if (reader.HasColumn("InPatientAdmDisDetailID") && reader["InPatientAdmDisDetailID"] != DBNull.Value)
            {
                p.InPatientAdmDisDetailID = Convert.ToInt64(reader["InPatientAdmDisDetailID"]);
            }
            if (reader.HasColumn("BacteriaType") && reader["BacteriaType"] != DBNull.Value)
            {
                p.BacteriaType = Convert.ToInt32(reader["BacteriaType"]);
            }
            if (reader.HasColumn("DefiniteDate") && reader["DefiniteDate"] != DBNull.Value)
            {
                p.DefiniteDate = Convert.ToDateTime(reader["DefiniteDate"]);
            }
            if (reader.HasColumn("BacteriaName") && reader["BacteriaName"] != DBNull.Value)
            {
                p.BacteriaName = Convert.ToString(reader["BacteriaName"]);
            }
            if (reader.HasColumn("V_Bacteria_LOT") && reader["V_Bacteria_LOT"] != DBNull.Value)
            {
                p.V_Bacteria_LOT = Convert.ToInt64(reader["V_Bacteria_LOT"]);
            }
            if (reader.HasColumn("Bacteria_LOT_Str") && reader["Bacteria_LOT_Str"] != DBNull.Value)
            {
                p.Bacteria_LOT_Str = Convert.ToString(reader["Bacteria_LOT_Str"]);
            }
            if (reader.HasColumn("BacteriaMeasure") && reader["BacteriaMeasure"] != DBNull.Value)
            {
                p.BacteriaMeasure = Convert.ToString(reader["BacteriaMeasure"]);
            }
            if (reader.HasColumn("isCurAdmisIC") && reader["isCurAdmisIC"] != DBNull.Value)
            {
                p.isCurAdmisIC = Convert.ToBoolean(reader["isCurAdmisIC"]);
            }
            return p;
        }
        //▲=== #160

        public virtual List<PatientPCLRequestDetail_Ext> GetPatientPCLRequestDetailsExtCollectionFromReader(IDataReader reader)
        {
            var p = new List<PatientPCLRequestDetail_Ext>();
            while (reader.Read())
            {
                p.Add(GetPatientPCLRequestDetailsExtFromReader(reader));
            }
            return p;
        }


        protected virtual PatientPCLRequestDetail GetPatientPCLRequestDetailForViewResultsFromReader(IDataReader reader, long? staffID = null)
        {
            var p = new PatientPCLRequestDetail
            {
                PCLReqItemID = (long)reader["PCLReqItemID"],
                PCLExamTypeID = (long)reader["PCLExamTypeID"],
                PatientPCLReqID = (long)reader["PatientPCLReqID"]
            };

            if (reader.HasColumn("PCLExamTypeName"))
            {
                p.PCLExamType = new PCLExamType();
                p.PCLExamType.PCLExamTypeID = (long)reader["PCLExamTypeID"];
                p.PCLExamType.PCLExamTypeName = reader["PCLExamTypeName"].ToString();
            }

            p.PatientPCLRequest = GetPatientPCLRequestFromReader(reader);
            return p;
        }
        public virtual List<PatientPCLRequestDetail> GetPatientPCLRequestDetailForViewResultsCollectionFromReader(IDataReader reader)
        {
            var p = new List<PatientPCLRequestDetail>();
            while (reader.Read())
            {
                p.Add(GetPatientPCLRequestDetailForViewResultsFromReader(reader));
            }
            return p;
        }

        protected virtual PCLForm GetPCLFormsFromReader(IDataReader reader)
        {
            var p = new PCLForm
            {
                PCLFormID = (long)reader["PCLFormID"],
                V_PCLMainCategory = (long)reader["V_PCLMainCategory"],
                PCLFormName = reader["PCLFormName"].ToString(),
                ApplicatorDay = reader["ApplicatorDay"] as DateTime?,
                ExpiredDay = reader["ExpiredDay"] as DateTime?,
                ObjV_PCLMainCategory = new Lookup()
            };

            try
            {
                p.ObjV_PCLMainCategory = GetLookupFromReader(reader);
            }
            catch
            {

            }

            return p;
        }
        protected virtual List<PCLForm> GetPCLFormsColectionsFromReader(IDataReader reader)
        {
            var p = new List<PCLForm>();
            while (reader.Read())
            {
                p.Add(GetPCLFormsFromReader(reader));
            }
            return p;
        }

        protected virtual PCLGroup GetPCLGroupFromReader(IDataReader reader)
        {
            var p = new PCLGroup
            {
                PCLGroupID = (long)reader["PCLGroupID"],
                PCLGroupName = (string)reader["PCLGroupName"],
                Description = reader["Description"] as string,
                V_PCLCategory = (long)reader["V_PCLCategory"]
            };
            try
            {
                p.ObjV_PCLCategory = GetLookupFromReader(reader);
            }
            catch
            {
                p.ObjV_PCLCategory = null;
            }
            return p;
        }
        protected virtual List<PCLGroup> GetPCLGroupColectionFromReader(IDataReader reader)
        {
            var p = new List<PCLGroup>();
            while (reader.Read())
            {
                p.Add(GetPCLGroupFromReader(reader));
            }
            return p;
        }

        protected virtual PCLExamType GetPCLExamTypeFromReader(IDataReader reader)
        {
            var p = new PCLExamType { PCLExamTypeID = (long)reader["PCLExamTypeID"] };

            if (reader.HasColumn("PCLSectionID"))
            {
                p.PCLSectionID = reader["PCLSectionID"] as long?;
            }

            p.ObjPCLSectionID = new PCLSection();
            try
            {
                if (p.PCLSectionID != null) p.ObjPCLSectionID.PCLSectionID = p.PCLSectionID.Value;
                if (reader.HasColumn("PCLSectionName"))
                {
                    p.ObjPCLSectionID.PCLSectionName = reader["PCLSectionName"] == null ? "" : reader["PCLSectionName"].ToString().Trim();
                }

                if (reader.HasColumn("PCLSectionName"))
                {
                    p.PCLSectionName = reader["PCLSectionName"] == null ? "" : reader["PCLSectionName"].ToString().Trim();
                }
            }
            catch
            {

            }

            //Main
            if (reader.HasColumn("V_PCLMainCategory") && reader["V_PCLMainCategory"] != DBNull.Value)
            {
                p.V_PCLMainCategory = Convert.ToInt64(reader["V_PCLMainCategory"]);
            }
            else
            {
                p.V_PCLMainCategory = 0;
            }

            if (reader.HasColumn("PCLResultParamImpID") && (p.V_PCLMainCategory == (long)AllLookupValues.V_PCLMainCategory.Imaging || p.V_PCLMainCategory == (long)AllLookupValues.V_PCLMainCategory.GeneralSugery) && reader["PCLResultParamImpID"] != DBNull.Value)
            {
                p.PCLResultParamImpID = reader["PCLResultParamImpID"] as long?;
                p.ObjPCLResultParamImpID = new PCLResultParamImplementations();
                p.ObjPCLResultParamImpID = GetPCLResultParamImplementationsFromReader(reader);
            }


            if (reader.HasColumn("HIIssueCode1") && reader["HIIssueCode1"] != DBNull.Value)
            {
                p.HIIssueCode1 = reader["HIIssueCode1"].ToString();
            }

            if (reader.HasColumn("HIIssueCode2") && reader["HIIssueCode2"] != DBNull.Value)
            {
                p.HIIssueCode2 = reader["HIIssueCode2"].ToString();
            }

            if (reader.HasColumn("PCLExamTypeComboID") && reader["PCLExamTypeComboID"] != DBNull.Value)
            {
                p.PCLExamTypeComboID = (long)reader["PCLExamTypeComboID"];
            }
            if (reader.HasColumn("IDCode"))
            {
                p.IDCode = reader["IDCode"] as long?;
            }

            if (reader.HasColumn("HICode") && reader["HICode"] != DBNull.Value)
            {
                p.HICode = reader["HICode"].ToString();
            }

            if (reader.HasColumn("PCLExamTypeName_Ax") && reader["PCLExamTypeName_Ax"] != DBNull.Value)
            {
                p.PCLExamTypeName_Ax = reader["PCLExamTypeName_Ax"].ToString();
            }

            p.ObjV_PCLMainCategory = new Lookup();
            try
            {
                p.ObjV_PCLMainCategory.LookupID = p.V_PCLMainCategory;
                if (reader.HasColumn("V_PCLMainCategoryName"))
                {
                    p.ObjV_PCLMainCategory.ObjectValue = reader["V_PCLMainCategoryName"] == null ? "" : reader["V_PCLMainCategoryName"].ToString().Trim();
                }
            }
            catch
            {
            }


            //Sub
            if (reader.HasColumn("PCLExamTypeSubCategoryID") && reader["PCLExamTypeSubCategoryID"] != DBNull.Value)
            {
                p.PCLExamTypeSubCategoryID = Convert.ToInt64(reader["PCLExamTypeSubCategoryID"]);
            }
            else
            {
                p.PCLExamTypeSubCategoryID = 0;
            }

            p.ObjPCLExamTypeSubCategoryID = new PCLExamTypeSubCategory();
            try
            {
                p.ObjPCLExamTypeSubCategoryID.PCLExamTypeSubCategoryID = p.PCLExamTypeSubCategoryID.Value;
                if (reader.HasColumn("PCLSubCategoryName"))
                {
                    p.ObjPCLExamTypeSubCategoryID.PCLSubCategoryName = reader["PCLSubCategoryName"] == null ? "" : reader["PCLSubCategoryName"].ToString().Trim();
                }
                if (reader.HasColumn("IsSendToPAC") && reader["IsSendToPAC"] != DBNull.Value)
                {
                    p.ObjPCLExamTypeSubCategoryID.IsSendToPAC = Convert.ToBoolean(reader["IsSendToPAC"]);
                }
                if (reader.HasColumn("SubCategoryCodeToPAC") && reader["SubCategoryCodeToPAC"] != DBNull.Value)
                {
                    p.ObjPCLExamTypeSubCategoryID.SubCategoryCodeToPAC = Convert.ToString(reader["SubCategoryCodeToPAC"]);
                }
            }
            catch
            {
            }
            //Sub


            if (reader.HasColumn("PCLFormID") && reader["PCLFormID"] != DBNull.Value)
            {
                p.PCLFormID = reader["PCLFormID"] as long?;
            }


            if (reader.HasColumn("PCLExamTypeName"))
            {
                p.PCLExamTypeName = reader["PCLExamTypeName"] == null ? "" : reader["PCLExamTypeName"].ToString().Trim();
            }

            if (reader.HasColumn("PCLExamTypeDescription"))
            {
                p.PCLExamTypeDescription = reader["PCLExamTypeDescription"] == null ? "" : reader["PCLExamTypeDescription"].ToString().Trim();
            }


            if (reader.HasColumn("PCLExamTypeCode"))
            {
                p.PCLExamTypeCode = reader["PCLExamTypeCode"] == null ? "" : reader["PCLExamTypeCode"].ToString().Trim();
            }


            p.ObjV_PCLExamTypeUnit = new Lookup();
            if (reader.HasColumn("V_PCLExamTypeUnit"))
            {
                p.V_PCLExamTypeUnit = (long)reader["V_PCLExamTypeUnit"];
                p.ObjV_PCLExamTypeUnit.LookupID = (long)reader["V_PCLExamTypeUnit"];

                if (reader.HasColumn("V_PCLExamTypeUnitName"))
                {
                    p.ObjV_PCLExamTypeUnit.ObjectValue = reader["V_PCLExamTypeUnitName"] == null ? "" : reader["V_PCLExamTypeUnitName"].ToString().Trim();
                }
            }

            if (reader.HasColumn("IsActive"))
            {
                p.IsActive = reader["IsActive"] as bool?;
            }

            if (reader.HasColumn("HIApproved"))
            {
                p.HIApproved = reader["HIApproved"] == null ? false : reader["HIApproved"] as bool?;
            }

            if (reader.HasColumn("IsExternalExam"))
            {
                p.IsExternalExam = reader["IsExternalExam"] as bool?;
            }

            if (reader.HasColumn("HosIDofExternalExam") && reader["HosIDofExternalExam"] != DBNull.Value)
            {
                p.HosIDofExternalExam = reader["HosIDofExternalExam"] as long?;
                //p.PCLExamTypeName += " (N.V)";
            }


            p.NormalPrice = 0;
            try
            {
                if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
                {
                    p.NormalPrice = (decimal)reader["NormalPrice"];
                }
            }
            catch
            {

            }
            p.HIPatientPrice = 0;
            try
            {
                if (reader.HasColumn("PriceForHIPatient") && reader["PriceForHIPatient"] != DBNull.Value)
                {
                    p.HIPatientPrice = (decimal)reader["PriceForHIPatient"];
                }
            }
            catch
            {

            }
            p.HIAllowedPrice = 0;
            try
            {
                if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
                {
                    p.HIAllowedPrice = (decimal)reader["HIAllowedPrice"];
                }
            }
            catch
            {

            }
            try
            {
                p.ObjPCLExamTypePrice = GetPCLExamTypePriceFromReader(reader);
            }
            catch
            {
                p.ObjPCLExamTypePrice = null;
            }
            p.ObjHITTypeID = new HITransactionType();
            if (reader.HasColumn("HITTypeID") && reader["HITTypeID"] != DBNull.Value)
            {
                p.HITTypeID = (long)reader["HITTypeID"];

                try
                {
                    p.ObjHITTypeID = GetHITransactionTypeFromReader(reader);
                }
                catch
                {

                }
            }
            p.ObjDeptLocationList = new ObservableCollection<DeptLocation>();
            //can lam sang so 
            if (reader.HasColumn("PCLExamTypeServiceTargetID") && reader["PCLExamTypeServiceTargetID"] != DBNull.Value)
            {
                try
                {
                    p.ObjPCLExamTypeServiceTarget = GetPCLExamTypeServiceTargetFromReader(reader);
                }
                catch
                { }
            }
            //kiem tra neu dang ky cls da hoan tat thi update iselected cua PCLExamtype
            if (reader.HasColumn("V_ExamRegStatus") && reader["V_ExamRegStatus"] != DBNull.Value)
            {
                try
                {
                    p.IsSelected = (long)reader["V_ExamRegStatus"] == (long)V_ExamRegStatus.mHoanTat ? true : false;
                }
                catch
                {
                }
                p.IsHaveRequest = true;
            }
            else
            {
                p.IsHaveRequest = false;
            }
            if (reader.HasColumn("V_NewPriceType") && reader["V_NewPriceType"] != DBNull.Value)
            {
                p.V_NewPriceType = Convert.ToInt32(reader["V_NewPriceType"]);
            }
            if (reader.HasColumn("HICode5084") && reader["HICode5084"] != DBNull.Value)
            {
                p.HICode5084 = reader["HICode5084"] as string;
            }
            if (reader.HasColumn("IsAllowToPayAfter") && reader["IsAllowToPayAfter"] != DBNull.Value)
            {
                p.IsAllowToPayAfter = (Int16)reader["IsAllowToPayAfter"];
            }
            if (reader.HasColumn("TemplateFileName") && reader["TemplateFileName"] != DBNull.Value)
            {
                p.TemplateFileName = reader["TemplateFileName"].ToString();
            }
            if (reader.HasColumn("AllowDayBetweenExams") && reader["AllowDayBetweenExams"] != DBNull.Value)
            {
                p.AllowDayBetweenExams = Convert.ToInt32(reader["AllowDayBetweenExams"]);
            }
            if (reader.HasColumn("IsRegimenChecking") && reader["IsRegimenChecking"] != DBNull.Value)
            {
                p.IsRegimenChecking = Convert.ToBoolean(reader["IsRegimenChecking"]);
            }
            if (reader.HasColumn("IsUsed") && reader["IsUsed"] != DBNull.Value)
            {
                p.IsUsed = Convert.ToBoolean(reader["IsUsed"]);
            }
            if (reader.HasColumn("ModalityCode") && reader["ModalityCode"] != DBNull.Value)
            {
                p.ModalityCode = reader["ModalityCode"].ToString();
            }
            if (reader.HasColumn("IsCasePermitted") && reader["IsCasePermitted"] != DBNull.Value)
            {
                p.IsCasePermitted = Convert.ToBoolean(reader["IsCasePermitted"]);
            }
            if (reader.HasColumn("V_ReportForm") && reader["V_ReportForm"] != DBNull.Value)
            {
                p.V_ReportForm = Convert.ToInt64(reader["V_ReportForm"]);
            }
            if (reader.HasColumn("InCategoryCOVID") && reader["InCategoryCOVID"] != DBNull.Value)
            {
                p.InCategoryCOVID = Convert.ToBoolean(reader["InCategoryCOVID"]);
            }
            if (reader.HasColumn("IsAllowEditAfterDischarge") && reader["IsAllowEditAfterDischarge"] != DBNull.Value)
            {
                p.IsAllowEditAfterDischarge = Convert.ToBoolean(reader["IsAllowEditAfterDischarge"]);
            }
            if (reader.HasColumn("DateAllowEditAfterDischarge") && reader["DateAllowEditAfterDischarge"] != DBNull.Value)
            {
                p.DateAllowEditAfterDischarge = Convert.ToInt16(reader["DateAllowEditAfterDischarge"]);
            }
            if (reader.HasColumn("PCLExamTypeTemplateResult") && reader["PCLExamTypeTemplateResult"] != DBNull.Value)
            {
                p.PCLExamTypeTemplateResult = reader["PCLExamTypeTemplateResult"].ToString();
            }
            //▼==== #179
            if (reader.HasColumn("PCLExamTypeNameEng"))
            {
                p.PCLExamTypeNameEng = reader["PCLExamTypeNameEng"] == null ? "" : reader["PCLExamTypeNameEng"].ToString().Trim();
            }
            //▲==== #179
            if (reader.HasColumn("NoDefinitionOfHISubTest") && reader["NoDefinitionOfHISubTest"] != DBNull.Value)
            {
                p.NoDefinitionOfHISubTest = Convert.ToBoolean(reader["NoDefinitionOfHISubTest"]);
            }
            return p;
        }

        protected virtual List<PCLExamType> GetPCLExamTypeColectionFromReader(IDataReader reader)
        {
            var p = new List<PCLExamType>();
            int nCnt = 0;
            while (reader.Read())
            {
                ++nCnt;
                p.Add(GetPCLExamTypeFromReader(reader));
            }
            return p;
        }

        protected virtual PCLExamTypeServiceTarget GetPCLExamTypeServiceTargetFromReader(IDataReader reader)
        {
            var p = new PCLExamTypeServiceTarget { PCLExamTypeServiceTargetID = (long)reader["PCLExamTypeServiceTargetID"] };
            p.PCLExamTypeID = (long)reader["PCLExamTypeID"];
            p.MondayTargetNumberOfCases = Convert.ToInt32(reader["MondayTargetNumberOfCases"]);
            p.TuesdayTargetNumberOfCases = Convert.ToInt32(reader["TuesdayTargetNumberOfCases"]);
            p.WednesdayTargetNumberOfCases = Convert.ToInt32(reader["WednesdayTargetNumberOfCases"]);
            p.ThursdayTargetNumberOfCases = Convert.ToInt32(reader["ThursdayTargetNumberOfCases"]);
            p.FridayTargetNumberOfCases = Convert.ToInt32(reader["FridayTargetNumberOfCases"]);
            p.SaturdayTargetNumberOfCases = Convert.ToInt32(reader["SaturdayTargetNumberOfCases"]);
            p.SundayTargetNumberOfCases = Convert.ToInt32(reader["SundayTargetNumberOfCases"]);

            if (reader.HasColumn("PCLExamTypeCode"))
            {
                p.PCLExamTypeCode = reader["PCLExamTypeCode"].ToString();
            }
            if (reader.HasColumn("PCLExamTypeName"))
            {
                p.PCLExamTypeName = reader["PCLExamTypeName"].ToString();
            }
            return p;
        }
        protected virtual List<PCLExamTypeServiceTarget> GetPCLExamTypeServiceTargetColectionFromReader(IDataReader reader)
        {
            var p = new List<PCLExamTypeServiceTarget>();
            while (reader.Read())
            {
                p.Add(GetPCLExamTypeServiceTargetFromReader(reader));
            }
            return p;
        }
        public virtual PCLResultFileStorageDetail GetPCLResultFileStorageDetailFromReader(IDataReader reader)
        {
            var p = new PCLResultFileStorageDetail();
            p.PCLResultFileNotes = "";
            p.PCLResultLocation = "";
            if (reader.HasColumn("PCLResultFileItemID") && reader["PCLResultFileItemID"] != DBNull.Value)
            {
                p.PCLResultFileItemID = (long)reader["PCLResultFileItemID"];
            }
            if (reader.HasColumn("PCLImgResultID") && reader["PCLImgResultID"] != DBNull.Value)
            {
                p.PCLImgResultID = reader["PCLImgResultID"] as long?;
            }
            if (reader.HasColumn("PCLResultFileName") && reader["PCLResultFileName"] != DBNull.Value)
            {
                p.PCLResultFileName = reader["PCLResultFileName"].ToString();
            }
            if (reader.HasColumn("PCLResultFileNotes") && reader["PCLResultFileNotes"] != DBNull.Value)
            {
                p.PCLResultFileNotes = reader["PCLResultFileNotes"].ToString();
            }
            if (reader.HasColumn("PCLResultLocation") && reader["PCLResultLocation"] != DBNull.Value)
            {
                p.FullPath = "";
                p.PCLResultLocation = reader["PCLResultLocation"].ToString();
                if (p.PCLResultLocation != null && p.PCLResultLocation.Length > 0)
                {
                    if (p.PCLResultFileName != null && p.PCLResultFileName.Length > 0)
                    {
                        p.FullPath = p.PCLResultLocation + @"\" + p.PCLResultFileName;
                    }
                }
            }
            if (reader.HasColumn("V_ResultType") && reader["V_ResultType"] != DBNull.Value)
            {
                p.V_ResultType = reader["V_ResultType"] as long?;
            }
            if (reader.HasColumn("IsUseForPrinting") && reader["IsUseForPrinting"] != DBNull.Value)
            {
                p.IsUseForPrinting = Convert.ToBoolean(reader["IsUseForPrinting"]);
            }
            return p;
        }
        public virtual List<PCLResultFileStorageDetail> GetPCLResultFileStorageDetailCollectionFromReader(IDataReader reader)
        {
            var p = new List<PCLResultFileStorageDetail>();
            while (reader.Read())
            {
                p.Add(GetPCLResultFileStorageDetailFromReader(reader));
            }
            return p;
        }

        public virtual ScanImageFileStorageDetail GetImageFileStorageDetailFromReader(IDataReader reader)
        {
            var p = new ScanImageFileStorageDetail();
            p.ScanImageFileNotes = "";
            p.ScanFileStorageLocation = "";
            if (reader.HasColumn("PtImageFileStorageItemID") && reader["PtImageFileStorageItemID"] != DBNull.Value)
            {
                p.ScanImageFileItemID = (long)reader["PtImageFileStorageItemID"];
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt32(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientID = Convert.ToInt32(reader["PatientID"]);
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = Convert.ToInt32(reader["StaffID"]);
            }

            if (reader.HasColumn("ImageFileName") && reader["ImageFileName"] != DBNull.Value)
            {
                p.ScanImageFileName = reader["ImageFileName"].ToString();
            }
            if (reader.HasColumn("GeneralNotes") && reader["GeneralNotes"] != DBNull.Value)
            {
                p.ScanImageFileNotes = reader["GeneralNotes"].ToString();
            }
            if (reader.HasColumn("ImageFileStorageLocation") && reader["ImageFileStorageLocation"] != DBNull.Value)
            {
                p.FullPath = "";
                p.ScanFileStorageLocation = reader["ImageFileStorageLocation"].ToString();
                if (p.ScanFileStorageLocation != null && p.ScanFileStorageLocation.Length > 0)
                {
                    if (p.ScanImageFileName != null && p.ScanImageFileName.Length > 0)
                    {
                        p.FullPath = p.ScanFileStorageLocation + @"\" + p.ScanImageFileName;
                    }
                }
            }
            if (reader.HasColumn("V_PtImageFileType") && reader["V_PtImageFileType"] != DBNull.Value)
            {
                p.V_ScanImageOfType = reader["V_PtImageFileType"] as long?;
            }
            return p;
        }
        public virtual List<ScanImageFileStorageDetail> GetListImageFileStorageDetailFromReader(IDataReader reader)
        {
            var p = new List<ScanImageFileStorageDetail>();
            while (reader.Read())
            {
                p.Add(GetImageFileStorageDetailFromReader(reader));
            }
            return p;
        }

        protected virtual XDocument GenerateListToXMLWithNameSpace_ExamResult(IList<PCLResultFileStorageDetail> ResultFile)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                       new XElement("ExamResults",
                       from result in ResultFile
                       select new XElement("ExamResult",
                        new XElement("PCLResultFileItemID", result.PCLResultFileItemID),
                        new XElement("PCLResultLocation", result.PCLResultLocation),
                        new XElement("PCLResultFileName", result.PCLResultFileName),
                        new XElement("PCLResultFileNotes", result.PCLResultFileNotes),
                        new XElement("V_ResultType", result.V_ResultType),
                        new XElement("IsUseForPrinting", result.IsUseForPrinting))));
            return xmlDocument;
        }

        protected virtual XDocument GenerateListToXMLWithNameSpace_FromListScanImageFile(IList<ScanImageFileStorageDetail> scanImageFiles)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                new XElement("ScanImageFiles",
                from result in scanImageFiles
                select new XElement("ImageFile",
                    new XElement("FolderStorageLocation", result.ScanFileStorageLocation),
                    new XElement("PtImageFileStorageItemID", result.ScanImageFileItemID),
                    new XElement("ImageFileName", result.ScanImageFileName),
                    new XElement("ImageFileNotes", result.ScanImageFileNotes),
                    new XElement("V_ScanImageOfType", result.V_ScanImageOfType))));
            return xmlDocument;
        }

        public virtual TestingAgency GetTestingAgencyFromReader(IDataReader reader)
        {
            var p = new TestingAgency();
            if (reader.HasColumn("AgencyID") && reader["AgencyID"] != DBNull.Value)
            {
                p.AgencyID = (long)reader["AgencyID"];
            }
            if (reader.HasColumn("HosName") && reader["HosName"] != DBNull.Value)
            {
                p.AgencyName = reader["HosName"].ToString();
            }
            if (reader.HasColumn("HosAddress") && reader["HosAddress"] != DBNull.Value)
            {
                p.AgencyAddress = reader["HosAddress"].ToString();
            }
            if (reader.HasColumn("AgencyNotes") && reader["AgencyNotes"] != DBNull.Value)
            {
                p.AgencyNotes = reader["AgencyNotes"].ToString();
            }
            if (reader.HasColumn("HosID") && reader["HosID"] != DBNull.Value)
            {
                p.HosID = (long)reader["HosID"];
            }
            return p;
        }
        public virtual List<TestingAgency> GetTestingAgencyCollectionFromReader(IDataReader reader)
        {
            var p = new List<TestingAgency>();
            while (reader.Read())
            {
                p.Add(GetTestingAgencyFromReader(reader));
            }
            return p;
        }

        public virtual RegistrationsTotalSummary GetRegistrationsTotalSummaryFromReader(IDataReader reader)
        {
            var p = new RegistrationsTotalSummary();
            if (reader.HasColumn("TotalPatientPaid") && reader["TotalPatientPaid"] != DBNull.Value)
            {
                p.TotalPatientPaid = (reader["TotalPatientPaid"] as decimal?).GetValueOrDefault(0);
            }
            if (reader.HasColumn("TotalRefund") && reader["TotalRefund"] != DBNull.Value)
            {
                p.TotalRefund = (reader["TotalRefund"] as decimal?).GetValueOrDefault(0);
            }
            if (reader.HasColumn("TotalReceived") && reader["TotalReceived"] != DBNull.Value)
            {
                p.TotalReceivedFromPatient = (reader["TotalReceived"] as decimal?).GetValueOrDefault(0);
            }
            if (reader.HasColumn("TotalHI") && reader["TotalHI"] != DBNull.Value)
            {
                p.TotalHI = (reader["TotalHI"] as decimal?).GetValueOrDefault(0);
            }
            return p;
        }

        public virtual RegistrationSummaryInfo GetRegistrationSummaryInfoFromReader(IDataReader reader)
        {
            var p = new RegistrationSummaryInfo
            {
                RegistrationID = (long)reader["PtRegistrationID"],
                RegistrationCode = reader["PtRegistrationCode"] as string,
                ExamDate = (DateTime)reader["ExamDate"],
                StaffID = (long)reader["StaffID"],
                StaffName = reader["Staff_FullName"] as string,
                PatientCode = reader["PatientCode"] as string,
                PatientID = (long)reader["PatientID"],
                PatientName = reader["Patient_FullName"] as string,
                TransactionID = reader["TransactionID"] as long?,
                TotalPatientPaid = (decimal)reader["TotalPatientPaid"],
                TotalRefund = (decimal)reader["TotalRefund"],
                //TotalReceivedFromPatient = (reader["TotalReceived"] as decimal?).GetValueOrDefault(0)
            };
            if (reader.HasColumn("TotalHI") && reader["TotalHI"] != DBNull.Value)
            {
                p.TotalHI = (decimal)reader["TotalHI"];
            }

            if (reader.HasColumn("TotalReceivePatient") && reader["TotalReceivePatient"] != DBNull.Value)
            {
                p.TotalReceivePatient = (decimal)reader["TotalReceivePatient"];
            }


            if (reader.HasColumn("V_RegistrationType"))
            {
                var V_RegistrationType = reader["V_RegistrationType"] as long?;
                if (Enum.IsDefined(typeof(AllLookupValues.RegistrationType), (int)V_RegistrationType.GetValueOrDefault(0)))
                {
                    p.V_RegistrationType = (AllLookupValues.RegistrationType)V_RegistrationType.Value;
                }
                else
                {
                    p.V_RegistrationType = AllLookupValues.RegistrationType.Unknown;
                }
            }
            else
            {
                p.V_RegistrationType = AllLookupValues.RegistrationType.Unknown;
            }
            return p;
        }
        public virtual List<RegistrationSummaryInfo> GetRegistrationSummaryInfoCollectionFromReader(IDataReader reader)
        {
            var p = new List<RegistrationSummaryInfo>();
            while (reader.Read())
            {
                p.Add(GetRegistrationSummaryInfoFromReader(reader));
            }
            return p;
        }


        public virtual Hospital GetHospitalFromReader(IDataReader reader)
        {
            var p = new Hospital();

            if (reader.HasColumn("HosID"))
            {
                p.HosID = (long)reader["HosID"];
            }
            if (reader.HasColumn("HosName"))
            {
                p.HosName = reader["HosName"].ToString();
            }
            if (reader.HasColumn("ThongTuyen") && reader["ThongTuyen"] != DBNull.Value)
            {
                p.ThongTuyen = (bool)reader["ThongTuyen"];
            }
            return p;
        }
        public virtual List<Hospital> GetHospitalCollectionFromReader(IDataReader reader)
        {
            var p = new List<Hospital>();
            while (reader.Read())
            {
                p.Add(GetHospitalFromReader(reader));
            }
            return p;
        }
        public virtual Hospital GetHospitalFromReader_New(IDataReader reader)
        {
            var p = new Hospital();
            if (reader.HasColumn("CityProvinceID") && reader["CityProvinceID"] != DBNull.Value)
            {
                p.CitiesProvince = new CitiesProvince();
                p.CitiesProvince = GetCityProvinceFromReader(reader);
                p.CityProvinceID = p.CitiesProvince.CityProvinceID;
                p.CityProvinceName = p.CitiesProvince.CityProvinceName;
                p.CityProvinceHICode = p.CitiesProvince.CityProviceHICode;
            }
            if (reader.HasColumn("HosID"))
            {
                p.HosID = (long)reader["HosID"];
            }
            if (reader.HasColumn("HosName"))
            {
                p.HosName = reader["HosName"].ToString();
            }
            if (reader.HasColumn("HosAddress") && reader["HosAddress"] != DBNull.Value)
            {
                p.HosAddress = reader["HosAddress"].ToString();
            }
            if (reader.HasColumn("HICode") && reader["HICode"] != DBNull.Value)
            {
                p.HICode = reader["HICode"].ToString();
            }
            if (reader.HasColumn("V_HospitalType"))
            {
                p.V_HospitalType = (long)reader["V_HospitalType"];
            }
            if (reader.HasColumn("ObjectValue") && reader["ObjectValue"] != DBNull.Value)
            {
                p.V_HospitalTypeString = reader["ObjectValue"].ToString();
            }
            if (reader.HasColumn("HosPhone") && reader["HosPhone"] != DBNull.Value)
            {
                p.HosPhone = reader["HosPhone"].ToString();
            }
            if (reader.HasColumn("HosWebSite") && reader["HosWebSite"] != DBNull.Value)
            {
                p.HosWebSite = reader["HosWebSite"].ToString();
            }
            if (reader.HasColumn("ThongTuyen") && reader["ThongTuyen"] != DBNull.Value)
            {
                p.ThongTuyen = (bool)reader["ThongTuyen"];
            }
            if (reader.HasColumn("V_HospitalClass") && reader["V_HospitalClass"] != DBNull.Value)
            {
                p.V_HospitalClass = Convert.ToInt64(reader["V_HospitalClass"]);
            }
            if (reader.HasColumn("V_HospitalClassString") && reader["V_HospitalClassString"] != DBNull.Value)
            {
                p.V_HospitalClassString = reader["V_HospitalClassString"].ToString();
            }
            if (reader.HasColumn("LeaderPhone") && reader["LeaderPhone"] != DBNull.Value)
            {
                p.LeaderPhone = reader["LeaderPhone"].ToString();
            }
            if (reader.HasColumn("IsUsed") && reader["IsUsed"] != DBNull.Value)
            {
                p.IsUsed = Convert.ToBoolean(reader["IsUsed"]);
            }
            return p;
        }
        public virtual List<Hospital> GetHospitalCollectionFromReader_New(IDataReader reader)
        {
            var p = new List<Hospital>();
            while (reader.Read())
            {
                p.Add(GetHospitalFromReader_New(reader));
            }
            return p;
        }
        protected virtual MedicalSpecimensCategory GetAllMedSpecCatgsFromReader(IDataReader reader)
        {
            var p = new MedicalSpecimensCategory
            {
                MedSpecCatID = (short)reader["MedSpecCatID"],
                MedSpecCatName = reader["MedSpecCatName"].ToString()
            };
            return p;
        }
        protected virtual List<MedicalSpecimensCategory> GetAllMedSpecCatgColectionsFromReader(IDataReader reader)
        {
            var p = new List<MedicalSpecimensCategory>();
            while (reader.Read())
            {
                p.Add(GetAllMedSpecCatgsFromReader(reader));
            }
            return p;
        }

        protected virtual MedicalSpecimen GetMedSpecsByCatgIDFromReader(IDataReader reader)
        {
            var p = new MedicalSpecimen
            {
                MedSpecID = (long)reader["MedSpecID"],
                MedSpecName = reader["MedSpecName"].ToString(),
                StorageConditions = reader["StorageConditions"].ToString()
            };
            return p;
        }
        protected virtual List<MedicalSpecimen> GetMedSpecsByCatgIDColectionsFromReader(IDataReader reader)
        {
            var p = new List<MedicalSpecimen>();
            while (reader.Read())
            {
                p.Add(GetMedSpecsByCatgIDFromReader(reader));
            }
            return p;
        }

        protected virtual PatientPCLLaboratoryResultDetail GetPtPCLLabExamTypesByReqIDFromReader(IDataReader reader)
        {
            var p = new PatientPCLLaboratoryResultDetail();
            p.PatientPCLLaboratoryResult = new PatientPCLLaboratoryResult();
            if (reader.HasColumn("LabResultID") && reader["LabResultID"] != DBNull.Value)
            {
                p.PatientPCLLaboratoryResult.LabResultID = Convert.ToInt64(reader["LabResultID"]);
            }
            if (reader.HasColumn("PatientPCLReqID") && reader["PatientPCLReqID"] != DBNull.Value)
            {
                p.PatientPCLLaboratoryResult.PatientPCLReqID = Convert.ToInt64(reader["PatientPCLReqID"]);
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.PatientPCLLaboratoryResult.StaffID = Convert.ToInt64(reader["StaffID"]);
            }
            if (reader.HasColumn("SamplingDate") && reader["SamplingDate"] != DBNull.Value)
            {
                p.PatientPCLLaboratoryResult.SamplingDate = Convert.ToDateTime(reader["SamplingDate"]);
            }
            if (reader.HasColumn("LabResultDetailID") && reader["LabResultDetailID"] != DBNull.Value)
            {
                p.LabResultDetailID = Convert.ToInt64(reader["LabResultDetailID"]);
            }
            if (reader.HasColumn("LabResultID") && reader["LabResultID"] != DBNull.Value)
            {
                p.LabResultID = Convert.ToInt64(reader["LabResultID"]);
            }
            if (reader.HasColumn("PCLExamTestItemID") && reader["PCLExamTestItemID"] != DBNull.Value)
            {
                p.PCLExamTestItemID = Convert.ToInt64(reader["PCLExamTestItemID"]);
            }
            if (reader.HasColumn("Value") && reader["Value"] != DBNull.Value)
            {
                p.Value = Convert.ToString(reader["Value"]);
            }
            if (reader.HasColumn("IsAbnormal") && reader["IsAbnormal"] != DBNull.Value)
            {
                p.IsAbnormal = Convert.ToBoolean(reader["IsAbnormal"]);
            }
            if (reader.HasColumn("Value_Old") && reader["Value_Old"] != DBNull.Value)
            {
                p.Value_Old = Convert.ToString(reader["Value_Old"]);
            }
            //▼====: #092
            if (reader.HasColumn("HIRepResourceCode") && reader["HIRepResourceCode"] != DBNull.Value)
            {
                p.HIRepResourceCode = Convert.ToString(reader["HIRepResourceCode"]);
            }
            //▲====: #092
            return p;
        }
        protected virtual List<PatientPCLLaboratoryResultDetail> GetPtPCLLabExamTypesByReqIDColectionsFromReader(IDataReader reader)
        {
            var p = new List<PatientPCLLaboratoryResultDetail>();
            while (reader.Read())
            {
                p.Add(GetPtPCLLabExamTypesByReqIDFromReader(reader));
            }
            return p;

        }

        protected virtual MedicalSpecimenInfo GetMedSpecByReqIDFromReader(IDataReader reader)
        {
            var p = new MedicalSpecimenInfo
            {
                MedSpecID = (long)reader["MedSpecID"],
                MedSpecName = reader["MedSpecName"].ToString(),
                StorageConditions = reader["StorageConditions"].ToString(),
                MedSpecNotes = reader["MedSpecNotes"].ToString(),
                MedSpecCatID = (short)reader["MedSpecCatID"],
                MedSpecCatName = reader["MedSpecCatName"].ToString(),
                SamplingDate = reader["SamplingDate"] as DateTime?,
                SampleCode = reader["SampleCode"].ToString(),
                AgencyID = reader["AgencyID"] as long?,
                LaboratorianName = reader["LaboratorianName"].ToString(),
                AgencyName = reader["AgencyName"].ToString(),
                LatestEPrescriptionID = reader["LatestEPrescriptionID"] as long?
            };
            return p;
        }
        protected virtual List<MedicalSpecimenInfo> GetMedSpecByReqIDColectionsFromReader(IDataReader reader)
        {
            var p = new List<MedicalSpecimenInfo>();
            while (reader.Read())
            {
                p.Add(GetMedSpecByReqIDFromReader(reader));
            }
            return p;

        }

        protected virtual VitalSign GetVitalSignFromReader(IDataReader reader)
        {
            var p = new VitalSign
            {
                VSignID = (byte)reader["VSignID"],
                VSignName = reader["VSignName"].ToString(),
                VSignDescription = reader["VSignDescription"].ToString(),
                IsPrimaryVitalSigns = reader["IsPrimaryVitalSigns"] as bool?,
                LookupVSignDataType = new Lookup { LookupID = (long)reader["V_VSignDataType"] },
                MedUnit = reader["MedUnit"].ToString()
            };
            return p;
        }
        protected virtual List<VitalSign> GetVitalSignCollectionFromReader(IDataReader reader)
        {
            var lst = new List<VitalSign>();
            while (reader.Read())
            {
                lst.Add(GetVitalSignFromReader(reader));
            }
            return lst;
        }

        protected virtual PatientVitalSign GetPatientVitalSignFromReader(IDataReader reader)
        {
            var p = new PatientVitalSign
            {
                VitalSign = new VitalSign
                {
                    VSignID = (byte)reader["VSignID"],
                    VSignName = reader["VSignName"].ToString(),
                    VSignDescription = reader["VSignDescription"].ToString(),
                    IsPrimaryVitalSigns = reader["IsPrimaryVitalSigns"] as bool?
                },
                CommonMedicalRecord =
                                new CommonMedicalRecord
                                {
                                    CommonMedRecID = (long)reader["CommonMedRecID"],
                                    PatientID = reader["PatientID"] as long?,
                                    StaffID = reader["StaffID"] as long?,
                                    CMRModifiedDate = (DateTime?)reader["CMRModifiedDate"],
                                    V_ProcessingType = (long)reader["V_ProcessingType"]
                                },
                PtVSignID = (long)reader["PtVSignID"],
                VSignID = (byte)reader["VSignID"],
                CommonMedRecID = (long)reader["CommonMedRecID"],
                VSignExamDate = reader["VSignExamDate"] as DateTime?,
                VSignValue1 = reader["VSignValue1"].ToString(),
                VSignValue2 = reader["VSignValue2"].ToString(),
                VSignNotes = reader["VSignNotes"].ToString(),
                LookupVSignContext =
                                new Lookup
                                {
                                    LookupID = (long)reader["V_VSignContext"],
                                    ObjectValue = reader["VSignContext"].ToString()
                                }
            };



            return p;
        }
        protected virtual List<PatientVitalSign> GetPatientVitalSignCollectionFromReader(IDataReader reader)
        {
            var lst = new List<PatientVitalSign>();
            while (reader.Read())
            {
                lst.Add(GetPatientVitalSignFromReader(reader));
            }
            return lst;
        }

        protected virtual RefMedContraIndicationTypes GetRefMedicalConditionTypeFromReader(IDataReader reader)
        {
            var p = new RefMedContraIndicationTypes { MedContraTypeID = (int)reader["MedContraTypeID"], MedContraIndicationType = reader["MedContraIndicationType"].ToString() };

            if (reader.HasColumn("AgeFrom") && reader["AgeFrom"] != DBNull.Value)
            {
                p.AgeFrom = Convert.ToInt16(reader["AgeFrom"]);
            }
            if (reader.HasColumn("AgeTo") && reader["AgeTo"] != DBNull.Value)
            {
                p.AgeTo = Convert.ToInt16(reader["AgeTo"]);
            }
            if (reader.HasColumn("V_AgeUnit") && reader["V_AgeUnit"] != DBNull.Value)
            {
                p.V_AgeUnit = Convert.ToInt64(reader["V_AgeUnit"]);
            }
            return p;
        }
        protected virtual List<RefMedContraIndicationTypes> GetRefMedicalConditionTypeCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RefMedContraIndicationTypes>();
            while (reader.Read())
            {
                lst.Add(GetRefMedicalConditionTypeFromReader(reader));
            }
            return lst;
        }

        protected virtual RefMedContraIndicationICD GetRefMedicalConditionFromReader(IDataReader reader)
        {
            var p = new RefMedContraIndicationICD();
            if (reader.HasColumn("MedContraTypeID") && reader["MedContraTypeID"] != DBNull.Value)
            {
                p.MedContraTypeID = Convert.ToInt32(reader["MedContraTypeID"]);
            }
            if (reader.HasColumn("MCID") && reader["MCID"] != DBNull.Value)
            {
                p.MCID = Convert.ToInt32(reader["MCID"]);
            }
            p.RefMedicalConditionType = new RefMedContraIndicationTypes();

            if (reader.HasColumn("MedContraIndicationType") && reader["MedContraIndicationType"] != DBNull.Value)
            {
                p.RefMedicalConditionType.MedContraIndicationType = reader["MedContraIndicationType"].ToString();
            }
            if (reader.HasColumn("ICD10Code") && reader["ICD10Code"] != DBNull.Value)
            {
                p.ICD10Code = reader["ICD10Code"].ToString();
            }
            if (reader.HasColumn("DiseaseNameVN") && reader["DiseaseNameVN"] != DBNull.Value)
            {
                p.DiseaseNameVN = reader["DiseaseNameVN"].ToString();
            }
            return p;
        }
        protected virtual List<RefMedContraIndicationICD> GetRefMedicalConditionCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RefMedContraIndicationICD>();
            while (reader.Read())
            {
                lst.Add(GetRefMedicalConditionFromReader(reader));
            }
            return lst;
        }

        protected virtual MedicalConditionRecord GetMedicalConditionRecordFromReader(IDataReader reader)
        {
            var p = new MedicalConditionRecord
            {
                RefMedicalCondition = new RefMedContraIndicationICD
                {
                    MCID = (long)reader["MCID"],
                    //MCDescription = reader["MCDescription"].ToString(),
                    MedContraTypeID = reader["MedContraTypeID"] as int?
                },
                CommonMedicalRecord =
                                new CommonMedicalRecord
                                {
                                    CommonMedRecID = (long)reader["CommonMedRecID"],
                                    PatientID = reader["PatientID"] as long?,
                                    CMRModifiedDate = (DateTime?)reader["CMRModifiedDate"],
                                    LookupProcessingType =
                                            new Lookup { ObjectValue = reader["ProcessingType"].ToString() }
                                },
                MCRecID = (long)reader["MCRecID"],
                CommonMedRecID = (long)reader["CommonMedRecID"],
                MCID = (long)reader["MCID"],
                MCYesNo = reader["MCYesNo"] as bool?,
                MCTextValue = reader["MCTextValue"].ToString(),
                MCExplainOrNotes = reader["MCExplainOrNotes"].ToString()
            };
            return p;
        }
        protected virtual List<MedicalConditionRecord> GetMedicalConditionRecordCollectionFromReader(IDataReader reader)
        {
            var lst = new List<MedicalConditionRecord>();
            while (reader.Read())
            {
                lst.Add(GetMedicalConditionRecordFromReader(reader));
            }
            return lst;
        }

        protected virtual RefMedicalHistory GetRefMedicalHistoryFromReader(IDataReader reader)
        {
            var p = new RefMedicalHistory
            {
                MedHistCode = (long)reader["MedHistCode"],
                MedHistTreatment = reader["MedHistTreatment"].ToString()
            };
            return p;
        }
        protected virtual List<RefMedicalHistory> GetRefMedicalHistoryCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RefMedicalHistory>();
            while (reader.Read())
            {
                lst.Add(GetRefMedicalHistoryFromReader(reader));
            }
            return lst;
        }

        protected virtual PastMedicalConditionHistory GetPastMedCondHistoryFromReader(IDataReader reader)
        {
            var p = new PastMedicalConditionHistory
            {
                RefMedicalHistory =
                                new RefMedicalHistory
                                {
                                    MedHistCode = (long)reader["MedHistCode"],
                                    MedHistTreatment = reader["MedHistTreatment"].ToString()
                                },
                CommonMedicalRecord =
                                new CommonMedicalRecord
                                {
                                    CommonMedRecID = (long)reader["CommonMedRecID"],
                                    PatientID = reader["PatientID"] as long?,
                                    CMRModifiedDate = (DateTime?)reader["CMRModifiedDate"],
                                    LookupProcessingType =
                                            new Lookup { ObjectValue = reader["ProcessingType"].ToString() }
                                },
                PMHID = (long)reader["PMHID"],
                CommonMedRecID = (long)reader["CommonMedRecID"],
                MedHistCode = (long)reader["MedHistCode"],
                PMHYesNo = reader["PMHYesNo"] as bool?,
                PMHExplainReason = reader["PMHExplainReason"].ToString(),
                LookupPMHStatus =
                                new Lookup
                                {
                                    LookupID = (long)reader["V_PMHStatus"],
                                    ObjectValue = reader["PMHStatus"].ToString()
                                }
            };

            return p;
        }
        protected virtual List<PastMedicalConditionHistory> GetPastMedCondHistoryCollectionFromReader(IDataReader reader)
        {
            var lst = new List<PastMedicalConditionHistory>();
            while (reader.Read())
            {
                lst.Add(GetPastMedCondHistoryFromReader(reader));
            }
            return lst;
        }

        protected virtual RefImmunization GetRefImmunizationFromReader(IDataReader reader)
        {
            var p = new RefImmunization { IHCode = (long)reader["IHCode"], IHVaccine = reader["IHVaccine"].ToString() };
            if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
            {
                p.MedServiceID = (long)reader["MedServiceID"];
            }
            if (reader.HasColumn("MedServiceName") && reader["MedServiceName"] != DBNull.Value)
            {
                p.MedServiceName = reader["MedServiceName"].ToString();
            }
            return p;
        }
        protected virtual List<RefImmunization> GetRefImmunizationCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RefImmunization>();
            while (reader.Read())
            {
                lst.Add(GetRefImmunizationFromReader(reader));
            }
            return lst;
        }

        protected virtual ImmunizationHistory GetImmunizationHistoryFromReader(IDataReader reader)
        {
            var p = new ImmunizationHistory
            {
                RefImmunization =
                                new RefImmunization { IHCode = (long)reader["IHCode"], IHVaccine = reader["IHVaccine"].ToString() },
                IHID = (long)reader["IHID"],
                IHCode = (long)reader["IHCode"],
                CommonMedRecID = (long)reader["CommonMedRecID"],
                IHYesNo = reader["IHYesNo"] as bool?,
                IHDate = reader["IHDate"] as DateTime?,
                MedServiceName = reader["MedServiceName"].ToString(),
                CommonMedicalRecord =
                                new CommonMedicalRecord
                                {
                                    CommonMedRecID = (long)reader["CommonMedRecID"],
                                    PatientID = reader["PatientID"] as long?,
                                    StaffID = reader["StaffID"] as long?,
                                    CMRModifiedDate = (DateTime?)reader["CMRModifiedDate"],
                                    LookupProcessingType =
                                            new Lookup { ObjectValue = reader["ProcessingType"].ToString() }
                                }
            };
            return p;
        }
        protected virtual List<ImmunizationHistory> GetImmunizationHistoryCollectionFromReader(IDataReader reader)
        {
            var lst = new List<ImmunizationHistory>();
            while (reader.Read())
            {
                lst.Add(GetImmunizationHistoryFromReader(reader));
            }
            return lst;
        }

        protected virtual HospitalizationHistory GetHospitalizationHistoryFromReader(IDataReader reader)
        {
            var p = new HospitalizationHistory
            {
                HHID = (long)reader["HHID"],
                FromHospital = new Hospital(),
                ToHospital = new Hospital(),
                HDate = reader["HDate"].ToString(),
                FromHosID = reader["FromHosID"] as long?,
                ToHosID = reader["ToHosID"] as long?
            };


            p.FromHospital.HosName = reader["FromHosName"].ToString();
            p.ToHospital.HosName = reader["ToHosName"].ToString();

            p.V_AdmissionType = (long)reader["V_AdmissionType"];
            p.LookupAdmissionType = new Lookup();
            try
            {
                p.LookupAdmissionType.LookupID = (long)reader["V_AdmissionType"];
                p.LookupAdmissionType.ObjectValue = reader["AdmissionType"].ToString();
                p.LookupAdmissionType.ObjectName = "V_AdmissionType";
                p.LookupAdmissionType.ObjectNotes = "";
                p.LookupAdmissionType.ObjectTypeID = (long)LookupValues.ADMISSION_TYPE;
            }
            catch
            {
                p.LookupAdmissionType.LookupID = -1;
                p.LookupAdmissionType.ObjectValue = "";
                p.LookupAdmissionType.ObjectName = "V_AdmissionType";
                p.LookupAdmissionType.ObjectNotes = "";
                p.LookupAdmissionType.ObjectTypeID = -1;
            }



            p.GeneralDiagnoses = reader["GeneralDiagnoses"].ToString();
            try
            {
                p.FromDate = (DateTime)reader["FromDate"];
            }
            catch
            {
                p.FromDate = null;
            }

            p.ToDate = null;

            try
            {
                p.V_TreatmentResult = reader["V_TreatmentResult"] as long?;
                p.LookupTreatmentResult = new Lookup
                {
                    LookupID = (long)reader["V_TreatmentResult"],
                    ObjectValue = reader["TreatmentResult"].ToString()
                };
            }
            catch
            {
                p.V_TreatmentResult = -1;
                p.LookupTreatmentResult.LookupID = -1;
                p.LookupTreatmentResult.ObjectValue = "";
            }


            try
            {
                //Need to change long? from DataEntities
                p.V_DischargeReason = (long)reader["V_DischargeReason"];
            }
            catch
            {
                p.V_DischargeReason = -1;
            }
            p.LookupDischargeReason = new Lookup();
            try
            {
                p.LookupDischargeReason.LookupID = (long)reader["V_DischargeReason"];
                p.LookupDischargeReason.ObjectValue = reader["DischargeReason"].ToString();
            }
            catch
            {
                p.LookupDischargeReason.LookupID = -1;
                p.LookupDischargeReason.ObjectValue = "";
            }

            p.HHNotes = reader["HHNotes"].ToString();
            p.IDCode = reader["IDCode"] as long?;
            p.DiseasesReference = new DiseasesReference();
            try
            {
                p.DiseasesReference.IDCode = (long)reader["IDCode"];
                p.DiseasesReference.ICD10Code = reader["ICD10Code"].ToString();
                p.DiseasesReference.DiseaseNameVN = reader["DiseaseNameVN"].ToString();
                p.DiseasesReference.DiseaseName = reader["DiseaseName"].ToString();
            }
            catch
            {
                p.DiseasesReference.IDCode = -1;
                p.DiseasesReference.ICD10Code = "";
                p.DiseasesReference.DiseaseNameVN = "";
                p.DiseasesReference.DiseaseName = "";
            }


            p.CommonMedRecID = reader["CommonMedRecID"] as long?;
            p.CommonMedicalRecord = new CommonMedicalRecord
            {
                CommonMedRecID = (long)reader["CommonMedRecID"],
                PatientID = reader["PatientID"] as long?,
                StaffID = reader["StaffID"] as long?,
                CMRModifiedDate = (DateTime?)reader["CMRModifiedDate"],
                LookupProcessingType =
                                                new Lookup { ObjectValue = reader["ProcessingType"].ToString() }
            };

            return p;
        }
        protected virtual List<HospitalizationHistory> GetHospitalizationHistoryCollectionFromReader(IDataReader reader)
        {
            var lst = new List<HospitalizationHistory>();
            while (reader.Read())
            {
                lst.Add(GetHospitalizationHistoryFromReader(reader));
            }
            return lst;
        }

        protected virtual FamilyHistory GetFamilyHistoryFromReader(IDataReader reader)
        {
            var p = new FamilyHistory();
            if (reader.HasColumn("FHCode") && reader["FHCode"] != DBNull.Value)
            {
                p.FHCode = (long)reader["FHCode"];
            }
            if (reader.HasColumn("IDCode") && reader["IDCode"] != DBNull.Value)
            {
                p.IDCode = reader["IDCode"] as long?;
            }
            if (reader.HasColumn("CommonMedRecID") && reader["CommonMedRecID"] != DBNull.Value)
            {
                p.CommonMedRecID = (long)reader["CommonMedRecID"];
            }
            if (reader.HasColumn("FHFullName") && reader["FHFullName"] != DBNull.Value)
            {
                p.FHFullName = reader["FHFullName"].ToString();
            }
            if (reader.HasColumn("FHNotes") && reader["FHNotes"] != DBNull.Value)
            {
                p.FHNotes = reader["FHNotes"].ToString();
            }
            if (reader.HasColumn("Decease") && reader["Decease"] != DBNull.Value)
            {
                p.Decease = reader["Decease"] as bool?;
            }
            p.LookupFamilyRelationship = new Lookup();
            if (reader.HasColumn("V_FamilyRelationship") && reader["V_FamilyRelationship"] != DBNull.Value)
            {
                p.LookupFamilyRelationship.LookupID = (long)reader["V_FamilyRelationship"];
            }
            if (reader.HasColumn("FamilyRelationship") && reader["FamilyRelationship"] != DBNull.Value)
            {
                p.LookupFamilyRelationship.ObjectValue = reader["FamilyRelationship"].ToString();
            }
            p.DiseasesReference = new DiseasesReference();
            if (reader.HasColumn("IDCode") && reader["IDCode"] != DBNull.Value)
            {
                p.DiseasesReference.IDCode = (long)reader["IDCode"];
            }
            if (reader.HasColumn("ICD10Code") && reader["ICD10Code"] != DBNull.Value)
            {
                p.DiseasesReference.ICD10Code = reader["ICD10Code"].ToString();
            }
            if (reader.HasColumn("ParIDCode") && reader["ParIDCode"] != DBNull.Value)
            {
                p.DiseasesReference.ParIDCode = (long)reader["ParIDCode"];
            }
            if (reader.HasColumn("DiseaseNameVN") && reader["DiseaseNameVN"] != DBNull.Value)
            {
                p.DiseasesReference.DiseaseNameVN = reader["DiseaseNameVN"].ToString();
            }
            p.CommonMedicalRecord = new CommonMedicalRecord();
            if (reader.HasColumn("CommonMedRecID") && reader["CommonMedRecID"] != DBNull.Value)
            {
                p.CommonMedicalRecord.CommonMedRecID = (long)reader["CommonMedRecID"];
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.CommonMedicalRecord.PatientID = reader["PatientID"] as long?;
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.CommonMedicalRecord.StaffID = reader["StaffID"] as long?;
            }
            if (reader.HasColumn("CMRModifiedDate") && reader["CMRModifiedDate"] != DBNull.Value)
            {
                p.CommonMedicalRecord.CMRModifiedDate = (DateTime?)reader["CMRModifiedDate"];
            }
            if (reader.HasColumn("ProcessingType") && reader["ProcessingType"] != DBNull.Value)
            {
                p.CommonMedicalRecord.LookupProcessingType = new Lookup();
                p.CommonMedicalRecord.LookupProcessingType.ObjectValue = reader["ProcessingType"].ToString();
            }
            return p;
        }
        protected virtual List<FamilyHistory> GetFamilyHistoryCollectionFromReader(IDataReader reader)
        {
            var lst = new List<FamilyHistory>();
            while (reader.Read())
            {
                lst.Add(GetFamilyHistoryFromReader(reader));
            }
            return lst;
        }

        protected virtual MDAllergy GetMDAllergyFromReader(IDataReader reader)
        {
            var p = new MDAllergy();

            if (reader.HasColumn("AItemID") && reader["AItemID"] != DBNull.Value)
            {
                p.AItemID = (long)reader["AItemID"];
            }

            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
            }

            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientID = (long)reader["PatientID"];
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = (long)reader["StaffID"];
            }

            if (reader.HasColumn("AllergiesItems") && reader["AllergiesItems"] != DBNull.Value)
            {
                p.AllergiesItems = reader["AllergiesItems"].ToString();
            }

            if (reader.HasColumn("Reactions") && reader["Reactions"] != DBNull.Value)
            {
                p.Reactions = reader["Reactions"].ToString();
            }

            p.ObjV_AItemType = new Lookup();
            if (reader.HasColumn("V_AItemType") && reader["V_AItemType"] != DBNull.Value)
            {
                p.V_AItemType = reader["V_AItemType"] as long?;

                p.ObjV_AItemType = GetLookupFromReader(reader);
            }

            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = (bool)reader["IsDeleted"];
            }

            if (reader.HasColumn("DateDeleted") && reader["DateDeleted"] != DBNull.Value)
            {
                p.DateDeleted = (DateTime)reader["DateDeleted"];
            }


            return p;
        }
        protected virtual List<MDAllergy> GetMDAllergyCollectionFromReader(IDataReader reader)
        {
            var lst = new List<MDAllergy>();
            while (reader.Read())
            {
                lst.Add(GetMDAllergyFromReader(reader));
            }
            return lst;
        }

        protected virtual MDWarning GetMDWarningFromReader(IDataReader reader)
        {
            MDWarning p = new MDWarning();
            if (reader.HasColumn("WItemID") && reader["WItemID"] != DBNull.Value)
            {
                p.WItemID = (long)reader["WItemID"];
            }

            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                p.RecCreatedDate = (DateTime)reader["RecCreatedDate"];
            }

            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientID = (long)reader["PatientID"];
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = (long)reader["StaffID"];
            }

            if (reader.HasColumn("WarningItems") && reader["WarningItems"] != DBNull.Value)
            {
                p.WarningItems = reader["WarningItems"].ToString();
            }

            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = (bool)reader["IsDeleted"];
            }

            if (reader.HasColumn("DateDeleted") && reader["DateDeleted"] != DBNull.Value)
            {
                p.DateDeleted = (DateTime)reader["DateDeleted"];
            }


            return p;
        }
        protected virtual List<MDWarning> GetMDWarningCollectionFromReader(IDataReader reader)
        {
            var lst = new List<MDWarning>();
            while (reader.Read())
            {
                lst.Add(GetMDWarningFromReader(reader));
            }
            return lst;
        }

        protected virtual PhysicalExamination GetPhysicalExaminationFromReader(IDataReader reader)
        {
            var p = new PhysicalExamination();
            try
            {
                if (reader.HasColumn("PhyExamID") && reader["PhyExamID"] != DBNull.Value)
                {
                    p.PhyExamID = (long)reader["PhyExamID"];
                }
                //▼====== #037
                if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
                {
                    p.PtRegistrationID = (long)reader["PtRegistrationID"];
                }
                if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
                {
                    p.V_RegistrationType = (long)reader["V_RegistrationType"];
                }
                //▲====== #037
                if (reader.HasColumn("CommonMedRecID") && reader["CommonMedRecID"] != DBNull.Value)
                {
                    p.CommonMedRecID = (long)reader["CommonMedRecID"];
                }
                if (reader.HasColumn("RecordDate") && reader["RecordDate"] != DBNull.Value)
                {
                    p.RecordDate = DateTime.Parse(reader["RecordDate"].ToString());
                }
                if (reader.HasColumn("Height") && reader["Height"] != DBNull.Value)
                {
                    p.Height = reader["Height"] as double?;
                }
                if (reader.HasColumn("Weight") && reader["Weight"] != DBNull.Value)
                {
                    p.Weight = reader["Weight"] as double?;
                }
                if (reader.HasColumn("BMI") && reader["BMI"] != DBNull.Value)
                {
                    p.BMI = reader["BMI"] as double?;
                }
                if (reader.HasColumn("SystolicPressure") && reader["SystolicPressure"] != DBNull.Value)
                {
                    p.SystolicPressure = reader["SystolicPressure"] as double?;
                }
                if (reader.HasColumn("DiastolicPressure") && reader["DiastolicPressure"] != DBNull.Value)
                {
                    p.DiastolicPressure = reader["DiastolicPressure"] as double?;
                }
                if (reader.HasColumn("Pulse") && reader["Pulse"] != DBNull.Value)
                {
                    p.Pulse = reader["Pulse"] as double?;
                }
                //p.Cholesterol = reader["Cholesterol"] as double?;
                //p.Smoke_EveryDay = reader["Smoke_EveryDay"] as bool?;
                //p.Smoke_OnOccasion = reader["Smoke_OnOccasion"] as bool?;
                //p.Smoke_Never = reader["Smoke_Never"] as bool?;
                //p.Alcohol_CurrentHeavy = reader["Alcohol_CurrentHeavy"] as bool?;
                //p.Alcohol_HeavyInThePast = reader["Alcohol_HeavyInThePast"] as bool?;
                //p.Alcohol_CurrentLight = reader["Alcohol_CurrentLight"] as bool?;
                //p.Alcohol_Never = reader["Alcohol_Never"] as bool?;
                if (reader.HasColumn("CVRisk") && reader["CVRisk"] != DBNull.Value)
                {
                    p.CVRisk = reader["CVRisk"] as double?;
                }
                if (reader.HasColumn("SmokeCigarettePerDay") && reader["SmokeCigarettePerDay"] != DBNull.Value)
                {
                    p.SmokeCigarettePerDay = Convert.ToInt16(reader["SmokeCigarettePerDay"]);
                }
                if (reader.HasColumn("MonthHaveSmoked") && reader["MonthHaveSmoked"] != DBNull.Value)
                {
                    p.MonthHaveSmoked = Convert.ToDouble(reader["MonthHaveSmoked"]);
                }
                if (reader.HasColumn("MonthQuitSmoking") && reader["MonthQuitSmoking"] != DBNull.Value)
                {
                    p.MonthQuitSmoking = Convert.ToDouble(reader["MonthQuitSmoking"]);
                }
                if (reader.HasColumn("RespiratoryRate") && reader["RespiratoryRate"] != DBNull.Value)
                {
                    p.RespiratoryRate = Convert.ToDouble(reader["RespiratoryRate"]);
                }
                if (reader.HasColumn("SpO2") && reader["SpO2"] != DBNull.Value)
                {
                    p.SpO2 = Convert.ToDouble(reader["SpO2"]);
                }
                if (reader.HasColumn("Temperature") && reader["Temperature"] != DBNull.Value)
                {
                    p.Temperature = Convert.ToDouble(reader["Temperature"]);
                }
                if (reader.HasColumn("CommonMedRecID") && reader["CommonMedRecID"] != DBNull.Value)
                {
                    p.CommonMedicalRecord = new CommonMedicalRecord { CommonMedRecID = (long)reader["CommonMedRecID"] };
                    if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
                    {
                        p.CommonMedicalRecord.PatientID = reader["PatientID"] as long?;
                    }
                    if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
                    {
                        p.CommonMedicalRecord.StaffID = reader["StaffID"] as long?;
                    }
                    if (reader.HasColumn("CMRModifiedDate") && reader["CMRModifiedDate"] != DBNull.Value)
                    {
                        p.CommonMedicalRecord.CMRModifiedDate = (DateTime?)reader["CMRModifiedDate"];
                    }
                    if (reader.HasColumn("V_ProcessingType") && reader["V_ProcessingType"] != DBNull.Value)
                    {
                        p.CommonMedicalRecord.V_ProcessingType = (long)reader["V_ProcessingType"];
                    }
                }
                if (reader.HasColumn("V_SmokeStatus") && reader["V_SmokeStatus"] != DBNull.Value)
                {
                    p.V_SmokeStatus = (long)reader["V_SmokeStatus"];
                    p.RefSmoke = new Lookup
                    {
                        LookupID = (long)reader["V_SmokeStatus"],
                        ObjectValue = reader["SmokeStatus"].ToString()
                    };
                }
                if (reader.HasColumn("V_AlcoholDrinkingStatus") && reader["V_AlcoholDrinkingStatus"] != DBNull.Value)
                {
                    p.V_AlcoholDrikingStatus = (long)reader["V_AlcoholDrinkingStatus"];
                    p.RefAlcohol = new Lookup
                    {
                        LookupID = (long)reader["V_AlcoholDrinkingStatus"],
                        ObjectValue = reader["AlcoholDrinkingStatus"].ToString()
                    };
                }
                if (reader.HasColumn("BustSize") && reader["BustSize"] != DBNull.Value)
                {
                    p.BustSize = Convert.ToByte(reader["BustSize"]);
                }
                if (reader.HasColumn("V_HealthyClassification") && reader["V_HealthyClassification"] != DBNull.Value)
                {
                    p.V_HealthyClassification = Convert.ToInt64(reader["V_HealthyClassification"]);
                }
                if (reader.HasColumn("Diet") && reader["Diet"] != DBNull.Value)
                {
                    p.Diet = reader["Diet"].ToString();
                }
                //▼====: #109
                if (reader.HasColumn("Urine") && reader["Urine"] != DBNull.Value)
                {
                    p.Urine = Convert.ToDouble(reader["Urine"]);
                }
                //▲====: #109
                //▼====: #130
                if (reader.HasColumn("OxygenBreathing") && reader["OxygenBreathing"] != DBNull.Value)
                {
                    p.OxygenBreathing = Convert.ToBoolean(reader["OxygenBreathing"]);
                    p.OxygenBreathingStr = Convert.ToString(reader["OxygenBreathingStr"]);
                }
                else
                {
                    p.OxygenBreathing = null;
                    p.OxygenBreathingStr = "";
                }
                if (reader.HasColumn("V_ConsciousnessLevel") && reader["V_ConsciousnessLevel"] != DBNull.Value)
                {
                    p.V_ConsciousnessLevel = Convert.ToInt32(reader["V_ConsciousnessLevel"]);
                    p.ConsciousnessLevelStr = Convert.ToString(reader["ConsciousnessLevelStr"]);
                }
                else
                {
                    p.V_ConsciousnessLevel = null;
                    p.ConsciousnessLevelStr = "";
                }
                if (reader.HasColumn("V_PainLevel") && reader["V_PainLevel"] != DBNull.Value)
                {
                    p.V_PainLevel = Convert.ToInt32(reader["V_PainLevel"]);
                    p.PainLevelStr = Convert.ToString(reader["PainLevelStr"]);
                }
                else
                {
                    p.V_PainLevel = null;
                    p.PainLevelStr = "";
                }
                //▲====: #130
                //▼==== #193
                if (reader.HasColumn("HeadSize") && reader["HeadSize"] != DBNull.Value)
                {
                    p.HeadSize = Convert.ToByte(reader["HeadSize"]);
                }
                //▲==== #193
            }
            catch (Exception ex)
            {
                AxLogger.Instance.LogError(ex);
            }
            return p;
        }
        protected virtual List<PhysicalExamination> GetPhysicalExaminationCollectionFromReader(IDataReader reader)
        {
            var phyExams = new List<PhysicalExamination>();
            while (reader.Read())
            {
                phyExams.Add(GetPhysicalExaminationFromReader(reader));
            }
            return phyExams;
        }

        protected virtual PatientServiceRecord GetConsultationFromReader(IDataReader reader)
        {
            var p = new PatientServiceRecord
            {
                PatientMedicalRecord = new PatientMedicalRecord
                {
                    PatientRecID = (long)reader["PatientRecID"],
                    PatientID = reader["PatientID"] as long?,
                    NationalMedicalCode = reader["NationalMedicalCode"].ToString(),
                    PatientRecBarCode = reader["PatientRecBarCode"].ToString(),
                    CreatedDate = reader["CreatedDate"] as DateTime?,
                    FinishedDate = reader["FinishedDate"] as DateTime?
                },
                ServiceRecID = (long)reader["ServiceRecID"],
                PtRegistrationID = reader["PtRegistrationID"] as long?,
                StaffID = (long)reader["StaffID"],
                PatientRecID = reader["PatientRecID"] as long?,
                PatientMedicalFileID = reader["PatientMedicalFileID"] as long?,
                ExamDate = (DateTime)reader["ExamDate"],
                V_ProcessingType = reader["V_ProcessingType"] as long?,
                V_Behaving = reader["V_Behaving"] as long?,
                Staff =
                                new Staff
                                {
                                    StaffID = (long)reader["StaffID"],
                                    SFirstName = reader["SFirstName"].ToString(),
                                    SMiddleName = reader["SMiddleName"].ToString(),
                                    SLastName = reader["SLastName"].ToString(),
                                    FullName = reader["FullName"].ToString()
                                },
                LookupProcessingType =
                                new Lookup
                                {
                                    LookupID = (long)reader["V_ProcessingType"],
                                    ObjectValue = reader["ProcessingType"].ToString()
                                },
                LookupBehaving = new Lookup
                {
                    LookupID = (long)reader["V_Behaving"],
                    ObjectValue = reader["Behaving"].ToString()
                }
            };

            if (reader.HasColumn("V_DiagnosisType") && reader["V_DiagnosisType"] != DBNull.Value)
            {
                p.V_DiagnosisType = reader["V_DiagnosisType"] as long?;
                p.LookupDiagnosis = new Lookup();
                p.LookupDiagnosis.LookupID = (long)reader["V_DiagnosisType"];
                p.LookupDiagnosis.ObjectValue = reader["DiagnosisTypeName"].ToString();
            }

            return p;
        }
        protected virtual List<PatientServiceRecord> GetConsultationCollectionFromReader(IDataReader reader)
        {
            var lst = new List<PatientServiceRecord>();
            while (reader.Read())
            {
                lst.Add(GetConsultationFromReader(reader));
            }
            return lst;
        }


        protected virtual PatientServiceRecord GetPatientServiceRecordFromReader(IDataReader reader)
        {
            var p = new PatientServiceRecord();
            //{
            //    ServiceRecID = (long)reader["ServiceRecID"],
            //    PtRegistrationID = reader["PtRegistrationID"] as long?,
            //    StaffID = (long)reader["StaffID"],
            //    PatientRecID = reader["PatientRecID"] as long?,
            //    PatientMedicalFileID = reader["PatientMedicalFileID"] as long?,
            //    ExamDate = (DateTime)reader["ExamDate"],
            //    V_ProcessingType = reader["V_ProcessingType"] as long?,
            //    V_Behaving = reader["V_Behaving"] as long?
            //};

            if (reader.HasColumn("ServiceRecID") && reader["ServiceRecID"] != DBNull.Value)
            {
                p.ServiceRecID = Convert.ToInt64(reader["ServiceRecID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = Convert.ToInt64(reader["StaffID"]);
            }
            if (reader.HasColumn("PatientRecID") && reader["PatientRecID"] != DBNull.Value)
            {
                p.PatientRecID = Convert.ToInt64(reader["PatientRecID"]);
            }
            if (reader.HasColumn("PatientMedicalFileID") && reader["PatientMedicalFileID"] != DBNull.Value)
            {
                p.PatientMedicalFileID = Convert.ToInt64(reader["PatientMedicalFileID"]);
            }
            if (reader.HasColumn("ExamDate") && reader["ExamDate"] != DBNull.Value)
            {
                p.ExamDate = Convert.ToDateTime(reader["ExamDate"]);
            }
            if (reader.HasColumn("V_ProcessingType") && reader["V_ProcessingType"] != DBNull.Value)
            {
                p.V_ProcessingType = Convert.ToInt64(reader["V_ProcessingType"]);
            }
            if (reader.HasColumn("V_Behaving") && reader["V_Behaving"] != DBNull.Value)
            {
                p.V_Behaving = Convert.ToInt64(reader["V_Behaving"]);
            }
            p.DiagnosisTreatments = new ObservableCollection<DiagnosisTreatment>();
            p.PrescriptionIssueHistories = new ObservableCollection<PrescriptionIssueHistory>();
            return p;
        }
        protected virtual List<PatientServiceRecord> GetPatientServiceRecordCollectionFromReader(IDataReader reader)
        {
            var lst = new List<PatientServiceRecord>();
            while (reader.Read())
            {
                lst.Add(GetPatientServiceRecordFromReader(reader));
            }
            return lst;
        }

        #endregion

        #region Lin Ny Common Provider

        public string convertToUnSign3(string s)
        {
            Regex regex = new Regex("\\p{IsCombiningDiacriticalMarks}+");
            string temp = s.Normalize(NormalizationForm.FormD);
            return regex.Replace(temp, String.Empty).Replace('\u0111', 'd').Replace('\u0110', 'D');
        }

        protected virtual CitiesProvince GetCityProvinceFromReader(IDataReader reader)
        {
            var p = new CitiesProvince
            {
                CityProvinceID = (long)reader["CityProvinceID"],
                CityProvinceName = reader["CityProvinceName"].ToString()
            };
            if (reader.HasColumn("CityProviceCode"))
            {
                p.CityProviceCode = reader["CityProviceCode"].ToString();
            }
            if (reader.HasColumn("CityProviceHICode"))
            {
                p.CityProviceHICode = reader["CityProviceHICode"].ToString();
            }

            return p;
        }
        protected virtual List<CitiesProvince> GetCityProvinceCollectionFromReader(IDataReader reader)
        {
            var provinces = new List<CitiesProvince>();
            while (reader.Read())
            {
                provinces.Add(GetCityProvinceFromReader(reader));
            }
            return provinces;
        }

        protected virtual Lookup GetLookupFromReader(IDataReader reader)
        {
            var p = new Lookup();
            if (reader.HasColumn("LookupID") && reader["LookupID"] != DBNull.Value)
            {
                p.LookupID = (long)reader["LookupID"];
            }
            if (reader.HasColumn("ObjectTypeID") && reader["ObjectTypeID"] != DBNull.Value)
            {
                p.ObjectTypeID = (long)reader["ObjectTypeID"];
            }
            if (reader.HasColumn("ObjectName") && reader["ObjectName"] != DBNull.Value)
            {
                p.ObjectName = reader["ObjectName"].ToString();
            }

            if (reader.HasColumn("ObjectValue") && reader["ObjectValue"] != DBNull.Value)
            {
                p.ObjectValue = reader["ObjectValue"].ToString();
            }

            if (reader.HasColumn("ObjectNotes") && reader["ObjectNotes"] != DBNull.Value)
            {
                p.ObjectNotes = reader["ObjectNotes"].ToString();
            }

            if (reader.HasColumn("Code") && reader["Code"] != DBNull.Value)
            {
                p.Code = reader["Code"].ToString();
            }
            //▼==== #180
            if (reader.HasColumn("Code130") && reader["Code130"] != DBNull.Value)
            {
                p.Code130 = reader["Code130"].ToString();
            }

            if (reader.HasColumn("DateActive") && reader["DateActive"] != DBNull.Value)
            {
                p.DateActive = Convert.ToDateTime(reader["DateActive"]);
            }

            if (reader.HasColumn("IsActiveLookup") && reader["IsActiveLookup"] != DBNull.Value)
            {
                p.IsActiveLookup = Convert.ToBoolean(reader["IsActiveLookup"]);
            }

            if (reader.HasColumn("StaffFullName") && reader["StaffFullName"] != DBNull.Value)
            {
                p.StaffFullName = reader["StaffFullName"].ToString();
            }
            //▲==== #180
            return p;

        }
        protected virtual AdmissionCriteria GetAdmissionCriteriaFromReader(IDataReader reader)
        {
            var p = new AdmissionCriteria();
            if (reader.HasColumn("AdmissionCriteriaID") && reader["AdmissionCriteriaID"] != DBNull.Value)
            {
                p.AdmissionCriteriaID = (long)reader["AdmissionCriteriaID"];
            }
            if (reader.HasColumn("V_AdmissionCriteriaType") && reader["V_AdmissionCriteriaType"] != DBNull.Value)
            {
                p.V_AdmissionCriteriaType = (long)reader["V_AdmissionCriteriaType"];
            }
            if (reader.HasColumn("AdmissionCriteriaTypeName") && reader["AdmissionCriteriaTypeName"] != DBNull.Value)
            {
                p.AdmissionCriteriaTypeName = reader["AdmissionCriteriaTypeName"].ToString();
            }
            if (reader.HasColumn("AdmissionCriteriaCode") && reader["AdmissionCriteriaCode"] != DBNull.Value)
            {
                p.AdmissionCriteriaCode = reader["AdmissionCriteriaCode"].ToString();
            }
            if (reader.HasColumn("AdmissionCriteriaName") && reader["AdmissionCriteriaName"] != DBNull.Value)
            {
                p.AdmissionCriteriaName = reader["AdmissionCriteriaName"].ToString();
            }
            if (reader.HasColumn("AdmissionCriteriaName_Ax") && reader["AdmissionCriteriaName_Ax"] != DBNull.Value)
            {
                p.AdmissionCriteriaName_Ax = reader["AdmissionCriteriaName_Ax"].ToString();
            }
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = (bool)reader["IsActive"];
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaffID = (long)reader["CreatedStaffID"];
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = (DateTime)reader["CreatedDate"];
            }
            if (reader.HasColumn("LogModified") && reader["LogModified"] != DBNull.Value)
            {
                p.LogModified = reader["LogModified"].ToString();
            }
            return p;

        }
        protected virtual List<AdmissionCriterion> GetAdmissionCriterionCollectionFromReader(IDataReader reader)
        {
            var admissionCriterion = new List<AdmissionCriterion>();
            while (reader.Read())
            {
                admissionCriterion.Add(GetAdmissionCriterionFromReader(reader));
            }
            return admissionCriterion;
        }
        protected virtual AdmissionCriterion GetAdmissionCriterionFromReader(IDataReader reader)
        {
            var p = new AdmissionCriterion();
            if (reader.HasColumn("AdmissionCriterionID") && reader["AdmissionCriterionID"] != DBNull.Value)
            {
                p.AdmissionCriterionID = (long)reader["AdmissionCriterionID"];
            }
            if (reader.HasColumn("AdmissionCriterionName") && reader["AdmissionCriterionName"] != DBNull.Value)
            {
                p.AdmissionCriterionName = reader["AdmissionCriterionName"].ToString();
            }
            if (reader.HasColumn("IsDelete") && reader["IsDelete"] != DBNull.Value)
            {
                p.IsDelete = (bool)reader["IsDelete"];
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaffID = (long)reader["CreatedStaffID"];
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = (DateTime)reader["CreatedDate"];
            }
            if (reader.HasColumn("LogModified") && reader["LogModified"] != DBNull.Value)
            {
                p.LogModified = reader["LogModified"].ToString();
            }
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = (bool)reader["IsActive"];
            }
            return p;
        }
        protected virtual List<GroupPCLs> GetGroupPCLsCollectionFromReader(IDataReader reader)
        {
            var groupPCLs = new List<GroupPCLs>();
            while (reader.Read())
            {
                groupPCLs.Add(GetGroupPCLsFromReader(reader));
            }
            return groupPCLs;
        }
        protected virtual GroupPCLs GetGroupPCLsFromReader(IDataReader reader)
        {
            var p = new GroupPCLs();
            if (reader.HasColumn("GroupPCLID") && reader["GroupPCLID"] != DBNull.Value)
            {
                p.GroupPCLID = (long)reader["GroupPCLID"];
            }
            if (reader.HasColumn("GroupPCLName") && reader["GroupPCLName"] != DBNull.Value)
            {
                p.GroupPCLName = reader["GroupPCLName"].ToString();
            }
            if (reader.HasColumn("IsDelete") && reader["IsDelete"] != DBNull.Value)
            {
                p.IsDelete = (bool)reader["IsDelete"];
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaffID = (long)reader["CreatedStaffID"];
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = (DateTime)reader["CreatedDate"];
            }
            if (reader.HasColumn("LogModified") && reader["LogModified"] != DBNull.Value)
            {
                p.LogModified = reader["LogModified"].ToString();
            }
            return p;
        }
   
        protected virtual List<SymptomCategory> GetSymptomCategoryCollectionFromReader(IDataReader reader)
        {
            var symptomCategory = new List<SymptomCategory>();
            while (reader.Read())
            {
                symptomCategory.Add(GetSymptomCategoryFromReader(reader));
            }
            return symptomCategory;
        }
        protected virtual SymptomCategory GetSymptomCategoryFromReader(IDataReader reader)
        {
            var p = new SymptomCategory();
            if (reader.HasColumn("SymptomCategoryID") && reader["SymptomCategoryID"] != DBNull.Value)
            {
                p.SymptomCategoryID = (long)reader["SymptomCategoryID"];
            }
            if (reader.HasColumn("V_SymptomType") && reader["V_SymptomType"] != DBNull.Value)
            {
                p.V_SymptomType = (long)reader["V_SymptomType"];
            }
            if (reader.HasColumn("SymptomTypeName") && reader["SymptomTypeName"] != DBNull.Value)
            {
                p.SymptomTypeName = reader["SymptomTypeName"].ToString();
            }
            if (reader.HasColumn("SymptomCategoryName") && reader["SymptomCategoryName"] != DBNull.Value)
            {
                p.SymptomCategoryName = reader["SymptomCategoryName"].ToString();
            }
            if (reader.HasColumn("IsDelete") && reader["IsDelete"] != DBNull.Value)
            {
                p.IsDelete = (bool)reader["IsDelete"];
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaffID = (long)reader["CreatedStaffID"];
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = (DateTime)reader["CreatedDate"];
            }
            if (reader.HasColumn("LogModified") && reader["LogModified"] != DBNull.Value)
            {
                p.LogModified = reader["LogModified"].ToString();
            }
            return p;
        }
        protected virtual List<AdmissionCriterionAttachICD> GetAdmissionCriterionAttachICDCollectionFromReader(IDataReader reader)
        {
            var admissionCriterionAttachICD = new List<AdmissionCriterionAttachICD>();
            while (reader.Read())
            {
                admissionCriterionAttachICD.Add(GetAdmissionCriterionAttachICDFromReader(reader));
            }
            return admissionCriterionAttachICD;
        }
        protected virtual AdmissionCriterionAttachICD GetAdmissionCriterionAttachICDFromReader(IDataReader reader)
        {
            var p = new AdmissionCriterionAttachICD();
            if (reader.HasColumn("ACAI_ID") && reader["ACAI_ID"] != DBNull.Value)
            {
                p.ACAI_ID = (long)reader["ACAI_ID"];
            }
            if (reader.HasColumn("AdmissionCriterionID") && reader["AdmissionCriterionID"] != DBNull.Value)
            {
                p.AdmissionCriterionID = (long)reader["AdmissionCriterionID"];
            }
            if (reader.HasColumn("IDCode") && reader["IDCode"] != DBNull.Value)
            {
                p.IDCode = (long)reader["IDCode"];
            }
            if (reader.HasColumn("ICD10Code") && reader["ICD10Code"] != DBNull.Value)
            {
                p.ICD10Code = reader["ICD10Code"].ToString();
            }
            if (reader.HasColumn("DiseaseNameVN") && reader["DiseaseNameVN"] != DBNull.Value)
            {
                p.DiseaseNameVN = reader["DiseaseNameVN"].ToString();
            }
            if (reader.HasColumn("IsDelete") && reader["IsDelete"] != DBNull.Value)
            {
                p.IsDelete = (bool)reader["IsDelete"];
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaffID = (long)reader["CreatedStaffID"];
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = (DateTime)reader["CreatedDate"];
            }
            return p;

        }

        protected virtual XDocument ConvertAdmissionCriterionAttachICDToXml(IEnumerable<AdmissionCriterionAttachICD> items)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                new XElement("DS",
                from item in items
                select new XElement("AdmissionCriterionAttachICD",
                    new XElement("ACAI_ID", item.ACAI_ID),
                    new XElement("AdmissionCriterionID", item.AdmissionCriterionID),
                    new XElement("IDCode", item.IDCode),
                    new XElement("ICD10Code", item.ICD10Code)
                    )));
            return xmlDocument;
        }

        protected virtual List<AdmissionCriterionAttachSymptom> GetAdmissionCriterionAttachSymptomCollectionFromReader(IDataReader reader)
        {
            var admissionCriterionAttachSymptom = new List<AdmissionCriterionAttachSymptom>();
            while (reader.Read())
            {
                admissionCriterionAttachSymptom.Add(GetAdmissionCriterionAttachSymptomFromReader(reader));
            }
            return admissionCriterionAttachSymptom;
        }
        protected virtual AdmissionCriterionAttachSymptom GetAdmissionCriterionAttachSymptomFromReader(IDataReader reader)
        {
            var p = new AdmissionCriterionAttachSymptom();
            if (reader.HasColumn("ACAS_ID") && reader["ACAS_ID"] != DBNull.Value)
            {
                p.ACAS_ID = (long)reader["ACAS_ID"];
            }
            if (reader.HasColumn("AdmissionCriterionID") && reader["AdmissionCriterionID"] != DBNull.Value)
            {
                p.AdmissionCriterionID = (long)reader["AdmissionCriterionID"];
            }
            if (reader.HasColumn("SymptomCategoryID") && reader["SymptomCategoryID"] != DBNull.Value)
            {
                p.SymptomCategoryID = (long)reader["SymptomCategoryID"];
            }
            if (reader.HasColumn("V_SymptomType") && reader["V_SymptomType"] != DBNull.Value)
            {
                p.V_SymptomType = (long)reader["V_SymptomType"];
            }
            if (reader.HasColumn("SymptomCategoryName") && reader["SymptomCategoryName"] != DBNull.Value)
            {
                p.SymptomCategoryName = reader["SymptomCategoryName"].ToString();
            }
            if (reader.HasColumn("IsDelete") && reader["IsDelete"] != DBNull.Value)
            {
                p.IsDelete = (bool)reader["IsDelete"];
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaffID = (long)reader["CreatedStaffID"];
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = (DateTime)reader["CreatedDate"];
            }
            return p;

        }
        protected virtual XDocument ConvertAdmissionCriterionAttachSymptomToXml(IEnumerable<AdmissionCriterionAttachSymptom> items)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                new XElement("DS",
                from item in items
                select new XElement("AdmissionCriterionAttachSymptom",
                    new XElement("ACAS_ID", item.ACAS_ID),
                    new XElement("AdmissionCriterionID", item.AdmissionCriterionID),
                    new XElement("SymptomCategoryID", item.SymptomCategoryID)
                    )));
            return xmlDocument;
        }
        protected virtual List<AdmissionCriterionAttachGroupPCL> GetAdmissionCriterionAttachGroupPCLCollectionFromReader(IDataReader reader)
        {
            var admissionCriterionAttachGroupPCL = new List<AdmissionCriterionAttachGroupPCL>();
            while (reader.Read())
            {
                admissionCriterionAttachGroupPCL.Add(GetAdmissionCriterionAttachGroupPCLFromReader(reader));
            }
            return admissionCriterionAttachGroupPCL;
        }
        protected virtual AdmissionCriterionAttachGroupPCL GetAdmissionCriterionAttachGroupPCLFromReader(IDataReader reader)
        {
            var p = new AdmissionCriterionAttachGroupPCL();
            if (reader.HasColumn("ACAG_ID") && reader["ACAG_ID"] != DBNull.Value)
            {
                p.ACAG_ID = (long)reader["ACAG_ID"];
            }
            if (reader.HasColumn("AdmissionCriterionID") && reader["AdmissionCriterionID"] != DBNull.Value)
            {
                p.AdmissionCriterionID = (long)reader["AdmissionCriterionID"];
            }
            if (reader.HasColumn("GroupPCLID") && reader["GroupPCLID"] != DBNull.Value)
            {
                p.GroupPCLID = (long)reader["GroupPCLID"];
            }
            if (reader.HasColumn("GroupPCLName") && reader["GroupPCLName"] != DBNull.Value)
            {
                p.GroupPCLName = reader["GroupPCLName"].ToString();
            }
            if (reader.HasColumn("IsDelete") && reader["IsDelete"] != DBNull.Value)
            {
                p.IsDelete = (bool)reader["IsDelete"];
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaffID = (long)reader["CreatedStaffID"];
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = (DateTime)reader["CreatedDate"];
            }
            return p;

        }
        protected virtual XDocument ConvertAdmissionCriterionAttachGroupPCLToXml(IEnumerable<AdmissionCriterionAttachGroupPCL> items)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                new XElement("DS",
                from item in items
                select new XElement("AdmissionCriterionAttachGroupPCL",
                    new XElement("ACAG_ID", item.ACAG_ID),
                    new XElement("AdmissionCriterionID", item.AdmissionCriterionID),
                    new XElement("GroupPCLID", item.GroupPCLID)
                    )));
            return xmlDocument;
        }
        protected virtual List<GroupPCLs> GetGroupPCLs_DetailCollectionFromReader(IDataReader reader)
        {
            var groupPCLs_Detail = new List<GroupPCLs_Detail>();
            while (reader.Read())
            {
                groupPCLs_Detail.Add(GetGroupPCLs_DetailFromReader(reader));
            }
            var result = new List<GroupPCLs>();
            long groupPCLID = 0;
            foreach (var item in groupPCLs_Detail)
            {
                if(item.GroupPCLID != groupPCLID)
                {
                    groupPCLID = item.GroupPCLID;
                    result.Add(item.GroupPCL);
                    result.Where(x => x.GroupPCLID == item.GroupPCLID).FirstOrDefault().PCLExamTypeItem = new ObservableCollection<PCLExamType>();
                    result.Where(x => x.GroupPCLID == item.GroupPCLID).FirstOrDefault().PCLExamTypeItem.Add(item.PCLExamType);
                }
                else
                {
                    result.Where(x => x.GroupPCLID == item.GroupPCLID).FirstOrDefault().PCLExamTypeItem.Add(item.PCLExamType);
                }
            }
            return result;
        }
        protected virtual GroupPCLs_Detail GetGroupPCLs_DetailFromReader(IDataReader reader)
        {
            var p = new GroupPCLs_Detail();
            if (reader.HasColumn("GroupPCLs_Detail_ID") && reader["GroupPCLs_Detail_ID"] != DBNull.Value)
            {
                p.GroupPCLs_Detail_ID = (long)reader["GroupPCLs_Detail_ID"];
            }
            if (reader.HasColumn("GroupPCLID") && reader["GroupPCLID"] != DBNull.Value)
            {
                p.GroupPCLID = (long)reader["GroupPCLID"];
                p.GroupPCL = GetGroupPCLsFromReader(reader);
            }
            if (reader.HasColumn("PCLExamTypeID") && reader["PCLExamTypeID"] != DBNull.Value)
            {
                p.PCLExamTypeID = (long)reader["PCLExamTypeID"];
                p.PCLExamType = GetPCLExamTypeFromReader(reader);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaffID = (long)reader["CreatedStaffID"];
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = (DateTime)reader["CreatedDate"];
            }
            return p;

        }
        protected virtual AdmissionCriterionDetail GeAdmissionCriterionDetailFromReader(IDataReader reader)
        {
            var p = new AdmissionCriterionDetail();
            if (reader.HasColumn("AdmissionCriterionDetailID") && reader["AdmissionCriterionDetailID"] != DBNull.Value)
            {
                p.AdmissionCriterionDetailID = (long)reader["AdmissionCriterionDetailID"];
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = (long)reader["PtRegistrationID"];
            }
            if (reader.HasColumn("SymptomList") && reader["SymptomList"] != DBNull.Value)
            {
                p.SymptomList = reader["SymptomList"].ToString();
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaffID = (long)reader["CreatedStaffID"];
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = (DateTime)reader["CreatedDate"];
            }
            if (reader.HasColumn("LastUpdateStaffID") && reader["LastUpdateStaffID"] != DBNull.Value)
            {
                p.LastUpdateStaffID = (long)reader["LastUpdateStaffID"];
            }
            if (reader.HasColumn("LastUpdateDate") && reader["LastUpdateDate"] != DBNull.Value)
            {
                p.LastUpdateDate = (DateTime)reader["LastUpdateDate"];
            }
            return p;

        }
        protected virtual BedCategory GetBedCategoryFromReader(IDataReader reader)
        {
            var p = new BedCategory();
            if (reader.HasColumn("BedCategoryID") && reader["BedCategoryID"] != DBNull.Value)
            {
                p.BedCategoryID = (long)reader["BedCategoryID"];
            }
            if (reader.HasColumn("HIBedCode") && reader["HIBedCode"] != DBNull.Value)
            {
                p.HIBedCode = reader["HIBedCode"].ToString();
            }
            if (reader.HasColumn("HIBedName") && reader["HIBedName"] != DBNull.Value)
            {
                p.HIBedName = reader["HIBedName"].ToString();
            }
            if (reader.HasColumn("HosBedCode") && reader["HosBedCode"] != DBNull.Value)
            {
                p.HosBedCode = reader["HosBedCode"].ToString();
            }
            if (reader.HasColumn("HosBedName") && reader["HosBedName"] != DBNull.Value)
            {
                p.HosBedName = reader["HosBedName"].ToString();
            }
            if (reader.HasColumn("V_BedType") && reader["V_BedType"] != DBNull.Value)
            {
                p.BedType = GetLookupFromReader(reader);
                p.V_BedType = (long)reader["V_BedType"];
            }
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = (bool)reader["IsActive"];
            }

            return p;

        }
        protected virtual List<Lookup> GetLookupCollectionFromReader(IDataReader reader)
        {
            var lookups = new List<Lookup>();
            while (reader.Read())
            {
                lookups.Add(GetLookupFromReader(reader));
            }
            return lookups;
        }
        protected virtual List<AdmissionCriteria> GetAdmissionCriteriaCollectionFromReader(IDataReader reader)
        {
            var admissionCriteria = new List<AdmissionCriteria>();
            while (reader.Read())
            {
                admissionCriteria.Add(GetAdmissionCriteriaFromReader(reader));
            }
            return admissionCriteria;
        }
        protected virtual List<BedCategory> GetBedCategoryCollectionFromReader(IDataReader reader)
        {
            var BedCategorys = new List<BedCategory>();
            while (reader.Read())
            {
                BedCategorys.Add(GetBedCategoryFromReader(reader));
            }
            return BedCategorys;
        }

        protected virtual RefDepartment GetDepartmentFromReader(IDataReader reader)
        {
            if (reader.HasColumn("RefDepartments.DeptID") == false && reader.HasColumn("DeptID") == false)
                return null;

            if (reader.HasColumn("RefDepartments.DeptID") && (((long)reader["RefDepartments.DeptID"]) == 0 || reader["RefDepartments.DeptID"] == DBNull.Value))
                return null;

            if (reader.HasColumn("DeptID") && (((long)reader["DeptID"]) == 0 || reader["DeptID"] == DBNull.Value))
                return null;

            var p = new RefDepartment();

            if (reader.HasColumn("RefDepartments.DeptID") && reader["RefDepartments.DeptID"] != DBNull.Value)
            {
                p.DeptID = (long)reader["RefDepartments.DeptID"];
            }
            else if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
            {
                p.DeptID = (long)reader["DeptID"];
            }

            if (reader.HasColumn("ParDeptID") && reader["ParDeptID"] != DBNull.Value)
            {
                p.ParDeptID = reader["ParDeptID"] as long?;
            }

            if (reader.HasColumn("DeptName") && reader["DeptName"] != DBNull.Value)
            {
                p.DeptName = reader["DeptName"].ToString();
            }

            if (reader.HasColumn("DeptShortName") && reader["DeptShortName"] != DBNull.Value)
            {
                p.DeptShortName = reader["DeptShortName"].ToString();
            }

            if (reader.HasColumn("DeptDescription") && reader["DeptDescription"] != DBNull.Value)
            {
                p.DeptDescription = reader["DeptDescription"].ToString();
            }

            if (reader.HasColumn("V_DeptType") && reader["V_DeptType"] != DBNull.Value)
            {
                p.V_DeptType = (long)reader["V_DeptType"];
            }

            if (reader.HasColumn("V_DeptTypeOperation") && reader["V_DeptTypeOperation"] != DBNull.Value)
            {
                p.V_DeptTypeOperation = (long)reader["V_DeptTypeOperation"];
            }

            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = (bool)reader["IsDeleted"];
            }

            // TxD 09/05/2015: Added the following attribute to indicate that if a department is selected then you must also select a room within that department.
            //                 Initially this flag is used for creating In-Patient Bill of the USIC-CC department
            if (reader.HasColumn("SelectDeptReqSelectRoom") && reader["SelectDeptReqSelectRoom"] != DBNull.Value)
            {
                p.SelectDeptReqSelectRoom = (bool)reader["SelectDeptReqSelectRoom"];
            }
            if (reader.HasColumn("IsAllowableInTemp") && reader["IsAllowableInTemp"] != DBNull.Value)
            {
                p.IsAllowableInTemp = Convert.ToBoolean(reader["IsAllowableInTemp"]);
            }
            if (reader.HasColumn("IsTreatmentForCOVID") && reader["IsTreatmentForCOVID"] != DBNull.Value)
            {
                p.IsTreatmentForCOVID = Convert.ToBoolean(reader["IsTreatmentForCOVID"]);
            }
            if (reader.HasColumn("NumOfDayAllowMedicalInstruction") && reader["NumOfDayAllowMedicalInstruction"] != DBNull.Value)
            {
                p.NumOfDayAllowMedicalInstruction = Convert.ToInt32(reader["NumOfDayAllowMedicalInstruction"]);
            }
            return p;

        }

        protected virtual RefDepartment GetResposibleDepartmentFromReader(IDataReader reader, string prefix)
        {
            var p = new RefDepartment();

            var colDeptID = prefix + "DeptID";
            var colParDeptID = prefix + "ParDeptID";
            var colDeptName = prefix + "DeptName";
            var colDeptDescription = prefix + "DeptDescription";
            var colV_DeptType = prefix + "V_DeptType";

            if (reader.HasColumn(colDeptID))
            {
                p.DeptID = (long)reader[colDeptID];
            }

            if (reader.HasColumn(colParDeptID))
            {
                p.ParDeptID = reader[colParDeptID] as long?;
            }

            if (reader.HasColumn(colDeptName) && reader[colDeptName] != DBNull.Value)
            {
                p.DeptName = (string)reader[colDeptName];
            }

            if (reader.HasColumn(colDeptDescription) && reader[colDeptDescription] != DBNull.Value)
            {
                p.DeptDescription = reader[colDeptDescription] as string;
            }

            if (reader.HasColumn(colV_DeptType) && reader[colV_DeptType] != DBNull.Value)
            {
                p.V_DeptType = (long)reader[colV_DeptType];
            }

            return p;
        }

        protected virtual List<DeptTransferDocReq> GetDocTypeRequiresCollectionFromReader(IDataReader reader)
        {
            var lst = new List<DeptTransferDocReq>();
            while (reader.Read())
            {
                lst.Add(GetDocTypeRequireFromReader(reader));
            }
            return lst;
        }

        protected virtual DeptTransferDocReq GetDocTypeRequireFromReader(IDataReader reader)
        {
            var p = new DeptTransferDocReq();

            if (reader.HasColumn("DeptTransferDocReqID") && reader["DeptTransferDocReqID"] != DBNull.Value)
            {
                p.DeptTransferDocReqID = (long)reader["DeptTransferDocReqID"];
            }
            if (reader.HasColumn("FromDeptID") && reader["FromDeptID"] != DBNull.Value)
            {
                p.FromDeptID = (long)reader["FromDeptID"];
            }
            if (reader.HasColumn("ToDeptID") && reader["ToDeptID"] != DBNull.Value)
            {
                p.ToDeptID = (long)reader["ToDeptID"];
            }
            if (reader.HasColumn("DocTypeRequired") && reader["DocTypeRequired"] != DBNull.Value)
            {
                p.DocTypeRequired = (long)reader["DocTypeRequired"];
            }
            if (reader.HasColumn("Comment") && reader["Comment"] != DBNull.Value)
            {
                p.Comment = (string)reader["Comment"];
            }
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = (bool)reader["IsActive"];
            }
            return p;
        }

        protected virtual List<RefDepartment> GetRefDeptsCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RefDepartment>();
            while (reader.Read())
            {
                lst.Add(GetDepartmentFromReader(reader));
            }
            return lst;
        }

        protected virtual RefDepartmentReqCashAdv GetRefDepartmentReqCashAdvFromReader(IDataReader reader)
        {
            var p = new RefDepartmentReqCashAdv();
            p.RefDepartmentReqCashAdvID = (long)reader["RefDepartmentReqCashAdvID"];
            p.DeptID = (long)reader["DeptID"];
            p.CashAdvAmtReq = Convert.ToDecimal(reader["CashAdvAmtReq"]);
            if (reader.HasColumn("DeptName"))
            {
                p.DeptName = reader["DeptName"].ToString();
            }
            return p;
        }

        protected virtual List<RefDepartmentReqCashAdv> GetRefDepartmentReqCashAdvCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RefDepartmentReqCashAdv>();
            while (reader.Read())
            {
                lst.Add(GetRefDepartmentReqCashAdvFromReader(reader));
            }
            return lst;
        }

        protected virtual InPatientDeptDetail GetInPatientDeptDetailFromReader(IDataReader reader)
        {
            var p = new InPatientDeptDetail
            {
                InPatientDeptDetailID = (long)reader["InPatientDeptDetailID"],
                InPatientAdmDisDetailID = (long)reader["InPatientAdmDisDetailID"],
                DeptLocID = (long)reader["DeptLocID"],
                FromDate = (DateTime)reader["FromDate"],
                ToDate = reader["ToDate"] as DateTime?,
            };
            if (reader.HasColumn("InPtDeptGuid") && reader["InPtDeptGuid"] != DBNull.Value)
            {
                p.InPtDeptGuid = (Guid)reader["InPtDeptGuid"];
            }
            if (reader.HasColumn("DocTypeRequired") && reader["DocTypeRequired"] != DBNull.Value)
            {
                p.DocTypeRequired = Convert.ToInt64(reader["DocTypeRequired"]);
            }
            if (reader.HasColumn("DocTypeRequired_Status") && reader["DocTypeRequired_Status"] != DBNull.Value)
            {
                p.DocTypeRequired_Status = Convert.ToInt64(reader["DocTypeRequired_Status"]);
            }
            if (reader.HasColumn("CompletedRequiredFromDate") && reader["CompletedRequiredFromDate"] != DBNull.Value)
            {
                p.CompletedRequiredFromDate = Convert.ToDateTime(reader["CompletedRequiredFromDate"]);
            }
            var status = (long)reader["V_InPatientDeptStatus"];
            if (Enum.IsDefined(typeof(AllLookupValues.InPatientDeptStatus), status))
            {
                p.V_InPatientDeptStatus = (AllLookupValues.InPatientDeptStatus)status;
            }
            //else
            //{
            //    p.V_InPatientDeptStatus = AllLookupValues.InPatientDeptStatus.PENDING;
            //}
            if (reader.HasColumn("IsTemp") && reader["IsTemp"] != DBNull.Value)
            {
                p.IsTemp = Convert.ToBoolean(reader["IsTemp"]);
            }
            p.DeptLocation = GetDeptLocationFromReader(reader);
            //▼====: #104
            if (reader.HasColumn("IsTreatmentCOVID") && reader["IsTreatmentCOVID"] != DBNull.Value)
            {
                p.IsTreatmentCOVID = Convert.ToBoolean(reader["IsTreatmentCOVID"]);
            }
            //▲====: #104
            //▼==== #184
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = Convert.ToBoolean(reader["IsActive"]);
            }
            //▲==== #184
            return p;
        }

        protected virtual List<InPatientDeptDetail> GetInPatientDeptDetailCollectionFromReader(IDataReader reader)
        {
            var lst = new List<InPatientDeptDetail>();
            while (reader.Read())
            {
                lst.Add(GetInPatientDeptDetailFromReader(reader));
            }
            return lst;
        }

        protected virtual RefRole GetRoleStaffFromReader(IDataReader reader)
        {
            var p = new RefRole { RoleCode = (long)reader["RoleCode"], RoleDescription = reader["RoleDescription"].ToString() };
            return p;
        }
        protected virtual RefStaffCategory GetStaffCategoryFromReader(IDataReader reader)
        {
            var p = new RefStaffCategory();
            if (reader.HasColumn("StaffCatgID") && reader["StaffCatgID"] != DBNull.Value)
            {
                p.StaffCatgID = Convert.ToInt64(reader["StaffCatgID"]);
            }
            if (reader.HasColumn("StaffCatgDescription") && reader["StaffCatgDescription"] != DBNull.Value)
            {
                p.StaffCatgDescription = reader["StaffCatgDescription"].ToString();
            }
            return p;
        }
        protected virtual Staff GetStaffFromReader(IDataReader reader)
        {
            try
            {
                var p = new Staff { StaffID = (Int64)reader["StaffID"], FullName = reader["FullName"].ToString() };
                if (reader.HasColumn("RoleCode") && reader["RoleCode"] != DBNull.Value)
                {
                    try
                    {
                        p.RefRole = GetRoleStaffFromReader(reader);
                    }
                    catch
                    { }
                }

                if (reader.HasColumn("StaffCatgID") && reader["StaffCatgID"] != DBNull.Value)
                {
                    try
                    {
                        p.RefStaffCategory = GetStaffCategoryFromReader(reader);
                    }
                    catch
                    { }
                }

                if (reader.HasColumn("PrintTitle") && reader["PrintTitle"] != DBNull.Value)
                {
                    p.PrintTitle = reader["PrintTitle"].ToString();
                }
                if (reader.HasColumn("MarkDeleted") && reader["MarkDeleted"] != DBNull.Value)
                {
                    p.MarkDeleted = Convert.ToBoolean(reader["MarkDeleted"]);
                }
                if (reader.HasColumn("SCode") && reader["SCode"] != DBNull.Value)
                {
                    p.SCode = reader["SCode"] as string;
                }               
                return p;
            }
            catch
            {
                return null;
            }
        }
        protected virtual List<Staff> GetStaffCollectionFromReader(IDataReader reader)
        {
            var staffs = new List<Staff>();
            while (reader.Read())
            {
                staffs.Add(GetStaffFromReader(reader));
            }
            return staffs;
        }
        #endregion

        #region Lin Ny Disposible Medical Resources Provider

        protected virtual InwardDMedRscrInvoice GetInwardDMedRscrInvoiceFromReader(IDataReader reader)
        {
            var p = new InwardDMedRscrInvoice
            {
                InvDMedRscrID = (long)reader["InvDMedRscrID"],
                InvInwardDMedID = reader["InvInwardDMedID"].ToString(),
                InvDMedRscrNumber = reader["InvDMedRscrNumber"].ToString(),
                DateInvDMedRscr = Convert.ToDateTime(reader["DateInvDMedRscr"]),
                DateInvDMedRscrNumber = Convert.ToDateTime(reader["DateInvDMedRscrNumber"]),
                StaffID = reader["StaffID"] as long?,
                SupplierID = reader["SupplierID"] as long?,
                V_Reason = reader["V_Reason"] as long?,
                V_ReasonName = reader["V_ReasonName"].ToString(),
                SelectedStaff = new Staff()
            };

            if (reader["StaffID"].ToString() != "" && reader["StaffID"] != DBNull.Value)
            {
                p.SelectedStaff.StaffID = (long)reader["StaffID"];
                p.SelectedStaff.FullName = reader["FullName"].ToString();
            }

            p.SelectedSupplier = new Supplier();
            if (reader["SupplierID"].ToString() != "" && reader["SupplierID"] != DBNull.Value)
            {
                p.SelectedSupplier.SupplierID = (long)reader["SupplierID"];
                p.SelectedSupplier.SupplierName = reader["SupplierName"].ToString();
            }
            return p;
        }
        protected virtual List<InwardDMedRscrInvoice> GetInwardDMedRscrInvoiceCollectionFromReader(IDataReader reader)
        {
            var lst = new List<InwardDMedRscrInvoice>();
            while (reader.Read())
            {
                lst.Add(GetInwardDMedRscrInvoiceFromReader(reader));
            }
            return lst;
        }


        #endregion

        #region "RefDepartments"
        protected virtual RefDepartments GetRefDepartmentsFromReader(IDataReader reader)
        {
            var p = new RefDepartments { DeptID = (long)reader["DeptID"] };

            if (reader["ParDeptID"] != DBNull.Value)
            {
                p.ParDeptID = (long)reader["ParDeptID"];
            }
            p.V_DeptType = reader["V_DeptType"] as long?;
            p.DeptName = Convert.ToString(reader["DeptName"]);
            //▼==== #179
            p.DeptNameEng = Convert.ToString(reader["DeptNameEng"]);
            //▲==== #179
            p.DeptDescription = Convert.ToString(reader["DeptDescription"]);

            if (reader["V_DeptTypeOperation"] != DBNull.Value)
            {
                p.V_DeptTypeOperation = (long)reader["V_DeptTypeOperation"];
            }

            return p;
        }
        protected virtual List<RefDepartments> GetRefDepartmentsCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RefDepartments>();
            while (reader.Read())
            {
                lst.Add(GetRefDepartmentsFromReader(reader));
            }
            return lst;
        }
        #endregion

        #region ResourceMaintenanceLog


        protected virtual StaffPosition GetStaffPositionFromReader(IDataReader reader)
        {
            var p = new StaffPosition
            {
                StaffID = (long)reader["StaffID"],
                StaffPositionID = (long)reader["StaffPositionID"],
                PositionRefID = (int)reader["PositionRefID"],
                IsActive = (bool)reader["IsActive"],
                FullName = reader["FullName"].ToString(),
                PrefixDes = reader["PrefixDes"].ToString(),
                PositionName = reader["PositionName"].ToString(),
            };
            return p;
        }
        protected virtual List<StaffPosition> GetStaffPositionCollectionFromReader(IDataReader reader)
        {
            var obj = new List<StaffPosition>();
            while (reader.Read())
            {
                obj.Add(GetStaffPositionFromReader(reader));
            }
            return obj;
        }


        protected virtual Staff GetStaffFromReader_Simple(IDataReader reader)
        {
            var p = new Staff
            {
                StaffID = (long)reader["StaffID"],
                CountryID = reader["CountryID"] as long?,
                DeptID = reader["DeptID"] as long?,
                StaffCatgID = reader["StaffCatgID"] as long?,
                CityProvinceID = reader["CityProvinceID"] as long?,
                RoleCode = reader["RoleCode"] as long?,
                SFirstName = reader["SFirstName"].ToString(),
                SMiddleName = reader["SMiddleName"].ToString(),
                SLastName = reader["SLastName"].ToString(),
                FullName = reader["FullName"].ToString(),
                SDOB = reader["SDOB"] as DateTime?,
                SBirthPlace = reader["SBirthPlace"].ToString(),
                SIDNumber = reader["SIDNumber"].ToString(),
                SPlaceOfIssue = reader["SPlaceOfIssue"].ToString(),
                SStreetAddress = reader["SStreetAddress"].ToString(),
                SSurburb = reader["SSurburb"].ToString(),
                SState = reader["SState"].ToString(),
                SPhoneNumber = reader["SPhoneNumber"].ToString(),
                SMobiPhoneNumber = reader["SMobiPhoneNumber"].ToString(),
                SEmailAddress = reader["SEmailAddress"].ToString(),
                SEmployDate = reader["SEmployDate"] as DateTime?,
                SLeftDate = reader["SLeftDate"] as DateTime?,
                V_Religion = reader["V_Religion"] as long?,
                V_MaritalStatus = reader["V_MaritalStatus"] as long?,
                V_Ethnic = reader["V_Ethnic"] as long?,
                SAccountNumber = reader["SAccountNumber"].ToString(),
                V_BankName = reader["V_BankName"] as long?,
                SEmploymentHistory = reader["SEmploymentHistory"].ToString(),
                SImage = reader["SImage"].ToString(),
                SCreateDate = reader["SCreateDate"] as DateTime?
            };
            //▼====: #015
            if (reader.HasColumn("CertificateNumber") && reader["CertificateNumber"] != DBNull.Value)
            {
                p.SCertificateNumber = reader["CertificateNumber"].ToString();
            }
            if (reader.HasColumn("SCode") && reader["SCode"] != DBNull.Value)
            {
                p.SCode = reader["SCode"].ToString();
            }
            //▲====: #015
            return p;
        }
        protected virtual List<Staff> GetStaffCollectionFromReader_Simple(IDataReader reader)
        {
            var obj = new List<Staff>();
            while (reader.Read())
            {
                obj.Add(GetStaffFromReader_Simple(reader));
            }
            return obj;
        }

        protected virtual ResourceMaintenanceLog GetResourceMaintenanceLogFromReader(IDataReader reader)
        {
            var p = new ResourceMaintenanceLog
            {
                RscrMaintLogID = Convert.ToInt64(reader["RscrMaintLogID"]),
                RscrPropertyID = Convert.ToInt64(reader["RscrPropertyID"]),
                RecDateCreated = Convert.ToDateTime(reader["RecDateCreated"]),
                LoggingDate = Convert.ToDateTime(reader["LoggingDate"]),
                LoggingIssue = reader["LoggingIssue"].ToString(),
                LoggerStaffID = Convert.ToInt64(reader["LoggerStaffID"]),
                ObjLoggerStaffID =
                        new Staff
                        {
                            StaffID = Convert.ToInt64(reader["LoggerStaffID"]),
                            FullName = reader["LoggerStaffIDName"].ToString()
                        }
            };




            p.AssignStaffID = reader["AssignStaffID"] as Int64?;
            p.ObjAssignStaffID = new Staff();
            if (!string.IsNullOrEmpty(reader["AssignStaffID"].ToString()))
            {
                p.ObjAssignStaffID.StaffID = Convert.ToInt64(reader["AssignStaffID"]);
                p.ObjAssignStaffID.FullName = reader["AssignTo"].ToString();
            }

            p.ExternalFixSupplierID = reader["ExternalFixSupplierID"] as Int64?;
            p.ObjExternalFixSupplierID = new Supplier();
            if (!string.IsNullOrEmpty(reader["ExternalFixSupplierID"].ToString()))
            {
                p.ObjExternalFixSupplierID.SupplierID = Convert.ToInt64(reader["ExternalFixSupplierID"]);
                p.ObjExternalFixSupplierID.SupplierName = reader["AssignTo"].ToString();
            }

            p.Comments = reader["Comments"].ToString();

            p.V_RscrFinalStatus = reader["V_RscrInitialStatusID"] as Int64?;
            p.ObjV_RscrInitialStatus = new Lookup();
            if (!string.IsNullOrEmpty(reader["V_RscrInitialStatusID"].ToString()))
            {
                p.ObjV_RscrInitialStatus.LookupID = Convert.ToInt64(reader["V_RscrInitialStatusID"]);
                p.ObjV_RscrInitialStatus.ObjectValue = reader["V_RscrInitialStatus"].ToString();
            }


            p.FixStaffID = reader["FixStaffID"] as Int64?;
            p.ObjFixStaffID = new Staff();
            if (!string.IsNullOrEmpty(reader["FixStaffID"].ToString()))
            {
                p.ObjFixStaffID.StaffID = Convert.ToInt64(reader["FixStaffID"]);
                p.ObjFixStaffID.FullName = reader["ObjectFixName"].ToString();
            }

            p.FixSupplierID = reader["FixSupplierID"] as Int64?;
            p.ObjFixSupplierID = new Supplier();
            if (!string.IsNullOrEmpty(reader["FixSupplierID"].ToString()))
            {
                p.ObjFixSupplierID.SupplierID = Convert.ToInt64(reader["FixSupplierID"]);
                p.ObjFixSupplierID.SupplierName = reader["ObjectFixName"].ToString();
            }

            p.FixDate = reader["FixDate"] as DateTime?;
            p.FixSolutions = reader["FixSolutions"] == null ? "" : reader["FixSolutions"].ToString();
            p.FixComments = reader["FixComments"] == null ? "" : reader["FixComments"].ToString();

            p.VerifiedStaffID = reader["VerifiedStaffID"] as Int64?;
            p.ObjVerifiedStaffID = new Staff();
            if (!string.IsNullOrEmpty(reader["VerifiedStaffID"].ToString()))
            {
                p.ObjVerifiedStaffID.StaffID = Convert.ToInt64(reader["VerifiedStaffID"]);
                p.ObjVerifiedStaffID.FullName = reader["VerifiedStaffIDName"].ToString();
            }


            p.V_RscrFinalStatus = reader["V_RscrFinalStatus"] as Int64?;
            p.ObjV_RscrFinalStatus = new Lookup();
            if (!string.IsNullOrEmpty(reader["V_RscrFinalStatus"].ToString()))
            {
                p.ObjV_RscrFinalStatus.LookupID = Convert.ToInt64(reader["V_RscrFinalStatus"]);
                p.ObjV_RscrFinalStatus.ObjectValue = reader["V_RscrFinalStatusName"].ToString();
            }

            p.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);


            //Navigate
            #region Navigation Properties
            p.ObjV_CurrentStatus = new Lookup();
            if (!string.IsNullOrEmpty(reader["V_CurrentStatus"].ToString()))
            {
                p.ObjV_CurrentStatus.LookupID = Convert.ToInt64(reader["V_CurrentStatusID"]);
                p.ObjV_CurrentStatus.ObjectValue = reader["V_CurrentStatus"].ToString();
            }

            p.AssignTo = reader["AssignTo"].ToString();
            p.ObjectFixName = reader["ObjectFixName"].ToString();

            p.ObjRefDepartments = new RefDepartments();
            if (!string.IsNullOrEmpty(reader["DeptID"].ToString()))
            {
                p.ObjRefDepartments.DeptID = Convert.ToInt64(reader["DeptID"]);
                p.ObjRefDepartments.DeptName = reader["DeptName"].ToString();
            }

            p.ObjLocations = new Location();
            if (!string.IsNullOrEmpty(reader["LID"].ToString()))
            {
                p.ObjLocations.LID = Convert.ToInt64(reader["LID"]);
                p.ObjLocations.LocationName = reader["LocationName"].ToString();
            }

            p.ObjRoomType = new RoomType();
            if (!string.IsNullOrEmpty(reader["RmTypeID"].ToString()))
            {
                p.ObjRoomType.RmTypeID = Convert.ToInt64(reader["RmTypeID"]);
                p.ObjRoomType.RmTypeName = reader["RmTypeName"].ToString();
            }


            p.ObjResourceGroup = new ResourceGroup();
            if (!string.IsNullOrEmpty(reader["RscrGroupID"].ToString()))
            {
                p.ObjResourceGroup.RscrGroupID = Convert.ToInt64(reader["RscrGroupID"]);
                p.ObjResourceGroup.GroupName = reader["GroupName"].ToString();
            }

            p.ObjResourceType = new ResourceType();
            if (!string.IsNullOrEmpty(reader["RscrTypeID"].ToString()))
            {
                p.ObjResourceType.RscrTypeID = Convert.ToInt64(reader["RscrTypeID"]);
                p.ObjResourceType.TypeName = reader["TypeName"].ToString();
            }


            p.ObjResources = new Resources();
            if (!string.IsNullOrEmpty(reader["RscrID"].ToString()))
            {
                p.ObjResources.RscrID = Convert.ToInt64(reader["RscrID"]);
                p.ObjResources.ItemName = reader["ItemName"].ToString();
            }

            #endregion
            //Navigate

            return p;
        }
        protected virtual List<ResourceMaintenanceLog> GetResourceMaintenanceLogCollectionFromReader(IDataReader reader)
        {
            var lst = new List<ResourceMaintenanceLog>();
            while (reader.Read())
            {
                lst.Add(GetResourceMaintenanceLogFromReader(reader));
            }
            return lst;
        }

        protected virtual ResourceMaintenanceLogStatus GetResourceMaintenanceLogStatusFromReader(IDataReader reader)
        {
            var p = new ResourceMaintenanceLogStatus
            {
                RscrMainLogStatusID = (long)reader["RscrMainLogStatusID"],
                RscrMaintLogID = (long)reader["RscrMaintLogID"]
            };

            try
            {
                p.UpdateStatusStaffID = (long)reader["UpdateStatusStaffID"];
            }
            catch
            {
            }

            try
            {
                p.V_CurrentStatus = (long)reader["V_CurrentStatus"];
            }
            catch
            {

            }

            try
            {
                p.RecDateCreated = (DateTime?)reader["RecDateCreated"];
            }
            catch
            {
            }

            try
            {
                p.StatusChangeDate = (DateTime?)reader["StatusChangeDate"];
            }
            catch
            {
            }

            try
            {
                p.IsActive = (bool)reader["IsActive"];
                p.IsDeleted = (bool)reader["IsDeleted"];
            }
            catch
            {

            }

            p.VCurrentStatus = new Lookup();
            try
            {
                p.VCurrentStatus.ObjectValue = reader["CurrentStatusValue"].ToString();
                p.VCurrentStatus.LookupID = (long)reader["V_CurrentStatus"];

            }
            catch
            {

            }

            p.VUpdateStaff = new Staff();
            try
            {
                p.VUpdateStaff.StaffID = (long)reader["StaffID"];
                p.VUpdateStaff.FullName = reader["FullName"].ToString();
            }
            catch
            {

            }


            return p;
        }
        protected virtual List<ResourceMaintenanceLogStatus> GetResourceMaintenanceLogStatusCollectionFromReader(IDataReader reader)
        {
            List<ResourceMaintenanceLogStatus> lst = new List<ResourceMaintenanceLogStatus>();
            while (reader.Read())
            {
                lst.Add(GetResourceMaintenanceLogStatusFromReader(reader));
            }
            return lst;
        }
        #endregion

        #region "MedServiceItemPrice"
        //Danh sach gia cua dich vu
        protected virtual MedServiceItemPrice GetMedServiceItemPriceFromReader(IDataReader reader)
        {
            var p = new MedServiceItemPrice();

            if (reader.HasColumn("MedServItemPriceID") && reader["MedServItemPriceID"] != DBNull.Value)
            {
                p.MedServItemPriceID = Convert.ToInt64(reader["MedServItemPriceID"]);
            }

            if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
            {
                p.MedServiceID = Convert.ToInt64(reader["MedServiceID"]);
            }

            if (reader.HasColumn("MedServiceItemPriceListID") && reader["MedServiceItemPriceListID"] != DBNull.Value)
            {
                p.MedServiceItemPriceListID = reader["MedServiceItemPriceListID"] as long?;
            }


            p.ObjDeptMedServiceItems = new DeptMedServiceItems();
            if (reader.HasColumn("DeptMedServItemID") && reader["DeptMedServItemID"] != DBNull.Value)
            {
                p.ObjDeptMedServiceItems.DeptMedServItemID = Convert.ToInt64(reader["DeptMedServItemID"]);
            }

            if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
            {
                p.ObjDeptMedServiceItems.DeptID = Convert.ToInt64(reader["DeptID"]);

                p.ObjDeptMedServiceItems.ObjDeptID = new RefDepartments { DeptID = Convert.ToInt64(reader["DeptID"]) };
                if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
                {
                    p.ObjDeptMedServiceItems.MedServiceID = Convert.ToInt64(reader["MedServiceID"]);
                }

                //p.ObjDeptMedServiceItems.IsAllowRegistrationExam = Convert.ToBoolean(reader["IsAllowRegistrationExam"]);

                if (reader.HasColumn("DeptName"))
                {
                    p.ObjDeptMedServiceItems.ObjDeptID.DeptName = reader["DeptName"] == null ? "" : reader["DeptName"].ToString();
                }

            }

            p.ObjMedServiceID = new RefMedicalServiceItem { MedServiceID = Convert.ToInt64(reader["MedServiceID"]) };

            if (reader.HasColumn("MedicalServiceTypeID") && reader["MedicalServiceTypeID"] != DBNull.Value)
            {
                p.ObjMedServiceID.MedicalServiceTypeID = Convert.ToInt64(reader["MedicalServiceTypeID"]);

                p.ObjDeptMedServiceItems.ObjRefMedicalServiceItem = new RefMedicalServiceItem();

                try
                {
                    p.ObjDeptMedServiceItems.ObjRefMedicalServiceItem = GetMedicalServiceItemFromReader(reader);
                }
                catch
                {

                }

                p.ObjDeptMedServiceItems.ObjRefMedicalServiceItem.MedicalServiceTypeID = Convert.ToInt64(reader["MedicalServiceTypeID"]);

                p.ObjDeptMedServiceItems.ObjRefMedicalServiceItem.ObjMedicalServiceTypeID = new RefMedicalServiceType
                {
                    MedicalServiceTypeID = Convert.ToInt64(reader["MedicalServiceTypeID"])
                };

                if (reader.HasColumn("MedicalServiceTypeName"))
                {
                    p.ObjDeptMedServiceItems.ObjRefMedicalServiceItem.ObjMedicalServiceTypeID.MedicalServiceTypeName = reader["MedicalServiceTypeName"] == null ? "" : reader["MedicalServiceTypeName"].ToString();
                }

                p.ObjDeptMedServiceItems.ObjRefMedicalServiceItem.V_AppointmentType = 0;
                //Cho phép hẹn bệnh hay không
                if (reader.HasColumn("V_AppointmentType") && reader["V_AppointmentType"] != DBNull.Value)
                {
                    p.ObjDeptMedServiceItems.ObjRefMedicalServiceItem.V_AppointmentType = (long)reader["V_AppointmentType"];
                }
                //Cho Phép hẹn bệnh hay không
            }

            if (reader.HasColumn("MedServiceCode") && reader["MedServiceCode"] != DBNull.Value)
            {
                p.ObjMedServiceID.MedServiceCode = reader["MedServiceCode"] == null ? "" : reader["MedServiceCode"].ToString();
            }

            if (reader.HasColumn("MedServiceName") && reader["MedServiceName"] != DBNull.Value)
            {
                p.ObjMedServiceID.MedServiceName = reader["MedServiceName"] == null ? "" : reader["MedServiceName"].ToString();
            }

            p.ObjMedServiceID.ObjV_RefMedServiceItemsUnit = new Lookup();
            if (reader.HasColumn("V_RefMedServiceItemsUnit"))
            {
                p.ObjMedServiceID.V_RefMedServiceItemsUnit = (long)reader["V_RefMedServiceItemsUnit"];
                p.ObjMedServiceID.ObjV_RefMedServiceItemsUnit.LookupID = (long)reader["V_RefMedServiceItemsUnit"];

                if (reader.HasColumn("V_RefMedServiceItemsUnitName"))
                {
                    p.ObjMedServiceID.ObjV_RefMedServiceItemsUnit.ObjectValue = reader["V_RefMedServiceItemsUnitName"] == null ? "" : reader["V_RefMedServiceItemsUnitName"].ToString().Trim();
                }

                p.ObjDeptMedServiceItems.V_RefMedServiceItemsUnit = (long)reader["V_RefMedServiceItemsUnit"];

            }


            p.ObjStaffID = new Staff();
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = Convert.ToInt64(reader["StaffID"]);
                p.ObjStaffID.StaffID = Convert.ToInt64(reader["StaffID"]);

                if (reader.HasColumn("StaffIDName"))
                {
                    p.ObjStaffID.FullName = reader["StaffIDName"] == null ? "" : reader["StaffIDName"].ToString();
                }
            }


            p.ObjApprovedStaffID = new Staff();
            if (reader.HasColumn("ApprovedStaffID") && reader["ApprovedStaffID"] != DBNull.Value && reader["ApprovedStaffID"] != DBNull.Value)
            {
                p.ApprovedStaffID = Convert.ToInt64(reader["ApprovedStaffID"]);
                p.ObjApprovedStaffID.StaffID = Convert.ToInt64(reader["ApprovedStaffID"]);

                if (reader.HasColumn("ApprovedStaffIDName"))
                {
                    p.ObjApprovedStaffID.FullName = reader["ApprovedStaffIDName"] == null ? "" : reader["ApprovedStaffIDName"].ToString();
                }
            }


            p.VATRate = reader["VATRate"] as double?;

            try
            {
                p.NormalPrice = Convert.ToDecimal(reader["NormalPrice"]);
            }
            catch (Exception)
            {

            }

            p.PriceForHIPatient = reader["PriceForHIPatient"] as decimal?;
            p.PriceDifference = reader["PriceDifference"] as decimal?;
            p.HIAllowedPrice = reader["HIAllowedPrice"] as decimal?;
            p.EffectiveDate = reader["EffectiveDate"] as DateTime?;
            p.IsActive = Convert.ToBoolean(reader["IsActive"]);
            if (reader.HasColumn("RNormalPrice"))
            {
                p.ObjMedServiceID.NormalPrice = (Decimal)reader["RNormalPrice"];
            }
            if (reader.HasColumn("Note"))
            {
                p.Note = reader["Note"] == null ? "" : reader["Note"].ToString();
            }

            p.ObjMedServiceID.Description = p.ObjMedServiceID.MedServiceName
                                + " - Normal price: " + p.ObjMedServiceID.NormalPrice.ToString();


            //Ext Prop cho Lưới Tạo Bảng Giá Hàng Loạt
            p.NormalPrice_Old = p.NormalPrice;
            p.PriceForHIPatient_Old = p.PriceForHIPatient;
            p.HIAllowedPrice_Old = p.HIAllowedPrice;
            p.VATRate_Old = p.VATRate;
            //Ext Prop cho Lưới Tạo Bảng Giá Hàng Loạt

            return p;
        }

        protected virtual List<MedServiceItemPrice> GetMedServiceItemPriceCollectionFromReader(IDataReader reader)
        {
            List<MedServiceItemPrice> lst = new List<MedServiceItemPrice>();
            while (reader.Read())
            {
                lst.Add(GetMedServiceItemPriceFromReader(reader));
            }
            return lst;
        }


        #endregion

        #region RefMedicalServiceTypes
        protected virtual RefMedicalServiceType GetRefMedicalServiceTypeFromReader(IDataReader reader)
        {
            var p = new RefMedicalServiceType
            {
                MedicalServiceTypeID = Convert.ToInt64(reader["MedicalServiceTypeID"]),
                ObjMedicalServiceGroupID = new RefMedicalServiceGroups()
            };


            if (reader.HasColumn("MedicalServiceGroupID") && reader["MedicalServiceGroupID"] != DBNull.Value)
            {
                p.MedicalServiceGroupID = (long)reader["MedicalServiceGroupID"];
                p.ObjMedicalServiceGroupID = GetRefMedicalServiceGroupsFromReader(reader);
            }

            if (reader.HasColumn("MedicalServiceTypeCode") && reader["MedicalServiceTypeCode"] != DBNull.Value)
            {
                p.MedicalServiceTypeCode = reader["MedicalServiceTypeCode"] != DBNull.Value ? reader["MedicalServiceTypeCode"].ToString() : "";
            }
            if (reader.HasColumn("MedicalServiceTypeName") && reader["MedicalServiceTypeName"] != DBNull.Value)
            {
                p.MedicalServiceTypeName = reader["MedicalServiceTypeName"] != DBNull.Value ? reader["MedicalServiceTypeName"].ToString() : "";
            }
            if (reader.HasColumn("MedicalServiceTypeDescription") && reader["MedicalServiceTypeDescription"] != DBNull.Value)
            {
                p.MedicalServiceTypeDescription = reader["MedicalServiceTypeDescription"] != DBNull.Value ? reader["MedicalServiceTypeDescription"].ToString() : "";
            }

            if (reader.HasColumn("V_RefMedicalServiceInOutOthers") && reader["V_RefMedicalServiceInOutOthers"] != DBNull.Value)
            {
                p.V_RefMedicalServiceInOutOthers = Convert.ToInt64(reader["V_RefMedicalServiceInOutOthers"]);
                p.ObjV_RefMedicalServiceInOutOthers = new Lookup();
                p.ObjV_RefMedicalServiceInOutOthers = GetLookupFromReader(reader);
            }

            if (reader.HasColumn("V_RefMedicalServiceTypes") && reader["V_RefMedicalServiceTypes"] != DBNull.Value)
            {
                p.V_RefMedicalServiceTypes = Convert.ToInt64(reader["V_RefMedicalServiceTypes"]);
                p.ObjV_RefMedicalServiceTypes = new Lookup();
                p.ObjV_RefMedicalServiceTypes = GetLookupFromReader(reader);
            }

            p.IsActive = false;
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = reader["IsActive"] as bool?;
            }
            return p;
        }

        protected virtual List<RefMedicalServiceType> GetRefMedicalServiceTypeCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<RefMedicalServiceType>();
            while (reader.Read())
            {
                retVal.Add(GetRefMedicalServiceTypeFromReader(reader));
            }
            return retVal;
        }


        #endregion

        #region DeptRefMedServiceItems
        protected virtual DeptMedServiceItems GetDeptMedServiceItemsObjFromReader(IDataReader reader)
        {
            DeptMedServiceItems p = new DeptMedServiceItems();
            try//
            {
                if (reader.HasColumn("DeptMedServItemID"))
                {
                    p.DeptMedServItemID = (long)reader["DeptMedServItemID"];
                }

                if (reader.HasColumn("DeptID"))
                {
                    p.DeptID = (long)reader["DeptID"];
                }

                if (reader.HasColumn("MedServiceID"))
                {
                    p.MedServiceID = (long)reader["MedServiceID"];
                }
                p.ObjDeptID = new RefDepartments();
                try
                {

                }
                catch { }

                p.ObjRefMedicalServiceItem = new RefMedicalServiceItem();
                try
                {
                    if (reader.HasColumn("MedServiceID"))
                    {
                        p.ObjRefMedicalServiceItem.MedServiceID = (long)reader["MedServiceID"];
                    }

                    if (reader.HasColumn("MedicalServiceTypeID"))
                    {
                        p.ObjRefMedicalServiceItem.MedicalServiceTypeID = (long?)reader["MedicalServiceTypeID"];
                    }

                    if (reader.HasColumn("MedServiceName"))
                    {
                        p.ObjRefMedicalServiceItem.MedServiceName = reader["MedServiceName"].ToString();
                    }

                    p.ObjRefMedicalServiceItem.MedicalServiceTypeID = Convert.ToInt64(reader["MedicalServiceTypeID"]);

                    p.ObjRefMedicalServiceItem = new RefMedicalServiceItem();

                    try
                    {
                        p.ObjRefMedicalServiceItem = GetMedicalServiceItemFromReader(reader);
                    }
                    catch
                    {

                    }

                    p.ObjRefMedicalServiceItem.MedicalServiceTypeID = Convert.ToInt64(reader["MedicalServiceTypeID"]);

                    p.ObjRefMedicalServiceItem.ObjMedicalServiceTypeID = new RefMedicalServiceType
                    {
                        MedicalServiceTypeID = Convert.ToInt64(reader["MedicalServiceTypeID"])
                    };

                    if (reader.HasColumn("MedicalServiceTypeName"))
                    {
                        p.ObjRefMedicalServiceItem.ObjMedicalServiceTypeID.MedicalServiceTypeName = reader["MedicalServiceTypeName"] == null ? "" : reader["MedicalServiceTypeName"].ToString();
                    }

                    p.ObjRefMedicalServiceItem.V_AppointmentType = 0;
                    //Cho phép hẹn bệnh hay không
                    if (reader.HasColumn("V_AppointmentType") && reader["V_AppointmentType"] != DBNull.Value)
                    {
                        p.ObjRefMedicalServiceItem.V_AppointmentType = (long)reader["V_AppointmentType"];
                    }

                    //if (reader.HasColumn("NormalPrice"))
                    //{
                    //    p.ObjRefMedicalServiceItem.NormalPrice = (Decimal)reader["NormalPrice"];
                    //}

                    //if (reader.HasColumn("PriceForHIPatient"))
                    //{
                    //    p.ObjRefMedicalServiceItem.PriceForHIPatient = (Decimal)reader["PriceForHIPatient"];
                    //}
                    //if (reader.HasColumn("HIAllowedPrice"))
                    //{
                    //    p.ObjRefMedicalServiceItem.HIAllowedPrice = (Decimal)reader["HIAllowedPrice"];
                    //}
                    //p.ObjRefMedicalServiceItem.Description = p.ObjRefMedicalServiceItem.MedServiceName
                    //            + " - Normal price: " + p.ObjRefMedicalServiceItem.NormalPrice.ToString();

                    //if (reader.HasColumn("EffectiveDate"))
                    //{
                    //    p.ObjRefMedicalServiceItem.ExpiryDate = (DateTime?)reader["EffectiveDate"];
                    //}
                    ////p.ObjRefMedicalServiceItem.PartnerShipID = (long?)reader["PartnerShipID"];

                    //if (reader.HasColumn("MedServiceCode"))
                    //{
                    //    p.ObjRefMedicalServiceItem.MedServiceCode = reader["MedServiceCode"].ToString();
                    //}

                    //p.ObjRefMedicalServiceItem.ObjV_RefMedServiceItemsUnit=new Lookup();
                    //if (reader.HasColumn("V_RefMedServiceItemsUnit"))
                    //{
                    //    p.ObjRefMedicalServiceItem.V_RefMedServiceItemsUnit = (long)reader["V_RefMedServiceItemsUnit"];
                    //    p.ObjRefMedicalServiceItem.ObjV_RefMedServiceItemsUnit.LookupID=(long)reader["V_RefMedServiceItemsUnit"];
                    //}

                    //if (reader.HasColumn("V_RefMedServiceItemsUnitName"))
                    //{
                    //    p.ObjRefMedicalServiceItem.ObjV_RefMedServiceItemsUnit.ObjectValue = reader["V_RefMedServiceItemsUnitName"].ToString();
                    //}

                    //if (reader.HasColumn("VATRate"))
                    //{
                    //    p.ObjRefMedicalServiceItem.VATRate = (Double?)reader["VATRate"];
                    //}

                    //if (reader.HasColumn("IsExpiredDate"))
                    //{
                    //    p.ObjRefMedicalServiceItem.IsExpiredDate = (bool?)reader["IsExpiredDate"];
                    //}

                    //if (reader.HasColumn("ByRequest"))
                    //{
                    //    p.ObjRefMedicalServiceItem.ByRequest = (bool?)reader["ByRequest"];
                    //}

                    //if (reader.HasColumn("ServiceMainTime"))
                    //{
                    //    p.ObjRefMedicalServiceItem.ServiceMainTime = (byte?)reader["ServiceMainTime"];
                    //}
                }
                catch { }
            }
            catch
            { return null; }
            return p;
        }
        protected virtual List<DeptMedServiceItems> GetDeptMedServiceItemsCollectionFromReader(IDataReader reader)
        {
            List<DeptMedServiceItems> lst = new List<DeptMedServiceItems>();
            while (reader.Read())
            {
                lst.Add(GetDeptMedServiceItemsObjFromReader(reader));
            }
            return lst;
        }
        #endregion

        #region RefDisposableMedicalResources
        protected virtual RefDisposableMedicalResource GetRefDisposableMedicalResourceFromReader(IDataReader reader)
        {
            var p = new RefDisposableMedicalResource
            {
                DMedRscrID = Convert.ToInt64(reader["DMedRscrID"]),
                DMedRscrTypeID = Convert.ToInt64(reader["DMedRscrTypeID"]),
                DMedRscrName = reader["DMedRscrName"] == null ? "" : reader["DMedRscrName"].ToString(),
                DMedRscrNameBrand =
                                reader["DMedRscrNameBrand"] == null ? "" : reader["DMedRscrNameBrand"].ToString(),
                DMedRscrFunctions =
                                reader["DMedRscrFunctions"] == null ? "" : reader["DMedRscrFunctions"].ToString(),
                DMedRscrTechInfo =
                                reader["DMedRscrTechInfo"] == null ? "" : reader["DMedRscrTechInfo"].ToString(),
                DMedRscrMaterial =
                                reader["DMedRscrMaterial"] == null ? "" : reader["DMedRscrMaterial"].ToString(),
                DMedRscrContainerUnit =
                                reader["DMedRscrContainerUnit"] == null
                                    ? ""
                                    : reader["DMedRscrContainerUnit"].ToString(),
                DMedRscr_PiecesUnit = Convert.ToInt16(reader["DMedRscr_PiecesUnit"]),
                Packaging = reader["Packaging"] == null ? "" : reader["Packaging"].ToString(),
                ProcessPeriod = reader["ProcessPeriod"] as float?,
                DefectPercentage = reader["DefectPercentage"] as double?
            };

            return p;
        }

        protected virtual List<RefDisposableMedicalResource> GetRefDisposableMedicalResourceCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<RefDisposableMedicalResource>();
            while (reader.Read())
            {
                retVal.Add(GetRefDisposableMedicalResourceFromReader(reader));
            }
            return retVal;
        }
        #endregion

        #region DisposableMedicalResourceTypes
        protected virtual DisposableMedicalResourceType GetDisposableMedicalResourceTypesFromReader(IDataReader reader)
        {
            var p = new DisposableMedicalResourceType
            {
                DMedRscrTypeID = Convert.ToInt64(reader["DMedRscrTypeID"]),
                ParDMedRscrTypeID = reader["ParDMedRscrTypeID"] as Int64?,
                DMedRscrTypeName = reader["DMedRscrTypeName"] == null ? "" : reader["DMedRscrTypeName"].ToString(),
                DMedRscrTypeDescription =
                        reader["DMedRscrTypeDescription"] == null ? "" : reader["DMedRscrTypeDescription"].ToString()
            };

            return p;
        }

        protected virtual List<DisposableMedicalResourceType> GetDisposableMedicalResourceTypesCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<DisposableMedicalResourceType>();
            while (reader.Read())
            {
                retVal.Add(GetDisposableMedicalResourceTypesFromReader(reader));
            }
            return retVal;
        }
        #endregion

        #region RoomType
        protected virtual RoomType GetRoomTypeFromReader(IDataReader reader)
        {
            var p = new RoomType();
            if (reader.HasColumn("RmTypeID"))
            {
                p.RmTypeID = Convert.ToInt64(reader["RmTypeID"]);
            }
            if (reader.HasColumn("RmTypeName"))
            {
                p.RmTypeName = reader["RmTypeName"] == null ? "" : reader["RmTypeName"].ToString();
            }
            if (reader.HasColumn("RmTypeDescription"))
            {
                p.RmTypeDescription = reader["RmTypeDescription"] == null ? "" : reader["RmTypeDescription"].ToString();
            }

            p.ObjV_RoomFunction = new Lookup();

            if (reader.HasColumn("V_RoomFunction"))
            {
                p.V_RoomFunction = Convert.ToInt64(reader["V_RoomFunction"]);

                p.ObjV_RoomFunction.LookupID = Convert.ToInt64(reader["V_RoomFunction"]);
                if (reader.HasColumn("ObjectValue"))
                {
                    p.ObjV_RoomFunction.ObjectValue = reader["ObjectValue"] == null ? "" : reader["ObjectValue"].ToString();
                }
            }
            return p;
        }

        protected virtual List<RoomType> GetRoomTypeCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<RoomType>();
            while (reader.Read())
            {
                retVal.Add(GetRoomTypeFromReader(reader));
            }
            return retVal;
        }
        #endregion

        #region ICD
        protected virtual DiseaseChapters GetDiseaseChapterFromReader(IDataReader reader)
        {
            var p = new DiseaseChapters();
            if (reader.HasColumn("DiseaseChapterID"))
            {
                p.DiseaseChapterID = Convert.ToInt32(reader["DiseaseChapterID"]);
            }
            if (reader.HasColumn("DiseaseChapterNameVN"))
            {
                p.DiseaseChapterNameVN = reader["DiseaseChapterNameVN"] == null ? "" : reader["DiseaseChapterNameVN"].ToString();
            }
            if (reader.HasColumn("ICDXCode"))
            {
                p.ICDXCode = reader["ICDXCode"] == null ? "" : reader["ICDXCode"].ToString();
            }
            return p;
        }

        protected virtual List<DiseaseChapters> GetDiseaseChapterCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<DiseaseChapters>();
            while (reader.Read())
            {
                retVal.Add(GetDiseaseChapterFromReader(reader));
            }
            return retVal;
        }
        protected virtual Diseases GetDiseasesFromReader(IDataReader reader)
        {
            var p = new Diseases();
            if (reader.HasColumn("DiseaseID"))
            {
                p.DiseaseID = Convert.ToInt32(reader["DiseaseID"]);
            }
            if (reader.HasColumn("DiseaseNameVN"))
            {
                p.DiseaseNameVN = reader["DiseaseNameVN"] == null ? "" : reader["DiseaseNameVN"].ToString();
            }
            if (reader.HasColumn("ICDXCode"))
            {
                p.ICDXCode = reader["ICDXCode"] == null ? "" : reader["ICDXCode"].ToString();
            }
            if (reader.HasColumn("DiseaseChapterID"))
            {
                p.DiseaseChapterID = Convert.ToInt32(reader["DiseaseChapterID"]);
            }
            return p;
        }

        protected virtual List<Diseases> GetDiseasesCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<Diseases>();
            while (reader.Read())
            {
                retVal.Add(GetDiseasesFromReader(reader));
            }
            return retVal;
        }
        protected virtual ICD GetICDFromReader(IDataReader reader)
        {
            var p = new ICD();
            if (reader.HasColumn("IDCode"))
            {
                p.IDCode = Convert.ToInt64(reader["IDCode"]);
            }
            if (reader.HasColumn("ICD10Code"))
            {
                p.ICD10Code = reader["ICD10Code"] == null ? "" : reader["ICD10Code"].ToString();
            }
            if (reader.HasColumn("DiseaseNameVN"))
            {
                p.DiseaseNameVN = reader["DiseaseNameVN"] == null ? "" : reader["DiseaseNameVN"].ToString();
            }
            if (reader.HasColumn("DiseaseDescription"))
            {
                p.DiseaseDescription = reader["DiseaseDescription"] == null ? "" : reader["DiseaseDescription"].ToString();
            }
            if (reader.HasColumn("IsActive"))
            {
                p.IsActive = Convert.ToBoolean(reader["IsActive"]);
            }
            if (reader.HasColumn("Gender"))
            {
                p.Gender = Gender.GetGender(reader["Gender"].ToString());
            }
            if (reader.HasColumn("AgeFrom") && reader["AgeFrom"] != DBNull.Value)
            {
                p.AgeFrom = Convert.ToInt64(reader["AgeFrom"]);
            }
            if (reader.HasColumn("AgeTo") && reader["AgeTo"] != DBNull.Value)
            {
                p.AgeTo = Convert.ToInt64(reader["AgeTo"]);
            }
            if (reader.HasColumn("NotBeMain") && reader["NotBeMain"] != DBNull.Value)
            {
                p.NotBeMain = Convert.ToBoolean(reader["NotBeMain"]);
            }
            //▼====: #144
            if (reader.HasColumn("IsNewInYear") && reader["IsNewInYear"] != DBNull.Value)
            {
                p.IsNewInYear = Convert.ToBoolean(reader["IsNewInYear"]);
            }
            //▲====: #144 
            //▼====: #167
            if (reader.HasColumn("IsLongTermIllness") && reader["IsLongTermIllness"] != DBNull.Value)
            {
                p.IsLongTermIllness = Convert.ToBoolean(reader["IsLongTermIllness"]);
            }
            //▲====: #167
            //▼====: #170
            if (reader.HasColumn("ICD10CodeFromYHCT") && reader["ICD10CodeFromYHCT"] != DBNull.Value)
            {
                p.IsICD10CodeYHCT = !string.IsNullOrWhiteSpace(Convert.ToString(reader["ICD10CodeFromYHCT"]));
                p.ICD10CodeFromYHCT = Convert.ToString(reader["ICD10CodeFromYHCT"]);
            }
            //▲====: #170
            return p;
        }

        protected virtual List<ICD> GetICDCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<ICD>();
            while (reader.Read())
            {
                retVal.Add(GetICDFromReader(reader));
            }
            return retVal;
        }
        #endregion

        #region InsuranceBenefitCategories
        //protected virtual List<InsuranceBenefitCategories_Data> GetInsuranceBenefitCategories_DataCollectionFromReader(IDataReader reader)
        //{
        //    var p = new List<InsuranceBenefitCategories_Data>();
        //    while (reader.Read())
        //    {
        //        p.Add(GetInsuranceBenefitCategories_DataFromReader(reader));
        //    }
        //    return p;
        //}
        //protected virtual InsuranceBenefitCategories_Data GetInsuranceBenefitCategories_DataFromReader(IDataReader reader)
        //{
        //    var p = new InsuranceBenefitCategories_Data();
        //    try
        //    {
        //        if (reader.HasColumn("HIPCode") && reader["HIPCode"] != DBNull.Value)
        //        {
        //            p.HIPCode = reader["HIPCode"].ToString();
        //        }
        //        if (reader.HasColumn("BenefitCode") && reader["BenefitCode"] != DBNull.Value)
        //        {
        //            p.BenefitCode = reader["BenefitCode"].ToString();
        //        }
        //        if (reader.HasColumn("RebatePercentage") && reader["RebatePercentage"] != DBNull.Value)
        //        {
        //            p.RebatePercentage = float.Parse(reader["RebatePercentage"].ToString());
        //        }
        //        if (reader.HasColumn("IBeID") && reader["IBeID"] != DBNull.Value)
        //        {
        //            p.IBeID = int.Parse(reader["IBeID"].ToString());
        //        }
        //    }
        //    catch (Exception e)
        //    {
        //        AxLogger.Instance.LogError(e);
        //    }
        //    return p;
        //}
        #endregion

        #region DeptLocation
        protected virtual DeptLocation GetServiceIdAndDeptLocFromReader(IDataReader reader, out Int64 nMedServiceID)
        {
            nMedServiceID = 0;
            var p = GetDeptLocationFromReader(reader);
            if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
            {
                nMedServiceID = (long)reader["MedServiceID"];
            }
            return p;
        }

        protected virtual DeptLocation GetDeptLocationFromReader(IDataReader reader)
        {
            if (reader.HasColumn("DeptLocationID") == false && reader.HasColumn("DeptLocation.DeptLocationID") == false)
            {
                return null;
            }
            if (reader.HasColumn("DeptLocation.DeptLocationID") && (reader["DeptLocation.DeptLocationID"] == DBNull.Value || ((long)reader["DeptLocation.DeptLocationID"]) <= 0))
            {
                return null;
            }
            if (reader.HasColumn("DeptLocationID") && (reader["DeptLocationID"] == DBNull.Value || ((long)reader["DeptLocationID"]) <= 0))
            {
                return null;
            }

            var p = new DeptLocation();

            if (reader.HasColumn("DeptLocation.DeptLocationID"))
            {
                p.DeptLocationID = (long)reader["DeptLocation.DeptLocationID"];
            }
            else if (reader.HasColumn("DeptLocationID"))
            {
                p.DeptLocationID = (long)reader["DeptLocationID"];
            }

            if (reader.HasColumn("LID") && reader["LID"] != DBNull.Value)
            {
                p.LID = (long)reader["LID"];
            }

            if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
            {
                p.DeptID = (long)reader["DeptID"];
            }

            p.RefDepartment = GetDepartmentFromReader(reader);

            p.Location = GetLocationFromReader(reader);

            p.ObjConsultationTimeSegments = new ConsultationTimeSegments();

            p.ObjConsultationTimeSegments = GetConsultationTimeSegmentsFromReader(reader);

            if (reader.HasColumn("CurrentSeqNumber") && reader["CurrentSeqNumber"] != DBNull.Value)
            {
                p.CurrentSeqNumber = Convert.ToInt16(reader["CurrentSeqNumber"]);
            }

            if (reader.HasColumn("NumberOfSeq") && reader["NumberOfSeq"] != DBNull.Value)
            {
                p.NumberOfSeq = Convert.ToInt16(reader["NumberOfSeq"]);
            }
            return p;
        }


        //protected virtual DeptLocation GetDeptLocationFromReader(IDataReader reader)
        //{
        //    var p = new DeptLocation();

        //    if (reader.HasColumn("DeptLocation.DeptLocationID") && reader["DeptLocation.DeptLocationID"] != DBNull.Value)//Cho may cai vu join.
        //    {
        //        p.DeptLocationID = (long)reader["DeptLocation.DeptLocationID"];
        //    }
        //    else
        //    {
        //        if (reader.HasColumn("DeptLocationID") && reader["DeptLocationID"] != DBNull.Value)
        //        {
        //            p.DeptLocationID = (long)reader["DeptLocationID"];
        //        }
        //    }
        //    if (p.DeptLocationID <= 0)
        //    {
        //        return null;
        //    }
        //    if (reader.HasColumn("LID") && reader["LID"] != DBNull.Value)
        //    {
        //        p.LID = (long)reader["LID"];
        //    }
        //    if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
        //    {
        //        p.DeptID = (long)reader["DeptID"];
        //    }

        //    p.RefDepartment = new RefDepartment();
        //    try
        //    {
        //        p.RefDepartment = GetDepartmentFromReader(reader);
        //    }
        //    catch
        //    {

        //    }

        //    p.Location = new Location();
        //    try
        //    {
        //        p.Location = GetLocationFromReader(reader);
        //    }
        //    catch
        //    {

        //    }

        //    p.Location.RoomType = new RoomType();
        //    try
        //    {
        //        p.Location.RoomType = GetRoomTypeFromReader(reader);
        //    }
        //    catch
        //    {

        //    }

        //    p.ObjConsultationTimeSegments = new ConsultationTimeSegments();
        //    try
        //    {
        //        p.ObjConsultationTimeSegments = GetConsultationTimeSegmentsFromReader(reader);
        //    }
        //    catch
        //    {
        //    }

        //    if (reader.HasColumn("CurrentSeqNumber") && reader["CurrentSeqNumber"] != DBNull.Value)
        //    {
        //        p.CurrentSeqNumber = Convert.ToInt16(reader["CurrentSeqNumber"]);
        //    }

        //    if (reader.HasColumn("NumberOfSeq") && reader["NumberOfSeq"] != DBNull.Value)
        //    {
        //        p.NumberOfSeq = Convert.ToInt16(reader["NumberOfSeq"]);
        //    }

        //    return p;
        //}

        protected virtual List<DeptLocation> GetDeptLocationCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<DeptLocation>();
            while (reader.Read())
            {
                retVal.Add(GetDeptLocationFromReader(reader));
            }
            return retVal;
        }

        protected Dictionary<long, List<DeptLocation>> GetMedServIdAndDeptLocMapFromReader(IDataReader reader)
        {
            Dictionary<long, List<DeptLocation>> mapServIdDeptLoc = new Dictionary<long, List<DeptLocation>>();
            List<DeptLocation> listDeptLocIDs = null;
            long nCurServiceID = 0;
            long nServiceID = 0;

            while (reader.Read())
            {
                DeptLocation deptLoc = GetServiceIdAndDeptLocFromReader(reader, out nServiceID);
                if (nCurServiceID == 0)
                {
                    listDeptLocIDs = new List<DeptLocation>();
                    nCurServiceID = nServiceID;
                }
                else
                {
                    if (nServiceID != nCurServiceID)
                    {
                        mapServIdDeptLoc.Add(nCurServiceID, listDeptLocIDs);
                        listDeptLocIDs = new List<DeptLocation>();
                        nCurServiceID = nServiceID;
                    }
                }
                listDeptLocIDs.Add(deptLoc);
            }

            mapServIdDeptLoc.Add(nCurServiceID, listDeptLocIDs);

            return mapServIdDeptLoc;
        }

        #endregion

        #region RefGenMedProductSellingPrices
        protected virtual RefGenMedProductSellingPrices GetRefGenMedProductSellingPricesFromReader(IDataReader reader)
        {
            var p = new RefGenMedProductSellingPrices();

            if (reader.HasColumn("GenMedSellPriceID") && reader["GenMedSellPriceID"] != DBNull.Value)
            {
                Int64 GenMedSellPriceID = 0;
                Int64.TryParse(reader["GenMedSellPriceID"].ToString(), out GenMedSellPriceID);
                p.GenMedSellPriceID = GenMedSellPriceID;
            }

            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                p.GenMedProductID = Convert.ToInt64(reader["GenMedProductID"]);
            }

            if (reader.HasColumn("RecDateCreated") && reader["RecDateCreated"] != DBNull.Value)
            {
                try
                {
                    p.RecDateCreated = Convert.ToDateTime(reader["RecDateCreated"]);
                }
                catch
                {
                }
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                try
                {
                    p.StaffID = Convert.ToInt64(reader["StaffID"]);
                }
                catch
                { }
            }

            if (reader.HasColumn("ApprovedStaffID") && reader["ApprovedStaffID"] != DBNull.Value)
            {
                try
                {
                    p.ApprovedStaffID = Convert.ToInt64(reader["ApprovedStaffID"]);
                }
                catch
                { }
            }

            if (reader.HasColumn("VATRate") && reader["VATRate"] != DBNull.Value)
            {
                try
                {
                    p.VATRate = Convert.ToDouble(reader["VATRate"]);
                }
                catch
                { }
            }

            if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
            {
                try
                {
                    p.NormalPrice = Convert.ToDecimal(reader["NormalPrice"]);
                }
                catch { }
            }

            if (reader.HasColumn("PriceForHIPatient") && reader["PriceForHIPatient"] != DBNull.Value)
            {
                try
                {
                    p.PriceForHIPatient = Convert.ToDecimal(reader["PriceForHIPatient"]);
                }
                catch
                { }
            }

            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                try
                {
                    p.HIAllowedPrice = Convert.ToDecimal(reader["HIAllowedPrice"]);
                }
                catch { }
            }

            if (reader.HasColumn("EffectiveDate") && reader["EffectiveDate"] != DBNull.Value)
            {
                try
                {
                    p.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"]);
                }
                catch { }
            }

            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                try
                {
                    p.IsActive = Convert.ToBoolean(reader["IsActive"]);
                }
                catch { }
            }

            if (reader.HasColumn("Remark") && reader["Remark"] != DBNull.Value)
            {
                p.Remark = reader["Remark"] == null ? "" : reader["Remark"].ToString();
            }

            try
            {
                p.ObjGenMedProductID = GetRefGenMedProductDetailsFromReader(reader);
            }
            catch
            {
                p.ObjGenMedProductID = null;
            }


            if (reader.HasColumn("StaffIDName") && reader["StaffIDName"] != DBNull.Value)
            {
                p.ObjStaffID = new Staff { FullName = reader["StaffIDName"] == null ? "" : reader["StaffIDName"].ToString() };
            }

            if (reader.HasColumn("ApprovedStaffIDName") && reader["ApprovedStaffIDName"] != DBNull.Value)
            {
                p.ObjApprovedStaffID = new Staff { FullName = reader["ApprovedStaffIDName"] == null ? "" : reader["ApprovedStaffIDName"].ToString() };
            }

            if (reader.HasColumn("lbTitleInfo") && reader["lbTitleInfo"] != DBNull.Value)
            {
                p.lbTitleInfo = reader["lbTitleInfo"] == null ? "" : reader["lbTitleInfo"].ToString();
            }

            if (reader.HasColumn("lbDrugClassName") && reader["lbDrugClassName"] != DBNull.Value)
            {
                p.lbDrugClassName = reader["lbDrugClassName"] == null ? "" : reader["lbDrugClassName"].ToString();
            }

            if (reader.HasColumn("CountryName") && reader["CountryName"] != DBNull.Value)
            {
                p.CountryName = reader["CountryName"] == null ? "" : reader["CountryName"].ToString();
            }

            if (reader.HasColumn("UnitIDName") && reader["UnitIDName"] != DBNull.Value)
            {
                p.UnitIDName = reader["UnitIDName"] == null ? "" : reader["UnitIDName"].ToString();
            }

            if (reader.HasColumn("UnitUseIDName") && reader["UnitUseIDName"] != DBNull.Value)
            {
                p.UnitUseIDName = reader["UnitUseIDName"] == null ? "" : reader["UnitUseIDName"].ToString();
            }

            if (reader.HasColumn("DrugClassIDName") && reader["DrugClassIDName"] != DBNull.Value)
            {
                p.DrugClassIDName = reader["DrugClassIDName"] == null ? "" : reader["DrugClassIDName"].ToString();
            }


            return p;
        }

        protected virtual List<RefGenMedProductSellingPrices> GetRefGenMedProductSellingPricesCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RefGenMedProductSellingPrices>();
            while (reader.Read())
            {
                lst.Add(GetRefGenMedProductSellingPricesFromReader(reader));
            }
            return lst;
        }
        #endregion

        #region SupplierGenericDrugPrice
        protected virtual SupplierGenericDrugPrice GetSupplierGenericDrugPriceFromReader(IDataReader reader)
        {
            var p = new SupplierGenericDrugPrice();

            if (reader.HasColumn("PKID") && reader["PKID"] != DBNull.Value)
            {
                Int64 PKID = 0;
                Int64.TryParse(reader["PKID"].ToString(), out PKID);
                p.PKID = PKID;
            }

            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.SupplierID = Convert.ToInt64(reader["SupplierID"]);
            }

            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                try
                {
                    p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
                }
                catch
                {
                }
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                try
                {
                    p.StaffID = Convert.ToInt64(reader["StaffID"]);
                }
                catch
                { }
            }

            if (reader.HasColumn("ApprovedStaffID") && reader["ApprovedStaffID"] != DBNull.Value)
            {
                try
                {
                    p.ApprovedStaffID = Convert.ToInt64(reader["ApprovedStaffID"]);
                }
                catch
                { }
            }

            if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
            {
                try
                {
                    p.DrugID = Convert.ToInt64(reader["DrugID"]);
                    p.ObjRefGenericDrugDetail = new RefGenericDrugDetail();

                    if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
                    {
                        p.ObjRefGenericDrugDetail.BrandName = reader["BrandName"] == null ? "" : reader["BrandName"].ToString();
                    }

                    if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
                    {
                        p.ObjRefGenericDrugDetail.GenericName = reader["GenericName"] == null ? "" : reader["GenericName"].ToString();
                    }
                    if (reader.HasColumn("DrugCode"))
                    {
                        p.ObjRefGenericDrugDetail.DrugCode = reader["DrugCode"].ToString();
                    }
                    if (reader.HasColumn("HIDrugCode"))
                    {
                        p.ObjRefGenericDrugDetail.HIDrugCode = reader["HIDrugCode"].ToString();
                    }
                    if (reader.HasColumn("UnitPackaging"))
                    {
                        p.ObjRefGenericDrugDetail.UnitPackaging = reader["UnitPackaging"] as int?;
                    }
                }
                catch
                { }
            }

            if (reader.HasColumn("UnitPrice") && reader["UnitPrice"] != DBNull.Value)
            {
                try
                {
                    p.UnitPrice = Convert.ToDecimal(reader["UnitPrice"]);
                }
                catch { }
            }

            if (reader.HasColumn("PackagePrice") && reader["PackagePrice"] != DBNull.Value)
            {
                try
                {
                    p.PackagePrice = Convert.ToDecimal(reader["PackagePrice"]);
                }
                catch
                { }
            }

            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                try
                {
                    p.VAT = reader["VAT"] as double?;
                }
                catch { }
            }

            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                try
                {
                    p.IsActive = Convert.ToBoolean(reader["IsActive"]);
                }
                catch { }
            }

            if (reader.HasColumn("EffectiveDate") && reader["EffectiveDate"] != DBNull.Value)
            {
                try
                {
                    p.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"]);
                }
                catch { }
            }

            if (reader.HasColumn("StaffIDName"))
            {
                p.ObjStaffID = new Staff { FullName = reader["StaffIDName"] != DBNull.Value ? reader["StaffIDName"].ToString() : "" };
            }

            return p;
        }

        protected virtual List<SupplierGenericDrugPrice> GetSupplierGenericDrugPriceCollectionFromReader(IDataReader reader)
        {
            var lst = new List<SupplierGenericDrugPrice>();
            while (reader.Read())
            {
                lst.Add(GetSupplierGenericDrugPriceFromReader(reader));
            }
            return lst;
        }
        #endregion

        #region SupplierPharmacyPaymentReqs
        protected virtual SupplierPharmacyPaymentReqs GetSupplierPharmacyPaymentReqsFromReader(IDataReader reader)
        {
            var p = new SupplierPharmacyPaymentReqs();
            if (reader.HasColumn("PharmacySupplierPaymentReqID") && reader["PharmacySupplierPaymentReqID"] != DBNull.Value)
            {
                p.PharmacySupplierPaymentReqID = Convert.ToInt64(reader["PharmacySupplierPaymentReqID"]);
            }

            if (reader.HasColumn("SequenceNum"))
            {
                p.SequenceNum = reader["SequenceNum"].ToString();
            }

            p.SelectedSupplier = new Supplier();
            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.SupplierID = Convert.ToInt64(reader["SupplierID"]);
                p.SelectedSupplier.SupplierID = Convert.ToInt64(reader["SupplierID"]);
            }
            if (reader.HasColumn("SupplierName"))
            {
                p.SelectedSupplier.SupplierName = reader["SupplierName"].ToString();
            }
            if (reader.HasColumn("TelephoneNumber"))
            {
                p.SelectedSupplier.TelephoneNumber = reader["TelephoneNumber"].ToString();
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = Convert.ToInt64(reader["StaffID"]);
            }

            if (reader.HasColumn("RequestedDate") && reader["RequestedDate"] != DBNull.Value)
            {
                p.RequestedDate = Convert.ToDateTime(reader["RequestedDate"]);
            }

            if (reader.HasColumn("ApprovedDate") && reader["ApprovedDate"] != DBNull.Value)
            {
                p.ApprovedDate = Convert.ToDateTime(reader["ApprovedDate"]);
            }

            if (reader.HasColumn("ApprovedStaffID"))
            {
                p.ApprovedStaffID = reader["ApprovedStaffID"] as Int64?;
            }

            if (reader.HasColumn("SupplierInvDateFrom") && reader["SupplierInvDateFrom"] != DBNull.Value)
            {
                p.SupplierInvDateFrom = Convert.ToDateTime(reader["SupplierInvDateFrom"]);
            }

            if (reader.HasColumn("SupplierInvDateTo") && reader["SupplierInvDateTo"] != DBNull.Value)
            {
                p.SupplierInvDateTo = Convert.ToDateTime(reader["SupplierInvDateTo"]);
            }

            if (reader.HasColumn("V_PaymentMode") && reader["V_PaymentMode"] != DBNull.Value)
            {
                p.V_PaymentMode = Convert.ToInt64(reader["V_PaymentMode"]);
            }

            if (reader.HasColumn("SupplierAccountNum"))
            {
                p.SupplierAccountNum = reader["SupplierAccountNum"].ToString();
            }

            if (reader.HasColumn("SupplierBank"))
            {
                p.SupplierBank = reader["SupplierBank"].ToString();
            }

            if (reader.HasColumn("V_PaymentReqStatus") && reader["V_PaymentReqStatus"] != DBNull.Value)
            {
                p.V_PaymentReqStatus = Convert.ToInt64(reader["V_PaymentReqStatus"]);
            }
            if (reader.HasColumn("V_PaymentReqStatusName"))
            {
                p.V_PaymentReqStatusName = reader["V_PaymentReqStatusName"].ToString();
            }
            if (reader.HasColumn("StaffName"))
            {
                p.StaffName = reader["StaffName"].ToString();
            }
            return p;
        }

        protected virtual List<SupplierPharmacyPaymentReqs> GetSupplierPharmacyPaymentReqsCollectionFromReader(IDataReader reader)
        {
            var lst = new List<SupplierPharmacyPaymentReqs>();
            while (reader.Read())
            {
                lst.Add(GetSupplierPharmacyPaymentReqsFromReader(reader));
            }
            return lst;
        }
        #endregion

        #region SupplierDrugDeptPaymentReqs
        protected virtual SupplierDrugDeptPaymentReqs GetSupplierDrugDeptPaymentReqsFromReader(IDataReader reader)
        {
            var p = new SupplierDrugDeptPaymentReqs();
            if (reader.HasColumn("DrugDeptSupplierPaymentReqID") && reader["DrugDeptSupplierPaymentReqID"] != DBNull.Value)
            {
                p.DrugDeptSupplierPaymentReqID = Convert.ToInt64(reader["DrugDeptSupplierPaymentReqID"]);
            }

            if (reader.HasColumn("SequenceNum"))
            {
                p.SequenceNum = reader["SequenceNum"].ToString();
            }

            p.SelectedSupplier = new DrugDeptSupplier();
            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.SupplierID = Convert.ToInt64(reader["SupplierID"]);
                p.SelectedSupplier.SupplierID = Convert.ToInt64(reader["SupplierID"]);
            }
            if (reader.HasColumn("SupplierName"))
            {
                p.SelectedSupplier.SupplierName = reader["SupplierName"].ToString();
            }
            if (reader.HasColumn("TelephoneNumber"))
            {
                p.SelectedSupplier.TelephoneNumber = reader["TelephoneNumber"].ToString();
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = Convert.ToInt64(reader["StaffID"]);
            }

            if (reader.HasColumn("RequestedDate") && reader["RequestedDate"] != DBNull.Value)
            {
                p.RequestedDate = Convert.ToDateTime(reader["RequestedDate"]);
            }

            if (reader.HasColumn("ApprovedDate") && reader["ApprovedDate"] != DBNull.Value)
            {
                p.ApprovedDate = Convert.ToDateTime(reader["ApprovedDate"]);
            }

            if (reader.HasColumn("ApprovedStaffID"))
            {
                p.ApprovedStaffID = reader["ApprovedStaffID"] as Int64?;
            }

            if (reader.HasColumn("SupplierInvDateFrom") && reader["SupplierInvDateFrom"] != DBNull.Value)
            {
                p.SupplierInvDateFrom = Convert.ToDateTime(reader["SupplierInvDateFrom"]);
            }

            if (reader.HasColumn("SupplierInvDateTo") && reader["SupplierInvDateTo"] != DBNull.Value)
            {
                p.SupplierInvDateTo = Convert.ToDateTime(reader["SupplierInvDateTo"]);
            }

            if (reader.HasColumn("V_PaymentMode") && reader["V_PaymentMode"] != DBNull.Value)
            {
                p.V_PaymentMode = Convert.ToInt64(reader["V_PaymentMode"]);
            }

            if (reader.HasColumn("SupplierAccountNum"))
            {
                p.SupplierAccountNum = reader["SupplierAccountNum"].ToString();
            }

            if (reader.HasColumn("SupplierBank"))
            {
                p.SupplierBank = reader["SupplierBank"].ToString();
            }

            if (reader.HasColumn("V_PaymentReqStatus") && reader["V_PaymentReqStatus"] != DBNull.Value)
            {
                p.V_PaymentReqStatus = Convert.ToInt64(reader["V_PaymentReqStatus"]);
            }
            if (reader.HasColumn("V_PaymentReqStatusName"))
            {
                p.V_PaymentReqStatusName = reader["V_PaymentReqStatusName"].ToString();
            }
            if (reader.HasColumn("StaffName"))
            {
                p.StaffName = reader["StaffName"].ToString();
            }
            return p;
        }

        protected virtual List<SupplierDrugDeptPaymentReqs> GetSupplierDrugDeptPaymentReqsCollectionFromReader(IDataReader reader)
        {
            var lst = new List<SupplierDrugDeptPaymentReqs>();
            while (reader.Read())
            {
                lst.Add(GetSupplierDrugDeptPaymentReqsFromReader(reader));
            }
            return lst;
        }
        #endregion

        #region SupplierGenMedProductsPrice
        protected virtual SupplierGenMedProductsPrice GetSupplierGenMedProductsPriceFromReader(IDataReader reader)
        {
            var p = new SupplierGenMedProductsPrice();

            if (reader.HasColumn("PKID") && reader["PKID"] != DBNull.Value)
            {
                Int64 PKID = 0;
                Int64.TryParse(reader["PKID"].ToString(), out PKID);
                p.PKID = PKID;
            }

            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.SupplierID = Convert.ToInt64(reader["SupplierID"]);
            }

            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                try
                {
                    p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
                }
                catch
                {
                }
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                try
                {
                    p.StaffID = Convert.ToInt64(reader["StaffID"]);
                }
                catch
                { }
            }

            if (reader.HasColumn("ApprovedStaffID") && reader["ApprovedStaffID"] != DBNull.Value)
            {
                try
                {
                    p.ApprovedStaffID = Convert.ToInt64(reader["ApprovedStaffID"]);
                }
                catch
                { }
            }

            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                try
                {
                    p.GenMedProductID = Convert.ToInt64(reader["GenMedProductID"]);
                    p.ObjRefGenMedProductDetails = new RefGenMedProductDetails();

                    if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
                    {
                        p.ObjRefGenMedProductDetails.BrandName = reader["BrandName"] == null ? "" : reader["BrandName"].ToString();
                    }

                    if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
                    {
                        p.ObjRefGenMedProductDetails.GenericName = reader["GenericName"] == null ? "" : reader["GenericName"].ToString();
                    }
                    if (reader.HasColumn("Code"))
                    {
                        p.ObjRefGenMedProductDetails.Code = reader["Code"].ToString();
                    }
                    if (reader.HasColumn("HICode"))
                    {
                        p.ObjRefGenMedProductDetails.HICode = reader["HICode"].ToString();
                    }
                }
                catch
                { }
            }

            if (reader.HasColumn("UnitPrice") && reader["UnitPrice"] != DBNull.Value)
            {
                try
                {
                    p.UnitPrice = Convert.ToDecimal(reader["UnitPrice"]);
                }
                catch { }
            }

            if (reader.HasColumn("PackagePrice") && reader["PackagePrice"] != DBNull.Value)
            {
                try
                {
                    p.PackagePrice = Convert.ToDecimal(reader["PackagePrice"]);
                }
                catch
                { }
            }

            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                try
                {
                    p.VAT = reader["VAT"] as double?;
                }
                catch { }
            }

            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                try
                {
                    p.IsActive = Convert.ToBoolean(reader["IsActive"]);
                }
                catch { }
            }

            if (reader.HasColumn("EffectiveDate") && reader["EffectiveDate"] != DBNull.Value)
            {
                try
                {
                    p.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"]);
                }
                catch { }
            }

            if (reader.HasColumn("StaffIDName"))
            {
                p.ObjStaffID = new Staff();
                p.ObjStaffID.FullName = reader["StaffIDName"] != DBNull.Value ? reader["StaffIDName"].ToString() : "";

            }


            return p;
        }

        protected virtual List<SupplierGenMedProductsPrice> GetSupplierGenMedProductsPriceCollectionFromReader(IDataReader reader)
        {
            List<SupplierGenMedProductsPrice> lst = new List<SupplierGenMedProductsPrice>();
            while (reader.Read())
            {
                lst.Add(GetSupplierGenMedProductsPriceFromReader(reader));
            }
            return lst;
        }
        #endregion

        #region ApptService
        protected virtual ApptService GetApptServiceFromReader(IDataReader reader)
        {
            var p = new ApptService();

            if (reader.HasColumn("ApptServiceID") && reader["ApptServiceID"] != DBNull.Value)
            {
                p.ApptServiceID = Convert.ToInt64(reader["ApptServiceID"]);
            }


            if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
            {
                p.MedServiceID = Convert.ToInt64(reader["MedServiceID"]);
            }

            if (reader.HasColumn("V_AppointmentType") && reader["V_AppointmentType"] != DBNull.Value)
            {
                p.V_AppointmentType = Convert.ToInt64("V_AppointmentType");

                try
                {
                    p.ObjV_AppointmentType = GetLookupFromReader(reader);
                }
                catch
                {
                    p.ObjV_AppointmentType = null;
                }
            }
            return p;
        }

        protected virtual List<ApptService> GetApptServiceCollectionFromReader(IDataReader reader)
        {
            var lst = new List<ApptService>();
            while (reader.Read())
            {
                lst.Add(GetApptServiceFromReader(reader));
            }
            return lst;
        }
        #endregion

        #region MedServiceItemPriceList
        protected virtual MedServiceItemPriceList GetMedServiceItemPriceListFromReader(IDataReader reader)
        {
            var p = new MedServiceItemPriceList
            {
                MedServiceItemPriceListID = (long)reader["MedServiceItemPriceListID"],
                MedicalServiceTypeID = (long)reader["MedicalServiceTypeID"],
                RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]),
                PriceListTitle = reader["PriceListTitle"] != DBNull.Value ? reader["PriceListTitle"].ToString() : "",
                StaffID = (long)reader["StaffID"],
                ApprovedStaffID = reader["ApprovedStaffID"] as long?,
                EffectiveDate = (DateTime)reader["EffectiveDate"],
                IsActive = (bool)reader["IsActive"]
            };

            try
            {
                p.ObjRefDepartments = GetRefDepartmentsFromReader(reader);
            }
            catch
            {
                p.ObjRefDepartments = null;
            }

            try
            {
                p.ObjRefMedicalServiceType = GetRefMedicalServiceTypeFromReader(reader);
            }
            catch
            {
                p.ObjRefMedicalServiceType = null;
            }


            p.ObjStaffID = new Staff { StaffID = p.StaffID };

            if (reader.HasColumn("StaffIDName"))
            {
                p.ObjStaffID.FullName = reader["StaffIDName"] == null ? "" : reader["StaffIDName"].ToString();
            }


            p.ObjApprovedStaffID = new Staff();
            if (reader.HasColumn("ApprovedStaffIDName"))
            {
                p.ObjApprovedStaffID.FullName = reader["ApprovedStaffIDName"] == null ? "" : reader["ApprovedStaffIDName"].ToString();
            }


            return p;
        }
        protected virtual List<MedServiceItemPriceList> GetMedServiceItemPriceListColectionsFromReader(IDataReader reader)
        {
            var p = new List<MedServiceItemPriceList>();
            while (reader.Read())
            {
                p.Add(GetMedServiceItemPriceListFromReader(reader));
            }
            return p;
        }
        #endregion

        #region "PCLExamTypePriceList"
        protected virtual PCLExamTypePriceList GetPCLExamTypePriceListFromReader(IDataReader reader)
        {
            var p = new PCLExamTypePriceList
            {
                PCLExamTypePriceListID = (long)reader["PCLExamTypePriceListID"],
                RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]),
                PriceListTitle = reader["PriceListTitle"] != DBNull.Value ? reader["PriceListTitle"].ToString() : "",
                StaffID = (long)reader["StaffID"],
                ApprovedStaffID = reader["ApprovedStaffID"] as long?,
                EffectiveDate = reader["EffectiveDate"] as DateTime?
            };

            p.ObjStaffID = new Staff { StaffID = p.StaffID };

            if (reader.HasColumn("StaffIDName"))
            {
                p.ObjStaffID.FullName = reader["StaffIDName"] == null ? "" : reader["StaffIDName"].ToString();
            }

            if (reader.HasColumn("IsActive"))
            {
                p.IsActive = (bool)reader["IsActive"];
            }

            p.ObjApprovedStaffID = new Staff();
            if (reader.HasColumn("ApprovedStaffIDName"))
            {
                p.ObjApprovedStaffID.FullName = reader["ApprovedStaffIDName"] == null ? "" : reader["ApprovedStaffIDName"].ToString();
            }


            return p;
        }
        protected virtual List<PCLExamTypePriceList> GetPCLExamTypePriceListColectionsFromReader(IDataReader reader)
        {
            var p = new List<PCLExamTypePriceList>();
            while (reader.Read())
            {
                p.Add(GetPCLExamTypePriceListFromReader(reader));
            }
            return p;
        }
        #endregion

        #region PromoDiscountItems
        protected virtual PromoDiscountItems GetPromoDiscountItemsObjFromReader(IDataReader reader)
        {
            PromoDiscountItems p = new PromoDiscountItems();
            try//
            {
                if (reader.HasColumn("PromoDiscItemID") && reader["PromoDiscItemID"] != DBNull.Value)
                {
                    p.PromoDiscItemID = (long)reader["PromoDiscItemID"];
                }

                if (reader.HasColumn("PromoDiscProgID") && reader["PromoDiscProgID"] != DBNull.Value)
                {
                    p.PromoDiscProgID = (long)reader["PromoDiscProgID"];
                }

                if (reader.HasColumn("MedServiceID") && reader["MedServiceID"] != DBNull.Value)
                {
                    p.MedServiceID = (long)reader["MedServiceID"];
                    p.ObjRefMedicalServiceItem = new RefMedicalServiceItem();
                    try
                    {
                        if (reader.HasColumn("MedServiceID"))
                        {
                            p.ObjRefMedicalServiceItem.MedServiceID = (long)reader["MedServiceID"];
                        }

                        //if (reader.HasColumn("MedicalServiceTypeID"))
                        //{
                        //    p.ObjRefMedicalServiceItem.MedicalServiceTypeID = (long?)reader["MedicalServiceTypeID"];
                        //}

                        if (reader.HasColumn("MedServiceName"))
                        {
                            p.ObjRefMedicalServiceItem.MedServiceName = reader["MedServiceName"].ToString();
                        }

                        //p.ObjRefMedicalServiceItem.MedicalServiceTypeID = Convert.ToInt64(reader["MedicalServiceTypeID"]);

                        //p.ObjRefMedicalServiceItem = new RefMedicalServiceItem();

                        //try
                        //{
                        //    p.ObjRefMedicalServiceItem = GetMedicalServiceItemFromReader(reader);
                        //}
                        //catch
                        //{

                        //}

                        //p.ObjRefMedicalServiceItem.MedicalServiceTypeID = Convert.ToInt64(reader["MedicalServiceTypeID"]);

                        //p.ObjRefMedicalServiceItem.ObjMedicalServiceTypeID = new RefMedicalServiceType
                        //{
                        //    MedicalServiceTypeID = Convert.ToInt64(reader["MedicalServiceTypeID"])
                        //};

                        //if (reader.HasColumn("MedicalServiceTypeName"))
                        //{
                        //    p.ObjRefMedicalServiceItem.ObjMedicalServiceTypeID.MedicalServiceTypeName = reader["MedicalServiceTypeName"] == null ? "" : reader["MedicalServiceTypeName"].ToString();
                        //}

                        //p.ObjRefMedicalServiceItem.V_AppointmentType = 0;
                        ////Cho phép hẹn bệnh hay không
                        //if (reader.HasColumn("V_AppointmentType") && reader["V_AppointmentType"] != DBNull.Value)
                        //{
                        //    p.ObjRefMedicalServiceItem.V_AppointmentType = (long)reader["V_AppointmentType"];
                        //}

                    }
                    catch { }
                }
                if (reader.HasColumn("PCLExamTypeID") && reader["PCLExamTypeID"] != DBNull.Value)
                {
                    p.PCLExamTypeID = (long)reader["PCLExamTypeID"];
                    p.ObjPCLExamType = new PCLExamType();
                    try
                    {
                        if (reader.HasColumn("PCLExamTypeID"))
                        {
                            p.ObjPCLExamType.PCLExamTypeID = (long)reader["PCLExamTypeID"];
                        }

                        if (reader.HasColumn("PCLExamTypeName"))
                        {
                            p.ObjPCLExamType.PCLExamTypeName = reader["PCLExamTypeName"].ToString();
                        }

                    }
                    catch { }
                }

            }
            catch
            { return null; }
            return p;
        }
        protected virtual List<PromoDiscountItems> GetPromoDiscountItemsCollectionFromReader(IDataReader reader)
        {
            List<PromoDiscountItems> lst = new List<PromoDiscountItems>();
            while (reader.Read())
            {
                lst.Add(GetPromoDiscountItemsObjFromReader(reader));
            }
            return lst;
        }
        #endregion
        protected virtual XDocument ConvertReportOutPatientCashReceiptToXml(IEnumerable<ReportOutPatientCashReceipt> items)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                new XElement("ReportOutPatientCashReceipts",
                from item in items
                select new XElement("ReportOutPatientCashReceipt",
                    new XElement("ReportOutPatientCashReceiptID", item.ReportOutPatientCashReceiptID),
                    new XElement("PaymentID", item.PaymentID),
                    new XElement("ItemID", item.ItemID),
                    new XElement("V_ServiceItemType", (long)item.ServiceItemType),
                    new XElement("ServiceName", item.ServiceName),
                    new XElement("Amount", item.Amount),
                    new XElement("PatientID", item.PatientID),
                    new XElement("PatientAmount", item.PatientAmount),
                    new XElement("DeptLocID", item.DeptLocID),
                    new XElement("ServiceSeqNum", item.ServiceSeqNum),
                    new XElement("ServiceSeqNumType", item.ServiceSeqNumType),
                    new XElement("PtRegistrationID", item.PtRegistrationID),
                    new XElement("OutPtCashAdvanceID", item.OutPtCashAdvanceID),
                    new XElement("DiscountAmount", item.DiscountAmount),
                    new XElement("HIAmount", item.HIAmount)
                    )));
            return xmlDocument;
        }

        protected virtual string ConvertListSupplierGenericDrugPriceToXml(IEnumerable<SupplierGenericDrugPrice> items)
        {
            if (items != null)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<DS>");
                foreach (SupplierGenericDrugPrice details in items)
                {
                    sb.Append("<SupplierGenericDrugPrice>");
                    sb.AppendFormat("<PKID>{0}</PKID>", details.PKID);
                    sb.AppendFormat("<SupplierID>{0}</SupplierID>", details.SupplierID);
                    sb.AppendFormat("<DrugID>{0}</DrugID>", details.DrugID);
                    sb.AppendFormat("<UnitPrice>{0}</UnitPrice>", details.UnitPrice);
                    sb.AppendFormat("<PackagePrice>{0}</PackagePrice>", details.PackagePrice);
                    sb.AppendFormat("<VAT>{0}</VAT>", details.VAT);
                    sb.AppendFormat("<IsActive>{0}</IsActive>", details.IsActive);
                    sb.AppendFormat("<EffectiveDate>{0}</EffectiveDate>", details.EffectiveDate);
                    sb.AppendFormat("<StaffID>{0}</StaffID>", details.StaffID);
                    sb.Append("</SupplierGenericDrugPrice>");
                }
                sb.Append("</DS>");
                return sb.ToString();
            }
            else
            {
                return null;
            }
        }

        protected virtual XDocument ConvertPatientTransactionDetailsToXml(IEnumerable<PatientTransactionDetail> tranDetailList)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                          new XElement("TransactionDetails",
                          from item in tranDetailList
                          select new XElement("RecInfo",
                          new XElement("OutwBloodInvoiceID", item.OutwBloodInvoiceID),
                          new XElement("OutDMedRscrID", item.OutDMedRscrID),
                          new XElement("StaffID", item.StaffID),
                          new XElement("PtRegDetailID", item.PtRegDetailID),
                          new XElement("outiID", item.outiID),
                          new XElement("TransactionDate", item.TransactionDate.HasValue ? item.TransactionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                          new XElement("Amount", item.Amount),
                          new XElement("PriceDifference", item.PriceDifference),
                          new XElement("AmountCoPay", item.AmountCoPay),
                          new XElement("HealthInsuranceRebate", item.HealthInsuranceRebate),
                          new XElement("Discount", item.Discount),
                          new XElement("Qty", item.Qty),
                          new XElement("RefDocID", item.RefDocID),
                          new XElement("ExchangeRate", item.ExchangeRate),
                          new XElement("TransItemRemarks", item.TransItemRemarks),
                          new XElement("PCLRequestID", item.PCLRequestID),
                          new XElement("TranRefID", item.TranRefID),
                          new XElement("V_TranRefType", (long)item.V_TranRefType),
                          new XElement("DiscountAmt", item.DiscountAmt.GetValueOrDefault(0))
                          , new XElement("OtherAmt", item.OtherAmt.GetValueOrDefault(0))
                )));
            return xmlDocument;
        }

        public XElement ConvertPatientRegistrationDetailsToXmlElement(IEnumerable<PatientRegistrationDetail> items)
        {
            var xmlElem = new XElement("PatientRegistrationDetails",
                from details in items
                select new XElement("RecInfo",
                new XElement("HisID", details.HisID),
                    new XElement("DeptLocID", details.DeptLocation != null && details.DeptLocation.DeptLocationID > 0 ? details.DeptLocation.DeptLocationID : (details.DeptLocID.HasValue ? details.DeptLocID : default(long?))),
                    new XElement("StaffID", details.StaffID),
                    new XElement("MedServiceID", details.RefMedicalServiceItem.MedServiceID),
                    new XElement("Price", Math.Abs(details.InvoicePrice)),
                    new XElement("HIAllowedPrice", MathExtensions.Abs(details.HIAllowedPrice)),
                    new XElement("ServiceQty", details.Qty),
                    new XElement("V_ExamRegStatus", (long)details.ExamRegStatus),
                    new XElement("MarkedAsDeleted", details.RecordState == RecordState.DELETED),
                    new XElement("PtRegDetailID", details.PtRegDetailID),
                    new XElement("CreatedDate", details.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                    new XElement("HIBenefit", details.HIBenefit),
                    new XElement("HiApplied", details.HiApplied),
                    new XElement("Amount", Math.Abs(details.TotalInvoicePrice)),
                    new XElement("AmountCoPay", Math.Abs(details.TotalCoPayment)),
                    new XElement("PriceDifference", Math.Abs(details.TotalPriceDifference)),
                    new XElement("TotalHIPayment", Math.Abs(details.TotalHIPayment)),
                    new XElement("PaidTime", details.PaidTime.HasValue ? details.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                    new XElement("PaidStaffID", details.PaidStaffID),
                    new XElement("RefundTime", details.RefundTime.HasValue ? details.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                    new XElement("InPatientBillingInvID", details.InPatientBillingInvID.HasValue ? details.InPatientBillingInvID.Value.ToString() : null),
                    new XElement("SpecialNote", details.SpecialNote),
                    new XElement("IsCountHI", details.IsCountHI),
                    new XElement("IsCountPatient", details.IsCountPatient),
                    new XElement("IsInPackage", details.IsInPackage),
                    new XElement("V_NewPriceType", details.V_NewPriceType),
                    new XElement("ReasonChangePrice", details.ReasonChangePrice),
                    new XElement("DoctorStaffID", details.DoctorStaff != null ? details.DoctorStaff.StaffID : 0),
                    new XElement("MedicalInstructionDate", details.MedicalInstructionDate.HasValue ? details.MedicalInstructionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                    new XElement("ResultDate", details.ResultDate.HasValue ? details.ResultDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                    new XElement("VATRate", details.VATRate),
                    new XElement("DiscountAmt", details.DiscountAmt),
                    new XElement("PromoDiscProgID", details.PromoDiscProgID),
                    new XElement("HIPaymentPercent", details.HIPaymentPercent),
                    new XElement("V_Ekip", details.V_Ekip != null ? details.V_Ekip.LookupID : 0),
                    new XElement("V_EkipIndex", details.V_EkipIndex != null ? details.V_EkipIndex.LookupID : 0),
                    new XElement("ReqFromDeptID", details.DeptLocation != null && details.DeptLocation.DeptID > 0 ? details.DeptLocation.DeptID : 0),
                    new XElement("RecordState", details.RecordState),
                    new XElement("UserOfficialAccountID", details.UserOfficialAccountID)
                    //▼====: #101
                    , new XElement("BedPatientID", details.BedPatientID)
                    //▲====: #101
                    //▼====: #103
                    , new XElement("OtherAmt", details.OtherAmt)
                    , new XElement("IsCountPatientCOVID", details.IsCountPatientCOVID)
                    //▲====: #103
                    //,
                    //new XElement("Notes", details.Notes),
                    //new XElement("IsDone", details.IsDone)
                    //▼====: #132
                    , new XElement("IsCountSE", details.IsCountSE)
                    //▲====: #132
            ));
            return xmlElem;
        }

        public XDocument ConvertPatientRegistrationDetailsToXml(IEnumerable<PatientRegistrationDetail> items)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                new XElement("PatientRegistrationDetails",
                    from details in items
                    select new XElement("RecInfo",
                        new XElement("HisID", details.HisID),
                        new XElement("DeptLocID", details.DeptLocation != null && details.DeptLocation.DeptLocationID > 0 ?
                            details.DeptLocation.DeptLocationID : (details.DeptLocID.HasValue ? details.DeptLocID : default(long?))),
                        new XElement("StaffID", details.StaffID),
                        new XElement("MedServiceID", details.RefMedicalServiceItem.MedServiceID),
                        new XElement("Price", Math.Abs(details.InvoicePrice)),
                        new XElement("HIAllowedPrice", MathExtensions.Abs(details.HIAllowedPrice)),
                        new XElement("ServiceQty", details.Qty),
                        new XElement("V_ExamRegStatus", (long)details.ExamRegStatus),
                        new XElement("MarkedAsDeleted", details.RecordState == RecordState.DELETED ? true : false),
                        new XElement("PtRegDetailID", (long)details.PtRegDetailID),
                        new XElement("CreatedDate", details.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                        new XElement("HIBenefit", details.HIBenefit),
                        new XElement("HiApplied", details.HiApplied),
                        new XElement("Amount", Math.Abs(details.TotalInvoicePrice)),
                        new XElement("AmountCoPay", Math.Abs(details.TotalCoPayment)),
                        new XElement("PriceDifference", Math.Abs(details.TotalPriceDifference)),
                        new XElement("TotalHIPayment", Math.Abs(details.TotalHIPayment)),
                        new XElement("PaidTime", details.PaidTime.HasValue ? details.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("PaidStaffID", details.PaidStaffID),
                        new XElement("RefundTime", details.RefundTime.HasValue ? details.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("ServiceSeqNum", details.ServiceSeqNum),
                        new XElement("ServiceSeqNumType", details.ServiceSeqNumType),
                        new XElement("RegDetailCancelStaffID", details.RegDetailCancelStaffID),
                        new XElement("SpecialNote", details.SpecialNote),
                        new XElement("InPatientBillingInvID", details.InPatientBillingInvID.HasValue ? details.InPatientBillingInvID.Value.ToString() : null),
                        new XElement("IsSetSeqNumManually", details.IsSetSeqNumManually),
                        new XElement("IsCountHI", details.IsCountHI),
                        new XElement("IsCountPatient", details.IsCountPatient),
                        new XElement("IsInPackage", details.IsInPackage),
                        new XElement("V_NewPriceType", details.V_NewPriceType),
                        new XElement("ReasonChangePrice", details.ReasonChangePrice),
                        new XElement("DoctorStaffID", details.DoctorStaff != null ? details.DoctorStaff.StaffID : 0),
                        new XElement("MedicalInstructionDate", details.MedicalInstructionDate.HasValue ? details.MedicalInstructionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("ResultDate", details.ResultDate.HasValue ? details.ResultDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("HIPaymentPercent", details.HIPaymentPercent),
                        new XElement("DiscountAmt", details.DiscountAmt),
                        new XElement("ReqDeptID", details.ReqDeptID),
                        new XElement("PaymentPercent", details.PaymentPercent),
                        new XElement("PromoDiscProgID", details.PromoDiscProgID),
                        new XElement("AppointmentID", details.AppointmentID),
                        new XElement("ApptSvcDetailID", details.ApptSvcDetailID),
                        new XElement("ConsultationRoomStaffAllocID", details.ConsultationRoomStaffAllocID),
                        new XElement("ApptStartDate", !details.ApptStartDate.HasValue ? null : details.ApptStartDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                        new XElement("ApptEndDate", !details.ApptEndDate.HasValue ? null : details.ApptEndDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                        new XElement("HosClientContractID", details.HosClientContractID),
                        new XElement("ClientContractSvcPtID", details.ClientContractSvcPtID),
                        new XElement("V_Ekip", details.V_Ekip != null ? details.V_Ekip.LookupID : 0),
                        new XElement("V_EkipIndex", details.V_EkipIndex != null ? details.V_EkipIndex.LookupID : 0),
                        new XElement("IsChecked", details.IsChecked),
                        new XElement("PackServDetailID", details.PackServDetailID),
                        new XElement("ReqFromDeptID", details.ReqFromDeptID)
                        //▼====: #096
                        , new XElement("UserOfficialAccountID", details.UserOfficialAccountID)
                        //▲====: #096
                        //▼====: #101
                        , new XElement("BedPatientID", details.BedPatientID)
                        //▲====: #101
                        //▼====: #103
                        , new XElement("OtherAmt", details.OtherAmt)
                        , new XElement("IsCountPatientCOVID", details.IsCountPatientCOVID)
                        //▲====: #103
                        //▼====: #108
                        , new XElement("InPatientBillingInvID", details.InPatientBillingInvID)
                        //▲====: #108
                        //▼====: #132
                        , new XElement("IsCountSE", details.IsCountSE)
                        //▲====: #132
            )));
            return xmlDocument;
        }

        public XDocument ConvertPatientRegistrationDetailsToXml(IEnumerable<PatientRegistrationDetail> items, long StaffID)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                       new XElement("PatientRegistrationDetails",
                       from details in items
                       select new XElement("RecInfo",
                       new XElement("HisID", details.HisID),
                        new XElement("DeptLocID", details.DeptLocation != null && details.DeptLocation.DeptLocationID > 0 ?
                            details.DeptLocation.DeptLocationID : (details.DeptLocID.HasValue ? details.DeptLocID : default(long?))),
                        new XElement("StaffID", details.StaffID),
                        new XElement("MedServiceID", details.RefMedicalServiceItem.MedServiceID),
                        new XElement("Price", Math.Abs(details.InvoicePrice)),
                        new XElement("HIAllowedPrice", MathExtensions.Abs(details.HIAllowedPrice)),
                        new XElement("ServiceQty", details.Qty),
                        new XElement("V_ExamRegStatus", (long)details.ExamRegStatus),
                        new XElement("MarkedAsDeleted", details.RecordState == RecordState.DELETED ? true : false),
                        new XElement("PtRegDetailID", (long)details.PtRegDetailID),
                        new XElement("CreatedDate", details.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                        new XElement("HIBenefit", details.HIBenefit),
                        new XElement("HiApplied", details.HiApplied),
                        new XElement("Amount", Math.Abs(details.TotalInvoicePrice)),
                        new XElement("AmountCoPay", Math.Abs(details.TotalCoPayment)),
                        new XElement("PriceDifference", Math.Abs(details.TotalPriceDifference)),
                        new XElement("TotalHIPayment", Math.Abs(details.TotalHIPayment)),
                        new XElement("PaidTime", details.PaidTime.HasValue ? details.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("PaidStaffID", StaffID > 0 && details.PaidTime.HasValue && details.PaidStaffID < 1 && details.ExamRegStatus != AllLookupValues.ExamRegStatus.NGUNG_TRA_TIEN_LAI
                            ? StaffID : details.PaidStaffID),
                        new XElement("RefundTime", details.RefundTime.HasValue ? details.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("ServiceSeqNum", details.ServiceSeqNum),
                        new XElement("ServiceSeqNumType", details.ServiceSeqNumType),
                        new XElement("InPatientBillingInvID", details.InPatientBillingInvID.HasValue ? details.InPatientBillingInvID.Value.ToString() : null),
                        new XElement("RegDetailCancelStaffID", details.RegDetailCancelStaffID < 1 && StaffID > 0 && details.ExamRegStatus == AllLookupValues.ExamRegStatus.NGUNG_TRA_TIEN_LAI ? StaffID : details.RegDetailCancelStaffID),
                        new XElement("SpecialNote", details.SpecialNote),
                        new XElement("IsSetSeqNumManually", details.IsSetSeqNumManually),
                        //▼===== #071
                        new XElement("MedicalInstructionDate", (details.RefMedicalServiceItem != null && details.RefMedicalServiceItem.HITTypeID == 8 && details.PaidTime.HasValue && details.HIPaymentPercent == 1 && details.HIBenefit > 0) ? (details.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff")) : (details.MedicalInstructionDate.HasValue ? details.MedicalInstructionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : details.CreatedDate != null ? details.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss.fff") : DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff"))),
                        //▲===== #071
                        /*▼====: #027*/
                        new XElement("DoctorStaffID", details.DoctorStaffID),
                        new XElement("MedInstructionDate", details.MedInstructionDate.HasValue ? details.MedInstructionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("HIPaymentPercent", details.HIPaymentPercent),
                        /*▲====: #027*/
                        new XElement("DiscountAmt", details.DiscountAmt),
                        new XElement("ReqDeptID", details.ReqDeptID),
                        new XElement("PaymentPercent", details.PaymentPercent),
                        new XElement("Diagnosis", details.Diagnosis),
                        new XElement("V_Ekip", details.V_Ekip != null ? details.V_Ekip.LookupID : 0),
                        new XElement("V_EkipIndex", details.V_EkipIndex != null ? details.V_EkipIndex.LookupID : 0),
                        new XElement("ServiceRecID", details.ServiceRecID),
                        new XElement("IsChecked", details.IsChecked),
                        new XElement("PackServDetailID", details.PackServDetailID)
                        //▼====: #096
                        , new XElement("UserOfficialAccountID", details.UserOfficialAccountID)
                        //▲====: #096
                        //▼====: #101
                        , new XElement("BedPatientID", details.BedPatientID)
                        //▲====: #101
                        //▼====: #103
                        , new XElement("OtherAmt", details.OtherAmt)
                        , new XElement("IsCountPatientCOVID", details.IsCountPatientCOVID)
                        //▲====: #103
                        //▼====: 108
                        , new XElement("InPatientBillingInvID", details.InPatientBillingInvID)
                        //▲====: #108
                        //▼====: #132
                        , new XElement("IsCountSE", details.IsCountSE)
                        //▲====: #132
            )));
            return xmlDocument;
        }

        public XDocument ConvertPCLRequestDetailsToXml(IEnumerable<PatientPCLRequestDetail> items)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                new XElement("PatientPCLRequestDetails",
                from details in items
                select new XElement("RecInfo",
                    new XElement("PCLReqItemID", details.PCLReqItemID),
                    new XElement("PCLExamTypeID", details.PCLExamTypeID > 0 ? details.PCLExamTypeID : (details.PCLExamType != null ? details.PCLExamType.PCLExamTypeID : 0)),
                    new XElement("PatientPCLReqID", details.PatientPCLReqID),
                    new XElement("HIBenefit", details.HIBenefit),
                    new XElement("HisID", details.HisID),
                    new XElement("HiApplied", details.HiApplied),
                    new XElement("NumberOfTest", details.NumberOfTest.GetValueOrDefault(1)),
                    new XElement("Price", Math.Abs(details.InvoicePrice)),
                    new XElement("HIAllowedPrice", MathExtensions.Abs(details.HIAllowedPrice)),
                    new XElement("Amount", MathExtensions.Abs(details.TotalInvoicePrice)),
                    new XElement("AmountCoPay", MathExtensions.Abs(details.TotalCoPayment)),
                    new XElement("PriceDifference", MathExtensions.Abs(details.PriceDifference)),
                    new XElement("TotalHIPayment", MathExtensions.Abs(details.TotalHIPayment)),
                    new XElement("MarkedAsDeleted", details.MarkedAsDeleted),
                    new XElement("CreatedDate", details.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                    new XElement("V_ExamRegStatus", (long)details.ExamRegStatus),
                    new XElement("ServiceSeqNum", (long)details.ServiceSeqNum),
                    new XElement("ServiceSeqNumType", (long)details.ServiceSeqNumType),
                    new XElement("PaidTime", details.PaidTime.HasValue ? details.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                    new XElement("PaidStaffID", details.PaidStaffID),
                    new XElement("RefundTime", details.RefundTime.HasValue ? details.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                    new XElement("DeptLocID", (details.DeptLocation != null ? (details.DeptLocation.DeptLocationID > 0 ? details.DeptLocation.DeptLocationID : 0) : 0)),
                    new XElement("IsCountHI", details.IsCountHI),
                    new XElement("IsCountPatient", details.IsCountPatient),
                    new XElement("IsInPackage", details.IsInPackage),
                    new XElement("DoctorStaffID", details.DoctorStaff != null ? details.DoctorStaff.StaffID : 0),
                    new XElement("MedicalInstructionDate", details.MedicalInstructionDate.HasValue ? details.MedicalInstructionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                    new XElement("ResultDate", details.ResultDate.HasValue ? details.ResultDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                    new XElement("DiscountAmt", details.DiscountAmt),
                    new XElement("PromoDiscProgID", details.PromoDiscProgID),
                    //▼===== #075
                    new XElement("AllowDayBetweenExams", details.PCLExamType == null ? (int?)null : details.PCLExamType.AllowDayBetweenExams)
                    //▼====: #096
                    , new XElement("UserOfficialAccountID", details.UserOfficialAccountID)
                    //▲====: #096
                    //▲===== #075
                    //▼====: #103
                    , new XElement("OtherAmt", details.OtherAmt)
                    , new XElement("IsCountPatientCOVID", details.IsCountPatientCOVID)
                    //▲====: #103
                    //▼====: #108
                    , new XElement("InPatientBillingInvID", details.PatientPCLRequest?.InPatientBillingInvID)
                    //▲====: #108
                    //▼====: #132
                    , new XElement("IsCountSE", details.IsCountSE)
                    //▲====: #132
            )));
            return xmlDocument;
        }

        public XDocument ConvertPCLRequestDetailsExtToXml(IEnumerable<PatientPCLRequestDetail_Ext> items)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                       new XElement("PatientPCLRequestDetailsExt",
                       from details in items
                       select new XElement("RecInfo",
                           new XElement("PCLReqItemExtID", details.PCLReqItemExtID),
                       new XElement("PCLExamTypeID", details.PCLExamTypeID > 0 ? details.PCLExamTypeID : (details.PCLExamType != null ? details.PCLExamType.PCLExamTypeID : 0)),
                       new XElement("PatientPCLReqExtID", details.PatientPCLReqExtID),
                       new XElement("HIBenefit", details.HIBenefit),
                       new XElement("HisID", details.HisID),
                       new XElement("HiApplied", details.HiApplied),
                       new XElement("NumberOfTest", details.NumberOfTest.GetValueOrDefault(1)),
                       new XElement("Price", Math.Abs(details.InvoicePrice)),
                       new XElement("HIAllowedPrice", MathExtensions.Abs(details.HIAllowedPrice)),
                       new XElement("Amount", MathExtensions.Abs(details.TotalInvoicePrice)),
                       new XElement("AmountCoPay", MathExtensions.Abs(details.TotalCoPayment)),
                       new XElement("PriceDifference", MathExtensions.Abs(details.PriceDifference)),
                       new XElement("TotalHIPayment", MathExtensions.Abs(details.TotalHIPayment)),
                       new XElement("MarkedAsDeleted", details.MarkedAsDeleted),
                       new XElement("CreatedDate", details.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                         new XElement("V_ExamRegStatus", (long)details.ExamRegStatus),
                         new XElement("ServiceSeqNum", (long)details.ServiceSeqNum),
                         new XElement("ServiceSeqNumType", (long)details.ServiceSeqNumType),
                        new XElement("PaidTime", details.PaidTime.HasValue ? details.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("PaidStaffID", details.PaidStaffID),
                        new XElement("RefundTime", details.RefundTime.HasValue ? details.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("DeptLocID", (details.DeptLocation != null ? (details.DeptLocation.DeptLocationID > 0 ? details.DeptLocation.DeptLocationID : 0) : 0))
                        )));
            return xmlDocument;
        }

        // 14/11/2013 Txd BEGIN ===================================


        protected virtual DeptLocation GetDeptInfoObjFromReader(IDataReader reader)
        {
            DeptLocation p = new DeptLocation();
            try
            {
                if (reader.HasColumn("LID") && reader["LID"] != null)
                {
                    p.LID = (long)reader["LID"];
                }

                if (reader.HasColumn("DeptID") && reader["DeptID"] != null)
                {
                    p.DeptID = (long)reader["DeptID"];
                }

                if (reader.HasColumn("DeptLocationID") && reader["DeptLocationID"] != null)
                {
                    p.DeptLocationID = (long)reader["DeptLocationID"];
                }

                p.RefDepartment = new RefDepartment();
                if (reader.HasColumn("DeptName") && reader["DeptName"] != null)
                {
                    p.RefDepartment.DeptName = reader["DeptName"].ToString();
                }

                if (reader.HasColumn("DeptDescription") && reader["DeptDescription"] != null)
                {
                    p.RefDepartment.DeptDescription = reader["DeptDescription"].ToString();
                }

                if (reader.HasColumn("V_DeptType") && reader["V_DeptType"] != null)
                {
                    p.RefDepartment.V_DeptType = (long)reader["V_DeptType"];
                }

                p.Location = new Location();
                if (reader.HasColumn("LocationName") && reader["LocationName"] != null)
                {
                    p.Location.LocationName = reader["LocationName"].ToString();
                }

                if (reader.HasColumn("LocationDescription") && reader["LocationDescription"] != null)
                {
                    p.Location.LocationDescription = reader["LocationDescription"].ToString();
                }
                p.Location.RoomType = new RoomType();
                if (reader.HasColumn("RmTypeName") && reader["RmTypeName"] != null)
                {
                    p.Location.RoomType.RmTypeName = reader["RmTypeName"].ToString();
                }

                if (reader.HasColumn("RmTypeDescription") && reader["RmTypeDescription"] != null)
                {
                    p.Location.RoomType.RmTypeDescription = reader["RmTypeDescription"].ToString();
                }
            }
            catch
            {
                return null;
            }

            return p;
        }

        protected virtual PCLExamTypeLocation GetPCLExamTypeDeptLocInfoFromReader(IDataReader reader)
        {
            var p = new PCLExamTypeLocation();
            if (reader.HasColumn("PCLExamTypeLocID") && reader["PCLExamTypeLocID"] != DBNull.Value)
            {
                p.PCLExamTypeLocID = (long)reader["PCLExamTypeLocID"];
            }
            if (reader.HasColumn("PCLExamTypeID") && reader["PCLExamTypeID"] != DBNull.Value)
            {
                p.PCLExamTypeID = (long)reader["PCLExamTypeID"];
            }
            if (reader.HasColumn("DeptLocationID") && reader["DeptLocationID"] != DBNull.Value)
            {
                p.DeptLocationID = (long)reader["DeptLocationID"];
            }

            p.DeptLocation = GetDeptInfoObjFromReader(reader);

            return p;
        }


        protected virtual DeptLocation GetDeptLocAndDeptInfoFromReader(IDataReader reader)
        {
            DeptLocation p = new DeptLocation();
            try
            {
                if (reader.HasColumn("LID") && reader["LID"] != null)
                {
                    p.LID = (long)reader["LID"];
                }

                if (reader.HasColumn("DeptID") && reader["DeptID"] != null)
                {
                    p.DeptID = (long)reader["DeptID"];
                }

                if (reader.HasColumn("DeptLocationID") && reader["DeptLocationID"] != null)
                {
                    p.DeptLocationID = (long)reader["DeptLocationID"];
                }

                p.RefDepartment = new RefDepartment();
                if (reader.HasColumn("DeptName") && reader["DeptName"] != null)
                {
                    p.RefDepartment.DeptName = reader["DeptName"].ToString();
                }

                if (reader.HasColumn("DeptDescription") && reader["DeptDescription"] != null)
                {
                    p.RefDepartment.DeptDescription = reader["DeptDescription"].ToString();
                }

                if (reader.HasColumn("V_DeptType") && reader["V_DeptType"] != null)
                {
                    p.RefDepartment.V_DeptType = (long)reader["V_DeptType"];
                }

            }
            catch
            {
                return null;
            }
            return p;
        }


        protected virtual object BuildPCLExamTypeDeptLocMapBase(bool bCreateMap)
        {
            Dictionary<long, PCLExamType> mapPCLItemDeptLoc = null;
            List<PCLExamType> listPCLItems = null;
            try
            {
                using (SqlConnection sqlConn = new SqlConnection(this.ConnectionString))
                {
                    SqlCommand sqlCmd = new SqlCommand("sp_GetAllPclExamTypes_With_AssocDeptLocIDs", sqlConn);
                    sqlCmd.CommandType = CommandType.StoredProcedure;
                    sqlConn.Open();
                    IDataReader recReader = sqlCmd.ExecuteReader(CommandBehavior.Default);

                    if (bCreateMap)
                        mapPCLItemDeptLoc = new Dictionary<long, PCLExamType>();
                    else
                        listPCLItems = new List<PCLExamType>();

                    int nCnt = 0;
                    PCLExamType pclItem = null;
                    PCLExamType curPclItem = null;

                    List<DeptLocation> listDeptLocIDs = new List<DeptLocation>();
                    List<PCLExamTypeLocation> listPclExamLoc = new List<PCLExamTypeLocation>();

                    DeptLocation deptLoc = null;
                    PCLExamTypeLocation pclExamLoc = null;

                    while (recReader.Read())
                    {
                        ++nCnt;
                        pclItem = GetPCLExamTypeFromReader(recReader);
                        if (bCreateMap)
                            deptLoc = GetDeptLocAndDeptInfoFromReader(recReader);
                        else
                            pclExamLoc = GetPCLExamTypeDeptLocInfoFromReader(recReader);

                        if (curPclItem == null) // First PCLExamType Item read from recReader
                        {
                            curPclItem = pclItem;
                        }
                        else
                        {
                            if (curPclItem.PCLExamTypeID != pclItem.PCLExamTypeID)
                            {
                                if (bCreateMap)
                                {
                                    curPclItem.ObjDeptLocationList = listDeptLocIDs.ToObservableCollection();
                                    mapPCLItemDeptLoc.Add(curPclItem.PCLExamTypeID, curPclItem);
                                    listDeptLocIDs = new List<DeptLocation>();
                                }
                                else
                                {
                                    curPclItem.PCLExamTypeLocations = listPclExamLoc.ToObservableCollection();
                                    listPCLItems.Add(curPclItem);
                                    listPclExamLoc = new List<PCLExamTypeLocation>();
                                }

                                curPclItem = pclItem;

                            }
                        }
                        if (bCreateMap)
                            listDeptLocIDs.Add(deptLoc);
                        else
                            listPclExamLoc.Add(pclExamLoc);
                    }

                    // Last PCLExamType Item read from recReader has not been added in the above while loop
                    if (bCreateMap)
                    {
                        curPclItem.ObjDeptLocationList = listDeptLocIDs.ToObservableCollection();
                        mapPCLItemDeptLoc.Add(curPclItem.PCLExamTypeID, curPclItem);
                    }
                    else
                    {
                        curPclItem.PCLExamTypeLocations = listPclExamLoc.ToObservableCollection();
                        listPCLItems.Add(curPclItem);
                    }

                }
            }
            catch (Exception ex)
            {
                AxLogger.Instance.LogError(ex);
                return null;
            }

            if (bCreateMap)
                return mapPCLItemDeptLoc;
            else
                return listPCLItems;

        }

        protected virtual List<PCLExamTypeLocation> GetPCLExamTypeLocationCollectionFromReader(IDataReader reader)
        {
            List<PCLExamTypeLocation> lst = new List<PCLExamTypeLocation>();
            while (reader.Read())
            {
                lst.Add(GetPCLExamTypeDeptLocInfoFromReader(reader));
            }
            return lst;
        }

        public List<PCLExamTypeLocation> GetAllPclExamTypeLocations()
        {
            var listReVal = new List<PCLExamTypeLocation>();
            using (var cn = new SqlConnection(this.ConnectionString))
            {
                var cmd = new SqlCommand("sp_PclExamType_GetAllPCLExamTypeLocations", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cn.Open();

                IDataReader reader = ExecuteReader(cmd);
                if (reader != null)
                {
                    listReVal = GetPCLExamTypeLocationCollectionFromReader(reader);
                    reader.Close();
                }

                CleanUpConnectionAndCommand(cn, cmd);
            }
            return listReVal;
        }


        protected virtual Dictionary<long, List<DeptLocation>> BuildAllServiceIdDeptLocMapBase()
        {
            Dictionary<long, List<DeptLocation>> mapServIdDeptLoc = null;
            using (var cn = new SqlConnection(this.ConnectionString))
            {
                var cmd = new SqlCommand("spGetAllServices_DeptLocations_Txd", cn) { CommandType = CommandType.StoredProcedure };

                cn.Open();

                var reader = ExecuteReader(cmd);

                mapServIdDeptLoc = GetMedServIdAndDeptLocMapFromReader(reader);
                return mapServIdDeptLoc;
            }
        }

        public static Dictionary<long, PCLExamType> MAPPCLExamTypeDeptLoc = null;

        public static DateTime dttest;
        public static List<PCLExamTypeLocation> ListAllPCLExamTypeLocations = null;

        public static Dictionary<long, List<DeptLocation>> MAPServiceIdAndDeptLocIDs = null;

        // Txd END =================================== 

        public static Dictionary<long, List<RefGenericRelation>> MAPRefGenericRelation = null;

        protected virtual Dictionary<long, List<RefGenericRelation>> BuildAllRefGenericRelation()
        {
            Dictionary<long, List<RefGenericRelation>> mapRefGenericRelation = new Dictionary<long, List<RefGenericRelation>>();
            using (SqlConnection cn = new SqlConnection(this.ConnectionString))
            {
                SqlCommand cmd = new SqlCommand("spGetAllRefGenericRelation", cn);
                cmd.CommandType = CommandType.StoredProcedure;

                cn.Open();
                IDataReader reader = ExecuteReader(cmd);
                mapRefGenericRelation = GetMAPRefGenericRelationFromReader(reader);
                reader.Close();
                CleanUpConnectionAndCommand(cn, cmd);
            }
            return mapRefGenericRelation;
        }

        private long GetDeptLocationID(PatientPCLRequestDetail details)
        {
            //Dictionary<long, PCLExamType> MAPPCLExamTypeDeptLoc = ServiceCollectioneHCMS.MAPPCLExamTypeDeptLoc;
            //Dictionary<long, PCLExamType> MAPPCLExamTypeDeptLoc = MAPPCLExamTypeDeptLoc;
            try
            {
                return (MAPPCLExamTypeDeptLoc != null && MAPPCLExamTypeDeptLoc.Count > 0 ?
                                         MAPPCLExamTypeDeptLoc[details.PCLExamTypeID > 0 ? details.PCLExamTypeID : (details.PCLExamType != null ? details.PCLExamType.PCLExamTypeID : 0)].ObjDeptLocationList[0].DeptLocationID : 0);
            }
            catch { return 0; }
        }


        public XElement ConvertPCLRequestToXmlElement(IEnumerable<PatientPCLRequest> items, long medicalRecordID)
        {
            var root = new XElement("PatientPCLRequests",
                       from request in items
                       select new XElement("PatientPCLRequest",
                           new XElement("PatientPCLReqID", request.PatientPCLReqID),
                           new XElement("PCLRequestNumID", request.PCLRequestNumID),
                           new XElement("ReqFromDeptLocID", request.ReqFromDeptLocID),
                           new XElement("ReqFromDeptID", request.ReqFromDeptID <= 0 ? 0 : request.ReqFromDeptID),
                           new XElement("Diagnosis", request.Diagnosis),
                           new XElement("DoctorComments", request.DoctorComments),
                           new XElement("IsExternalExam", request.IsExternalExam),
                           new XElement("IsImported", request.IsImported),
                           new XElement("IsCaseOfEmergency", request.IsCaseOfEmergency),
                           new XElement("StaffID", request.StaffID),
                           new XElement("V_PCLRequestType", (long)request.V_PCLRequestType),
                            new XElement("V_PCLMainCategory", request.V_PCLMainCategory),
                           new XElement("V_PCLRequestStatus", (long)request.V_PCLRequestStatus),
                           new XElement("CreatedDate", request.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                           new XElement("AgencyID", request.AgencyID),
                           new XElement("InPatientBillingInvID", request.InPatientBillingInvID),
                           new XElement("MarkedAsDeleted", request.RecordState == RecordState.DELETED || request.MarkedAsDeleted),
                           new XElement("PaidTime", request.PaidTime.HasValue ? request.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                           new XElement("RefundTime", request.RefundTime.HasValue ? request.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : ""),
                           new XElement("MedicalInstructionDate", request.MedicalInstructionDate != null ? request.MedicalInstructionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : ""),
                           new XElement("DoctorStaffID", request.DoctorStaffID > 0 ? request.DoctorStaffID : null),
                           //PatientServiceRecord element
                           new XElement("PatientServiceRecord",
                               new XElement("StaffID", request.PatientServiceRecord == null ? null : request.PatientServiceRecord.Staff != null ? request.PatientServiceRecord.Staff.StaffID : request.PatientServiceRecord.StaffID),
                               new XElement("PatientRecID", medicalRecordID),
                               new XElement("ExamDate", request.PatientServiceRecord == null ? null : request.PatientServiceRecord.ExamDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                               new XElement("V_ProcessingType", request.PatientServiceRecord == null ? null : request.PatientServiceRecord.V_ProcessingType),
                               new XElement("V_Behaving", request.PatientServiceRecord == null ? null : request.PatientServiceRecord.V_Behaving),
                               new XElement("DateModified", request.PatientServiceRecord == null ? null : request.PatientServiceRecord.DateModified)),
                               new XElement("PatientPCLRequestDetails",
                               from details in request.PatientPCLRequestIndicators
                               select new XElement("RecInfo",
                                    new XElement("PCLReqItemID", details.PCLReqItemID),
                                    new XElement("PCLExamTypeID", details.PCLExamTypeID > 0 ? details.PCLExamTypeID : (details.PCLExamType != null ? details.PCLExamType.PCLExamTypeID : 0)),
                                    new XElement("PatientPCLReqID", details.PatientPCLReqID),
                                    new XElement("HIBenefit", details.HIBenefit),
                                    new XElement("HiApplied", details.HiApplied),
                                    //KMx: Vì lý do tạo bill, không sử dụng property NumberOfTest, mà sử dụng Qty để đồng nhất với Dịch vụ, nên phải truyền Qty xuống DB để lưu, không phải truyền NumberOfTest (15/12/2014 09:44).
                                    //new XElement("NumberOfTest", details.NumberOfTest.GetValueOrDefault(1)),
                                    new XElement("NumberOfTest", details.Qty),
                                    new XElement("Price", Math.Abs(details.InvoicePrice)),
                                    new XElement("HIAllowedPrice", MathExtensions.Abs(details.HIAllowedPrice)),
                                    new XElement("Amount", MathExtensions.Abs(details.TotalInvoicePrice)),
                                    new XElement("AmountCoPay", MathExtensions.Abs(details.TotalCoPayment)),
                                    new XElement("PriceDifference", MathExtensions.Abs(details.PriceDifference)),
                                    new XElement("TotalHIPayment", MathExtensions.Abs(details.TotalHIPayment)),
                                    new XElement("MarkedAsDeleted", details.RecordState == RecordState.DELETED || details.MarkedAsDeleted),
                                    new XElement("CreatedDate", details.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                                    new XElement("V_ExamRegStatus", details.V_ExamRegStatus),
                                    new XElement("PaidTime", details.PaidTime.HasValue ? details.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                                    new XElement("RefundTime", details.RefundTime.HasValue ? details.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                                    new XElement("PaidStaffID", details.PaidStaffID),
                                    new XElement("ServiceSeqNum", details.ServiceSeqNum),
                                    new XElement("ServiceSeqNumType", details.ServiceSeqNumType),
                                    new XElement("DeptLocID", details.DeptLocation != null && details.DeptLocation.DeptLocationID > 0 ? details.DeptLocation.DeptLocationID : GetDeptLocationID(details)),
                                    new XElement("RecordState", details.RecordState),
                                    new XElement("IsCountHI", details.IsCountHI),
                                    new XElement("IsCountPatient", details.IsCountPatient),
                                    new XElement("IsInPackage", details.IsInPackage),
                                    new XElement("V_NewPriceType", details.V_NewPriceType),
                                    new XElement("ReasonChangePrice", details.ReasonChangePrice),
                                    new XElement("DoctorStaffID", details.DoctorStaff != null ? details.DoctorStaff.StaffID : 0),
                                    new XElement("MedicalInstructionDate", details.MedicalInstructionDate.HasValue ? details.MedicalInstructionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                                    new XElement("ResultDate", details.ResultDate.HasValue ? details.ResultDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                                    new XElement("HisID", details.HisID),
                                    new XElement("DiscountAmt", details.DiscountAmt),
                                    new XElement("PromoDiscProgID", details.PromoDiscProgID),
                                    new XElement("AllowDayBetweenExams", details.PCLExamType == null ? (int?)null : details.PCLExamType.AllowDayBetweenExams)
                                    //▼====: #096
                                    , new XElement("UserOfficialAccountID", details.UserOfficialAccountID)
                                    //▲====: #096
                                    //▼====: #103
                                    , new XElement("OtherAmt", details.OtherAmt)
                                    , new XElement("IsCountPatientCOVID", details.IsCountPatientCOVID)
                                    //▲====: #103
                                    //,
                                    //new XElement("Notes", details.Notes),
                                    //new XElement("IsDone", details.IsDone)
                                    //▼====: #132
                                    , new XElement("IsCountSE", details.IsCountSE)
                                    //▲====: #132
                                ))
                           ));
            return root;
        }
        public XDocument ConvertPCLRequestsToXml(IEnumerable<PatientPCLRequest> items, long medicalRecordID, long PatientID = 0, long StaffID = 0)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                       new XElement("PatientPCLRequests",
                       from request in items
                       select new XElement("PatientPCLRequest",
                            new XElement("PatientPCLReqID", request.PatientPCLReqID),
                            new XElement("PCLRequestNumID", request.PCLRequestNumID),
                            new XElement("ReqFromDeptLocID", request.ReqFromDeptLocID),
                            new XElement("Diagnosis", request.Diagnosis),
                            new XElement("ICD10List", request.ICD10List),
                            new XElement("DoctorComments", request.DoctorComments),
                            new XElement("IsExternalExam", request.IsExternalExam),
                            new XElement("IsImported", request.IsImported),
                            new XElement("IsCaseOfEmergency", request.IsCaseOfEmergency),
                            new XElement("StaffID", request.StaffID != null && request.StaffID.Value > 0 ? request.StaffID : StaffID),
                            new XElement("DoctorStaffID", request.DoctorStaffID),
                            new XElement("V_PCLRequestType", (long)request.V_PCLRequestType),
                            new XElement("V_PCLRequestStatus", (long)request.V_PCLRequestStatus),
                            new XElement("V_PCLMainCategory", (long)request.V_PCLMainCategory),
                            new XElement("CreatedDate", request.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                            new XElement("AgencyID", request.AgencyID),
                            new XElement("InPatientBillingInvID", request.InPatientBillingInvID),
                            new XElement("MarkedAsDeleted", request.RecordState == RecordState.DELETED || request.MarkedAsDeleted),
                            new XElement("PaidTime", request.PaidTime.HasValue ? request.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                            new XElement("RefundTime", request.RefundTime.HasValue ? request.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : ""),
                            new XElement("PCLReqCancelStaffID", request.PCLReqCancelStaffID < 1 && StaffID > 0 && request.ExamRegStatus == AllLookupValues.ExamRegStatus.NGUNG_TRA_TIEN_LAI ? StaffID : request.PCLReqCancelStaffID),
                            new XElement("PaidStaffID", StaffID > 0 && request.PaidStaffID == 0 && request.PaidTime.HasValue ? StaffID : 0),
                            new XElement("ReqFromDeptID", request.ReqFromDeptID <= 0 ? 0 : request.ReqFromDeptID),
                            new XElement("MedicalInstructionDate", request.MedicalInstructionDate != null ? request.MedicalInstructionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                            new XElement("AllowToPayAfter", request.AllowToPayAfter),
                            new XElement("PtRegDetailID", ConvertNullObjectToDBNull(request.PtRegDetailID)),
                            //PatientServiceRecord element
                            new XElement("PatientServiceRecord",
                                new XElement("StaffID", request.PatientServiceRecord == null ? null : request.PatientServiceRecord.Staff != null ? request.PatientServiceRecord.Staff.StaffID : request.PatientServiceRecord.StaffID),
                                new XElement("PatientRecID", medicalRecordID),
                                new XElement("ExamDate", request.PatientServiceRecord == null ? null : request.PatientServiceRecord.ExamDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                                new XElement("V_ProcessingType", request.PatientServiceRecord == null ? null : request.PatientServiceRecord.V_ProcessingType),
                                new XElement("V_Behaving", request.PatientServiceRecord == null ? null : request.PatientServiceRecord.V_Behaving),
                                new XElement("DateModified", request.PatientServiceRecord == null ? null : request.PatientServiceRecord.DateModified),
                                new XElement("ServiceRecID", request.ServiceRecID <= 0 ? 0 : request.ServiceRecID),
                                new XElement("PatientID", PatientID <= 0 ? 0 : PatientID)),
                            new XElement("PatientPCLRequestDetails",
                            from details in request.PatientPCLRequestIndicators
                            select new XElement("RecInfo",
                                    new XElement("PCLReqItemID", details.PCLReqItemID),
                                    new XElement("DeptLocID", details.DeptLocation != null ? details.DeptLocation.DeptLocationID : 0),
                                    new XElement("PCLExamTypeID", details.PCLExamTypeID > 0 ? details.PCLExamTypeID : (details.PCLExamType != null ? details.PCLExamType.PCLExamTypeID : 0)),
                                    new XElement("PatientPCLReqID", details.PatientPCLReqID),
                                    new XElement("HIBenefit", details.HIBenefit),
                                    new XElement("HisID", details.HisID),
                                    new XElement("HiApplied", details.HiApplied),
                                    new XElement("NumberOfTest", details.NumberOfTest.GetValueOrDefault(1)),
                                    new XElement("Price", Math.Abs(details.InvoicePrice)),
                                    new XElement("HIAllowedPrice", MathExtensions.Abs(details.HIAllowedPrice)),
                                    new XElement("Amount", MathExtensions.Abs(details.TotalInvoicePrice)),
                                    new XElement("AmountCoPay", MathExtensions.Abs(details.TotalCoPayment)),
                                    new XElement("PriceDifference", MathExtensions.Abs(details.PriceDifference)),
                                    new XElement("TotalHIPayment", MathExtensions.Abs(details.TotalHIPayment)),
                                    new XElement("MarkedAsDeleted", details.RecordState == RecordState.DELETED || details.MarkedAsDeleted),
                                    new XElement("CreatedDate", details.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                                    new XElement("V_ExamRegStatus", (long)details.ExamRegStatus),
                                    new XElement("PaidTime", details.PaidTime.HasValue ? details.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                                    new XElement("StaffID", details.StaffID == null || details.StaffID.Value < 1 ? StaffID : details.StaffID),
                                    new XElement("PaidStaffID", StaffID > 0 && (details.PaidStaffID < 1 && details.PaidTime.HasValue
                                        && details.ExamRegStatus != AllLookupValues.ExamRegStatus.NGUNG_TRA_TIEN_LAI)
                                                                     ? StaffID : details.PaidStaffID),
                                    new XElement("RefundTime", details.RefundTime.HasValue ? details.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                                    new XElement("ServiceSeqNum", details.ServiceSeqNum),
                                    new XElement("ServiceSeqNumType", details.ServiceSeqNumType),
                                    new XElement("RecordState", details.RecordState),
                                    new XElement("PCLReqDetailCancelStaffID", details.PCLReqDetailCancelStaffID < 1
                                                                && StaffID > 0 && details.ExamRegStatus == AllLookupValues.ExamRegStatus.NGUNG_TRA_TIEN_LAI ? StaffID : details.PCLReqDetailCancelStaffID),
                                    new XElement("V_NewPriceType", details.V_NewPriceType),
                                    new XElement("ReasonChangePrice", details.ReasonChangePrice),
                                    new XElement("IsCountHI", details.IsCountHI),
                                    new XElement("IsCountPatient", details.IsCountPatient),
                                    new XElement("DoctorStaffID", details.DoctorStaff != null && details.DoctorStaff.StaffID > 0 ? details.DoctorStaff.StaffID : request.DoctorStaffID),
                                    new XElement("MedicalInstructionDate", request.MedicalInstructionDate),
                                    new XElement("DiscountAmt", details.DiscountAmt),
                                    // 20181212 TNHX [BM0005404] Doesn't print PhieuChiDinh if Doctor already printed it 
                                    new XElement("RequestedByDoctor", details.RequestedByDoctor),
                                    new XElement("AllowDayBetweenExams", details.PCLExamType == null ? (int?)null : details.PCLExamType.AllowDayBetweenExams),
                                    new XElement("AppointmentID", details.AppointmentID),
                                    new XElement("HosClientContractID", details.HosClientContractID),
                                    new XElement("ClientContractSvcPtID", details.ClientContractSvcPtID)
                                    //▼====: #096
                                    , new XElement("UserOfficialAccountID", details.UserOfficialAccountID)
                                    //▲====: #096
                                    //▼====: #103
                                    , new XElement("OtherAmt", details.OtherAmt)
                                    , new XElement("IsCountPatientCOVID", details.IsCountPatientCOVID)
                                    //▲====: #103
                                    //▼====: #132
                                    , new XElement("IsCountSE", details.IsCountSE)
                                    //▲====: #132
                                    )
                                )
                            )
                        )
                    );
            return xmlDocument;
        }

        public XDocument ConvertPCLRequestsToXml_ReUseServiceSeqNum(IEnumerable<PatientPCLRequestDetail> items)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                       new XElement("PatientPCLRequestDetails",
                       from details in items
                       select new XElement("RecInfo",
                        new XElement("PCLReqItemID", details.PCLReqItemID),
                        new XElement("PCLExamTypeID", details.PCLExamTypeID > 0 ? details.PCLExamTypeID : (details.PCLExamType != null ? details.PCLExamType.PCLExamTypeID : 0)),
                        new XElement("PatientPCLReqID", details.PatientPCLReqID),
                        new XElement("HisID", details.HisID),
                        new XElement("HIBenefit", details.HIBenefit),
                        new XElement("NumberOfTest", details.NumberOfTest.GetValueOrDefault(1)),
                        new XElement("Price", Math.Abs(details.InvoicePrice)),
                        new XElement("HIAllowedPrice", MathExtensions.Abs(details.HIAllowedPrice)),
                        new XElement("Amount", MathExtensions.Abs(details.TotalInvoicePrice)),
                        new XElement("AmountCoPay", MathExtensions.Abs(details.TotalCoPayment)),
                        new XElement("PriceDifference", MathExtensions.Abs(details.PriceDifference)),
                        new XElement("TotalHIPayment", MathExtensions.Abs(details.TotalHIPayment)),
                        new XElement("MarkedAsDeleted", details.MarkedAsDeleted),
                        new XElement("CreatedDate", details.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                        new XElement("V_ExamRegStatus", (long)details.ExamRegStatus),
                        new XElement("PaidTime", details.PaidTime.HasValue ? details.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("RefundTime", details.RefundTime.HasValue ? details.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("PaidStaffID", details.PaidStaffID),
                        new XElement("ServiceSeqNum", details.ServiceSeqNum),
                        new XElement("ServiceSeqNumType", details.ServiceSeqNumType),
                        new XElement("DeptLocID", (details.DeptLocation != null ? (details.DeptLocation.DeptLocationID > 0 ? details.DeptLocation.DeptLocationID : 0) : 0)),
                        new XElement("MedicalInstructionDate", details.MedicalInstructionDate != null && details.MedicalInstructionDate.HasValue ? details.MedicalInstructionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("DiscountAmt", details.DiscountAmt)
                        //▼====: #096
                        , new XElement("UserOfficialAccountID", details.UserOfficialAccountID)
                        //▲====: #096
                        //▼====: #103
                        , new XElement("OtherAmt", details.OtherAmt)
                        , new XElement("IsCountPatientCOVID", details.IsCountPatientCOVID)
                        //▲====: #103
                        //▼====: #132
                        , new XElement("IsCountSE", details.IsCountSE)
                        //▲====: #132
                        )));
            return xmlDocument;

        }

        public XDocument ConvertPCLRequestsToXml_ReUseServiceSeqNum(IEnumerable<PatientPCLRequestDetail> items, long StaffID = 0)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                       new XElement("PatientPCLRequestDetails",
                       from details in items
                       select new XElement("RecInfo",
                        new XElement("PCLReqItemID", details.PCLReqItemID),
                        new XElement("PCLExamTypeID", details.PCLExamTypeID > 0 ? details.PCLExamTypeID : (details.PCLExamType != null ? details.PCLExamType.PCLExamTypeID : 0)),
                        new XElement("PatientPCLReqID", details.PatientPCLReqID),
                        new XElement("HisID", details.HisID),
                        new XElement("HIBenefit", details.HIBenefit),
                        new XElement("NumberOfTest", details.NumberOfTest.GetValueOrDefault(1)),
                        new XElement("Price", Math.Abs(details.InvoicePrice)),
                        new XElement("HIAllowedPrice", MathExtensions.Abs(details.HIAllowedPrice)),
                        new XElement("Amount", MathExtensions.Abs(details.TotalInvoicePrice)),
                        new XElement("AmountCoPay", MathExtensions.Abs(details.TotalCoPayment)),
                        new XElement("PriceDifference", MathExtensions.Abs(details.PriceDifference)),
                        new XElement("TotalHIPayment", MathExtensions.Abs(details.TotalHIPayment)),
                        new XElement("MarkedAsDeleted", details.MarkedAsDeleted),
                        new XElement("CreatedDate", details.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                        new XElement("V_ExamRegStatus", (long)details.ExamRegStatus),
                        new XElement("PaidTime", details.PaidTime.HasValue ? details.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("RefundTime", details.RefundTime.HasValue ? details.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("PaidStaffID", details.PaidStaffID),
                        new XElement("StaffID", StaffID),
                        new XElement("ServiceSeqNum", details.ServiceSeqNum),
                        new XElement("ServiceSeqNumType", details.ServiceSeqNumType),
                        new XElement("DeptLocID", (details.DeptLocation != null ? (details.DeptLocation.DeptLocationID > 0 ? details.DeptLocation.DeptLocationID : 0) : 0)),
                        new XElement("MedicalInstructionDate", details.MedicalInstructionDate != null && details.MedicalInstructionDate.HasValue ? details.MedicalInstructionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                        new XElement("DiscountAmt", details.DiscountAmt),
                        new XElement("DoctorStaffID", (details.DoctorStaff != null && details.DoctorStaff.StaffID > 0) ? details.DoctorStaff.StaffID : 0),
                        new XElement("AllowDayBetweenExams", details.PCLExamType == null ? (int?)null : details.PCLExamType.AllowDayBetweenExams)
                        //▼====: #096
                        , new XElement("UserOfficialAccountID", details.UserOfficialAccountID)
                        //▲====: #096
                        //▼====: #103
                        , new XElement("OtherAmt", details.OtherAmt)
                        , new XElement("IsCountPatientCOVID", details.IsCountPatientCOVID)
                        //▲====: #103
                        //▼====: #132
                        , new XElement("IsCountSE", details.IsCountSE)
                        //▲====: #132
                        )));
            return xmlDocument;

        }

        /***********/
        public XDocument ConvertOutwardDrugInvoicesToXml(IEnumerable<OutwardDrugInvoice> items)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                       new XElement("OutwardDrugInvoices",
                       from inv in items
                       select new XElement("OutwardDrugInvoice",
                           new XElement("outiID", inv.outiID),
                           new XElement("PatientID", inv.SelectedPrescription != null ? inv.SelectedPrescription.PatientID : 0),
                           new XElement("OutInvID", inv.OutInvID),
                           new XElement("OutInvoiceNumber", inv.OutInvoiceNumber),
                           new XElement("StoreID", inv.SelectedStorage != null ? inv.SelectedStorage.StoreID : inv.StoreID.GetValueOrDefault(0)),
                           new XElement("StaffID", inv.SelectedStaff != null ? inv.SelectedStaff.StaffID : inv.StaffID.GetValueOrDefault(0)),
                           new XElement("ReturnID", inv.ReturnID),
                           new XElement("TypID", inv.TypID),
                           new XElement("PrescriptID", inv.PrescriptID),
                           new XElement("V_OutDrugInvStatus", inv.V_OutDrugInvStatus),
                           new XElement("IssueID", inv.IssueID),
                           new XElement("OutDate", inv.OutDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                           new XElement("IsHICount", inv.IsHICount),
                           new XElement("Notes", inv.Notes),
                           new XElement("ColectDrugSeqNum", inv.ColectDrugSeqNum),
                           new XElement("ColectDrugSeqNumType", inv.ColectDrugSeqNumType),
                           new XElement("PaidTime", inv.PaidTime.HasValue ? inv.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                           new XElement("RefundTime", inv.RefundTime.HasValue ? inv.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : ""),
                           new XElement("PaidStaffID", inv.PaidStaffID),
                           new XElement("RecordState", inv.RecordState),
                           /*==== #004 ====*/
                           new XElement("IsOutHIPt", inv.IsOutHIPt),
                           new XElement("V_TradingPlaces", inv.V_TradingPlaces),
                           /*==== #004 ====*/
                           new XElement("ModFromOutiID", inv.ModFromOutiID),
                               new XElement("OutwardDrugs",
                               from outwarddrug in inv.OutwardDrugs
                               select new XElement("OutwardDrug",
                                    new XElement("OutID", outwarddrug.OutID),
                                    new XElement("DrugID", outwarddrug.DrugID),
                                    new XElement("InID", outwarddrug.InID),
                                    new XElement("HIBenefit", outwarddrug.HIBenefit),
                                    new XElement("HiApplied", outwarddrug.HiApplied),
                                    new XElement("OutPrice", outwarddrug.InvoicePrice),//don gia ban
                                    new XElement("OutQuantity", outwarddrug.Qty),//so luong ban
                                    new XElement("OutQuantityReturn", outwarddrug.OutQuantityReturn),//so luong ban
                                    new XElement("Qty", outwarddrug.QtyOffer),//so luong bs ra toa
                                    new XElement("OutHIRebate", outwarddrug.TotalHIPayment),//tong tien bao hiem chiu tra
                                    new XElement("OutPriceDifference", outwarddrug.PriceDifference),//lech gia
                                    new XElement("OutHIAllowedPrice", outwarddrug.HIAllowedPrice),//bao hiem quy dinh gia cho thuoc nay
                                    new XElement("OutAmount", outwarddrug.TotalInvoicePrice),//tong tien
                                    new XElement("OutAmountCoPay", outwarddrug.TotalCoPayment),//tong tien BH dong chi tra
                                    new XElement("OutNotes", outwarddrug.OutNotes),
                                    new XElement("RecordState", outwarddrug.RecordState),
                                    new XElement("HIPaymentPercent", outwarddrug.HIPaymentPercent),
                                    new XElement("DrugVersionID", outwarddrug.DrugVersionID),
                                    new XElement("MDoseStr", outwarddrug.PrescriptionDetailObj != null ? outwarddrug.PrescriptionDetailObj.MDoseStr : ""),
                                    new XElement("EDoseStr", outwarddrug.PrescriptionDetailObj != null ? outwarddrug.PrescriptionDetailObj.EDoseStr : ""),
                                    new XElement("ADoseStr", outwarddrug.PrescriptionDetailObj != null ? outwarddrug.PrescriptionDetailObj.ADoseStr : ""),
                                    new XElement("NDoseStr", outwarddrug.PrescriptionDetailObj != null ? outwarddrug.PrescriptionDetailObj.NDoseStr : ""),
                                    new XElement("UnitName", outwarddrug.PrescriptionDetailObj != null ? outwarddrug.PrescriptionDetailObj.UnitName : "")
                                ))
                           )));
            return xmlDocument;
        }

        public XElement ConvertOutwardDrugClinicDeptInvoicesToXmlElement(IEnumerable<OutwardDrugClinicDeptInvoice> items)
        {
            if (items == null)
                return null;
            var root = new XElement("OutwardDrugClinicDeptInvoices");
            foreach (var outwardDrugClinicDeptInvoice in items)
            {
                root.Add(ConvertOutwardDrugClinicDeptInvoiceToXmlElement(outwardDrugClinicDeptInvoice));
            }
            return root;
        }

        public XElement ConvertOutwardDrugClinicDeptInvoiceToXmlElement(OutwardDrugClinicDeptInvoice inv)
        {
            var root = new XElement("OutwardDrugClinicDeptInvoice",
                           new XElement("outiID", inv.outiID),
                           new XElement("PtRegistrationID", inv.PtRegistrationID),
                           new XElement("IMEID", inv.IMEID),
                           new XElement("HITTypeID", inv.HITTypeID),
                           new XElement("StoreID", inv.SelectedStorage != null ? inv.SelectedStorage.StoreID : inv.StoreID.GetValueOrDefault(0)),
                           new XElement("MSCID", inv.MSCID),
                           new XElement("StaffID", inv.SelectedStaff != null ? inv.SelectedStaff.StaffID : inv.StaffID.GetValueOrDefault(0)),
                           new XElement("TypID", inv.TypID),
                           new XElement("OutInvID", inv.OutInvID),
                           new XElement("V_OutDrugInvStatus", null),
                           new XElement("OutInvoiceNumber", inv.OutInvoiceNumber),
                           new XElement("OutDate", inv.OutDate.GetValueOrDefault(DateTime.Now).ToString("yyyy-MM-dd HH:mm:ss.fff")),
                           new XElement("IsCommitted", inv.IsCommitted),
                           new XElement("IssueID", inv.IssueID),
                           new XElement("ReturnID", inv.ReturnID),
                           new XElement("V_MedProductType", (long)inv.MedProductType),
                           new XElement("Confirmed", inv.Confirmed),
                           new XElement("InPatientBillingInvID", inv.InPatientBillingInvID),
                           new XElement("PaidTime", inv.PaidTime.HasValue ? inv.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                           new XElement("RefundTime", inv.RefundTime.HasValue ? inv.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : ""),
                           new XElement("ClinicDeptStockTakeID", null),
                           new XElement("V_OutputTo", null),
                           new XElement("OutputToID", null),
                           new XElement("CheckedPoint", null),
                           new XElement("RecordState", inv.RecordState)
                            //▼====: #103
                            , new XElement("OtherAmt", inv.OtherAmt)
                            , new XElement("IsCountPatientCOVID", inv.IsCountPatientCOVID)
                           //▲====: #103
                           );
            if (inv.OutwardDrugClinicDepts != null && inv.OutwardDrugClinicDepts.Count > 0)
            {
                var drugs = new XElement("OutwardDrugClinicDepts");
                foreach (var outwardDrugClinicDept in inv.OutwardDrugClinicDepts)
                {
                    drugs.Add(ConvertOutwardDrugClinicDeptToXmlElement(outwardDrugClinicDept));
                }
                root.Add(drugs);
            }
            return root;
        }

        public XElement ConvertOutwardDrugClinicDeptToXmlElement(OutwardDrugClinicDept drugClinic)
        {
            var root = new XElement("OutwardDrugClinicDept",
                        new XElement("OutID", drugClinic.OutID),
                        new XElement("outiID", drugClinic.outiID),
                        new XElement("GenMedProductID", drugClinic.GenMedProductItem != null ? drugClinic.GenMedProductItem.GenMedProductID : drugClinic.GenMedProductID),
                        new XElement("InID", drugClinic.InID),
                        new XElement("HIBenefit", drugClinic.HIBenefit),
                        new XElement("HisID", drugClinic.HisID),
                        new XElement("HiApplied", drugClinic.HiApplied),
                        new XElement("OutQuantity", drugClinic.OutQuantity),
                        new XElement("OutPrice", drugClinic.InvoicePrice),//KMx: Sửa lại cho giống với DV, CLS (13/12/2014 10:29).
                        new XElement("OutNotes", drugClinic.OutNotes),
                        new XElement("OutAmount", drugClinic.TotalInvoicePrice),//KMx: Comment như trên.
                        new XElement("OutPriceDifference", drugClinic.TotalPriceDifference),//KMx: Comment như trên.
                        new XElement("OutAmountCoPay", drugClinic.TotalCoPayment),//KMx: Comment như trên.
                        new XElement("OutHIRebate", drugClinic.TotalHIPayment),//KMx: Comment như trên.
                        new XElement("Qty", drugClinic.Qty),
                        new XElement("HIAllowedPrice", drugClinic.HIAllowedPrice),
                        new XElement("QtyReturn", drugClinic.QtyReturn),
                        new XElement("RecordState", drugClinic.RecordState),
                        new XElement("IsCountHI", drugClinic.IsCountHI),
                        new XElement("IsCountPatient", drugClinic.IsCountPatient),
                        new XElement("IsInPackage", drugClinic.IsInPackage),
                        new XElement("MaxQtyHIAllowItem", drugClinic.GenMedProductItem != null ? drugClinic.GenMedProductItem.MaxQtyHIAllowItem : null),
                        new XElement("PaymentRateOfHIAddedItem", drugClinic.GenMedProductItem != null ? drugClinic.GenMedProductItem.PaymentRateOfHIAddedItem : null),
                        new XElement("HIPaymentPercent", drugClinic.HIPaymentPercent),
                        new XElement("CountValue", drugClinic.CountValue),
                        new XElement("GenMedVersionID", drugClinic.GenMedVersionID),
                        new XElement("RefundTime", drugClinic.RefundTime)
                        //▼====: #103
                        , new XElement("OtherAmt", drugClinic.OtherAmt)
                        , new XElement("IsCountPatientCOVID", drugClinic.IsCountPatientCOVID)
                        //▲====: #103
                        //▼====: #132
                        , new XElement("IsCountSE", drugClinic.IsCountSE)
                        //▲====: #132
                 );
            return root;
        }


        //public XElement ConvertOutwardDrugClinicDeptToXmlElement(OutwardDrugClinicDept drugClinic)
        //{
        //    var root = new XElement("OutwardDrugClinicDept",
        //                new XElement("OutID", drugClinic.OutID),
        //                   new XElement("outiID", drugClinic.outiID),
        //                   new XElement("GenMedProductID", drugClinic.GenMedProductItem != null ? drugClinic.GenMedProductItem.GenMedProductID : drugClinic.GenMedProductID),
        //                   new XElement("InID", drugClinic.InID),
        //                   new XElement("HIBenefit", drugClinic.HIBenefit),
        //                   new XElement("HisID", drugClinic.HisID),
        //                   new XElement("HiApplied", drugClinic.HiApplied),
        //                   new XElement("OutQuantity", drugClinic.OutQuantity),
        //                   new XElement("OutPrice", drugClinic.OutPrice),
        //                   new XElement("OutNotes", drugClinic.OutNotes),
        //                   new XElement("OutAmount", drugClinic.OutAmount),
        //                   new XElement("OutPriceDifference", drugClinic.OutPriceDifference),
        //                   new XElement("OutAmountCoPay", drugClinic.OutAmountCoPay),
        //                   new XElement("OutHIRebate", drugClinic.OutHIRebate),
        //                   new XElement("Qty", drugClinic.Qty),
        //                   new XElement("HIAllowedPrice", drugClinic.HIAllowedPrice),
        //                   new XElement("QtyReturn", drugClinic.QtyReturn),
        //                   new XElement("RecordState", drugClinic.RecordState),
        //                   new XElement("IsCountHI", drugClinic.IsCountHI),
        //                    new XElement("IsCountPatient", drugClinic.IsCountPatient)
        //                   );
        //    return root;
        //}

        public XDocument ConvertBillingInvoicesToXml(IEnumerable<InPatientBillingInvoice> items, long medicalRecordID, bool aIsHasItem = true)
        {
            if (items == null)
                return null;
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"));
            var root = new XElement("InPatientBillingInvoices");
            xmlDocument.Add(root);
            foreach (var inPatientBillingInvoice in items)
            {
                root.Add(ConvertBillingInvoiceToXmlElement(inPatientBillingInvoice, medicalRecordID, aIsHasItem));
            }
            return xmlDocument;
        }
        public XElement ConvertBillingInvoiceToXmlElement(InPatientBillingInvoice billingInvoice, long medicalRecordID, bool aIsHasItem = true)
        {
            // TxD 12/05/2015: New Field DeptLocationID added to InPatientBillingInvoice mainly to serve USIC-CC department
            var root = new XElement("InPatientBillingInvoice",
                           new XElement("InPatientBillingInvID", billingInvoice.InPatientBillingInvID),
                           new XElement("BillingInvNum", billingInvoice.BillingInvNum),
                           new XElement("PtRegistrationID", billingInvoice.PtRegistrationID),
                           new XElement("DeptID", billingInvoice.DeptID),
                           new XElement("DeptLocationID", billingInvoice.DeptLocationID),
                           new XElement("TranFinalizationID", null),
                           new XElement("StaffID", billingInvoice.StaffID),
                           new XElement("InvDate", billingInvoice.InvDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                           new XElement("V_BillingInvType", (long)billingInvoice.V_BillingInvType),
                           new XElement("V_InPatientBillingInvStatus", (long)billingInvoice.V_InPatientBillingInvStatus),
                           new XElement("PaidTime", billingInvoice.PaidTime.HasValue ? billingInvoice.PaidTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                           new XElement("RefundTime", billingInvoice.RefundTime.HasValue ? billingInvoice.RefundTime.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : ""),
                           new XElement("RecordState", billingInvoice.RecordState),
                           new XElement("BillFromDate", billingInvoice.BillFromDate.HasValue ? billingInvoice.BillFromDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                           new XElement("BillToDate", billingInvoice.BillToDate.HasValue ? billingInvoice.BillToDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") : null),
                           new XElement("IsHighTechServiceBill", billingInvoice.IsHighTechServiceBill),
                           new XElement("NotApplyMaxHIPay", billingInvoice.NotApplyMaxHIPay),
                           new XElement("V_TreatmentTypeBill", billingInvoice.V_TreatmentTypeBill),
                           new XElement("IsAdditionalFee", billingInvoice.IsAdditionalFee),
                           new XElement("HIBenefit", billingInvoice.HIBenefit),
                           new XElement("IsHICard_FiveYearsCont_NoPaid", billingInvoice.IsHICard_FiveYearsCont_NoPaid)
                           );
            if (!aIsHasItem)
            {
                return root;
            }
            if (billingInvoice.RegistrationDetails != null)
            {
                root.Add(ConvertPatientRegistrationDetailsToXmlElement(billingInvoice.RegistrationDetails));
            }
            if (billingInvoice.PclRequests != null)
            {
                root.Add(ConvertPCLRequestToXmlElement(billingInvoice.PclRequests, medicalRecordID));
            }
            if (billingInvoice.OutwardDrugClinicDeptInvoices != null)
            {
                root.Add(ConvertOutwardDrugClinicDeptInvoicesToXmlElement(billingInvoice.OutwardDrugClinicDeptInvoices));
            }
            return root;
        }

        public XElement ConvertMedicalInstructionToXmlElement(InPatientInstruction inPtInstruction)
        {
            // TxD 12/05/2015: New Field DeptLocationID added to InPatientBillingInvoice mainly to serve USIC-CC department
            var root = new XElement("InPatientInstruction",
                new XElement("IntPtDiagDrInstructionID", inPtInstruction.IntPtDiagDrInstructionID),
                new XElement("DeptLocationID", inPtInstruction.LocationInDept != null ? inPtInstruction.LocationInDept.DeptLocationID : 0),
                new XElement("InstructionDate", inPtInstruction.InstructionDate.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                new XElement("StaffID", inPtInstruction.Staff != null ? inPtInstruction.Staff.StaffID : 0),
                new XElement("DoctorStaffID", inPtInstruction.DoctorStaff != null ? inPtInstruction.DoctorStaff.StaffID : 0),
                new XElement("PulseAndBloodPressure", inPtInstruction.PulseAndBloodPressure),
                new XElement("SpO2", inPtInstruction.SpO2),
                new XElement("Temperature", inPtInstruction.Temperature),
                new XElement("Sense", inPtInstruction.Sense),
                new XElement("BloodSugar", inPtInstruction.BloodSugar),
                new XElement("Urine", inPtInstruction.Urine),
                new XElement("ECG", inPtInstruction.ECG),
                new XElement("PhysicalExamOther", inPtInstruction.PhysicalExamOther),
                new XElement("Diet", inPtInstruction.Diet),
                new XElement("LevelCare", inPtInstruction.LevelCare),
                new XElement("InPatientDeptDetailID", inPtInstruction.InPatientDeptDetailID),
                new XElement("BedPatientID", inPtInstruction.BedPatientID),
                new XElement("InstructionOther", inPtInstruction.InstructionOther),
                //▼==== #131
                new XElement("RespiratoryRate", inPtInstruction.RespiratoryRate)
                //▲==== #131
            );
            if (inPtInstruction.RegistrationDetails != null)
            {
                root.Add(ConvertPatientRegistrationDetailsToXmlElement(inPtInstruction.RegistrationDetails));
            }
            if (inPtInstruction.PclRequests != null)
            {
                root.Add(ConvertPCLRequestToXmlElement(inPtInstruction.PclRequests, 0));
            }
            return root;
        }
        //==== #001
        public XDocument ConvertBillingInvoicesToXml(IEnumerable<Intravenous> items)
        {
            if (items == null)
                return null;
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"));
            var root = new XElement("IntravenousList");
            xmlDocument.Add(root);
            foreach (var inPatientBillingInvoice in items)
            {
                root.Add(ConvertPCLRequestToXmlElement(inPatientBillingInvoice));
            }
            return xmlDocument;
        }
        public XElement ConvertPCLRequestToXmlElement(Intravenous items)
        {
            var root = new XElement("Intravenous",
                           new XElement("IntravenousID", items.IntravenousID),
                           new XElement("V_InfusionType", items.V_InfusionType.LookupID),
                           new XElement("V_InfusionProcessType", items.V_InfusionProcessType.LookupID),
                           new XElement("FlowRate", items.FlowRate),
                           new XElement("InfusionTime", items.InfusionTime),
                           new XElement("NumOfTimes", items.NumOfTimes),
                           new XElement("TimeInterval", items.TimeInterval),
                           new XElement("V_TimeIntervalUnit", items.V_TimeIntervalUnit.LookupID),
                           new XElement("StartDateTime", items.StartDateTime.HasValue && items.StartDateTime.Value > new DateTime(2000, 1, 1) ? items.StartDateTime.Value.ToString("yyyy-MM-dd HH:mm:ss") : ""),
                           new XElement("StopDateTime", items.StopDateTime.HasValue && items.StopDateTime.Value > new DateTime(2000, 1, 1) ? items.StopDateTime.Value.ToString("yyyy-MM-dd HH:mm:ss") : ""),
                           //IntravenousDetails element
                           from details in items.IntravenousDetails
                           select new XElement("IntravenousDetails",
                               new XElement("ReqDrugInClinicDeptID", details.ReqDrugInClinicDeptID),
                               new XElement("GenMedProductID", details.GenMedProductID),
                               new XElement("ReqQty", details.ReqQty),
                               new XElement("ApprovedQty", details.ApprovedQty),
                               new XElement("PrescribedQty", details.PrescribedQty),
                               new XElement("ItemVerfStat", details.ItemVerfStat),
                               new XElement("StaffID", details.StaffID),
                               new XElement("IntravenousPlan_InPtID", details.IntravenousPlan_InPtID),
                               new XElement("IntPtDiagDrInstructionID", details.IntPtDiagDrInstructionID),
                               new XElement("Notes", details.Notes),
                               new XElement("OutClinicDeptReqID", details.OutClinicDeptReqID),
                               new XElement("AntibioticOrdinal", details.AntibioticOrdinal),
                               new XElement("V_InstructionOrdinalType", details.RefGenericDrugDetail == null ? (long?)null : details.RefGenericDrugDetail.V_InstructionOrdinalType),
                               new XElement("MinDayOrdinalContinueIsAllowable", details.RefGenericDrugDetail == null ? (Int16?)null : details.RefGenericDrugDetail.MinDayOrdinalContinueIsAllowable)
                            )
                           );
            return root;
        }
        //==== #001
        public string ConvertReqOutwardDetailsListToXml(IEnumerable<ReqOutwardDrugClinicDeptPatient> items)
        {
            if (items != null)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<RequestDetails>");
                foreach (ReqOutwardDrugClinicDeptPatient details in items)
                {
                    int EntityState = (int)details.EntityState;
                    sb.Append("<RecInfo>");

                    sb.AppendFormat("<OutClinicDeptReqID>{0}</OutClinicDeptReqID>", details.OutClinicDeptReqID);
                    sb.AppendFormat("<ReqDrugInClinicDeptID>{0}</ReqDrugInClinicDeptID>", details.ReqDrugInClinicDeptID);
                    sb.AppendFormat("<GenMedProductID>{0}</GenMedProductID>", details.GenMedProductID);
                    sb.AppendFormat("<PrescribedQty>{0}</PrescribedQty>", details.PrescribedQty);
                    sb.AppendFormat("<ReqQty>{0}</ReqQty>", details.ReqQty > 0 ? details.ReqQty : details.PrescribedQty);
                    sb.AppendFormat("<ApprovedQty>{0}</ApprovedQty>", details.ApprovedQty);
                    sb.AppendFormat("<Notes>{0}</Notes>", details.Notes);
                    sb.AppendFormat("<ApprovedNotes>{0}</ApprovedNotes>", details.ApprovedNotes);
                    sb.AppendFormat("<StaffID>{0}</StaffID>", details.StaffID.GetValueOrDefault(0));
                    sb.AppendFormat("<DateTimeSelection>{0}</DateTimeSelection>", details.DateTimeSelection.ToString("dd-MM-yyyy HH:mm:ss"));
                    sb.AppendFormat("<ItemVerfStat>{0}</ItemVerfStat>", details.ItemVerfStat.ToString());
                    if (details.CurPatientRegistration != null)
                    {
                        sb.AppendFormat("<PtRegistrationID>{0}</PtRegistrationID>", details.CurPatientRegistration.PtRegistrationID);
                    }
                    else
                    {
                        sb.AppendFormat("<PtRegistrationID>{0}</PtRegistrationID>", 0);
                    }

                    sb.AppendFormat("<MDose>{0}</MDose>", details.MDose);
                    sb.AppendFormat("<ADose>{0}</ADose>", details.ADose);
                    sb.AppendFormat("<EDose>{0}</EDose>", details.EDose);
                    sb.AppendFormat("<NDose>{0}</NDose>", details.NDose);

                    sb.AppendFormat("<MDoseStr>{0}</MDoseStr>", details.MDoseStr);
                    sb.AppendFormat("<ADoseStr>{0}</ADoseStr>", details.ADoseStr);
                    sb.AppendFormat("<EDoseStr>{0}</EDoseStr>", details.EDoseStr);
                    sb.AppendFormat("<NDoseStr>{0}</NDoseStr>", details.NDoseStr);

                    sb.AppendFormat("<DoctorStaffID>{0}</DoctorStaffID>", details.DoctorStaff != null ? details.DoctorStaff.StaffID : 0);
                    sb.AppendFormat("<MedicalInstructionDate>{0}</MedicalInstructionDate>", details.MedicalInstructionDate);

                    sb.AppendFormat("<EntityState>{0}</EntityState>", EntityState);
                    sb.AppendFormat("<IsDeleted>{0}</IsDeleted>", details.IsDeleted);
                    sb.AppendFormat("<AntibioticTreatmentID>{0}</AntibioticTreatmentID>", details.CurrentAntibioticTreatment == null ? (long?)null : details.CurrentAntibioticTreatment.AntibioticTreatmentID);
                    sb.AppendFormat("<AntibioticOrdinal>{0}</AntibioticOrdinal>", details.AntibioticOrdinal);
                    sb.AppendFormat("<V_InstructionOrdinalType>{0}</V_InstructionOrdinalType>", details.RefGenericDrugDetail == null ? (long?)null : details.RefGenericDrugDetail.V_InstructionOrdinalType);
                    sb.AppendFormat("<MinDayOrdinalContinueIsAllowable>{0}</MinDayOrdinalContinueIsAllowable>", details.RefGenericDrugDetail == null ? (Int16?)null : details.RefGenericDrugDetail.MinDayOrdinalContinueIsAllowable);
                    sb.AppendFormat("<UsageDistance>{0}</UsageDistance>", details.UsageDistance);
                    sb.AppendFormat("<V_RouteOfAdministration>{0}</V_RouteOfAdministration>", details.V_RouteOfAdministration);
                    sb.AppendFormat("<TransferRate>{0}</TransferRate>", details.TransferRate);
                    sb.AppendFormat("<V_TransferRateUnit>{0}</V_TransferRateUnit>", details.V_TransferRateUnit);
                    //sb.AppendFormat("<IsDone>{0}</IsDone>", details.IsDone);
                    sb.Append("</RecInfo>");
                }
                sb.Append("</RequestDetails>");
                return sb.ToString();
            }
            else
            {
                return null;
            }
        }

        protected virtual PrescriptionDetailSchedules GetPrescriptionDetailSchedulesFromReader(IDataReader reader)
        {
            var p = new PrescriptionDetailSchedules
            {
                PrescriptDetailScheduleID = (long)reader["PrescriptDetailScheduleID"],
                PrescriptDetailID = (long)reader["PrescriptDetailID"],
                V_PeriodOfDay = (long)reader["V_PeriodOfDay"],
                Monday = reader["Monday"] as Single?,
                Tuesday = reader["Tuesday"] as Single?,
                Wednesday = reader["Wednesday"] as Single?,
                Thursday = reader["Thursday"] as Single?,
                Friday = reader["Friday"] as Single?,
                Saturday = reader["Saturday"] as Single?,
                Sunday = reader["Sunday"] as Single?,
                UsageNote = reader["UsageNote"] == null ? "" : reader["UsageNote"].ToString().Trim()
            };
            if (reader.HasColumn("MondayStr") && reader["MondayStr"] != DBNull.Value)
            {
                p.ScheMonday = new PrescriptionDetailSchedulesLieuDung(reader["MondayStr"].ToString());
            }

            if (reader.HasColumn("TuesdayStr") && reader["TuesdayStr"] != DBNull.Value)
            {
                p.ScheTuesday = new PrescriptionDetailSchedulesLieuDung(reader["TuesdayStr"].ToString());
            }

            if (reader.HasColumn("WednesdayStr") && reader["WednesdayStr"] != DBNull.Value)
            {
                p.ScheWednesday = new PrescriptionDetailSchedulesLieuDung(reader["WednesdayStr"].ToString());
            }

            if (reader.HasColumn("ThursdayStr") && reader["ThursdayStr"] != DBNull.Value)
            {
                p.ScheThursday = new PrescriptionDetailSchedulesLieuDung(reader["ThursdayStr"].ToString());
            }

            if (reader.HasColumn("FridayStr") && reader["FridayStr"] != DBNull.Value)
            {
                p.ScheFriday = new PrescriptionDetailSchedulesLieuDung(reader["FridayStr"].ToString());
            }

            if (reader.HasColumn("SaturdayStr") && reader["SaturdayStr"] != DBNull.Value)
            {
                p.ScheSaturday = new PrescriptionDetailSchedulesLieuDung(reader["SaturdayStr"].ToString());
            }

            if (reader.HasColumn("SundayStr") && reader["SundayStr"] != DBNull.Value)
            {
                p.ScheSunday = new PrescriptionDetailSchedulesLieuDung(reader["SundayStr"].ToString());
            }


            try
            {
                p.ObjV_PeriodOfDay = GetLookupFromReader(reader);
            }
            catch
            {
                p.ObjV_PeriodOfDay = null;
            }

            return p;
        }
        protected virtual List<PrescriptionDetailSchedules> GetPrescriptionDetailSchedulesColectionFromReader(IDataReader reader)
        {
            var p = new List<PrescriptionDetailSchedules>();
            while (reader.Read())
            {
                p.Add(GetPrescriptionDetailSchedulesFromReader(reader));
            }
            return p;
        }

        protected virtual AxServerConfigSection GetConfigSectionFromReader(IDataReader reader)
        {
            var p = new AxServerConfigSection();
            int nCnt = 0;
            while (reader.Read())
            {
                var key = (string)reader["ConfigItemKey"];
                Debug.WriteLine(key);
                var value = (string)reader["ConfigItemValue"];
                ++nCnt;
                SetValueForServerConfigSection(p, key, value);
            }
            return p;
        }
        private void SetValueForServerConfigSection(AxServerConfigSection setting, string key, string value)
        {
            switch (key)
            {
                //▼====: #044
                case "ShowInCostInInternalInwardPharmacy":
                    setting.CommonItems.ShowInCostInInternalInwardPharmacy = bool.Parse(value);
                    break;
                //▲====: #044
                //Cau hinh cho benh vien
                case "HospitalCode":
                    setting.Hospitals.HospitalCode = value;
                    break;
                case "HosLogoImagePath":
                    setting.Hospitals.LogoImagePath = value;
                    break;

                case "SequenceNumberType_5":
                    setting.Hospitals.SequenceNumberType_5 = value;
                    break;

                case "SequenceNumberType_10":
                    setting.Hospitals.SequenceNumberType_10 = value;
                    break;

                case "SequenceNumberType_25":
                    setting.Hospitals.SequenceNumberType_25 = value;
                    break;

                case "SequenceNumberType_30":
                    setting.Hospitals.SequenceNumberType_30 = value;
                    break;

                case "SequenceNumberType_35":
                    setting.Hospitals.SequenceNumberType_35 = value;
                    break;
                /*▼====: #034*/
                case "PhieuChiDinhPrintingMode":
                    setting.CommonItems.PhieuChiDinhPrintingMode = int.Parse(value);
                    break;
                /*▲====: #034*/
                //▼====: #044
                case "PhieuMienGiamPrintingMode":
                    setting.CommonItems.PhieuMienGiamPrintingMode = int.Parse(value);
                    break;
                //▲====: #044                  
                case "ReceiptPrintingMode":
                    setting.CommonItems.ReceiptPrintingMode = int.Parse(value);
                    break;
                case "ReceiptVersion":
                    setting.CommonItems.ReceiptVersion = int.Parse(value);
                    break;
                case "IsPrintReceiptPatientNoPay":
                    setting.CommonItems.IsPrintReceiptPatientNoPay = bool.Parse(value);
                    break;
                case "IsPrintReceiptHINoPay":
                    setting.CommonItems.IsPrintReceiptHINoPay = bool.Parse(value);
                    break;

                case "ReceiptForEachLocationPrintingMode":
                    setting.CommonItems.ReceiptForEachLocationPrintingMode = int.Parse(value);
                    break;

                case "EditHIBenefit":
                    setting.CommonItems.EditHIBenefit = int.Parse(value);
                    break;

                case "NumberOfCopiesPrescription":
                    setting.CommonItems.NumberOfCopiesPrescription = int.Parse(value);
                    break;

                case "DefaultNumOfCopyPrescriptNormalPT":
                    setting.CommonItems.DefaultNumOfCopyPrescriptNormalPT = int.Parse(value);
                    break;

                case "DefaultNumOfCopyPrescriptHIPT":
                    setting.CommonItems.DefaultNumOfCopyPrescriptHIPT = int.Parse(value);
                    break;

                case "OrganizationUseSoftware":
                    setting.CommonItems.OrganizationUseSoftware = int.Parse(value);
                    break;
                case "OrganizationName":
                    setting.CommonItems.OrganizationName = value;
                    break;
                case "OrganizationAddress":
                    setting.CommonItems.OrganizationAddress = value;
                    break;
                case "OrganizationNotes":
                    setting.CommonItems.OrganizationNotes = value;
                    break;

                case "ShowApptCheck":
                    setting.CommonItems.ShowApptCheck = bool.Parse(value);
                    break;

                case "ShowLoginNameOnReport38":
                    setting.CommonItems.ShowLoginNameOnReport38 = bool.Parse(value);
                    break;

                case "PrintPatientInfoOption":
                    setting.CommonItems.PrintPatientInfoOption = byte.Parse(value);
                    break;

                //Cau hinh cho bao hiem
                case "HIPolicyMinSalary":
                    setting.HealthInsurances.HiPolicyMinSalary = long.Parse(value);
                    break;

                case "HIRebatePercentageLevel1":
                    setting.HealthInsurances.RebatePercentageLevel1 = double.Parse(value);
                    break;
                case "HIRebatePercentage2015Level1_InPt":
                    setting.HealthInsurances.RebatePercentage2015Level1_InPt = double.Parse(value);
                    break;

                case "HIPolicyPercentageOnPayable":
                    setting.HealthInsurances.HiPolicyPercentageOnPayable = float.Parse(value);
                    break;

                case "PaperReferalMaxDays":
                    setting.HealthInsurances.PaperReferalMaxDays = int.Parse(value);
                    break;

                case "SpecialRuleForHIConsultationApplied":
                    setting.HealthInsurances.SpecialRuleForHIConsultationApplied = bool.Parse(value);
                    break;

                case "HIConsultationServiceHIAllowedPrice":
                    setting.HealthInsurances.HIConsultationServiceHIAllowedPrice = double.Parse(value);
                    break;
                case "ValidateApplyingHIBenefit":
                    setting.HealthInsurances.ValidateApplyingHIBenefit = bool.Parse(value);
                    break;
                case "PCLImageStoragePath":
                    setting.Pcls.PclImageStoragePath = value;
                    break;
                case "NetWorkMapDriver":
                    setting.Pcls.NetWorkMapDriver = value;
                    break;
                case "NWMDUser":
                    setting.Pcls.NWMDUser = value;
                    break;
                case "NWMDPass":
                    setting.Pcls.NWMDPass = value;
                    break;
                case "LocalFolderName":
                    setting.Pcls.LocalFolderName = value;
                    break;
                case "RequireDiagnosisForPCLRequest":
                    setting.Pcls.RequireDiagnosisForPCLReq = Convert.ToInt16(value);
                    break;
                case "ImageCaptureFileLocalStorePath":
                    setting.Pcls.ImageCaptureFileLocalStorePath = value;
                    break;
                case "OutstandingServerIP":
                    setting.Servers.OutstandingServerIP = value;
                    break;
                case "OutstandingServerPort":
                    setting.Servers.OutstandingServerPort = long.Parse(value);
                    break;

                case "StaffCatTypeBAC_SI":
                    setting.CommonItems.StaffCatTypeBAC_SI = long.Parse(value);
                    break;

                // TxD 21/05/2014 The followings are newly added to get rid of ConfigList in the Client eHCMSCal
                case "ExcelStorePool":
                    setting.Servers.ExcelStorePool = value;
                    break;
                case "HospitalStatisticsQuarter1":
                    setting.Servers.HospitalStatisticsQuarter1 = value;
                    break;
                case "HospitalStatisticsQuarter2":
                    setting.Servers.HospitalStatisticsQuarter2 = value;
                    break;
                case "HospitalStatisticsQuarter3":
                    setting.Servers.HospitalStatisticsQuarter3 = value;
                    break;
                case "HospitalStatisticsQuarter4":
                    setting.Servers.HospitalStatisticsQuarter4 = value;
                    break;
                case "HospitalStatistics_HRStatistics":
                    setting.Servers.HospitalStatistics_HRStatistics = value;
                    break;
                case "HospitalStatistics_MedExamActivity":
                    setting.Servers.HospitalStatistics_MedExamActivity = value;
                    break;
                case "HospitalStatistics_TreatmentActivity":
                    setting.Servers.HospitalStatistics_TreatmentActivity = value;
                    break;
                case "HospitalStatistics_SpecialistTreatmentActivity":
                    setting.Servers.HospitalStatistics_SpecialistTreatmentActivity = value;
                    break;
                case "HospitalStatistics_SurgeryActivity":
                    setting.Servers.HospitalStatistics_SurgeryActivity = value;
                    break;
                case "HospitalStatistics_ReproductiveHealthActivity":
                    setting.Servers.HospitalStatistics_ReproductiveHealthActivity = value;
                    break;
                case "HospitalStatistics_PCLActivity":
                    setting.Servers.HospitalStatistics_PCLActivity = value;
                    break;
                case "HospitalStatistics_PharmacyDeptStatistics":
                    setting.Servers.HospitalStatistics_PharmacyDeptStatistics = value;
                    break;
                case "HospitalStatistics_MedicalEquipmentStatistics":
                    setting.Servers.HospitalStatistics_MedicalEquipmentStatistics = value;
                    break;
                case "HospitalStatistics_ScientificResearchActivity":
                    setting.Servers.HospitalStatistics_ScientificResearchActivity = value;
                    break;
                case "HospitalStatistics_FinancialActivityTemp1":
                    setting.Servers.HospitalStatistics_FinancialActivityTemp1 = value;
                    break;
                case "HospitalStatistics_FinancialActivityTemp2":
                    setting.Servers.HospitalStatistics_FinancialActivityTemp2 = value;
                    break;
                case "HospitalStatistics_FinancialActivityTemp3":
                    setting.Servers.HospitalStatistics_FinancialActivityTemp3 = value;
                    break;
                case "HospitalStatistics_ICD10Statistics":
                    setting.Servers.HospitalStatistics_ICD10Statistics = value;
                    break;
                case "UseDataAccessLayerProvider":
                    setting.Servers.UseDataAccessLayerProvider = Convert.ToBoolean(value);
                    break;

                case "ShowAddRegisButton":
                    setting.CommonItems.ShowAddRegisButton = Convert.ToBoolean(value);
                    break;
                case "AllowDuplicateMedicalServiceItems":
                    setting.CommonItems.AllowDuplicateMedicalServiceItems = Convert.ToInt16(value);
                    break;
                case "NumberTypePrescriptions_Rule":
                    setting.CommonItems.NumberTypePrescriptions_Rule = Convert.ToInt16(value);
                    break;

                // TxD 31/05/2014 Added ExpRelAndBuildVersion 
                case "ExpRelAndBuildVersion":
                    setting.CommonItems.ExpRelAndBuildVersion = Convert.ToInt32(value);
                    break;

                case "KhoaPhongKham":
                    setting.Hospitals.KhoaPhongKham = Convert.ToInt16(value);
                    break;
                case "FindRegistrationInDays_NgoaiTru":
                    setting.Hospitals.FindRegistrationInDays_NgoaiTru = Convert.ToInt16(value);
                    break;
                case "EffectedDiagHours":
                    setting.Hospitals.EffectedDiagHours = Convert.ToInt16(value);
                    break;
                case "EffectedPCLHours":
                    setting.Hospitals.EffectedPCLHours = Convert.ToInt16(value);
                    break;
                case "EditDiagDays":
                    setting.Hospitals.EditDiagDays = Convert.ToInt16(value);
                    break;
                case "RoomFunction":
                    setting.Hospitals.RoomFunction = Convert.ToInt16(value);
                    break;
                case "LaboRmTp":
                    setting.Hospitals.LaboRmTp = Convert.ToInt16(value);
                    break;
                case "IsConfirmHI":
                    setting.Hospitals.IsConfirmHI = Convert.ToBoolean(value);
                    break;
                case "MinPatientCashAdvance":
                    setting.Hospitals.MinPatientCashAdvance = Convert.ToDouble(value);
                    break;
                case "PCLResourcePool":
                    setting.Hospitals.PCLResourcePool = value;
                    break;
                case "PCLStorePool":
                    setting.Hospitals.PCLStorePool = value;
                    break;
                case "PCLThumbTemp":
                    setting.Hospitals.PCLThumbTemp = value;
                    break;
                case "RegistrationVIP":
                    setting.Hospitals.RegistrationVIP = Convert.ToInt16(value);
                    break;
                case "NeedICD10":
                    setting.Hospitals.NeedICD10 = Convert.ToInt16(value);
                    break;
                case "IsDirectorSignature":
                    setting.Hospitals.IsDirectorSignature = Convert.ToBoolean(value);
                    break;

                case "PharmacyDefaultVATInward":
                    setting.PharmacyElements.PharmacyDefaultVATInward = Convert.ToDouble(value);
                    break;
                case "PharmacyCountMoneyIndependent":
                    setting.PharmacyElements.PharmacyCountMoneyIndependent = Convert.ToInt16(value);
                    break;
                case "AllowedPharmacyChangeHIPrescript":
                    setting.PharmacyElements.AllowedPharmacyChangeHIPrescript = Convert.ToInt16(value);
                    break;
                case "AllowTimeUpdateOutInvoice":
                    setting.PharmacyElements.AllowTimeUpdateOutInvoice = Convert.ToInt16(value);
                    break;
                case "OnlyRoundResultForOutward":
                    setting.PharmacyElements.OnlyRoundResultForOutward = Convert.ToBoolean(value);
                    break;
                case "HIStorageID":
                    setting.PharmacyElements.HIStorageID = Convert.ToInt16(value);
                    break;
                case "CalForPriceProfitScale":
                    setting.PharmacyElements.CalForPriceProfitScale = Convert.ToBoolean(value);
                    break;
                //KMx: Cấu hình cho Khoa Dược.
                case "AutoCreateMedCode":
                    setting.MedDeptElements.AutoCreateMedCode = Convert.ToBoolean(value);
                    break;

                case "MedDeptCanGetCash":
                    setting.MedDeptElements.MedDeptCanGetCash = Convert.ToBoolean(value);
                    break;

                case "PrefixCodeMedical":
                    setting.MedDeptElements.PrefixCodeMedical = value;
                    break;

                case "PrefixCodeMachine":
                    setting.MedDeptElements.PrefixCodeMachine = value;
                    break;

                case "PrefixCodeChemical":
                    setting.MedDeptElements.PrefixCodeChemical = value;
                    break;
                /*▼====: #017*/
                case "IntravenousCatID":
                    setting.MedDeptElements.IntravenousCatID = long.Parse(value);
                    break;
                /*▲====: #017*/
                case "CalForPriceProfitScale_DrugDept":
                    setting.MedDeptElements.CalForPriceProfitScale_DrugDept = Convert.ToBoolean(value);
                    break;
                //KMx: Cấu hình cho kho nội trú
                case "UpdateOutwardToPatientNew":
                    setting.ClinicDeptElements.UpdateOutwardToPatientNew = Convert.ToBoolean(value);
                    break;

                case "RequireDoctorAndDateForMed":
                    setting.ClinicDeptElements.RequireDoctorAndDateForMed = Convert.ToBoolean(value);
                    break;

                case "RequireDoctorAndDateForMat":
                    setting.ClinicDeptElements.RequireDoctorAndDateForMat = Convert.ToBoolean(value);
                    break;

                case "RequireDoctorAndDateForLab":
                    setting.ClinicDeptElements.RequireDoctorAndDateForLab = Convert.ToBoolean(value);
                    break;

                //KMx: Cấu hình cho đăng ký ngoại trú.
                case "AssignSequenceNumberManually":
                    setting.OutRegisElements.AssignSequenceNumberManually = Convert.ToBoolean(value);
                    break;
                case "AllowToChooseTypeOf01Form":
                    setting.OutRegisElements.AllowToChooseTypeOf01Form = Convert.ToBoolean(value);
                    break;
                case "MaxNumberOfServicesAllowForOutPatient":
                    setting.OutRegisElements.MaxNumberOfServicesAllowForOutPatient = Convert.ToInt16(value);
                    break;

                //KMx: Cấu hình cho đăng ký nội trú.
                case "AddMedProductToBillDirectly":
                    setting.InRegisElements.AddMedProductToBillDirectly = Convert.ToBoolean(value);
                    break;

                case "OnlyInsertToCashAdvance":
                    setting.InRegisElements.OnlyInsertToCashAdvance = Convert.ToBoolean(value);
                    break;

                //KMx: Cấu hình cho khám bệnh (29/08/2014 09:41).
                case "DefSearchByGenericName":
                    setting.ConsultationElements.DefSearchByGenericName = Convert.ToBoolean(value);
                    break;
                case "AllowToUpdateDiagnosisIntoPCLReq":
                    setting.ConsultationElements.AllowToUpdateDiagnosisIntoPCLReq = Convert.ToBoolean(value);
                    break;
                case "Apply15HIPercent":
                    setting.HealthInsurances.Apply15HIPercent = Convert.ToInt16(value);
                    break;
                case "RebatePercentageLevel1":
                    setting.HealthInsurances.RebatePercentageLevel1 = Convert.ToDouble(value);
                    break;
                case "RefundOrCancelCashReceipt":
                    setting.CommonItems.RefundOrCancelCashReceipt = Convert.ToInt16(value);
                    break;
                case "PharmacyMaxDaysHIRebate_NgoaiTru":
                    setting.HealthInsurances.PharmacyMaxDaysHIRebate_NgoaiTru = Convert.ToInt16(value);
                    break;
                case "PharmacyMaxDaysHIRebate_NoiTru":
                    setting.HealthInsurances.PharmacyMaxDaysHIRebate_NoiTru = Convert.ToInt16(value);
                    break;
                case "DifferenceDayPrecriptHI":
                    setting.HealthInsurances.DifferenceDayPrecriptHI = Convert.ToInt16(value);
                    break;
                case "DifferenceDayRegistrationHI":
                    setting.HealthInsurances.DifferenceDayRegistrationHI = Convert.ToInt16(value);
                    break;
                case "MaxDaySellPrescriptInsurance":
                    setting.HealthInsurances.MaxDaySellPrescriptInsurance = Convert.ToInt16(value);
                    break;
                case "ApplyHINewRule20150101":
                    setting.HealthInsurances.ApplyHINewRule20150101 = Convert.ToBoolean(value);
                    break;
                //Huyen: áp dụng luật bảo hiểm mới tháng 07/2015
                case "ApplyHINew_Report20150701":
                    setting.HealthInsurances.ApplyHINew_Report20150701 = Convert.ToBoolean(value);
                    break;
                //Huyen
                case "IsCheckHICodeInPaperReferal":
                    setting.HealthInsurances.IsCheckHICodeInPaperReferal = Convert.ToBoolean(value);
                    break;
                case "CheckAddressInHealthInsurance":
                    setting.HealthInsurances.CheckAddressInHealthInsurance = Convert.ToBoolean(value);
                    break;
                case "AllowOutPtCrossRegion":
                    setting.HealthInsurances.AllowOutPtCrossRegion = Convert.ToBoolean(value);
                    break;
                case "AllowInPtCrossRegion":
                    setting.HealthInsurances.AllowInPtCrossRegion = Convert.ToBoolean(value);
                    break;
                case "CalcHIBenefitBaseOnPatientClassType":
                    setting.HealthInsurances.CalcHIBenefitBaseOnPatientClassType = Convert.ToBoolean(value);
                    break;

                case "DischargeInPtWith2Steps":
                    setting.InRegisElements.DischargeInPtWith2Steps = Convert.ToBoolean(value);
                    break;

                case "ExcludeDeptAAndB":
                    setting.InRegisElements.ExcludeDeptAAndB = Convert.ToBoolean(value);
                    break;
                case "NumOfDayAllowSaveBillAfterDischarge":
                    setting.InRegisElements.NumOfDayAllowSaveBillAfterDischarge = Convert.ToInt16(value);
                    break;
                //HPT: Thêm trường hợp get giá trị số ngày chờ phục vụ tối đa của đăng ký vãng lai và tiền giải phẫu
                case "NumOfDayAllowPending_CasualReg":
                    setting.InRegisElements.NumOfDayAllowPending_CasualReg = Convert.ToInt16(value);
                    break;
                case "NumOfDayAllowPending_PreOpReg":
                    setting.InRegisElements.NumOfDayAllowPending_PreOpReg = Convert.ToInt16(value);
                    break;
                case "MaxHIPayForHighTechServiceBill":
                    setting.InRegisElements.MaxHIPayForHighTechServiceBill = Convert.ToDecimal(value);
                    break;
                case "CheckToLockReportedRegistration":
                    setting.InRegisElements.CheckToLockReportedRegistration = Convert.ToInt16(value);
                    break;
                case "AllowChildUnder6YearsOldUseHIOverDate":
                    setting.InRegisElements.AllowChildUnder6YearsOldUseHIOverDate = Convert.ToBoolean(value);
                    break;
                case "ShowEmergInPtReExamination":
                    setting.InRegisElements.ShowEmergInPtReExamination = Convert.ToBoolean(value);
                    break;
                case "EmerDeptID":
                    setting.InRegisElements.EmerDeptID = Convert.ToInt16(value);
                    break;
                case "NumOfOverDaysInDischargeForm":
                    setting.InRegisElements.NumOfOverDaysInDischargeForm = Convert.ToInt16(value);
                    break;
                case "CheckDischargeDate":
                    setting.InRegisElements.CheckDischargeDate = Convert.ToBoolean(value);
                    break;
                case "NumOfOverDaysForMedicalInstructDate":
                    setting.InRegisElements.NumOfOverDaysForMedicalInstructDate = Convert.ToInt16(value);
                    break;
                case "CheckMedicalInstructDate":
                    setting.InRegisElements.CheckMedicalInstructDate = Convert.ToBoolean(value);
                    break;
                //20161014 CMN Begin: Add Permit for FileStore
                case "MaxEchogramImageFile":
                    setting.Pcls.MaxEchogramImageFile = Convert.ToInt16(value);
                    break;
                //20161014 CMN End.
                case "Ab_Liver":
                    setting.Pcls.Ab_Liver = value;
                    break;
                case "Ab_Gallbladder":
                    setting.Pcls.Ab_Gallbladder = value;
                    break;
                case "Ab_Pancreas":
                    setting.Pcls.Ab_Pancreas = value;
                    break;
                case "Ab_Spleen":
                    setting.Pcls.Ab_Spleen = value;
                    break;
                case "Ab_RightKidney":
                    setting.Pcls.Ab_RightKidney = value;
                    break;
                case "Ab_LeftKidney":
                    setting.Pcls.Ab_LeftKidney = value;
                    break;
                case "Ab_Bladder":
                    setting.Pcls.Ab_Bladder = value;
                    break;
                case "Ab_Prostate":
                    setting.Pcls.Ab_Prostate = value;
                    break;
                case "Ab_Uterus":
                    setting.Pcls.Ab_Uterus = value;
                    break;
                case "Ab_RightOvary":
                    setting.Pcls.Ab_RightOvary = value;
                    break;
                case "Ab_LeftOvary":
                    setting.Pcls.Ab_LeftOvary = value;
                    break;
                case "Ab_PeritonealFluid":
                    setting.Pcls.Ab_PeritonealFluid = value;
                    break;
                case "Ab_PleuralFluid":
                    setting.Pcls.Ab_PleuralFluid = value;
                    break;
                case "Ab_AbdominalAortic":
                    setting.Pcls.Ab_AbdominalAortic = value;
                    break;
                case "Ab_Conclusion":
                    setting.Pcls.Ab_Conclusion = value;
                    break;
                //==== #002
                case "DefaultVATPercent":
                    setting.CommonItems.DefaultVATPercent = (float)Convert.ToDouble(value);
                    break;
                case "VATAlreadyInPrice":
                    setting.CommonItems.VATAlreadyInPrice = Convert.ToBoolean(value);
                    break;
                case "UseVATOnBill":
                    setting.CommonItems.UseVATOnBill = Convert.ToBoolean(value);
                    break;
                case "UseQRCode":
                    setting.CommonItems.UseQRCode = Convert.ToBoolean(value);
                    break;
                case "BorrowTimeLimit":
                    setting.CommonItems.BorrowTimeLimit = Convert.ToInt32(value);
                    break;
                case "EnableMedicalFileManagement":
                    setting.CommonItems.EnableMedicalFileManagement = Convert.ToBoolean(value);
                    break;
                //==== #002
                //==== #004
                case "EnableHIStore":
                    setting.CommonItems.EnableHIStore = Convert.ToBoolean(value);
                    break;
                case "EnablePayAfter":
                    setting.CommonItems.EnablePayAfter = Convert.ToBoolean(value);
                    break;
                case "HIStorageTypeID":
                    setting.CommonItems.HIStorageTypeID = Convert.ToInt32(value);
                    break;
                case "StoreIDForHIPrescription":
                    setting.CommonItems.StoreIDForHIPrescription = Convert.ToInt32(value);
                    break;
                //==== #004
                case "FileEmployeeID":
                    setting.ClinicDeptElements.FileEmployeeID = long.Parse(value);
                    break;
                /*==== #006 ====*/
                case "FiveYearNotPaidEnough":
                    setting.HealthInsurances.FiveYearNotPaidEnough = Convert.ToBoolean(value);
                    break;
                case "MaxHIPaidOnMoreAddedItem":
                    setting.HealthInsurances.MaxHIPaidOnMoreAddedItem = long.Parse(value);
                    break;
                case "NotCountHIOnPackItem":
                    setting.InRegisElements.NotCountHIOnPackItem = Convert.ToBoolean(value);
                    break;
                case "Use_SaveRegisThenPay":
                    setting.InRegisElements.Use_SaveRegisThenPay = Convert.ToBoolean(value);
                    break;
                case "NotPermittedHICard":
                    setting.HealthInsurances.NotPermittedHICard = value.ToString();
                    break;
                case "DisalbeSequenceNumberInAppointment":
                    setting.ConsultationElements.DisalbeSequenceNumberInAppointment = Convert.ToBoolean(value);
                    break;
                /*==== #006 ====*/
                /*TMA 25/11/2017*/
                case "IsSeparatePsychotropicPrescription":
                    setting.ConsultationElements.IsSeparatePsychotropicPrescription = Convert.ToBoolean(value);
                    break;
                case "IsSeparatePsychotropicPrescription_Inpt":
                    setting.ConsultationElements.IsSeparatePsychotropicPrescription_Inpt = Convert.ToBoolean(value);
                    break;
                /*TMA 25/11/2017*/
                case "IsUseDailyDiagnostic":
                    setting.CommonItems.IsUseDailyDiagnostic = Convert.ToBoolean(value);
                    break;
                case "EnableTestFunction":
                    setting.CommonItems.EnableTestFunction = Convert.ToBoolean(value);
                    break;
                case "IsEnalbeInDeptChangeLocFucn":
                    setting.CommonItems.IsEnalbeInDeptChangeLocFucn = Convert.ToBoolean(value);
                    break;
                case "IsEnalbeTempInDeptFuction":
                    setting.CommonItems.IsEnalbeTempInDeptFuction = Convert.ToBoolean(value);
                    break;
                case "CurrentHIReportVersion":
                    setting.CommonItems.CurrentHIReportVersion = Convert.ToInt32(value);
                    break;
                case "CheckValueBuyPriceOnImportTempInward":
                    setting.MedDeptElements.CheckValueBuyPriceOnImportTempInward = Convert.ToBoolean(value);
                    break;
                case "SurgeryDeptID":
                    setting.Hospitals.SurgeryDeptID = long.Parse(value);
                    break;
                case "AllowZeroHIPriceWithFlag":
                    setting.CommonItems.AllowZeroHIPriceWithFlag = Convert.ToBoolean(value);
                    break;
                case "EnableNotiReExPatient":
                    setting.CommonItems.EnableNotiReExPatient = Convert.ToBoolean(value);
                    break;
                case "EnableTreatmentRegimen":
                    setting.ConsultationElements.EnableTreatmentRegimen = Convert.ToBoolean(value);
                    break;
                case "HIAPILoginAccount":
                    setting.Hospitals.HIAPILoginAccount = value.ToString();
                    break;
                case "HIAPILoginPassword":
                    setting.Hospitals.HIAPILoginPassword = value.ToString();
                    break;
                //▼====== #030
                case "IsAllowSearchingPtByName":
                    setting.ConsultationElements.IsAllowSearchingPtByName = Convert.ToBoolean(value);
                    break;
                //▲====== #030
                /*▼====: #032*/
                case "IsAllowCopyDiagTrmt":
                    setting.ConsultationElements.IsAllowCopyDiagTrmt = Convert.ToInt16(value);
                    break;
                /*▲====: #032*/
                /*▼====: #033*/
                case "MinNumOfChar":
                    setting.ConsultationElements.MinNumOfChar = Convert.ToInt16(value);
                    break;
                /*▲====: #033*/
                case "HIPercentOnDifDept":
                    setting.HealthInsurances.HIPercentOnDifDept = string.IsNullOrEmpty(value) ? null : value.ToString().Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries).Select(x => float.Parse(x) / 100.0f).ToArray();
                    break;
                case "FullHIBenefitForConfirm":
                    setting.HealthInsurances.FullHIBenefitForConfirm = Convert.ToBoolean(value);
                    break;
                case "EnableOutPtCashAdvance":
                    setting.CommonItems.EnableOutPtCashAdvance = Convert.ToBoolean(value);
                    break;
                /*▼====: #035*/
                case "IsAllowInputDiagTrmt":
                    setting.ConsultationElements.IsAllowInputDiagTrmt = Convert.ToInt16(value);
                    break;
                /*▲====: #035*/
                case "MixedHIPharmacyStores":
                    setting.CommonItems.MixedHIPharmacyStores = Convert.ToBoolean(value);
                    break;
                /*▼====: #036*/
                case "ReportHospitalName":
                    setting.CommonItems.ReportHospitalName = Convert.ToString(value);
                    break;
                case "ReportHospitalAddress":
                    setting.CommonItems.ReportHospitalAddress = Convert.ToString(value);
                    break;
                case "ReportDepartmentOfHealth":
                    setting.CommonItems.ReportDepartmentOfHealth = Convert.ToString(value);
                    break;
                case "ReportLogoUrl":
                    setting.CommonItems.ReportLogoUrl = Convert.ToString(value);
                    break;
                /*▲====: #036*/
                //▼====: #057
                case "DQGUnitname":
                    setting.CommonItems.DQGUnitname = Convert.ToString(value);
                    break;
                //▲====: #057
                case "LamTronSLXuatNoiTru":
                    setting.ClinicDeptElements.LamTronSLXuatNoiTru = Convert.ToBoolean(value);
                    break;
                case "RoundDownInwardOutQty":
                    setting.ClinicDeptElements.RoundDownInwardOutQty = Convert.ToBoolean(value);
                    break;
                case "ProductTypeNotDocAndDateReq":
                    setting.ClinicDeptElements.ProductTypeNotDocAndDateReq = Convert.ToString(value);
                    break;
                case "ReportTemplatesLocation":
                    setting.CommonItems.ReportTemplatesLocation = Convert.ToString(value);
                    break;
                case "ValidHIPattern":
                    setting.CommonItems.ValidHIPattern = Convert.ToString(value);
                    break;
                case "PayOnComfirmHI":
                    setting.CommonItems.PayOnComfirmHI = Convert.ToBoolean(value);
                    break;
                case "ServerPublicAddress":
                    setting.CommonItems.ServerPublicAddress = Convert.ToString(value);
                    break;
                case "AllowWorkingOnSunday":
                    setting.ConsultationElements.AllowWorkingOnSunday = Convert.ToBoolean(value);
                    break;
                case "IsEnableMedSubStorage":
                    setting.MedDeptElements.IsEnableMedSubStorage = Convert.ToBoolean(value);
                    break;
                case "DiagnosisTreatmentForDrug":
                    setting.ConsultationElements.DiagnosisTreatmentForDrug = Convert.ToBoolean(value);
                    break;
                case "AddingServicesPercent":
                    setting.CommonItems.AddingServicesPercent = Convert.ToDecimal(value);
                    break;
                case "IsComplChkPointAfterStockTake":
                    setting.MedDeptElements.IsComplChkPointAfterStockTake = Convert.ToBoolean(value);
                    break;
                case "AllowSaveQuantityNotEnough":
                    setting.ConsultationElements.AllowSaveQuantityNotEnough = Convert.ToBoolean(value);
                    break;
                case "AllowBlockContraIndicator":
                    setting.ConsultationElements.AllowBlockContraIndicator = Convert.ToBoolean(value);
                    break;
                case "AllowBlockContraIndicatorInDay":
                    setting.ConsultationElements.AllowBlockContraIndicatorInDay = Convert.ToBoolean(value);
                    break;
                case "eInvoicePatern":
                    setting.CommonItems.eInvoicePatern = Convert.ToString(value);
                    break;
                case "eInvoiceSerial":
                    setting.CommonItems.eInvoiceSerial = Convert.ToString(value);
                    break;
                case "eInvoiceAdminUserName":
                    setting.CommonItems.eInvoiceAdminUserName = Convert.ToString(value);
                    break;
                case "eInvoiceAdminUserPass":
                    setting.CommonItems.eInvoiceAdminUserPass = Convert.ToString(value);
                    break;
                case "eInvoiceAccountUserName":
                    setting.CommonItems.eInvoiceAccountUserName = Convert.ToString(value);
                    break;
                case "eInvoiceAccountUserPass":
                    setting.CommonItems.eInvoiceAccountUserPass = Convert.ToString(value);
                    break;
                case "CheckToaThuocBiTrungTheoHoatChat":
                    setting.ConsultationElements.CheckToaThuocBiTrungTheoHoatChat = Convert.ToBoolean(value);
                    break;
                case "CheckToaThuocBiTrungNhomThuoc":
                    setting.ConsultationElements.CheckToaThuocBiTrungNhomThuoc = Convert.ToBoolean(value);
                    break;
                case "DQGUsername":
                    setting.CommonItems.DQGUsername = Convert.ToString(value);
                    break;
                case "DQGPassword":
                    setting.CommonItems.DQGPassword = Convert.ToString(value);
                    break;
                case "DQGUnitcode":
                    setting.CommonItems.DQGUnitcode = Convert.ToString(value);
                    break;
                case "DQGHUsername":
                    setting.CommonItems.DQGHUsername = Convert.ToString(value);
                    break;
                case "DQGHPassword":
                    setting.CommonItems.DQGHPassword = Convert.ToString(value);
                    break;
                case "FullHIOfServicesForConfirm":
                    setting.HealthInsurances.FullHIOfServicesForConfirm = Convert.ToBoolean(value);
                    break;
                case "KiemTraQuanHeHoatChat":
                    setting.ConsultationElements.KiemTraQuanHeHoatChat = Convert.ToBoolean(value);
                    break;
                //▼====: #050
                case "PrintingReceiptWithDrugBill":
                    setting.CommonItems.PrintingReceiptWithDrugBill = Convert.ToBoolean(value);
                    break;
                //▲====: #050
                //▼====: #051
                case "PrintingPhieuChiDinhForService":
                    setting.CommonItems.PrintingPhieuChiDinhForService = Convert.ToBoolean(value);
                    break;
                //▲====: #051
                case "UserCanEditInvoicePatern":
                    setting.CommonItems.UserCanEditInvoicePatern = Convert.ToBoolean(value);
                    break;
                case "MaxEInvoicePaternLength":
                    setting.CommonItems.MaxEInvoicePaternLength = Convert.ToInt32(value);
                    break;
                case "SaveImgWhenCapturing_Local":
                    setting.Pcls.SaveImgWhenCapturing_Local = Convert.ToBoolean(value);
                    break;
                //▼====: #055
                case "AllowTimeUpdatePrescription":
                    setting.ConsultationElements.AllowTimeUpdatePrescription = Convert.ToInt32(value);
                    break;
                //▲====: #055
                case "UseBidDetailOnInward":
                    setting.MedDeptElements.UseBidDetailOnInward = Convert.ToBoolean(value);
                    break;
                case "DefaultVIPServiceItemID":
                    setting.CommonItems.DefaultVIPServiceItemID = long.Parse(value);
                    break;
                case "AutoCreateRISWorklist":
                    setting.Pcls.AutoCreateRISWorklist = Convert.ToBoolean(value);
                    break;
                case "RISAPIAddress":
                    setting.Pcls.RISAPIAddress = Convert.ToString(value);
                    break;
                case "AppointmentAuto":
                    setting.ConsultationElements.AppointmentAuto = Convert.ToBoolean(value);
                    break;
                case "ParamAppointmentAuto":
                    setting.ConsultationElements.ParamAppointmentAuto = Convert.ToString(value);
                    break;
                case "CheckedTreatmentRegimen":
                    setting.ConsultationElements.CheckedTreatmentRegimen = Convert.ToBoolean(value);
                    break;
                case "HealthExamDeptLocIDArray":
                    setting.ConsultationElements.HealthExamDeptLocIDArray = value.Split('|').Select(x => Convert.ToInt64(x)).ToArray();
                    break;
                case "ModeShowInforDrugForAutoCompleteInstruction":
                    setting.ConsultationElements.ModeShowInforDrugForAutoCompleteInstruction = long.Parse(value);
                    break;
                case "ShowAddressPKBSHuan":
                    setting.CommonItems.ShowAddressPKBSHuan = Convert.ToBoolean(value);
                    break;
                case "UseOnlyDailyDiagnosis":
                    setting.ConsultationElements.UseOnlyDailyDiagnosis = Convert.ToBoolean(value);
                    break;
                case "LevelWarningWhenCreateNewAndCopy":
                    setting.ConsultationElements.LevelWarningWhenCreateNewAndCopy = Convert.ToInt16(value);
                    break;
                case "PrescriptionMaxHIPay":
                    setting.ConsultationElements.PrescriptionMaxHIPay = Convert.ToDecimal(value);
                    break;
                case "IsAllowCopyDiagTrmtInstruction":
                    setting.ConsultationElements.IsAllowCopyDiagTrmtInstruction = Convert.ToInt16(value);
                    break;
                case "ShowMessageBoxForLockReportedRegistration":
                    setting.InRegisElements.ShowMessageBoxForLockReportedRegistration = Convert.ToBoolean(value);
                    break;
                case "DrugDeptOutDrugExpiryDateRule":
                    setting.ClinicDeptElements.DrugDeptOutDrugExpiryDateRule = Convert.ToInt16(value);
                    break;
                //▼====: #060
                case "AllowSearchInReport":
                    setting.CommonItems.AllowSearchInReport = Convert.ToBoolean(value);
                    break;
                //▲====: #060
                case "ImageCaptureFilePublicStorePath":
                    setting.Servers.ImageCaptureFilePublicStorePath = Convert.ToString(value);
                    break;
                case "CheckMonitoringVitalSigns":
                    setting.ConsultationElements.CheckMonitoringVitalSigns = Convert.ToInt16(value);
                    break;
                case "IsAllowCopyInstruction":
                    setting.ConsultationElements.IsAllowCopyInstruction = Convert.ToInt16(value);
                    break;
                case "ConsultMinTimeReqBeforeExit":
                    setting.ConsultationElements.ConsultMinTimeReqBeforeExit = Convert.ToString(value);
                    break;
                case "LoadOutwardTempBy":
                    setting.ClinicDeptElements.LoadOutwardTempBy = Convert.ToByte(value);
                    break;
                case "IsCheckApmtOnPrescription":
                    setting.ConsultationElements.IsCheckApmtOnPrescription = Convert.ToBoolean(value);
                    break;
                case "UseDrugDeptAs2DistinctParts":
                    setting.MedDeptElements.UseDrugDeptAs2DistinctParts = Convert.ToBoolean(value);
                    break;
                //▼====: #066
                case "BlockPaymentWhenNotSettlement":
                    setting.InRegisElements.BlockPaymentWhenNotSettlement = Convert.ToBoolean(value);
                    break;
                //▲====: #066
                case "UseConfirmRecalcHIOutPt":
                    setting.HealthInsurances.UseConfirmRecalcHIOutPt = Convert.ToBoolean(value);
                    break;
                case "AutoLocationAllocation":
                    setting.OutRegisElements.AutoLocationAllocation = Convert.ToBoolean(value);
                    break;
                case "PercentForEkip":
                    setting.HealthInsurances.PercentForEkip = float.Parse(value);
                    break;
                case "PercentForOtherEkip":
                    setting.HealthInsurances.PercentForOtherEkip = float.Parse(value);
                    break;
                case "AddingHIServicesPercent":
                    setting.CommonItems.AddingHIServicesPercent = Convert.ToDecimal(value);
                    break;
                case "ViewPrintAllImagingPCLRequestSeparate":
                    setting.CommonItems.ViewPrintAllImagingPCLRequestSeparate = Convert.ToBoolean(value);
                    break;
                case "ChangeHIAfterSaveAndPayRule":
                    setting.CommonItems.ChangeHIAfterSaveAndPayRule = Convert.ToBoolean(value);
                    break;
                case "IsPerformingTMVFunctionsA":
                    setting.OutRegisElements.IsPerformingTMVFunctionsA = Convert.ToBoolean(value);
                    break;
                case "MaxTimeForSmallProcedure":
                    setting.CommonItems.MaxTimeForSmallProcedure = Convert.ToInt16(value);
                    break;
                //▼====: #068
                case "BlockAddictiveAndPsychotropicDrugRequest":
                    setting.Hospitals.BlockAddictiveAndPsychotropicDrugRequest = Convert.ToBoolean(value);
                    break;
                case "SecondExportBlockFormTheRequestForm":
                    setting.MedDeptElements.SecondExportBlockFormTheRequestForm = Convert.ToBoolean(value);
                    break;
                //▲====: #068
                case "CheckDoctorStaffID":
                    setting.OutRegisElements.CheckDoctorStaffID = Convert.ToBoolean(value);
                    break;
                case "LIDForConsultationAtHome":
                    setting.CommonItems.LIDForConsultationAtHome = Convert.ToInt16(value);
                    break;
                case "CSSUrlPattern":
                    setting.CommonItems.CSSUrlPattern = Convert.ToString(value);
                    break;
                case "UpdateTicketStatusAfterRegister":
                    setting.CommonItems.UpdateTicketStatusAfterRegister = Convert.ToBoolean(value);
                    break;
                //▼====: #069
                case "PrescriptionOutPtVersion":
                    setting.ConsultationElements.PrescriptionOutPtVersion = Convert.ToInt16(value);
                    break;
                case "PrescriptionInPtVersion":
                    setting.ConsultationElements.PrescriptionInPtVersion = Convert.ToInt16(value);
                    break;
                case "PrescriptionMainRightHeader":
                    setting.Hospitals.PrescriptionMainRightHeader = Convert.ToString(value);
                    break;
                case "PrescriptionSubRightHeader":
                    setting.Hospitals.PrescriptionSubRightHeader = Convert.ToString(value);
                    break;
                case "LaboratoryResultVersion":
                    setting.ConsultationElements.LaboratoryResultVersion = Convert.ToInt16(value);
                    break;
                //▲====: #069
                case "ReportTwoRegistrationSameTime":
                    setting.CommonItems.ReportTwoRegistrationSameTime = Convert.ToBoolean(value);
                    break;
                case "UseQMSSystem":
                    setting.CommonItems.UseQMSSystem = Convert.ToBoolean(value);
                    break;
                case "CheckPatientInfoQMSSystem":
                    setting.CommonItems.CheckPatientInfoQMSSystem = Convert.ToBoolean(value);
                    break;
                //case "BlockRegNoTicket":
                //    setting.CommonItems.BlockRegNoTicket = Convert.ToInt32(value);
                //    break;
                case "MergerPatientRegistration":
                    setting.InRegisElements.MergerPatientRegistration = Convert.ToInt16(value);
                    break;
                case "PercentPrescriptionForHI":
                    setting.ConsultationElements.PercentPrescriptionForHI = Convert.ToDouble(value);
                    break;
                case "DayStartAndEndFindAppointment":
                    setting.OutRegisElements.DayStartAndEndFindAppointment = Convert.ToInt32(value);
                    break;
                case "BlockPrescriptionMaxHIPay":
                    setting.ConsultationElements.BlockPrescriptionMaxHIPay = Convert.ToBoolean(value);
                    break;
                case "DefaultStoreIDForQuotation":
                    setting.CommonItems.DefaultStoreIDForQuotation = Convert.ToInt64(value);
                    break;
                case "PCLImageURL":
                    setting.Pcls.PCLImageURL = value.ToString();
                    break;
                case "PCLImageFolder":
                    setting.Pcls.PCLImageFolder = Convert.ToString(value);
                    break;
                case "PCLImageResultFolder":
                    setting.Pcls.PCLImageResultFolder = Convert.ToString(value);
                    break;
                //▼====: #073
                case "AllowConfirmEmergencyOutPt":
                    setting.OutRegisElements.AllowConfirmEmergencyOutPt = Convert.ToBoolean(value);
                    break;
                //▲====: #073
                //▼====: #074
                case "PhieuNhanThuocPrintingModeInConfirmHIView":
                    setting.CommonItems.PhieuNhanThuocPrintingModeInConfirmHIView = Convert.ToInt16(value);
                    break;
                //▲====: #074
                //▼====: #076
                case "PharmacySearchByGenericName":
                    setting.PharmacyElements.PharmacySearchByGenericName = Convert.ToBoolean(value);
                    break;
                case "PrintingWithoutExportPDF":
                    setting.OutRegisElements.PrintingWithoutExportPDF = Convert.ToBoolean(value);
                    break;
                //▲====: #076
                case "SpecialHIRegistration":
                    setting.CommonItems.SpecialHIRegistration = Convert.ToBoolean(value);
                    break;
                //▼====: #077
                case "ApplyFilterPrescriptionsHasHIPayTable":
                    setting.ConsultationElements.ApplyFilterPrescriptionsHasHIPayTable = Convert.ToBoolean(value);
                    break;
                //▲====: #077
                //▼====: #078
                case "DisableBtnCheckCountPatientInPt":
                    setting.InRegisElements.DisableBtnCheckCountPatientInPt = Convert.ToBoolean(value);
                    break;
                case "BlockOutwardDrugFromMedDeptToClinicWhenRequestQtyDiffOutQty":
                    setting.MedDeptElements.BlockOutwardDrugFromMedDeptToClinicWhenRequestQtyDiffOutQty = Convert.ToBoolean(value);
                    break;
                //▲====: #078
                //▼====: #079
                case "WhichHospitalUseThisApp":
                    setting.CommonItems.WhichHospitalUseThisApp = Convert.ToInt32(value);
                    break;
                //▲====: #079
                case "NewMethodToReport4210":
                    setting.CommonItems.NewMethodToReport4210 = Convert.ToBoolean(value);
                    break;
                //▼====: #080
                case "NumDayHIAgreeToPayAfterHIExpiresInPt":
                    setting.InRegisElements.NumDayHIAgreeToPayAfterHIExpiresInPt = Convert.ToInt32(value);
                    break;
                //▲====: #080
                //▼====: #081
                case "AutoGetHICardDataFromHIPortal":
                    setting.CommonItems.AutoGetHICardDataFromHIPortal = Convert.ToBoolean(value);
                    break;
                //▲====: #081
                case "ChangeVATCreditOnInwardInvoice":
                    setting.CommonItems.ChangeVATCreditOnInwardInvoice = Convert.ToBoolean(value);
                    break;
                //▼====: #082
                case "AutoCreatePACWorklist":
                    setting.Pcls.AutoCreatePACWorklist = Convert.ToBoolean(value);
                    break;
                case "PACSAPIAddress":
                    setting.Pcls.PACSAPIAddress = Convert.ToString(value);
                    break;
                case "PACUserName":
                    setting.Pcls.PACUserName = Convert.ToString(value);
                    break;
                case "PACPassword":
                    setting.Pcls.PACPassword = Convert.ToString(value);
                    break;
                //▲====: #082
                //▼====: #082
                case "BlockInteractionSeverityLevelInPt":
                    setting.ConsultationElements.BlockInteractionSeverityLevelInPt = Convert.ToInt64(value);
                    break;
                case "FilterDoctorByDeptResponsibilitiesInPt":
                    setting.ConsultationElements.FilterDoctorByDeptResponsibilitiesInPt = Convert.ToBoolean(value);
                    break;
                //▲====: #082
                case "InwardDifferenceValue":
                    setting.CommonItems.InwardDifferenceValue = Convert.ToDecimal(value);
                    break;
                case "ApplyTemp12Version6556":
                    setting.CommonItems.ApplyTemp12Version6556 = Convert.ToBoolean(value);
                    break;
                //▼====: #083
                case "ApplyNewFuncExportExcel":
                    setting.CommonItems.ApplyNewFuncExportExcel = Convert.ToBoolean(value);
                    break;
                //▲====: #083
                case "ApplyOtherDiagnosis":
                    setting.CommonItems.ApplyOtherDiagnosis = Convert.ToBoolean(value);
                    break;
                case "ApplyCheckV_TreatmentType":
                    setting.CommonItems.ApplyCheckV_TreatmentType = Convert.ToString(value);
                    break;
                //▼====: #084
                case "NgayNhapLaiTDK":
                    setting.CommonItems.NgayNhapLaiTDK = Convert.ToString(value);
                    break;
                //▲====: #084
                case "ApplyCheckInPtRegistration":
                    setting.CommonItems.ApplyCheckInPtRegistration = Convert.ToBoolean(value);
                    break;
                case "ApplyAutoCodeForCirculars56":
                    setting.CommonItems.ApplyAutoCodeForCirculars56 = Convert.ToBoolean(value);
                    break;
                case "SuffixAutoCodeForCirculars56":
                    setting.CommonItems.SuffixAutoCodeForCirculars56 = Convert.ToString(value);
                    break;
                //▼====: #085
                case "ThuocDuocXuatThapPhan":
                    setting.ClinicDeptElements.ThuocDuocXuatThapPhan = Convert.ToString(value);
                    break;
                //▲====: #085
                case "ExaminationResultVersion":
                    setting.CommonItems.ExaminationResultVersion = Convert.ToInt32(value);
                    break;
                //▼====: #086
                case "AllowFirstHIExaminationWithoutPay":
                    setting.CommonItems.AllowFirstHIExaminationWithoutPay = Convert.ToBoolean(value);
                    break;
                //▲====: #086
                //▼====: #088
                case "AutoSavePhysicalExamination":
                    setting.CommonItems.AutoSavePhysicalExamination = Convert.ToBoolean(value);
                    break;
                //▲====: #088
                //▼====: #090
                case "AllowReSelectRoomWhenLeaveDept":
                    setting.CommonItems.AllowReSelectRoomWhenLeaveDept = Convert.ToBoolean(value);
                    break;
                //▲====: #090
                //▼====: #091
                case "ListICDShowAdvisoryVotes":
                    setting.ConsultationElements.ListICDShowAdvisoryVotes = Convert.ToString(value);
                    break;
                //▲====: #091
                // VuTTM - QMS Service
                case "QMS_API_Url":
                    setting.CommonItems.QMS_API_Url = Convert.ToString(value);
                    break;
                case "ApplyQMSAPI":
                    setting.CommonItems.ApplyQMSAPI = Convert.ToBoolean(value);
                    break; 
                case "Cashier1":
                    setting.CommonItems.Cashier1 = Convert.ToInt64(value);
                    break;
                case "Cashier2":
                    setting.CommonItems.Cashier2 = Convert.ToInt64(value);
                    break;
                case "QMSDepts":
                    setting.CommonItems.QMSDepts = Convert.ToString(value);
                    break;
                case "ApplyingQMSDepts":
                    setting.CommonItems.ApplyingQMSDepts = Convert.ToString(value);
                    break;
                case "FloorDeptLocation_0":
                    setting.CommonItems.FloorDeptLocation_0 = Convert.ToString(value);
                    break;
                case "FloorDeptLocation_1":
                    setting.CommonItems.FloorDeptLocation_1 = Convert.ToString(value);
                    break;
                case "FloorDeptLocation_2":
                    setting.CommonItems.FloorDeptLocation_2 = Convert.ToString(value);
                    break;
                case "OutpatientDept":
                    setting.CommonItems.OutpatientDept = Convert.ToString(value);
                    break;
                case "MedDepartment":
                    setting.CommonItems.MedDepartment = Convert.ToInt64(value);
                    break;
                case "PharmacyDepartment":
                    setting.CommonItems.PharmacyDepartment = Convert.ToInt64(value);
                    break;
                case "KioskStaffID":
                    setting.CommonItems.KioskStaffID = Convert.ToInt64(value);
                    break;
                case "ApplyFloorNumberKiosk":
                    setting.CommonItems.ApplyFloorNumberKiosk = Convert.ToBoolean(value);
                    break;
                case "Excluded_Room":
                    setting.CommonItems.Excluded_Room = Convert.ToString(value);
                    break;
                //▼====: #097
                case "AllowToBorrowDoctorAccount":
                    setting.CommonItems.AllowToBorrowDoctorAccount = Convert.ToBoolean(value);
                    break;
                //▲====: #097
                case "ICDCategorySearchUrl":
                    setting.CommonItems.ICDCategorySearchUrl = Convert.ToString(value);
                    break;
                //▼====: #099
                case "AgeMustHasDHST":
                    setting.CommonItems.AgeMustHasDHST = Convert.ToInt64(value);
                    break;
                //▲====: #099
                //▼====: #100
                case "RefGenDrugCatID_2ForDrug":
                    setting.InRegisElements.RefGenDrugCatID_2ForDrug = Convert.ToInt64(value);
                    break;
                //▲====: #100
                case "ApplyFixReCalcHIBenefit":
                    setting.CommonItems.ApplyFixReCalcHIBenefit = Convert.ToBoolean(value);
                    break;
                case "MedProServiceStaffID":
                    setting.CommonItems.MedProServiceStaffID = Convert.ToInt64(value);
                    break;
                case "ApplyTemplatePCLResultNew":
                    setting.CommonItems.ApplyTemplatePCLResultNew = Convert.ToBoolean(value);
                    break;
                //▼====: #101
                case "AutoAddBedService":
                    setting.CommonItems.AutoAddBedService = Convert.ToBoolean(value);
                    break;
                //▲====: #101
                case "RuntimeUrl":
                    setting.CommonItems.RuntimeUrl = Convert.ToString(value);
                    break;
                case "RuntimeLocation":
                    setting.CommonItems.RuntimeLocation = Convert.ToString(value);
                    break;
                case "RuntimeReg64":
                    setting.CommonItems.RuntimeReg64 = Convert.ToString(value);
                    break;
                case "RuntimeReg32":
                    setting.CommonItems.RuntimeReg32 = Convert.ToString(value);
                    break;
                //▼====: #103
                case "IsEnableFilterStorage":
                    setting.MedDeptElements.IsEnableFilterStorage = Convert.ToBoolean(value);
                    break;
                //▲====: #103
                //▼====: #104
                case "EnableCheckboxXCD":
                    setting.CommonItems.EnableCheckboxXCD = Convert.ToBoolean(value);
                    break;
                //▲====: #104
                case "KBYTLink":
                    setting.CommonItems.KBYTLink = Convert.ToString(value);
                    break;
                case "PDFStorePool":
                    setting.Hospitals.PDFStorePool = value;
                    break;
                case "FTPLinkKQXN":
                    setting.Hospitals.FTPLinkKQXN = value;
                    break;
                case "FTPAdminUserName":
                    setting.Hospitals.FTPAdminUserName = value;
                    break;
                case "FTPAdminPassword":
                    setting.Hospitals.FTPAdminPassword = value;
                    break;
                case "WarningOutTimeSegments":
                    setting.CommonItems.WarningOutTimeSegments = Convert.ToInt32(value);
                    break;
                case "IsApplyTimeSegments":
                    setting.CommonItems.IsApplyTimeSegments = Convert.ToBoolean(value);
                    break;
                //▼====: #107
                case "AllowEditDiagnosisFinalForPatientCOVID":
                    setting.InRegisElements.AllowEditDiagnosisFinalForPatientCOVID = Convert.ToBoolean(value);
                    break;
                //▲====: #107
                case "BearerToken":
                    setting.CommonItems.BearerToken = value;
                    break;
                case "ExamCovidAPIBaseURL":
                    setting.CommonItems.ExamCovidAPIBaseURL = value;
                    break;
                case "ExamCovidAPIGetHistory":
                    setting.CommonItems.ExamCovidAPIGetHistory = value;
                    break;
                case "ExamCovidAPIGetPrintPreview":
                    setting.CommonItems.ExamCovidAPIGetPrintPreview = value;
                    break;
                case "IsApplyPCRDual":
                    setting.CommonItems.IsApplyPCRDual = Convert.ToBoolean(value);
                    break;
                case "IsApplyAutoCreateHIReport":
                    setting.CommonItems.IsApplyAutoCreateHIReport = Convert.ToBoolean(value);
                    break;
                case "IsApplyUpdateInstruction":
                    setting.CommonItems.IsApplyUpdateInstruction = Convert.ToBoolean(value);
                    break;  
                //▼====: #110
                case "TimeForAllowUpdateMedicalInstruction":
                    setting.CommonItems.TimeForAllowUpdateMedicalInstruction = Convert.ToInt32(value);
                    break;
                case "IsApplyTimeForAllowUpdateMedicalInstruction":
                    setting.CommonItems.IsApplyTimeForAllowUpdateMedicalInstruction = Convert.ToBoolean(value);
                    break;
                //▲====: #110
                case "CheckToaThuocBiTrungTheoHoatChatVaNgayThuocBaoHiem":
                    setting.ConsultationElements.CheckToaThuocBiTrungTheoHoatChatVaNgayThuocBaoHiem = Convert.ToBoolean(value);
                    break;
                //▼====: #112
                case "IsEnableQMSForPCL":
                    setting.CommonItems.IsEnableQMSForPCL = Convert.ToBoolean(value);
                    break;
                case "IsEnableQMSForPrescription":
                    setting.CommonItems.IsEnableQMSForPrescription = Convert.ToBoolean(value);
                    break;
                case "IsEnableCreateOrderFromAccountant":
                    setting.CommonItems.IsEnableCreateOrderFromAccountant = Convert.ToBoolean(value);
                    break;
                //▲====: #112
                //▼====: #114
                case "MinimumPopulateDelay":
                    setting.CommonItems.MinimumPopulateDelay = Convert.ToInt32(value);
                    break;
                //▲====: #114
                //▼====: #116
                case "EnablePostponementAdvancePayment":
                    setting.CommonItems.EnablePostponementAdvancePayment = Convert.ToBoolean(value);
                    break;
                //▲====: #116
                //▼====: #121
                case "DoctorContactPatientTime":
                    setting.CommonItems.DoctorContactPatientTime = Convert.ToInt32(value);
                    break;
                case "LocationNotCheckDoctorContactPatientTime":
                    setting.CommonItems.LocationNotCheckDoctorContactPatientTime = Convert.ToString(value);
                    break;
                //▲====: #121
                //▼====: #120
                case "PrintPrescriptionWithTemp12":
                    setting.CommonItems.PrintPrescriptionWithTemp12 = Convert.ToBoolean(value);
                    break;
                //▲====: #120
                case "NotesKhongCheckTocDoTruyen":
                    setting.CommonItems.NotesKhongCheckTocDoTruyen = Convert.ToString(value);
                    break;
                case "LinkKhaoSatNgoaiTru":
                    setting.CommonItems.LinkKhaoSatNgoaiTru = Convert.ToString(value);
                    break;
                case "LinkKhaoSatNoiTru":
                    setting.CommonItems.LinkKhaoSatNoiTru = Convert.ToString(value);
                    break;
                case "DeptCheckPainLevel":
                    setting.CommonItems.DeptCheckPainLevel = Convert.ToString(value);
                    break;
                //▼====: #137
                case "CheckPatientInfoWhenSavePrescript":
                    setting.CommonItems.CheckPatientInfoWhenSavePrescript = Convert.ToBoolean(value);
                    break;
                //▲====: #137
                case "CountSendTransaction":
                    setting.CommonItems.CountSendTransaction = Convert.ToInt32(value);
                    break;
                //▼====: #138
                case "NumDayFindOutRegistrationMedicalExamination":
                    setting.OutRegisElements.NumDayFindOutRegistrationMedicalExamination = Convert.ToInt32(value);
                    break;
                //▲====: #138
                //▼====: #140
                case "Temp12PrintingMode":
                    setting.CommonItems.Temp12PrintingMode = int.Parse(value);
                    break;
                //▲====: #140
                //▼====: #142
                case "MaxNumDayPrescriptAllow":
                    setting.CommonItems.MaxNumDayPrescriptAllow = int.Parse(value);
                    break;
                case "MaxNumDayPrescriptAllow_InPt":
                    setting.CommonItems.MaxNumDayPrescriptAllow_InPt = int.Parse(value);
                    break;
                //▲====: #142
                //▼====: #143
                case "IsSeparatePrescription":
                    setting.CommonItems.IsSeparatePrescription = bool.Parse(value);
                    break;
                case "ReportHospitalPhone":
                    setting.CommonItems.ReportHospitalPhone = Convert.ToString(value);
                    break;
                //▲====: #143
                case "ReportHospitalHotline":
                    setting.CommonItems.ReportHospitalHotline = Convert.ToString(value);
                    break;
                //▼====: #144
                case "TT_5149_List_HIPCode":
                    setting.ConsultationElements.TT5149ListHIPCode = Convert.ToString(value);
                    break;
                //▲====: #144
                //▼====: #148
                case "IsDisableCreateMedicalFile":
                    setting.CommonItems.IsDisableCreateMedicalFile = bool.Parse(value);
                    break;
                //▲====: #148
                //▼====: #149
                case "IsEnablePrintReceiptAndRequest":
                    setting.CommonItems.IsEnablePrintReceiptAndRequest = Convert.ToBoolean(value);
                    break;
                //▲====: #149
                //▼====: #150
                case "PrintTemp01KBCB":
                    setting.CommonItems.PrintTemp01KBCB = bool.Parse(value);
                    break;
                //▼====: #150
                //▼====: #151
                case "SymptomNotUseForAdmission":
                    setting.CommonItems.SymptomNotUseForAdmission = Convert.ToString(value);
                    break;
                //▲====: #151
                //▼====: #153
                case "ServicePool":
                    setting.CommonItems.ServicePool = Convert.ToString(value);
                    break;
                case "ServiceUrl":
                    setting.CommonItems.ServiceUrl = Convert.ToString(value);
                    break;
                case "PDFFileResultToSignPath":
                    setting.CommonItems.PDFFileResultToSignPath = Convert.ToString(value);
                    break;
                case "PDFFileResultSignedPath":
                    setting.CommonItems.PDFFileResultSignedPath = Convert.ToString(value);
                    break;
                case "HISSighHashSmartCAUrl":
                    setting.CommonItems.HISSighHashSmartCAUrl = Convert.ToString(value);
                    break;
                case "FTPServerSighHashUrl":
                    setting.CommonItems.FTPServerSighHashUrl = Convert.ToString(value);
                    break;
                //▲====: #153
                //▼====: #154
                case "APISendHIReportAddress":
                    setting.CommonItems.APISendHIReportAddress = Convert.ToString(value);
                    break;
                case "IsApplyAutoCreateHIReportWhenConfirmHI":
                    setting.CommonItems.IsApplyAutoCreateHIReportWhenConfirmHI = Convert.ToBoolean(value);
                    break;
                case "IsApplyAutoCreateHIReportWhenSettlement":
                    setting.CommonItems.IsApplyAutoCreateHIReportWhenSettlement = Convert.ToBoolean(value);
                    break;
                //▲====: #154
                //▼====: #155
                case "IsSaveMedicalInstructionWithoutPrescription":
                    setting.CommonItems.IsSaveMedicalInstructionWithoutPrescription = Convert.ToBoolean(value);
                    break;
                //▲====: #155
                //▼====: #156
                case "DTDTUsername":
                    setting.CommonItems.DTDTUsername = Convert.ToString(value);
                    break;
                case "DTDTPassword":
                    setting.CommonItems.DTDTPassword = Convert.ToString(value);
                    break;
                case "DonThuocQuocGiaAPIUrl":
                    setting.CommonItems.DonThuocQuocGiaAPIUrl = Convert.ToString(value);
                    break;
                case "ApplyDTDT":
                    setting.CommonItems.ApplyDTDT = Convert.ToBoolean(value);
                    break;
                //▲====: #156
                //▼====: #158
                case "IsApplyCreateRequestForEstimation":
                    setting.CommonItems.IsApplyCreateRequestForEstimation = Convert.ToBoolean(value);
                    break;
                //▲====: #158
                //▼====: #162
                case "IsEnableAddRegPackByDoctor":
                    setting.CommonItems.IsEnableAddRegPackByDoctor = Convert.ToBoolean(value);
                    break;
                //▲====: #162
                //▼====: #161
                case "IsApplyAutoCreateDTDTReportWhenConfirmHI":
                    setting.CommonItems.IsApplyAutoCreateDTDTReportWhenConfirmHI = Convert.ToBoolean(value);
                    break;
                //▲====: #161
                //▼====: #165
                case "ElectronicPrescriptionMaxReport":
                    setting.CommonItems.ElectronicPrescriptionMaxReport = Convert.ToInt32(value);
                    break;
                //▲====: #165
                //▼====: #166
                case "ApplyReport130":
                    setting.CommonItems.ApplyReport130 = Convert.ToBoolean(value);
                    break;
                //▲====: #165
                case "DeptLocIDApplyQMS":
                    setting.CommonItems.DeptLocIDApplyQMS = Convert.ToString(value);
                    break;
                case "IsEnableFilterPerformStaff":
                    setting.CommonItems.IsEnableFilterPerformStaff = Convert.ToBoolean(value);
                    break;
                //▼==== #188
                case "IsEnableFilterResultStaff":
                    setting.CommonItems.IsEnableFilterResultStaff = Convert.ToBoolean(value);
                    break;
                //▲==== #188
                case "LocationAllowPrenatalCertificates":
                    setting.CommonItems.LocationAllowPrenatalCertificates = Convert.ToString(value);
                    break;
                case "InsuranceCertificatePrefix":
                    setting.CommonItems.InsuranceCertificatePrefix = Convert.ToString(value);
                    break;
                case "DeptIDKhoaSan":
                    setting.CommonItems.DeptIDKhoaSan = Convert.ToInt64(value);
                    break;
                //▼====: #180
                case "PACLocalServiceGatewayUrl":
                    setting.CommonItems.PACLocalServiceGatewayUrl = Convert.ToString(value);
                    break;
                    //▲====: #180
                case "ListObjectTypeIDForMngt":
                    setting.CommonItems.ListObjectTypeIDForMngt = Convert.ToString(value);
                    break;
                case "EnableCheckPaymentCeilingForTechService":
                    setting.CommonItems.EnableCheckPaymentCeilingForTechService = Convert.ToBoolean(value);
                    break;
                case "CheckHIWhenConfirm":
                    setting.CommonItems.CheckHIWhenConfirm = Convert.ToBoolean(value);
                    break;
                //▼==== #181
                case "ReportHospitalNameEng":
                    setting.CommonItems.ReportHospitalNameEng = Convert.ToString(value);
                    break;
                case "ReportHospitalAddressEng":
                    setting.CommonItems.ReportHospitalAddressEng = Convert.ToString(value);
                    break;
                case "ReportDepartmentOfHealthEng":
                    setting.CommonItems.ReportDepartmentOfHealthEng = Convert.ToString(value);
                    break;
                //▲==== #181
                //▼==== #182
                case "ReportHospitalNameShort":
                    setting.CommonItems.ReportHospitalNameShort = Convert.ToString(value);
                    break;
                //▲==== #182
                //▼====: #183
                case "SMS_API_Url":
                    setting.CommonItems.SMS_API_Url = Convert.ToString(value);
                    break;
                case "IsEnableSendSMSLab":
                    setting.CommonItems.IsEnableSendSMSLab = Convert.ToBoolean(value);
                    break;
                //▲====: #183
                //▼==== #186
                case "UseIDCardQRCode":
                    setting.CommonItems.UseIDCardQRCode = Convert.ToBoolean(value);
                    break;
                //▲==== #186
                case "BacSiTruongPhoKhoa":
                    setting.CommonItems.BacSiTruongPhoKhoa = Convert.ToString(value);
                    break;
                case "ThuTruongDonVi":
                    setting.CommonItems.ThuTruongDonVi = Convert.ToString(value);
                    break;
                case "SubCategoryCheckResultStaffWhenSave":
                    setting.CommonItems.SubCategoryCheckResultStaffWhenSave = Convert.ToString(value);
                    break;
                case "ApplyCheckResultStaffLabortary":
                    setting.CommonItems.ApplyCheckResultStaffLabortary = Convert.ToBoolean(value);
                    break;
                //▼==== #190
                case "IdleTimeToLogout":
                    setting.CommonItems.IdleTimeToLogout = Convert.ToInt32(value);
                    break;
                //▲==== #190
                //▼==== #192
                case "PrescriptionMaxHIPayVersion":
                    setting.ConsultationElements.PrescriptionMaxHIPayVersion = Convert.ToInt32(value);
                    break;
                //▲==== #192
            }
        }

        protected virtual List<string> GetHiAcceptedListFromReader(IDataReader reader)
        {
            var retVal = new List<string>();

            while (reader.Read())
            {
                retVal.Add((string)reader["HICode"]);

            }
            return retVal;
        }

        #region PrescriptionDetailSchedulesLieuDung
        public virtual List<PrescriptionDetailSchedulesLieuDung> InitValuePrescriptionDetailSchedulesLieuDung()
        {
            var lieuDung = new List<PrescriptionDetailSchedulesLieuDung>();
            lieuDung.Clear();
            //lieuDung.Add(new PrescriptionDetailSchedulesLieuDung { ID = 0, Name = "" });
            lieuDung.Add(new PrescriptionDetailSchedulesLieuDung { ID = 0, Name = "0" });
            lieuDung.Add(new PrescriptionDetailSchedulesLieuDung { ID = 1, Name = "1" });
            lieuDung.Add(new PrescriptionDetailSchedulesLieuDung { ID = (float)0.5, Name = "1/2" });
            lieuDung.Add(new PrescriptionDetailSchedulesLieuDung { ID = (float)0.25, Name = "1/4" });
            lieuDung.Add(new PrescriptionDetailSchedulesLieuDung { ID = (float)0.125, Name = "1/8" });
            lieuDung.Add(new PrescriptionDetailSchedulesLieuDung { ID = (float)0.33, Name = "1/3" });

            lieuDung.Add(new PrescriptionDetailSchedulesLieuDung { ID = (float)0.75, Name = "3/4" });
            lieuDung.Add(new PrescriptionDetailSchedulesLieuDung { ID = (float)0.375, Name = "3/8" });
            //lieuDung.Add(new PrescriptionDetailSchedulesLieuDung { ID = 4, Name = "4" });

            return lieuDung;
        }

        public virtual PrescriptionDetailSchedulesLieuDung GetItemPrescriptionDetailSchedulesLieuDung(int id)
        {
            var lieuDung = InitValuePrescriptionDetailSchedulesLieuDung();
            var item = lieuDung.Where(x => x.ID == id);
            return item.FirstOrDefault();
        }
        #endregion


        public virtual string ChangeLieuDungToString(Single value)
        {
            //neu CultureInfo la vi-VN thi can dung cai nay de hien thi cho dung

            string result = value.ToString(CultureInfo.CreateSpecificCulture("vi-VN"));
            if (value >= (Single)0.33 && value <= (Single)0.34)
            {
                result = "1/3";
            }
            else if (value == (Single)0.5)
            {
                result = "1/2";
            }
            else if (value == (Single)0.25)
            {
                result = "1/4";
            }
            else if (value == (Single)0.2)
            {
                result = "1/5";
            }
            else if (value >= (Single)0.16 && value <= (Single)0.17)
            {
                result = "1/6";
            }
            else if (value >= (Single)0.14 && value <= (Single)0.143)
            {
                result = "1/7";
            }
            else if (value == (Single)0.125)
            {
                result = "1/8";
            }
            return result;
        }
        //Giá Nhà Thuốc
        #region PharmacySellingItemPrices
        protected virtual PharmacySellingItemPrices GetPharmacySellingItemPricesFromReader(IDataReader reader)
        {
            PharmacySellingItemPrices p = new PharmacySellingItemPrices();

            if (reader.HasColumn("PharmacySellingItemPriceID") && reader["PharmacySellingItemPriceID"] != DBNull.Value)
            {
                p.PharmacySellingItemPriceID = 0;
                try
                {
                    p.PharmacySellingItemPriceID = (long)reader["PharmacySellingItemPriceID"];
                }
                catch
                {

                }
            }

            if (reader.HasColumn("DrugID"))
            {
                p.DrugID = Convert.ToInt64(reader["DrugID"]);
                p.Drug = GetRefDrugGenericDetailFromReader(reader);
            }

            if (reader.HasColumn("PharmacySellingPriceListID") && reader["PharmacySellingPriceListID"] != DBNull.Value)
            {
                p.PharmacySellingPriceListID = (long)reader["PharmacySellingPriceListID"];
            }

            //    try
            //    {
            //        p.ObjPCLExamTypeID = GetExamTypesFromReader(reader);
            //    }
            //    catch
            //    {
            //        p.ObjPCLExamTypeID = null;
            //    }
            //}//Đọc này là Loop luôn do nó móc qua móc lại 2 bảng

            if (reader.HasColumn("BrandName"))
            {
                p.BrandName = reader["BrandName"] == null ? "" : reader["BrandName"].ToString().Trim();
            }

            if (reader.HasColumn("GenericName"))
            {
                p.GenericName = reader["GenericName"] == null ? "" : reader["GenericName"].ToString().Trim();
            }

            if (reader.HasColumn("InsuranceCover"))
            {
                p.InsuranceCover = reader["InsuranceCover"] as bool?;
            }

            if (reader.HasColumn("DrugCode"))
            {
                p.DrugCode = reader["DrugCode"] == null ? "" : reader["DrugCode"].ToString().Trim();
            }
            if (reader.HasColumn("HIDrugCode"))
            {
                p.HIDrugCode = reader["HIDrugCode"] == null ? "" : reader["HIDrugCode"].ToString().Trim();
            }

            if (reader.HasColumn("RecCreatedDate"))
            {
                try
                {
                    p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
                }
                catch
                { }
            }


            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                try
                {
                    p.StaffID = Convert.ToInt64(reader["StaffID"]);
                    p.ObjStaffID = new Staff();
                    p.ObjStaffID.StaffID = p.StaffID;

                    if (reader.HasColumn("StaffIDName"))
                    {
                        p.ObjStaffID.FullName = reader["StaffIDName"] == null ? "" : reader["StaffIDName"].ToString().Trim();
                    }
                }
                catch
                { }
            }
            p.NormalPrice = 0;
            p.SuggestPrice = 0;
            p.PriceForHIPatient = 0;
            p.HIAllowedPrice = 0;
            p.SuggestPriceForHI = 0;


            if (reader.HasColumn("ContractPriceBeforeVAT") && reader["ContractPriceBeforeVAT"] != DBNull.Value)
            {
                p.ContractPriceBeforeVAT = Convert.ToDecimal(reader["ContractPriceBeforeVAT"]);
            }
            if (reader.HasColumn("ContractPriceAfterVAT") && reader["ContractPriceAfterVAT"] != DBNull.Value)
            {
                p.ContractPriceAfterVAT = Convert.ToDecimal(reader["ContractPriceAfterVAT"]);
            }
            if (reader.HasColumn("RefHIAllowedPrice") && reader["RefHIAllowedPrice"] != DBNull.Value)
            {
                p.RefHIAllowedPrice = Convert.ToDecimal(reader["RefHIAllowedPrice"]);
            }

            if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
            {
                p.NormalPrice = Convert.ToDecimal(reader["NormalPrice"]);
            }

            if (reader.HasColumn("SuggestPrice") && reader["SuggestPrice"] != DBNull.Value)
            {
                p.SuggestPrice = Convert.ToDecimal(reader["SuggestPrice"]);
            }

            if (reader.HasColumn("SuggestPriceForHI") && reader["SuggestPriceForHI"] != DBNull.Value)
            {
                p.SuggestPriceForHI = Convert.ToDecimal(reader["SuggestPriceForHI"]);
            }

            if (reader.HasColumn("PriceForHIPatient") && reader["PriceForHIPatient"] != DBNull.Value)
            {
                p.PriceForHIPatient = Convert.ToDecimal(reader["PriceForHIPatient"]);
            }

            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = Convert.ToDecimal(reader["HIAllowedPrice"]);
            }

            if (reader.HasColumn("EffectiveDate"))
            {
                try
                {
                    p.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"]);
                }
                catch
                {
                }
            }

            //Ext Prop cho Lưới Tạo Bảng Giá Hàng Loạt
            p.NormalPrice_Old = p.NormalPrice;
            p.PriceForHIPatient_Old = p.PriceForHIPatient;
            p.HIAllowedPrice_Old = p.HIAllowedPrice;
            //Ext Prop cho Lưới Tạo Bảng Giá Hàng Loạt


            if (reader.HasColumn("inviIDBefore") && reader["inviIDBefore"] != DBNull.Value)
            {
                p.inviIDBefore = (long)reader["inviIDBefore"];
            }
            if (reader.HasColumn("InCostBefore") && reader["InCostBefore"] != DBNull.Value)
            {
                p.InCostBefore = Convert.ToDecimal(reader["InCostBefore"]);
            }


            if (reader.HasColumn("inviID") && reader["inviID"] != DBNull.Value)
            {
                p.inviID = (long)reader["inviID"];
            }
            if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
            {
                p.InCost = Convert.ToDecimal(reader["InCost"]);
            }
            if (reader.HasColumn("InBuyingPrice") && reader["InBuyingPrice"] != DBNull.Value)
            {
                p.InBuyingPrice = Convert.ToDecimal(reader["InBuyingPrice"]);
            }
            if (reader.HasColumn("PerCentProfit") && reader["PerCentProfit"] != DBNull.Value)
            {
                p.PercentProfit = Convert.ToDecimal(reader["PerCentProfit"]).ToString("#,##0.##") + "%";
            }

            if (reader.HasColumn("Notes"))
            {
                p.Notes = reader["Notes"].ToString();
            }
            if (reader.HasColumn("StaffNotes"))
            {
                p.StaffNotes = reader["StaffNotes"].ToString();
            }
            return p;
        }
        protected virtual List<PharmacySellingItemPrices> GetPharmacySellingItemPricesColectionsFromReader(IDataReader reader)
        {
            List<PharmacySellingItemPrices> p = new List<PharmacySellingItemPrices>();
            while (reader.Read())
            {
                p.Add(GetPharmacySellingItemPricesFromReader(reader));
            }
            return p;
        }
        #endregion

        #region PharmacySellingItemPrices
        protected virtual PharmacyReferenceItemPrice GetPharmacyReferenceItemPriceFromReader(IDataReader reader)
        {
            PharmacyReferenceItemPrice p = new PharmacyReferenceItemPrice();

            if (reader.HasColumn("ReferenceItemPriceID") && reader["ReferenceItemPriceID"] != DBNull.Value)
            {
                p.ReferenceItemPriceID = Convert.ToInt64(reader["ReferenceItemPriceID"]);
            }

            if (reader.HasColumn("ReferencePriceListID") && reader["ReferencePriceListID"] != DBNull.Value)
            {
                p.ReferencePriceListID = Convert.ToInt64(reader["ReferencePriceListID"]);
            }

            if (reader.HasColumn("ContractPriceAfterVAT") && reader["ContractPriceAfterVAT"] != DBNull.Value)
            {
                p.ContractPriceAfterVAT = Convert.ToDecimal(reader["ContractPriceAfterVAT"]);
                p.ContractPriceAfterVAT_Old = p.ContractPriceAfterVAT;
            }

            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = Convert.ToDecimal(reader["HIAllowedPrice"]);
                p.HIAllowedPrice_Old = p.HIAllowedPrice;
            }

            if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
            {
                p.Drug = GetRefDrugGenericDetailFromReader(reader);
            }

            return p;
        }
        protected virtual List<PharmacyReferenceItemPrice> GetPharmacyReferenceItemPriceColectionsFromReader(IDataReader reader)
        {
            List<PharmacyReferenceItemPrice> p = new List<PharmacyReferenceItemPrice>();
            while (reader.Read())
            {
                p.Add(GetPharmacyReferenceItemPriceFromReader(reader));
            }
            return p;
        }
        #endregion

        #region PharmacyReferencePriceList
        protected virtual PharmacyReferencePriceList GetPharmacyReferencePriceListFromReader(IDataReader reader)
        {
            PharmacyReferencePriceList p = new PharmacyReferencePriceList();
            if (reader.HasColumn("ReferencePriceListID") && reader["ReferencePriceListID"] != DBNull.Value)
            {
                p.ReferencePriceListID = Convert.ToInt64(reader["ReferencePriceListID"]);
            }
            if (reader.HasColumn("Title") && reader["Title"] != DBNull.Value)
            {
                p.Title = reader["Title"].ToString();
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.CreatedStaff = new Staff();
                p.CreatedStaff.StaffID = Convert.ToInt64(reader["StaffID"]);
                if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                {
                    p.CreatedStaff.FullName = reader["FullName"].ToString();
                }
            }
            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
            }
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = Convert.ToBoolean(reader["IsActive"]);
            }
            return p;
        }
        protected virtual List<PharmacyReferencePriceList> GetPharmacyReferencePriceListColectionsFromReader(IDataReader reader)
        {
            List<PharmacyReferencePriceList> p = new List<PharmacyReferencePriceList>();
            while (reader.Read())
            {
                p.Add(GetPharmacyReferencePriceListFromReader(reader));
            }
            return p;
        }
        #endregion

        #region 
        protected virtual PharmacySellingPriceList GetPharmacySellingPriceListFromReader(IDataReader reader)
        {
            PharmacySellingPriceList p = new PharmacySellingPriceList();
            p.PharmacySellingPriceListID = (long)reader["PharmacySellingPriceListID"];
            p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
            p.PriceListTitle = reader["PriceListTitle"] != DBNull.Value ? reader["PriceListTitle"].ToString() : "";
            p.StaffID = (long)reader["StaffID"];
            p.ApprovedStaffID = reader["ApprovedStaffID"] as long?;
            p.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"]);

            p.ObjStaffID = new Staff();
            p.ObjStaffID.StaffID = p.StaffID;

            if (reader.HasColumn("StaffIDName"))
            {
                p.ObjStaffID.FullName = reader["StaffIDName"] == null ? "" : reader["StaffIDName"].ToString();
            }

            if (reader.HasColumn("IsActive"))
            {
                p.IsActive = (bool)reader["IsActive"];
            }


            p.ObjApprovedStaffID = new Staff();
            if (reader.HasColumn("ApprovedStaffIDName"))
            {
                p.ObjApprovedStaffID.FullName = reader["ApprovedStaffIDName"] == null ? "" : reader["ApprovedStaffIDName"].ToString();
            }

            return p;
        }
        protected virtual List<PharmacySellingPriceList> GetPharmacySellingPriceListColectionsFromReader(IDataReader reader)
        {
            List<PharmacySellingPriceList> p = new List<PharmacySellingPriceList>();
            while (reader.Read())
            {
                p.Add(GetPharmacySellingPriceListFromReader(reader));
            }
            return p;
        }

        #endregion

        #region "PCLExamTestItems"
        protected virtual PCLExamTypeComboItem GetPCLExamTypeComboItemFromReader(IDataReader reader)
        {
            PCLExamTypeComboItem p = new PCLExamTypeComboItem();
            if (reader.HasColumn("PCLExamTypeComboItemID") && reader["PCLExamTypeComboItemID"] != DBNull.Value)
            {
                p.PCLExamTypeComboItemID = (long)reader["PCLExamTypeComboItemID"];
            }
            if (reader.HasColumn("PCLExamTypeComboID") && reader["PCLExamTypeComboID"] != DBNull.Value)
            {
                p.PCLExamTypeComboID = (long)reader["PCLExamTypeComboID"];
            }
            if (reader.HasColumn("PCLExamTypeID") && reader["PCLExamTypeID"] != DBNull.Value)
            {
                p.PCLExamTypeID = (long)reader["PCLExamTypeID"];
            }
            p.PCLExamType = GetPCLExamTypeFromReader(reader);
            return p;
        }

        protected virtual List<PCLExamTypeComboItem> GetPCLExamTypeComboItemColectionFromReader(IDataReader reader)
        {
            List<PCLExamTypeComboItem> p = new List<PCLExamTypeComboItem>();
            while (reader.Read())
            {
                p.Add(GetPCLExamTypeComboItemFromReader(reader));
            }
            return p;
        }

        protected virtual PCLExamTypeCombo GetPCLExamTypeComboFromReader(IDataReader reader)
        {
            PCLExamTypeCombo p = new PCLExamTypeCombo();
            p.PCLExamTypeComboID = (long)reader["PCLExamTypeComboID"];
            p.ComboName = reader["ComboName"].ToString();
            p.ComboDescription = reader["ComboDescription"].ToString();
            if (reader.HasColumn("CreatorStaffID"))
            {
                p.CreatorStaffID = (long)reader["CreatorStaffID"];
            }
            if (reader.HasColumn("FullName"))
            {
                p.StaffName = reader["FullName"].ToString();
            }
            return p;
        }

        protected virtual List<PCLExamTypeCombo> GetPCLExamTypeComboColectionFromReader(IDataReader reader)
        {
            List<PCLExamTypeCombo> p = new List<PCLExamTypeCombo>();
            while (reader.Read())
            {
                p.Add(GetPCLExamTypeComboFromReader(reader));
            }
            return p;
        }



        protected virtual PCLExamTestItems GetPCLExamTestItemsFromReader(IDataReader reader)
        {
            PCLExamTestItems p = new PCLExamTestItems();
            if (reader.HasColumn("PCLExamTestItemID") && reader["PCLExamTestItemID"] != DBNull.Value)
            {
                p.PCLExamTestItemID = (long)reader["PCLExamTestItemID"];
            }
            if (reader.HasColumn("PCLExamTestItemCode") && reader["PCLExamTestItemCode"] != DBNull.Value)
            {
                p.PCLExamTestItemCode = reader["PCLExamTestItemCode"] as string;
            }
            if (reader.HasColumn("PCLExamTestItemName") && reader["PCLExamTestItemName"] != DBNull.Value)
            {
                p.PCLExamTestItemName = reader["PCLExamTestItemName"] as string;
            }
            if (reader.HasColumn("PCLExamTestItemDescription") && reader["PCLExamTestItemDescription"] != DBNull.Value)
            {
                p.PCLExamTestItemDescription = reader["PCLExamTestItemDescription"] as string;
            }
            if (reader.HasColumn("PCLExamTestItemUnit") && reader["PCLExamTestItemUnit"] != DBNull.Value)
            {
                p.PCLExamTestItemUnit = reader["PCLExamTestItemUnit"] as string;
            }
            if (reader.HasColumn("PCLExamTestItemRefScale") && reader["PCLExamTestItemRefScale"] != DBNull.Value)
            {
                p.PCLExamTestItemRefScale = reader["PCLExamTestItemRefScale"] as string;
            }
            if (reader.HasColumn("TestItemIsExamType") && reader["TestItemIsExamType"] != DBNull.Value)
            {
                p.TestItemIsExamType = Convert.ToBoolean(reader["TestItemIsExamType"]);
            }
            p.CodeTMP = p.PCLExamTestItemCode;
            if (reader.HasColumn("IsBold") && reader["IsBold"] != DBNull.Value)
            {
                p.IsBold = (bool)reader["IsBold"];
            }
            if (reader.HasColumn("IsNoNeedResult") && reader["IsNoNeedResult"] != DBNull.Value)
            {
                p.IsNoNeedResult = (bool)reader["IsNoNeedResult"];
            }
            if (reader.HasColumn("Value"))
            {
                p.Value = reader["Value"].ToString();
            }

            if (reader.HasColumn("Value_Old"))
            {
                p.Value_Old = reader["Value_Old"].ToString();
            }

            if (reader.HasColumn("SamplingDate"))
            {
                p.SamplingDate = reader["SamplingDate"] as DateTime?;
            }
            if (reader.HasColumn("PCLExamTypeID") && reader["PCLExamTypeID"] != DBNull.Value)
            {
                p.PCLExamTypeID = (long)reader["PCLExamTypeID"];
            }
            if (reader.HasColumn("PCLExamTypeName") && reader["PCLExamTypeName"] != DBNull.Value)
            {
                p.PCLExamTypeName = reader["PCLExamTypeName"].ToString();
            }
            if (reader.HasColumn("PCLExamTestItemHICode") && reader["PCLExamTestItemHICode"] != DBNull.Value)
            {
                p.PCLExamTestItemHICode = reader["PCLExamTestItemHICode"].ToString();
            }
            if (reader.HasColumn("PCLExamTestItemHIName") && reader["PCLExamTestItemHIName"] != DBNull.Value)
            {
                p.PCLExamTestItemHIName = reader["PCLExamTestItemHIName"].ToString();
            }
            if (reader.HasColumn("IsAbnormal") && reader["IsAbnormal"] != DBNull.Value)
            {
                p.IsAbnormal = Convert.ToBoolean(reader["IsAbnormal"]);
            }
            if (reader.HasColumn("IsTechnique") && reader["IsTechnique"] != DBNull.Value)
            {
                p.IsTechnique = Convert.ToBoolean(reader["IsTechnique"]);
            }
            if (reader.HasColumn("IsForMen") && reader["IsForMen"] != DBNull.Value)
            {
                p.IsForMen = Convert.ToBoolean(reader["IsForMen"]);
            }
            else
            {
                p.IsForMen = null;
            }
            if (reader.HasColumn("PrintIdx") && reader["PrintIdx"] != DBNull.Value)
            {
                p.PrintIdx = Convert.ToInt32(reader["PrintIdx"]);
            }
            if (reader.HasColumn("PCLExamTypeTestItemID") && reader["PCLExamTypeTestItemID"] != DBNull.Value)
            {
                p.PCLExamTypeTestItemID = Convert.ToInt64(reader["PCLExamTypeTestItemID"]);
            }
            if (reader.HasColumn("ColumnValue") && reader["ColumnValue"] != DBNull.Value)
            {
                p.ColumnValue = Convert.ToInt32(reader["ColumnValue"]);
            }
            //▼==== #179
            if (reader.HasColumn("PCLExamTestItemNameEng") && reader["PCLExamTestItemNameEng"] != DBNull.Value)
            {
                p.PCLExamTestItemNameEng = Convert.ToString(reader["PCLExamTestItemNameEng"]);
            }
            if (reader.HasColumn("PCLExamTestItemUnitEng") && reader["PCLExamTestItemUnitEng"] != DBNull.Value)
            {
                p.PCLExamTestItemUnitEng = Convert.ToString(reader["PCLExamTestItemUnitEng"]);
            }
            if (reader.HasColumn("PCLExamTestItemRefScaleEng") && reader["PCLExamTestItemRefScaleEng"] != DBNull.Value)
            {
                p.PCLExamTestItemRefScaleEng = Convert.ToString(reader["PCLExamTestItemRefScaleEng"]);
            }
            //▲==== #179
            return p;
        }
        protected virtual List<PCLExamTestItems> GetPCLExamTestItemsColectionFromReader(IDataReader reader)
        {
            List<PCLExamTestItems> p = new List<PCLExamTestItems>();
            while (reader.Read())
            {
                p.Add(GetPCLExamTestItemsFromReader(reader));
            }
            return p;
        }


        protected virtual PCLExamTypeTestItems GetPCLExamTypeTestItemsFromReader(IDataReader reader)
        {
            PCLExamTypeTestItems p = new PCLExamTypeTestItems();
            if (reader.HasColumn("PCLExamTestItemID") && reader["PCLExamTestItemID"] != DBNull.Value)
            {
                p.PCLExamTestItemID = (long)reader["PCLExamTestItemID"];
            }
            if (reader.HasColumn("PCLExamTypeID") && reader["PCLExamTypeID"] != DBNull.Value)
            {
                p.PCLExamTypeID = (long)reader["PCLExamTypeID"];
            }
            if (reader.HasColumn("PCLExamTypeTestItemID") && reader["PCLExamTypeTestItemID"] != DBNull.Value)
            {
                p.PCLExamTypeTestItemID = (long)reader["PCLExamTypeTestItemID"];
            }
            p.V_PCLExamTestItem = GetPCLExamTestItemsFromReader(reader);

            return p;
        }
        protected virtual List<PCLExamTypeTestItems> GetPCLExamTypeTestItemsColectionFromReader(IDataReader reader)
        {
            List<PCLExamTypeTestItems> p = new List<PCLExamTypeTestItems>();
            while (reader.Read())
            {
                p.Add(GetPCLExamTypeTestItemsFromReader(reader));
            }
            return p;
        }
        #endregion

        #region PCLResultParamImplementations
        protected virtual PCLResultParamImplementations GetPCLResultParamImplementationsFromReader(IDataReader reader)
        {
            if (reader.HasColumn("PCLResultParamImpID") && reader["PCLResultParamImpID"] != DBNull.Value
                && reader.HasColumn("ParamName") && reader["ParamName"] != DBNull.Value
                && reader.HasColumn("ParamEnum") && reader["ParamEnum"] != DBNull.Value
                && reader.HasColumn("ReleaseEnabled") && reader["ReleaseEnabled"] != DBNull.Value
                && reader.HasColumn("IsEnableFilterPerformStaff") && reader["IsEnableFilterPerformStaff"] != DBNull.Value
                && reader.HasColumn("IsEnableFilterResultStaff") && reader["IsEnableFilterResultStaff"] != DBNull.Value)
            {
                var IsEnableFilterPerformStaff = reader["IsEnableFilterPerformStaff"];
                var p = new PCLResultParamImplementations
                {
                    PCLResultParamImpID = (long)reader["PCLResultParamImpID"],
                    ParamName = (string)reader["ParamName"],
                    ParamEnum = Convert.ToInt32(reader["ParamEnum"]),
                    ReleaseEnabled = Convert.ToBoolean(reader["ReleaseEnabled"]),
                    //▼==== #188
                    IsEnableFilterPerformStaff = Convert.ToBoolean(reader["IsEnableFilterPerformStaff"]),
                    IsEnableFilterResultStaff = Convert.ToBoolean(reader["IsEnableFilterResultStaff"])
                    //▲==== #188
                };
                if (reader.HasColumn("PCLExamTypeSubCategoryID") && reader["PCLExamTypeSubCategoryID"] != DBNull.Value)
                {
                    p.PCLExamTypeSubCategoryID = reader["PCLExamTypeSubCategoryID"] as long?;
                }
                return p;
            }

            return null;
        }
        protected virtual List<PCLResultParamImplementations> GetPCLResultParamImplementationsColectionFromReader(IDataReader reader)
        {
            var p = new List<PCLResultParamImplementations>();
            while (reader.Read())
            {
                p.Add(GetPCLResultParamImplementationsFromReader(reader));
            }
            return p;
        }
        #endregion

        #region PCLExamTypeSubCategory
        protected virtual PCLExamTypeSubCategory GetPCLExamTypeSubCategoryFromReader(IDataReader reader)
        {
            var p = new PCLExamTypeSubCategory
            {
                PCLExamTypeSubCategoryID = (long)reader["PCLExamTypeSubCategoryID"],
                V_PCLMainCategory = Convert.ToInt64(reader["V_PCLMainCategory"]),
                PCLSubCategoryName = (string)reader["PCLSubCategoryName"],
                PCLSubCategoryDescription = (string)reader["PCLSubCategoryDescription"]
            };
            return p;
        }
        protected virtual List<PCLExamTypeSubCategory> GetPCLExamTypeSubCategoryColectionFromReader(IDataReader reader)
        {
            var p = new List<PCLExamTypeSubCategory>();
            while (reader.Read())
            {
                p.Add(GetPCLExamTypeSubCategoryFromReader(reader));
            }
            return p;
        }
        #endregion

        #region "HITransactionType"
        protected virtual HITransactionType GetHITransactionTypeFromReader(IDataReader reader)
        {
            var p = new HITransactionType { HITTypeID = (long)reader["HITTypeID"] };

            if (reader.HasColumn("HITypeName"))
            {
                p.HITypeName = reader["HITypeName"] as string;
            }

            if (reader.HasColumn("HITypeDescription"))
            {
                p.HITypeDescription = reader["HITypeDescription"] as string;
            }

            if (reader.HasColumn("HITypeNamNgoaiTru"))
            {
                p.HITypeNamNgoaiTru = reader["HITypeNamNgoaiTru"] as string;
            }


            if (reader.HasColumn("IdxNgoaiTru") && reader["IdxNgoaiTru"] != DBNull.Value)
            {
                p.IdxNgoaiTru = Convert.ToInt32(reader["IdxNgoaiTru"]);
            }

            if (reader.HasColumn("HITypeNameNoiTru"))
            {
                p.HITypeNameNoiTru = reader["HITypeNameNoiTru"] as string;
            }

            if (reader.HasColumn("IdxNoiTru") && reader["IdxNoiTru"] != DBNull.Value)
            {
                p.IdxNoiTru = Convert.ToInt32(reader["IdxNoiTru"]);
            }

            if (reader.HasColumn("NameByTemp21"))
            {
                p.NameByTemp21 = reader["NameByTemp21"] as string;
            }


            if (reader.HasColumn("IdxByTemp21"))
            {
                p.IdxByTemp21 = reader["IdxByTemp21"] as string;
            }

            if (reader.HasColumn("ParentID"))
            {
                p.ParentID = reader["ParentID"] as long?;
            }
            if (reader.HasColumn("IsShowOnDrugConfig") && reader["IsShowOnDrugConfig"] != DBNull.Value)
            {
                p.IsShowOnDrugConfig = Convert.ToBoolean(reader["IsShowOnDrugConfig"]);
            }
            if (reader.HasColumn("IdxTemp12Name"))
            {
                p.IdxTemp12Name = reader["IdxTemp12Name"] as string;
            }
            return p;
        }
        protected virtual List<HITransactionType> GetHITransactionTypeColectionFromReader(IDataReader reader)
        {
            var p = new List<HITransactionType>();
            while (reader.Read())
            {
                p.Add(GetHITransactionTypeFromReader(reader));
            }
            return p;
        }
        #endregion

        #region "RefMedicalServiceGroups"
        protected virtual RefMedicalServiceGroups GetRefMedicalServiceGroupsFromReader(IDataReader reader)
        {
            var p = new RefMedicalServiceGroups { MedicalServiceGroupID = (long)reader["MedicalServiceGroupID"] };

            if (reader.HasColumn("MedicalServiceGroupCode") && reader["MedicalServiceGroupCode"] != DBNull.Value)
            {
                p.MedicalServiceGroupCode = reader["MedicalServiceGroupCode"] as string;
            }

            if (reader.HasColumn("MedicalServiceGroupName") && reader["MedicalServiceGroupName"] != DBNull.Value)
            {
                p.MedicalServiceGroupName = reader["MedicalServiceGroupName"] as string;
            }

            if (reader.HasColumn("MedicalServiceGroupDescription") && reader["MedicalServiceGroupDescription"] != DBNull.Value)
            {
                p.MedicalServiceGroupName = reader["MedicalServiceGroupDescription"] as string;
            }
            return p;
        }

        protected virtual List<RefMedicalServiceGroups> GetRefMedicalServiceGroupsColectionFromReader(IDataReader reader)
        {
            var p = new List<RefMedicalServiceGroups>();
            while (reader.Read())
            {
                p.Add(GetRefMedicalServiceGroupsFromReader(reader));
            }
            return p;
        }
        #endregion

        #region "PharmacySellPriceProfitScale"
        protected virtual PharmacySellPriceProfitScale GetPharmacySellPriceProfitScaleFromReader(IDataReader reader)
        {
            var p = new PharmacySellPriceProfitScale
            {
                PharmacySellPriceProfitScaleID = (long)reader["PharmacySellPriceProfitScaleID"],
                RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"])
            };


            if (reader.HasColumn("BuyingCostFrom"))
            {
                p.BuyingCostFrom = Convert.ToDecimal(reader["BuyingCostFrom"]);
            }

            if (reader.HasColumn("BuyingCostTo"))
            {
                p.BuyingCostTo = Convert.ToDecimal(reader["BuyingCostTo"]);
            }

            if (reader.HasColumn("NormalProfitPercent"))
            {
                p.NormalProfitPercent = Convert.ToDouble(reader["NormalProfitPercent"]);
            }

            if (reader.HasColumn("HIAllowProfitPercent"))
            {
                p.HIAllowProfitPercent = Convert.ToDouble(reader["HIAllowProfitPercent"]);
            }


            if (reader.HasColumn("IsActive"))
            {
                p.IsActive = Convert.ToBoolean(reader["IsActive"]);
            }


            return p;
        }
        protected virtual List<PharmacySellPriceProfitScale> GetPharmacySellPriceProfitScaleColectionFromReader(IDataReader reader)
        {
            var p = new List<PharmacySellPriceProfitScale>();
            while (reader.Read())
            {
                p.Add(GetPharmacySellPriceProfitScaleFromReader(reader));
            }
            return p;
        }
        #endregion
        //Giá Nhà Thuốc

        #region PCLExamTypeExamTestPrint
        protected virtual PCLExamTypeExamTestPrint GetPCLExamTypeExamTestPrintFromReader(IDataReader reader)
        {
            var p = new PCLExamTypeExamTestPrint { ID = (long)reader["ID"] };

            if (reader.HasColumn("PCLExamTypeTestItemID") && reader["PCLExamTypeTestItemID"] != DBNull.Value)
            {
                p.PCLExamTypeTestItemID = (long)reader["PCLExamTypeTestItemID"];
            }

            if (reader.HasColumn("Code"))
            {
                p.Code = reader["Code"] as string;
            }

            if (reader.HasColumn("Name"))
            {
                p.Name = reader["Name"] == null ? "" : reader["Name"].ToString().Trim();
            }

            p.IsBold = false;
            if (reader.HasColumn("IsBold") && reader["IsBold"] != DBNull.Value)
            {
                p.IsBold = Convert.ToBoolean(reader["IsBold"]);
            }

            p.Indent = 0;
            if (reader.HasColumn("Indent") && reader["Indent"] != DBNull.Value)
            {
                p.Indent = Convert.ToInt32(reader["Indent"]);
            }
            p.PrintIndex = 0;
            if (reader.HasColumn("PrintIdx") && reader["PrintIdx"] != DBNull.Value)
            {
                p.PrintIndex = Convert.ToInt32(reader["PrintIdx"]);
            }

            p.IsDisplay = false;
            if (reader.HasColumn("IsDisplay") && reader["IsDisplay"] != DBNull.Value)
            {
                p.IsDisplay = Convert.ToBoolean(reader["IsDisplay"]);
            }

            p.IsNoNeedResult = false;
            if (reader.HasColumn("IsNoNeedResult") && reader["IsNoNeedResult"] != DBNull.Value)
            {
                p.IsNoNeedResult = Convert.ToBoolean(reader["IsNoNeedResult"]);
            }

            if (reader.HasColumn("IsPCLExamType"))
            {
                p.IsPCLExamType = Convert.ToBoolean(reader["IsPCLExamType"]);
            }

            if (reader.HasColumn("IsPCLExamTest"))
            {
                p.IsPCLExamTest = Convert.ToBoolean(reader["IsPCLExamTest"]);
            }

            return p;
        }
        protected virtual List<PCLExamTypeExamTestPrint> GetPCLExamTypeExamTestPrintColectionFromReader(IDataReader reader)
        {
            var p = new List<PCLExamTypeExamTestPrint>();
            while (reader.Read())
            {
                p.Add(GetPCLExamTypeExamTestPrintFromReader(reader));
            }
            return p;
        }
        #endregion

        //<Giá Khoa Dược>
        #region DrugDeptSellingItemPrices
        protected virtual DrugDeptSellingItemPrices GetDrugDeptSellingItemPricesFromReader(IDataReader reader)
        {
            var p = new DrugDeptSellingItemPrices();

            if (reader.HasColumn("DrugDeptSellingItemPriceID"))
            {
                p.DrugDeptSellingItemPriceID = 0;
                try
                {
                    p.DrugDeptSellingItemPriceID = (long)reader["DrugDeptSellingItemPriceID"];
                }
                catch
                {

                }
            }

            if (reader.HasColumn("GenMedProductID"))
            {
                p.GenMedProductID = Convert.ToInt64(reader["GenMedProductID"]);
            }

            if (reader.HasColumn("DrugDeptSellingPriceListID") && reader["DrugDeptSellingPriceListID"] != DBNull.Value)
            {
                p.DrugDeptSellingPriceListID = (long)reader["DrugDeptSellingPriceListID"];
            }

            //    try
            //    {
            //        p.ObjPCLExamTypeID = GetExamTypesFromReader(reader);
            //    }
            //    catch
            //    {
            //        p.ObjPCLExamTypeID = null;
            //    }
            //}//Đọc này là Loop luôn do nó móc qua móc lại 2 bảng

            if (reader.HasColumn("BrandName"))
            {
                p.BrandName = reader["BrandName"] == null ? "" : reader["BrandName"].ToString().Trim();
            }

            if (reader.HasColumn("GenericName"))
            {
                p.GenericName = reader["GenericName"] == null ? "" : reader["GenericName"].ToString().Trim();
            }
            if (reader.HasColumn("Code"))
            {
                p.Code = reader["Code"].ToString().Trim();
            }
            if (reader.HasColumn("InsuranceCover"))
            {
                p.InsuranceCover = reader["InsuranceCover"] as bool?;
            }
            if (reader.HasColumn("HICode"))
            {
                p.HICode = reader["HICode"].ToString().Trim();
            }

            if (reader.HasColumn("RecCreatedDate"))
            {
                try
                {
                    p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
                }
                catch
                { }
            }


            if (reader.HasColumn("StaffID"))
            {
                try
                {
                    p.StaffID = (long)reader["StaffID"];
                    p.ObjStaffID = new Staff();
                    p.ObjStaffID.StaffID = p.StaffID;

                    if (reader.HasColumn("StaffIDName"))
                    {
                        p.ObjStaffID.FullName = reader["StaffIDName"] == null ? "" : reader["StaffIDName"].ToString().Trim();
                    }
                }
                catch
                { }
            }
            p.NormalPrice = 0;
            p.SuggestPrice = 0;
            p.PriceForHIPatient = 0;
            p.HIAllowedPrice = 0;
            if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
            {
                p.NormalPrice = (decimal)reader["NormalPrice"];
            }

            if (reader.HasColumn("SuggestPrice") && reader["SuggestPrice"] != DBNull.Value)
            {
                p.SuggestPrice = (decimal)reader["SuggestPrice"];
            }

            if (reader.HasColumn("PriceForHIPatient") && reader["PriceForHIPatient"] != DBNull.Value)
            {
                p.PriceForHIPatient = (decimal)reader["PriceForHIPatient"];
            }

            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = (decimal)reader["HIAllowedPrice"];
            }

            if (reader.HasColumn("EffectiveDate"))
            {
                try
                {
                    p.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"]);
                }
                catch
                {
                }
            }

            //Ext Prop cho Lưới Tạo Bảng Giá Hàng Loạt
            p.NormalPrice_Old = p.NormalPrice;
            p.PriceForHIPatient_Old = p.PriceForHIPatient;
            p.HIAllowedPrice_Old = p.HIAllowedPrice;
            //Ext Prop cho Lưới Tạo Bảng Giá Hàng Loạt


            if (reader.HasColumn("inviIDBefore") && reader["inviIDBefore"] != DBNull.Value)
            {
                p.inviIDBefore = (long)reader["inviIDBefore"];
            }
            if (reader.HasColumn("InCostBefore") && reader["InCostBefore"] != DBNull.Value)
            {
                p.InCostBefore = (decimal)reader["InCostBefore"];
            }


            if (reader.HasColumn("inviID") && reader["inviID"] != DBNull.Value)
            {
                p.inviID = (long)reader["inviID"];
            }
            if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
            {
                p.InCost = (decimal)reader["InCost"];
            }

            if (reader.HasColumn("PerCentProfit") && reader["PerCentProfit"] != DBNull.Value)
            {
                p.PercentProfit = Convert.ToDecimal(reader["PerCentProfit"]).ToString("#,##0.##") + "%";
            }
            if (reader.HasColumn("Notes"))
            {
                p.Notes = reader["Notes"].ToString();
            }
            if (reader.HasColumn("StaffNotes"))
            {
                p.StaffNotes = reader["StaffNotes"].ToString();
            }
            return p;
        }
        protected virtual List<DrugDeptSellingItemPrices> GetDrugDeptSellingItemPricesColectionsFromReader(IDataReader reader)
        {
            var p = new List<DrugDeptSellingItemPrices>();
            while (reader.Read())
            {
                p.Add(GetDrugDeptSellingItemPricesFromReader(reader));
            }
            return p;
        }
        #endregion
        #region DrugDeptSellingPriceList
        protected virtual DrugDeptSellingPriceList GetDrugDeptSellingPriceListFromReader(IDataReader reader)
        {
            var p = new DrugDeptSellingPriceList
            {
                DrugDeptSellingPriceListID = (long)reader["DrugDeptSellingPriceListID"],
                RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]),
                PriceListTitle = reader["PriceListTitle"] != DBNull.Value ? reader["PriceListTitle"].ToString() : "",
                StaffID = (long)reader["StaffID"],
                ApprovedStaffID = reader["ApprovedStaffID"] as long?,
                EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"])
            };

            p.ObjStaffID = new Staff { StaffID = p.StaffID };

            if (reader.HasColumn("StaffIDName"))
            {
                p.ObjStaffID.FullName = reader["StaffIDName"] == null ? "" : reader["StaffIDName"].ToString();
            }

            if (reader.HasColumn("IsActive"))
            {
                p.IsActive = (bool)reader["IsActive"];
            }

            p.ObjApprovedStaffID = new Staff();
            if (reader.HasColumn("ApprovedStaffIDName"))
            {
                p.ObjApprovedStaffID.FullName = reader["ApprovedStaffIDName"] == null ? "" : reader["ApprovedStaffIDName"].ToString();
            }

            if (reader.HasColumn("V_MedProductType") && reader["V_MedProductType"] != DBNull.Value)
            {
                p.V_MedProductType = (long)reader["V_MedProductType"];
            }

            return p;
        }
        protected virtual List<DrugDeptSellingPriceList> GetDrugDeptSellingPriceListColectionsFromReader(IDataReader reader)
        {
            var p = new List<DrugDeptSellingPriceList>();
            while (reader.Read())
            {
                p.Add(GetDrugDeptSellingPriceListFromReader(reader));
            }
            return p;
        }
        #endregion
        #region "DrugDeptSellPriceProfitScale"
        protected virtual DrugDeptSellPriceProfitScale GetDrugDeptSellPriceProfitScaleFromReader(IDataReader reader)
        {
            var p = new DrugDeptSellPriceProfitScale
            {
                DrugDeptSellPriceProfitScaleID = (long)reader["DrugDeptSellPriceProfitScaleID"],
                RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"])
            };


            if (reader.HasColumn("BuyingCostFrom"))
            {
                p.BuyingCostFrom = Convert.ToDecimal(reader["BuyingCostFrom"]);
            }

            if (reader.HasColumn("BuyingCostTo"))
            {
                p.BuyingCostTo = Convert.ToDecimal(reader["BuyingCostTo"]);
            }

            if (reader.HasColumn("NormalProfitPercent"))
            {
                p.NormalProfitPercent = Convert.ToDouble(reader["NormalProfitPercent"]);
            }

            if (reader.HasColumn("HIAllowProfitPercent"))
            {
                p.HIAllowProfitPercent = Convert.ToDouble(reader["HIAllowProfitPercent"]);
            }


            if (reader.HasColumn("IsActive"))
            {
                p.IsActive = Convert.ToBoolean(reader["IsActive"]);
            }

            if (reader.HasColumn("V_MedProductType") && reader["V_MedProductType"] != DBNull.Value)
            {
                p.V_MedProductType = (long)reader["V_MedProductType"];
            }

            return p;
        }
        protected virtual List<DrugDeptSellPriceProfitScale> GetDrugDeptSellPriceProfitScaleColectionFromReader(IDataReader reader)
        {
            var p = new List<DrugDeptSellPriceProfitScale>();
            while (reader.Read())
            {
                p.Add(GetDrugDeptSellPriceProfitScaleFromReader(reader));
            }
            return p;
        }
        #endregion
        //</Giá Khoa Dược>
        protected virtual BedAllocation GetBedAllocationFromReader(IDataReader reader, string prefix = "")
        {
            var colBedAllocationID = prefix + "BedAllocationID";
            var colDeptLocationID = prefix + "DeptLocationID";
            var colBedNumber = prefix + "BedNumber";
            var colMedServiceID = prefix + "MedServiceID";
            var colBAGuid = prefix + "BAGuid";
            var colV_BedLocType = prefix + "V_BedLocType";
            var colIsActive = prefix + "IsActive";
            var colHIBedCode = prefix + "HIBedCode";

            var alloc = new BedAllocation
            {
                BedAllocationID = (long)reader[colBedAllocationID],
                DeptLocationID = (long)reader[colDeptLocationID],
                BedNumber = (string)reader[colBedNumber],
                MedServiceID = (reader[colMedServiceID] as long?).GetValueOrDefault(-1),
                BAGuid = reader[colBAGuid] as string,
                V_BedLocType = (reader[colV_BedLocType] as long?).GetValueOrDefault(-1),
                IsActive = (reader[colIsActive] as bool?).GetValueOrDefault(false)
            };
            /*▼====: #016*/
            if (reader.HasColumn(colHIBedCode) && reader[colHIBedCode] != DBNull.Value)
            {
                alloc.HIBedCode = reader[colHIBedCode].ToString();
            }
            /*▲====: #016*/
            return alloc;
        }
        protected virtual BedPatientAllocs GetBedPatientAllocFromReader(IDataReader reader)
        {
            var p = new BedPatientAllocs
            {
                BedPatientID = (long)reader["BedPatientID"],
                ResponsibleDeptID = (long)reader["ResponsibleDeptID"],
                PatientInBed = (bool)reader["PatientInBed"],
                IsActive = (bool)reader["IsActive"],
                CheckInDate = reader["CheckInDate"] as DateTime?,
                CheckOutDate = reader["CheckOutDate"] as DateTime?,
                ExpectedStayingDays = (reader["ExpectedStayingDays"] as byte?).GetValueOrDefault(0)
            };
            if (reader.HasColumn("Res_DeptID") && reader["Res_DeptID"] != DBNull.Value)
            {
                p.ResponsibleDepartment = GetResposibleDepartmentFromReader(reader, "Res_");
            }
            else
            {
                p.ResponsibleDepartment = null;
            }

            //KMx: Lấy DeptLocation để kiểm tra trả giường trước khi xuất khỏi Khoa Phòng (11/09/2014 10:15).
            if (reader.HasColumn("DeptLocationID") && reader["DeptLocationID"] != DBNull.Value)
            {
                p.ResponsibleDeptLocation = GetDeptLocationFromReader(reader);
            }

            p.VBedAllocation = GetBedAllocationFromReader(reader);
            p.VBedAllocation.VDeptLocation = GetDeptLocationFromReader(reader);
            p.VBedAllocation.VRefMedicalServiceItem = GetMedicalServiceItemFromReader(reader);
            p.IsDeleted = (bool)reader["IsDeleted"];
            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.DoctorStaffID = Convert.ToInt64(reader["DoctorStaffID"]);
                p.DoctorStaff = new Staff
                {
                    StaffID = Convert.ToInt64(reader["DoctorStaffID"])
                };
                if (reader.HasColumn("DoctorStaffFullName") && reader["DoctorStaffFullName"] != DBNull.Value)
                {
                    p.DoctorStaff.FullName = reader["DoctorStaffFullName"].ToString();
                }
            }
            if (reader.HasColumn("BAMedServiceID") && reader["BAMedServiceID"] != DBNull.Value)
            {
                p.BAMedServiceID = Convert.ToInt64(reader["BAMedServiceID"]);
            }
            if (reader.HasColumn("WasLoadedIntoBill") && reader["WasLoadedIntoBill"] != DBNull.Value)
            {
                p.WasLoadedIntoBill = Convert.ToBoolean(reader["WasLoadedIntoBill"]);
            }
            if (reader.HasColumn("NumDeptInDay") && reader["NumDeptInDay"] != DBNull.Value)
            {
                p.NumDeptInDay = Convert.ToInt32(reader["NumDeptInDay"]);
            }
            if (reader.HasColumn("CountBedInDeptDetail") && reader["CountBedInDeptDetail"] != DBNull.Value)
            {
                p.CountBedInDeptDetail = Convert.ToInt32(reader["CountBedInDeptDetail"]);
            }
            return p;
        }
        protected virtual List<BedPatientAllocs> GetBedPatientAllocCollectionFromReader(IDataReader reader)
        {
            var lst = new List<BedPatientAllocs>();
            while (reader.Read())
            {
                lst.Add(GetBedPatientAllocFromReader(reader));
            }
            return lst;
        }

        protected virtual List<BedPatientRegDetail> GetBedPatientRegDetailCollectionFromReader(IDataReader reader)
        {
            var lst = new List<BedPatientRegDetail>();
            while (reader.Read())
            {
                lst.Add(GetBedPatientRegDetailFromReader(reader));
            }
            return lst;
        }


        protected virtual BedPatientRegDetail GetBedPatientRegDetailFromReader(IDataReader reader)
        {
            var p = new BedPatientRegDetail
            {
                PtBedAllocRegDetailID = (long)reader["PtBedAllocRegDetailID"],
                PtRegDetailID = (long)reader["PtRegDetailID"],
                BedPatientID = (long)reader["BedPatientID"],
                RecCreatedDate = (DateTime)reader["RecCreatedDate"],
                BillFromDate = (DateTime)reader["BillFromDate"],
                BillToDate = (DateTime)reader["BillToDate"],
                IsDeleted = (bool)reader["IsDeleted"],
                PatientRegistrationDetail = GetPatientRegistrationDetailsFromReader(reader)
            };


            return p;
        }

        public string ConvertOutwardDrugCollectionToXml(IEnumerable<OutwardDrugInvoice> items)
        {
            if (items != null)
            {
                var sb = new StringBuilder();
                sb.Append("<OutwardDrugInvoice>");
                foreach (OutwardDrugInvoice details in items)
                {
                    if (details.Checked)
                    {
                        sb.Append("<RecInfo>");
                        sb.AppendFormat("<outiID>{0}</outiID>", details.outiID);
                        sb.Append("</RecInfo>");
                    }
                }
                sb.Append("</OutwardDrugInvoice>");
                return sb.ToString();
            }
            return null;
        }
        //
        protected virtual PatientApptLocTargets GetPatientApptLocTargetsFromReader(IDataReader reader)
        {
            var p = new PatientApptLocTargets();

            if (reader.HasColumn("PatientApptTargetID") && reader["PatientApptTargetID"] != DBNull.Value)
            {
                p.PatientApptTargetID = Convert.ToInt64(reader["PatientApptTargetID"]);
            }

            p.ObjDepartmentLocID = new DeptLocation();
            if (reader.HasColumn("DepartmentLocID") && reader["DepartmentLocID"] != DBNull.Value)
            {
                p.ObjDepartmentLocID = GetDeptLocationFromReader(reader);
            }

            //p.ObjApptTimeSegmentID = new ConsultationTimeSegments();
            if (reader.HasColumn("ApptTimeSegmentID") && reader["ApptTimeSegmentID"] != DBNull.Value)
            {
                p.ObjApptTimeSegmentID = GetConsultationTimeSegmentsFromReader(reader);
            }

            if (reader.HasColumn("NumberOfAppt") && reader["NumberOfAppt"] != DBNull.Value)
            {
                p.NumberOfAppt = Convert.ToInt16(reader["NumberOfAppt"]);
            }

            if (reader.HasColumn("StartSequenceNumber") && reader["StartSequenceNumber"] != DBNull.Value)
            {
                p.StartSequenceNumber = Convert.ToInt16(reader["StartSequenceNumber"]);
            }

            if (reader.HasColumn("EndSequenceNumber") && reader["EndSequenceNumber"] != DBNull.Value)
            {
                p.EndSequenceNumber = Convert.ToInt16(reader["EndSequenceNumber"]);
            }

            return p;

        }

        protected virtual List<PatientApptLocTargets> GetPatientApptLocTargetsCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<PatientApptLocTargets>();
            while (reader.Read())
            {
                retVal.Add(GetPatientApptLocTargetsFromReader(reader));
            }
            return retVal;
        }


        #region "PrescriptionNoteTemplates"
        protected virtual PrescriptionNoteTemplates GetPrescriptionNoteTemplatesFromReader(IDataReader reader)
        {
            var p = new PrescriptionNoteTemplates { PrescriptNoteTemplateID = (long)reader["PrescriptNoteTemplateID"] };
            p.Staff = new Staff();
            if (reader.HasColumn("NoteDetails") && reader["NoteDetails"] != DBNull.Value)
            {
                p.NoteDetails = reader["NoteDetails"] as string;
            }

            if (reader.HasColumn("DetailsTemplate") && reader["DetailsTemplate"] != DBNull.Value)
            {
                p.DetailsTemplate = reader["DetailsTemplate"] as string;
            }

            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
            }

            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = Convert.ToBoolean(reader["IsActive"]);
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.Staff.StaffID = (long)reader["StaffID"];
            }

            if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
            {
                p.Staff.FullName = reader["FullName"].ToString();
            }

            if (reader.HasColumn("V_PrescriptionNoteTempType") && reader["V_PrescriptionNoteTempType"] != DBNull.Value)
            {
                var type = (long)reader["V_PrescriptionNoteTempType"];
                if (Enum.IsDefined(typeof(AllLookupValues.V_PrescriptionNoteTempType), type))
                {
                    p.V_PrescriptionNoteTempType = (AllLookupValues.V_PrescriptionNoteTempType)type;
                }
                else
                {
                    p.V_PrescriptionNoteTempType = AllLookupValues.V_PrescriptionNoteTempType.PrescriptionNoteGen;
                }
            }
            return p;
        }
        protected virtual List<PrescriptionNoteTemplates> GetPrescriptionNoteTemplatesColectionFromReader(IDataReader reader)
        {
            var p = new List<PrescriptionNoteTemplates>();
            while (reader.Read())
            {
                p.Add(GetPrescriptionNoteTemplatesFromReader(reader));
            }
            return p;
        }
        #endregion

        #region "PrescriptionTemplate"
        protected virtual PrescriptionTemplate GetPrescriptionTemplateFromReader(IDataReader reader)
        {
            var p = new PrescriptionTemplate();
            p.prescription = new Prescription();


            if (reader.HasColumn("PrescriptionsTemplateID") && reader["PrescriptionsTemplateID"] != DBNull.Value)
            {
                p.PrescriptionTemplateID = (long)reader["PrescriptionsTemplateID"];
            }

            if (reader.HasColumn("PrescriptID") && reader["PrescriptID"] != DBNull.Value)
            {
                p.PrescriptID = (long)reader["PrescriptID"];
                p.prescription.PrescriptID = (long)reader["PrescriptID"];
            }

            if (reader.HasColumn("PrescriptDetailsStr") && reader["PrescriptDetailsStr"] != DBNull.Value)
            {
                p.prescription.PrescriptDetailsStr = reader["PrescriptDetailsStr"].ToString();
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = (long)reader["StaffID"];
            }

            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.DoctorStaffID = (long)reader["DoctorStaffID"];
            }

            if (reader.HasColumn("Comment") && reader["Comment"] != DBNull.Value)
            {
                p.Comment = reader["Comment"].ToString();
            }

            if (reader.HasColumn("CreateDate") && reader["CreateDate"] != DBNull.Value)
            {
                p.RecDateCreated = (DateTime)reader["CreateDate"];
            }

            return p;
        }
        protected virtual List<PrescriptionTemplate> GetPrescriptionTemplateColectionFromReader(IDataReader reader)
        {
            var p = new List<PrescriptionTemplate>();
            while (reader.Read())
            {
                p.Add(GetPrescriptionTemplateFromReader(reader));
            }
            return p;
        }
        #endregion

        protected virtual UserSubAuthorization GetUserSubAuthorizationFromReader(IDataReader reader)
        {
            var p = new UserSubAuthorization();
            p.AccountAuth = new UserAccount();
            p.AccountSub = new UserAccount();

            if (reader.HasColumn("SubUserAuthorizationID") && reader["SubUserAuthorizationID"] != DBNull.Value)
            {
                p.SubUserAuthorizationID = Convert.ToInt64(reader["SubUserAuthorizationID"]);
            }

            if (reader.HasColumn("AccountIDAuth") && reader["AccountIDAuth"] != DBNull.Value)
            {
                p.AccountIDAuth = Convert.ToInt64(reader["AccountIDAuth"]);
                p.AccountAuth.AccountID = Convert.ToInt64(reader["AccountIDAuth"]);
            }

            if (reader.HasColumn("AccountIDSub") && reader["AccountIDSub"] != DBNull.Value)
            {
                p.AccountIDSub = Convert.ToInt64(reader["AccountIDSub"]);
                p.AccountSub.AccountID = Convert.ToInt64(reader["AccountIDSub"]);
            }

            if (reader.HasColumn("AuthPwd") && reader["AuthPwd"] != DBNull.Value)
            {
                p.AuthPwd = reader["AuthPwd"].ToString();
            }

            if (reader.HasColumn("DoctorName") && reader["DoctorName"] != DBNull.Value)
            {
                p.AccountAuth.AccountName = reader["DoctorName"].ToString();
            }

            if (reader.HasColumn("SubAuthoName") && reader["SubAuthoName"] != DBNull.Value)
            {
                p.AccountSub.AccountName = reader["SubAuthoName"].ToString();
            }

            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                p.RecCreatedDate = (DateTime)reader["RecCreatedDate"];
            }

            p.AccountAuth.Staff = GetStaffFromReader(reader);
            return p;
        }

        protected virtual List<UserSubAuthorization> GetUserSubAuthorizationCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<UserSubAuthorization>();
            while (reader.Read())
            {
                retVal.Add(GetUserSubAuthorizationFromReader(reader));
            }
            return retVal;
        }

        protected virtual UserOfficialHistory GetUserOfficialHistoryFromReader(IDataReader reader)
        {
            var p = new UserOfficialHistory();
            p.OfficialAccount = new Staff();
            if (reader.HasColumn("UOHistoryID") && reader["UOHistoryID"] != DBNull.Value)
            {
                p.UOHistoryID = Convert.ToInt64(reader["UOHistoryID"]);
            }
            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
            }
            if (reader.HasColumn("OfficialAccountID") && reader["OfficialAccountID"] != DBNull.Value)
            {
                p.OfficialAccountID = Convert.ToInt64(reader["OfficialAccountID"]);
                p.OfficialAccount = GetStaffFromReader(reader);
            }
            if (reader.HasColumn("LoggedAccountID") && reader["LoggedAccountID"] != DBNull.Value)
            {
                p.LoggedAccountID = Convert.ToInt64(reader["LoggedAccountID"]);
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("LoggedHistoryID") && reader["LoggedHistoryID"] != DBNull.Value)
            {
                p.LoggedHistoryID = Convert.ToInt64(reader["LoggedHistoryID"]);
            }
            return p;
        }

        protected virtual List<ManagementUserOfficial> GetManagementUserOfficialCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<ManagementUserOfficial>();
            while (reader.Read())
            {
                retVal.Add(GetManagementUserOfficialFromReader(reader));
            }
            return retVal;
        }

        protected virtual ManagementUserOfficial GetManagementUserOfficialFromReader(IDataReader reader)
        {
            var p = new ManagementUserOfficial();
            p.OfficialAccount = new Staff();
            if (reader.HasColumn("ManagementUserOfficialID") && reader["ManagementUserOfficialID"] != DBNull.Value)
            {
                p.ManagementUserOfficialID = Convert.ToInt64(reader["ManagementUserOfficialID"]);
            }
            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
            }
            if (reader.HasColumn("UserOfficialID") && reader["UserOfficialID"] != DBNull.Value)
            {
                p.UserOfficialID = Convert.ToInt64(reader["UserOfficialID"]);
                if (reader.HasColumn("UserOfficialFullName") && reader["UserOfficialFullName"] != DBNull.Value)
                {
                    p.OfficialAccount.FullName = reader["UserOfficialFullName"].ToString();
                }
            }
            if (reader.HasColumn("LoginUserID") && reader["LoginUserID"] != DBNull.Value)
            {
                p.LoginUserID = Convert.ToInt64(reader["LoginUserID"]);
                p.LoginUserStaff = new Staff();
                p.LoginUserStaff.StaffID = Convert.ToInt64(reader["LoginUserID"]);
                if (reader.HasColumn("LoginUserStaffFullName") && reader["LoginUserStaffFullName"] != DBNull.Value)
                {
                    p.LoginUserStaff.FullName = reader["LoginUserStaffFullName"].ToString();
                }
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("CanDelete") && reader["CanDelete"] != DBNull.Value)
            {
                p.CanDelete = Convert.ToBoolean(reader["CanDelete"]);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);
                p.CreatedStaff = new Staff();
                p.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);
                if (reader.HasColumn("CreatedStaffFullName") && reader["CreatedStaffFullName"] != DBNull.Value)
                {
                    p.CreatedStaff.FullName = reader["CreatedStaffFullName"].ToString();
                }
            }
            if (reader.HasColumn("FromDate") && reader["FromDate"] != DBNull.Value)
            {
                p.FromDate = Convert.ToDateTime(reader["FromDate"]);
            }
            if (reader.HasColumn("ToDate") && reader["ToDate"] != DBNull.Value)
            {
                p.ToDate = Convert.ToDateTime(reader["ToDate"]);
            }
            if (reader.HasColumn("PatientFindBy") && reader["PatientFindBy"] != DBNull.Value)
            {
                p.PatientFindBy = Convert.ToInt32(reader["PatientFindBy"]);
                switch (p.PatientFindBy)
                {
                    case 0:
                        p.PatientFindByStr = "Ngoại trú";
                        break;
                    case 1:
                        p.PatientFindByStr = "Nội trú";
                        break;
                    case 2:
                        p.PatientFindByStr = "Tất cả";
                        break;
                    default:
                        p.PatientFindByStr = "";
                        break;
                }
            }
            return p;
        }

        protected virtual List<UserOfficialHistory> GetUserOfficialHistoryCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<UserOfficialHistory>();
            while (reader.Read())
            {
                retVal.Add(GetUserOfficialHistoryFromReader(reader));
            }
            return retVal;
        }

        protected virtual RiskFactors GetRiskFactorFromReader(IDataReader reader)
        {
            RiskFactors p = new RiskFactors();
            try
            {
                if (reader.HasColumn("RiskFactorID") && reader["RiskFactorID"] != DBNull.Value)
                {
                    p.RiskFactorID = (long)reader["RiskFactorID"];
                }

                if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
                {
                    p.PatientID = (long)reader["PatientID"];
                }

                if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
                {
                    p.StaffID = (long)reader["StaffID"];
                }
                if (reader.HasColumn("CommonMedRecID") && reader["CommonMedRecID"] != DBNull.Value)
                {
                    p.CommonMedRecID = (long)reader["CommonMedRecID"];
                }


                if (reader.HasColumn("Diabetics") && reader["Diabetics"] != DBNull.Value)
                {
                    p.Diabetics = (bool)reader["Diabetics"];
                }

                if (reader.HasColumn("DiabeticsDescr") && reader["DiabeticsDescr"] != DBNull.Value)
                {
                    p.DiabeticsDescr = reader["DiabeticsDescr"].ToString();
                }


                if (reader.HasColumn("Drinking") && reader["Drinking"] != DBNull.Value)
                {
                    p.Drinking = (bool)reader["Drinking"];
                }

                if (reader.HasColumn("DrinkingDescr") && reader["DrinkingDescr"] != DBNull.Value)
                {
                    p.DrinkingDescr = reader["DrinkingDescr"].ToString();
                }


                if (reader.HasColumn("Dyslipidemia") && reader["Dyslipidemia"] != DBNull.Value)
                {
                    p.Dyslipidemia = (bool)reader["Dyslipidemia"];
                }

                if (reader.HasColumn("DyslipidemiaDescr") && reader["DyslipidemiaDescr"] != DBNull.Value)
                {
                    p.DyslipidemiaDescr = reader["DyslipidemiaDescr"].ToString();
                }


                if (reader.HasColumn("Hypertension") && reader["Hypertension"] != DBNull.Value)
                {
                    p.Hypertension = (bool)reader["Hypertension"];
                }

                if (reader.HasColumn("HypertensionDescr") && reader["HypertensionDescr"] != DBNull.Value)
                {
                    p.HypertensionDescr = reader["HypertensionDescr"].ToString();
                }


                if (reader.HasColumn("Obesity") && reader["Obesity"] != DBNull.Value)
                {
                    p.Obesity = (bool)reader["Obesity"];
                }

                if (reader.HasColumn("ObesityDescr") && reader["ObesityDescr"] != DBNull.Value)
                {
                    p.ObesityDescr = reader["ObesityDescr"].ToString();
                }


                if (reader.HasColumn("Smoking") && reader["Smoking"] != DBNull.Value)
                {
                    p.Smoking = (bool)reader["Smoking"];
                }

                if (reader.HasColumn("SmokingDescr") && reader["SmokingDescr"] != DBNull.Value)
                {
                    p.SmokingDescr = reader["SmokingDescr"].ToString();
                }

                if (reader.HasColumn("Other") && reader["Other"] != DBNull.Value)
                {
                    p.Other = reader["Other"].ToString();
                }

            }
            catch (Exception ex)
            {
                AxLogger.Instance.LogError(ex);
            }
            return p;
        }
        protected virtual List<RiskFactors> GetRiskFactorCollectionFromReader(IDataReader reader)
        {
            List<RiskFactors> RiskFactor = new List<RiskFactors>();
            try
            {
                while (reader.Read())
                {
                    RiskFactor.Add(GetRiskFactorFromReader(reader));
                }
            }
            catch { }

            return RiskFactor;
        }
        protected virtual GenericPayment GetGenericPaymentFromReader(IDataReader reader)
        {
            var p = new GenericPayment
            {
                ReasonDetail = "",
                IsDeleted = false
            };
            if (reader.HasColumn("GenericPaymentID") && reader["GenericPaymentID"] != DBNull.Value)
            {
                p.GenericPaymentID = (long)reader["GenericPaymentID"];
            }
            if (reader.HasColumn("GenericPaymentCode") && reader["GenericPaymentCode"] != DBNull.Value)
            {
                p.GenericPaymentCode = Convert.ToString(reader["GenericPaymentCode"]);
            }
            if (reader.HasColumn("V_GenericPaymentType") && reader["V_GenericPaymentType"] != DBNull.Value)
            {
                p.V_GenericPaymentType = (long)reader["V_GenericPaymentType"];
            }
            if (reader.HasColumn("PersonName") && reader["PersonName"] != DBNull.Value)
            {
                p.PersonName = Convert.ToString(reader["PersonName"]);
            }
            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
            {
                p.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
            }
            if (reader.HasColumn("PaymentDate") && reader["PaymentDate"] != DBNull.Value)
            {
                p.PaymentDate = Convert.ToDateTime(reader["PaymentDate"]);
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = (long)reader["StaffID"];
            }
            if (reader.HasColumn("PaymentAmount") && reader["PaymentAmount"] != DBNull.Value)
            {
                p.PaymentAmount = Convert.ToDecimal(reader["PaymentAmount"]);
            }
            if (reader.HasColumn("OrgName") && reader["OrgName"] != DBNull.Value)
            {
                p.OrgName = Convert.ToString(reader["OrgName"]);
            }
            if (reader.HasColumn("LookupReasonID") && reader["LookupReasonID"] != DBNull.Value)
            {
                p.LookupReasonID = (long)reader["LookupReasonID"];
            }
            if (reader.HasColumn("LookupReasonName") && reader["LookupReasonName"] != DBNull.Value)
            {
                p.LookupReasonName = reader["LookupReasonName"].ToString();
                p.ReasonDetail += p.LookupReasonName;
            }
            if (reader.HasColumn("V_GenericPaymentReason") && reader["V_GenericPaymentReason"] != DBNull.Value)
            {
                p.V_GenericPaymentReason = reader["V_GenericPaymentReason"].ToString();
                p.ReasonDetail += "\r" + p.V_GenericPaymentReason;
            }
            if (reader.HasColumn("GeneralNote") && reader["GeneralNote"] != DBNull.Value)
            {
                p.GeneralNote = reader["GeneralNote"].ToString();
            }
            if (reader.HasColumn("V_GenericPaymentTypeName") && reader["V_GenericPaymentTypeName"] != DBNull.Value)
            {
                p.V_GenericPaymentTypeName = reader["V_GenericPaymentTypeName"].ToString();
            }
            if (reader.HasColumn("PersonAddress") && reader["PersonAddress"] != DBNull.Value)
            {
                p.PersonAddress = reader["PersonAddress"].ToString();
            }
            if (reader.HasColumn("PhoneNumber") && reader["PhoneNumber"] != DBNull.Value)
            {
                p.PhoneNumber = reader["PhoneNumber"].ToString();
            }
            if (reader.HasColumn("StaffName") && reader["StaffName"] != DBNull.Value)
            {
                p.StaffName = reader["StaffName"].ToString();
            }
            if (reader.HasColumn("DOB") && reader["DOB"] != DBNull.Value)
            {
                p.DOB = reader["DOB"].ToString();
            }
            if (reader.HasColumn("DeletedTime") && reader["DeletedTime"] != DBNull.Value)
            {
                p.IsDeleted = true;
            }
            //==== #002
            if (reader.HasColumn("VATAmount") && reader["VATAmount"] != DBNull.Value)
            {
                p.VATAmount = Convert.ToDecimal(reader["VATAmount"]);
            }
            if (reader.HasColumn("VATPercent") && reader["VATPercent"] != DBNull.Value)
            {
                p.VATPercent = Convert.ToDouble(reader["VATPercent"]);
            }
            //==== #002
            if (reader.HasColumn("InvoiceNumber") && reader["InvoiceNumber"] != DBNull.Value)
            {
                p.InvoiceNumber = Convert.ToString(reader["InvoiceNumber"]);
            }
            return p;
        }
        // HPT: Hàm đọc danh sách phiếu thu khác (GenericPayment) (18/03/2016)
        protected virtual List<GenericPayment> GetGenericPaymentCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<GenericPayment>();
            while (reader.Read())
            {
                retVal.Add(GetGenericPaymentFromReader(reader));
            }
            return retVal;
        }
        protected virtual List<CharityOrganization> GetCharityOrganizationCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<CharityOrganization>();
            while (reader.Read())
            {
                retVal.Add(GetCharityOrganizationFromReader(reader));
            }
            return retVal;
        }
        protected virtual CharityOrganization GetCharityOrganizationFromReader(IDataReader reader)
        {
            var p = new CharityOrganization();
            if (reader.HasColumn("CharityOrgID") && reader["CharityOrgID"] != DBNull.Value)
            {
                p.CharityOrgID = (long)reader["CharityOrgID"];
            }
            if (reader.HasColumn("CharityOrgName") && reader["CharityOrgName"] != DBNull.Value)
            {
                p.CharityOrgName = reader["CharityOrgName"].ToString();
            }
            if (reader.HasColumn("ContactInfo") && reader["ContactInfo"] != DBNull.Value)
            {
                p.ContactInfo = reader["ContactInfo"].ToString();
            }
            if (reader.HasColumn("TaxCode") && reader["TaxCode"] != DBNull.Value)
            {
                p.TaxCode = reader["TaxCode"].ToString();
            }
            if (reader.HasColumn("TaxMemberAddress") && reader["TaxMemberAddress"] != DBNull.Value)
            {
                p.TaxMemberAddress = reader["TaxMemberAddress"].ToString();
            }
            if (reader.HasColumn("TaxMemberName") && reader["TaxMemberName"] != DBNull.Value)
            {
                p.TaxMemberName = reader["TaxMemberName"].ToString();
            }
            return p;
        }
        protected virtual List<CharitySupportFund> GetCharitySupportFundCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<CharitySupportFund>();
            while (reader.Read())
            {
                retVal.Add(GetCharitySupportFundFromReader(reader));
            }
            return retVal;
        }
        protected virtual CharitySupportFund GetCharitySupportFundFromReader(IDataReader reader)
        {
            var p = new CharitySupportFund
            {
                RecordState = CommonRecordState.UNCHANGED,
                CharityFundID = (long)reader["CharityFundID"],
                PtRegistrationID = (long)reader["PtRegistrationID"],
                IsUsedPercent = (bool)reader["IsUsedPercent"]
            };
            if (reader.HasColumn("BillingInvID") && reader["BillingInvID"] != DBNull.Value)
            {
                p.BillingInvID = (long)reader["BillingInvID"];
            }
            else
            {
                p.BillingInvID = 0;
            }
            p.CharityOrgInfo = new CharityOrganization();
            if (reader.HasColumn("CharityOrgID") && reader["CharityOrgID"] != DBNull.Value)
            {
                p.CharityOrgInfo.CharityOrgID = (long)reader["CharityOrgID"];
            }
            if (reader.HasColumn("CharityOrgName") && reader["CharityOrgName"] != DBNull.Value)
            {
                p.CharityOrgInfo.CharityOrgName = reader["CharityOrgName"].ToString();
            }
            if (reader.HasColumn("PercentValue") && reader["PercentValue"] != DBNull.Value)
            {
                p.PercentValue = (Decimal)reader["PercentValue"];
            }
            if (reader.HasColumn("AmountValue") && reader["AmountValue"] != DBNull.Value)
            {
                p.AmountValue = (Decimal)reader["AmountValue"];
            }
            if (reader.HasColumn("BalanceAmount") && reader["BalanceAmount"] != DBNull.Value)
            {
                p.BalanceAmount = (Decimal)reader["BalanceAmount"];
            }

            p.CreatedStaff = new Staff();
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.CreatedStaff.StaffID = (long)reader["StaffID"];
            }
            if (reader.HasColumn("StaffName") && reader["StaffName"] != DBNull.Value)
            {
                p.CreatedStaff.FullName = reader["StaffName"].ToString();
            }
            if (reader.HasColumn("IsHighTechServiceBill") && reader["IsHighTechServiceBill"] != DBNull.Value)
            {
                p.IsHighTechServiceBill = Convert.ToBoolean(reader["IsHighTechServiceBill"]);
            }
            /*TMA 10/11/2017*/
            if (reader.HasColumn("V_CharityObjectType") && reader["V_CharityObjectType"] != DBNull.Value)
            {
                p.V_CharityObjectType = (long)reader["V_CharityObjectType"];
                p.ObjV_CharityObjectType = new Lookup();
                p.ObjV_CharityObjectType.LookupID = (long)reader["V_CharityObjectType"];

                if (reader.HasColumn("V_CharityObjectType"))
                {
                    p.ObjV_CharityObjectType.ObjectValue = reader["V_CharityObjectType"] == null ? "" : reader["V_CharityObjectType"].ToString().Trim();
                }
            }

            /*TMA 10/11/2017*/
            return p;
        }

        protected virtual List<AbdominalUltrasound> GetAbdominalUltrasoundResultCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<AbdominalUltrasound>();
            while (reader.Read())
            {
                retVal.Add(GetAbdominalUltrasoundResultFromReader(reader));
            }
            return retVal;
        }

        protected virtual AbdominalUltrasound GetAbdominalUltrasoundResultFromReader(IDataReader reader)
        {
            var p = new AbdominalUltrasound();

            if (reader.HasColumn("AbdominalUltrasoundID") && reader["AbdominalUltrasoundID"] != DBNull.Value)
            {
                p.AbdominalUltrasoundID = Convert.ToInt64(reader["AbdominalUltrasoundID"]);
            }

            if (reader.HasColumn("PatientPCLReqID") && reader["PatientPCLReqID"] != DBNull.Value)
            {
                p.PatientPCLReqID = Convert.ToInt64(reader["PatientPCLReqID"]);
            }

            if (reader.HasColumn("Liver") && reader["Liver"] != DBNull.Value)
            {
                p.Liver = reader["Liver"].ToString();
            }

            if (reader.HasColumn("Gallbladder") && reader["Gallbladder"] != DBNull.Value)
            {
                p.Gallbladder = reader["Gallbladder"].ToString();
            }

            if (reader.HasColumn("Pancreas") && reader["Pancreas"] != DBNull.Value)
            {
                p.Pancreas = reader["Pancreas"].ToString();
            }

            if (reader.HasColumn("Spleen") && reader["Spleen"] != DBNull.Value)
            {
                p.Spleen = reader["Spleen"].ToString();
            }

            if (reader.HasColumn("LeftKidney") && reader["LeftKidney"] != DBNull.Value)
            {
                p.LeftKidney = reader["LeftKidney"].ToString();
            }

            if (reader.HasColumn("RightKidney") && reader["RightKidney"] != DBNull.Value)
            {
                p.RightKidney = reader["RightKidney"].ToString();
            }

            if (reader.HasColumn("Bladder") && reader["Bladder"] != DBNull.Value)
            {
                p.Bladder = reader["Bladder"].ToString();
            }

            if (reader.HasColumn("Prostate") && reader["Prostate"] != DBNull.Value)
            {
                p.Prostate = reader["Prostate"].ToString();
            }

            if (reader.HasColumn("Uterus") && reader["Uterus"] != DBNull.Value)
            {
                p.Uterus = reader["Uterus"].ToString();
            }

            if (reader.HasColumn("RightOvary") && reader["RightOvary"] != DBNull.Value)
            {
                p.RightOvary = reader["RightOvary"].ToString();
            }

            if (reader.HasColumn("LeftOvary") && reader["LeftOvary"] != DBNull.Value)
            {
                p.LeftOvary = reader["LeftOvary"].ToString();
            }

            if (reader.HasColumn("PeritonealFluid") && reader["PeritonealFluid"] != DBNull.Value)
            {
                p.PeritonealFluid = reader["PeritonealFluid"].ToString();
            }

            if (reader.HasColumn("PleuralFluid") && reader["PleuralFluid"] != DBNull.Value)
            {
                p.PleuralFluid = reader["PleuralFluid"].ToString();
            }

            if (reader.HasColumn("AbdominalAortic") && reader["AbdominalAortic"] != DBNull.Value)
            {
                p.AbdominalAortic = reader["AbdominalAortic"].ToString();
            }

            if (reader.HasColumn("Conclusion") && reader["Conclusion"] != DBNull.Value)
            {
                p.Conclusion = reader["Conclusion"].ToString();
            }

            return p;
        }
        protected virtual List<OvertimeWorkingSchedule> GetOvertimeWorkingScheduleCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<OvertimeWorkingSchedule>();
            while (reader.Read())
            {
                retVal.Add(GetOvertimeWorkingScheduleFromReader(reader));
            }
            return retVal;
        }

        protected virtual OvertimeWorkingSchedule GetOvertimeWorkingScheduleFromReader(IDataReader reader)
        {
            var p = new OvertimeWorkingSchedule();

            if (reader.HasColumn("OvertimeWorkingScheduleID") && reader["OvertimeWorkingScheduleID"] != DBNull.Value)
            {
                p.OvertimeWorkingScheduleID = Convert.ToInt64(reader["OvertimeWorkingScheduleID"]);
            }
            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.DoctorStaffID = Convert.ToInt64(reader["DoctorStaffID"]);
            }
            if (reader.HasColumn("StaffName") && reader["StaffName"] != DBNull.Value)
            {
                p.StaffName = Convert.ToString(reader["StaffName"]);
            }
            if (reader.HasColumn("Week") && reader["Week"] != DBNull.Value)
            {
                p.Week = Convert.ToInt32(reader["Week"]);
            }
            if (reader.HasColumn("WorkDate") && reader["WorkDate"] != DBNull.Value)
            {
                p.WorkDate = Convert.ToDateTime(reader["WorkDate"]);
            }
            if (reader.HasColumn("FromTime") && reader["FromTime"] != DBNull.Value)
            {
                p.FromTime = Convert.ToDateTime(reader["FromTime"]);
            }
            if (reader.HasColumn("ToTime") && reader["ToTime"] != DBNull.Value)
            {
                p.ToTime = Convert.ToDateTime(reader["ToTime"]);
            }
            if (reader.HasColumn("DeptLocID") && reader["DeptLocID"] != DBNull.Value)
            {
                p.DeptLocID = Convert.ToInt64(reader["DeptLocID"]);
            }
            if (reader.HasColumn("WorkTime") && reader["WorkTime"] != DBNull.Value)
            {
                p.WorkTime = Convert.ToString(reader["WorkTime"]);
            }
            if (reader.HasColumn("LocationName") && reader["LocationName"] != DBNull.Value)
            {
                p.LocationName = Convert.ToString(reader["LocationName"]);
            }
            return p;
        }
        protected virtual List<OvertimeWorkingWeek> GetOvertimeWorkingWeekCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<OvertimeWorkingWeek>();
            while (reader.Read())
            {
                retVal.Add(GetOvertimeWorkingWeekFromReader(reader));
            }
            return retVal;
        }

        protected virtual OvertimeWorkingWeek GetOvertimeWorkingWeekFromReader(IDataReader reader)
        {
            var p = new OvertimeWorkingWeek();

            if (reader.HasColumn("OvertimeWorkingWeekID") && reader["OvertimeWorkingWeekID"] != DBNull.Value)
            {
                p.OvertimeWorkingWeekID = Convert.ToInt64(reader["OvertimeWorkingWeekID"]);
            }
            if (reader.HasColumn("Week") && reader["Week"] != DBNull.Value)
            {
                p.Week = Convert.ToInt32(reader["Week"]);
            }
            if (reader.HasColumn("OvertimeWorkingNotes") && reader["OvertimeWorkingNotes"] != DBNull.Value)
            {
                p.OvertimeWorkingNotes = Convert.ToString(reader["OvertimeWorkingNotes"]);
            }
            if (reader.HasColumn("FromDate") && reader["FromDate"] != DBNull.Value)
            {
                p.FromDate = Convert.ToDateTime(reader["FromDate"]);
            }
            if (reader.HasColumn("ToDate") && reader["ToDate"] != DBNull.Value)
            {
                p.ToDate = Convert.ToDateTime(reader["ToDate"]);
            }
            if (reader.HasColumn("V_OvertimeWorkingWeekStatus") && reader["V_OvertimeWorkingWeekStatus"] != DBNull.Value)
            {
                p.V_OvertimeWorkingWeekStatus = Convert.ToInt64(reader["V_OvertimeWorkingWeekStatus"]);
            }
            return p;
        }
        //▼====: #191
        protected virtual CRSAWeek GetCRSAWeekFromReader(IDataReader reader)
        {
            var p = new CRSAWeek();
            if (reader.HasColumn("CRSAWeekID") && reader["CRSAWeekID"] != DBNull.Value)
            {
                p.CRSAWeekID = Convert.ToInt64(reader["CRSAWeekID"]);
            }
            if (reader.HasColumn("Week") && reader["Week"] != DBNull.Value)
            {
                p.Week = Convert.ToInt32(reader["Week"]);
            }
            if (reader.HasColumn("Week") && reader["Week"] != DBNull.Value)
            {
                p.Week = Convert.ToInt32(reader["Week"]);
            }
            if (reader.HasColumn("FromDate") && reader["FromDate"] != DBNull.Value)
            {
                p.FromDate = Convert.ToDateTime(reader["FromDate"]);
            }
            if (reader.HasColumn("ToDate") && reader["ToDate"] != DBNull.Value)
            {
                p.ToDate = Convert.ToDateTime(reader["ToDate"]);
            }
            if (reader.HasColumn("CRSAWeekNotes") && reader["CRSAWeekNotes"] != DBNull.Value)
            {
                p.CRSAWeekNotes = Convert.ToString(reader["CRSAWeekNotes"]);
            }
            if (reader.HasColumn("V_CRSAWeekStatus") && reader["V_CRSAWeekStatus"] != DBNull.Value)
            {
                p.V_CRSAWeekStatus = Convert.ToInt64(reader["V_CRSAWeekStatus"]);
            }
            if (reader.HasColumn("Is_Deleted") && reader["Is_Deleted"] != DBNull.Value)
            {
                p.Is_Deleted = Convert.ToBoolean(reader["Is_Deleted"]);
            }
            return p;
        }
        //▲====: #191
        //HPT 26/12/2016: read tình hình nhân sự - bệnh nhân trong khoa

        protected virtual StaffDeptPresence GetStaffDeptPresenceFromReader(IDataReader reader)
        {
            var p = new StaffDeptPresence();
            while (reader.Read())
            {
                if (reader.HasColumn("StaffDeptPresenceID") && reader["StaffDeptPresenceID"] != DBNull.Value)
                {
                    p.StaffDeptPresenceID = Convert.ToInt32(reader["StaffDeptPresenceID"]);
                }
                if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
                {
                    p.DeptID = Convert.ToInt32(reader["DeptID"]);
                }
                if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
                {
                    p.StaffID = Convert.ToInt32(reader["StaffID"]);
                }
                if (reader.HasColumn("NumberOfDoctorRequired") && reader["NumberOfDoctorRequired"] != DBNull.Value)
                {
                    p.NumberOfDoctorRequired = Convert.ToInt16(reader["NumberOfDoctorRequired"]);
                }
                if (reader.HasColumn("NumberOfDoctorPresent") && reader["NumberOfDoctorPresent"] != DBNull.Value)
                {
                    p.NumberOfDoctorPresent = Convert.ToInt16(reader["NumberOfDoctorPresent"]);
                }
                if (reader.HasColumn("NumberOfNurseRequired") && reader["NumberOfNurseRequired"] != DBNull.Value)
                {
                    p.NumberOfNurseRequired = Convert.ToInt16(reader["NumberOfNurseRequired"]);
                }
                if (reader.HasColumn("NumberOfNursePresent") && reader["NumberOfNursePresent"] != DBNull.Value)
                {
                    p.NumberOfNursePresent = Convert.ToInt16(reader["NumberOfNursePresent"]);
                }
                if (reader.HasColumn("NumberOfTechnicianRequired") && reader["NumberOfTechnicianRequired"] != DBNull.Value)
                {
                    p.NumberOfTechnicianRequired = Convert.ToInt16(reader["NumberOfTechnicianRequired"]);
                }
                if (reader.HasColumn("NumberOfTechnicianPresent") && reader["NumberOfTechnicianPresent"] != DBNull.Value)
                {
                    p.NumberOfTechnicianPresent = Convert.ToInt16(reader["NumberOfTechnicianPresent"]);
                }
                if (reader.HasColumn("NumberOfClinicalAsstRequired") && reader["NumberOfClinicalAsstRequired"] != DBNull.Value)
                {
                    p.NumberOfClinicalAsstRequired = Convert.ToInt16(reader["NumberOfClinicalAsstRequired"]);
                }
                if (reader.HasColumn("NumberOfClinicalAsstPresent") && reader["NumberOfClinicalAsstPresent"] != DBNull.Value)
                {
                    p.NumberOfClinicalAsstPresent = Convert.ToInt16(reader["NumberOfClinicalAsstPresent"]);
                }
                if (reader.HasColumn("NumberOfAsstNurseRequired") && reader["NumberOfAsstNurseRequired"] != DBNull.Value)
                {
                    p.NumberOfAsstNurseRequired = Convert.ToInt16(reader["NumberOfAsstNurseRequired"]);
                }
                if (reader.HasColumn("NumberOfAsstNursePresent") && reader["NumberOfAsstNursePresent"] != DBNull.Value)
                {
                    p.NumberOfAsstNursePresent = Convert.ToInt16(reader["NumberOfAsstNursePresent"]);
                }
                if (reader.HasColumn("NumberOfPatientDischarged") && reader["NumberOfPatientDischarged"] != DBNull.Value)
                {
                    p.NumberOfPatientDischarged = Convert.ToInt16(reader["NumberOfPatientDischarged"]);
                }
                if (reader.HasColumn("NumberOfPatientDeceased") && reader["NumberOfPatientDeceased"] != DBNull.Value)
                {
                    p.NumberOfPatientDeceased = Convert.ToInt16(reader["NumberOfPatientDeceased"]);
                }
                if (reader.HasColumn("NumberOfPatientTxfrDept") && reader["NumberOfPatientTxfrDept"] != DBNull.Value)
                {
                    p.NumberOfPatientTxfrDept = Convert.ToInt16(reader["NumberOfPatientTxfrDept"]);
                }
                if (reader.HasColumn("NumberOfPatientTxfrHospital") && reader["NumberOfPatientTxfrHospital"] != DBNull.Value)
                {
                    p.NumberOfPatientTxfrHospital = Convert.ToInt16(reader["NumberOfPatientTxfrHospital"]);
                }
                if (reader.HasColumn("NumberOfPatientPresent") && reader["NumberOfPatientPresent"] != DBNull.Value)
                {
                    p.NumberOfPatientPresent = Convert.ToInt16(reader["NumberOfPatientPresent"]);
                }
                if (reader.HasColumn("NumberOfCurrentPatient") && reader["NumberOfCurrentPatient"] != DBNull.Value)
                {
                    p.NumberOfCurrentPatient = Convert.ToInt16(reader["NumberOfCurrentPatient"]);
                }
                if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
                {
                    p.IsActive = Convert.ToBoolean(reader["IsActive"]);
                }
                if (reader.HasColumn("StaffCountDate") && reader["StaffCountDate"] != DBNull.Value)
                {
                    p.StaffCountDate = Convert.ToDateTime(reader["StaffCountDate"]);
                }
            }

            return p;
        }

        //==== #001
        protected virtual List<RefShelves> GetRefShelvesListFromReader(IDataReader reader)
        {
            List<RefShelves> mResultList = new List<RefShelves>();
            while (reader.Read())
            {
                var mObj = new RefShelves();
                if (reader.HasColumn("RefShelfID") && reader["RefShelfID"] != DBNull.Value)
                {
                    mObj.RefShelfID = (long)reader["RefShelfID"];
                }
                if (reader.HasColumn("RefShelfCode") && reader["RefShelfCode"] != DBNull.Value)
                {
                    mObj.RefShelfCode = reader["RefShelfCode"].ToString();
                }
                if (reader.HasColumn("RefShelfName") && reader["RefShelfName"] != DBNull.Value)
                {
                    mObj.RefShelfName = reader["RefShelfName"].ToString();
                }
                if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
                {
                    mObj.Note = reader["Note"].ToString();
                }
                if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
                {
                    mObj.CreatedDate = (DateTime)reader["CreatedDate"];
                }
                if (reader.HasColumn("swhlName") && reader["swhlName"] != DBNull.Value)
                {
                    mObj.swhlName = reader["swhlName"].ToString();
                }
                if (reader.HasColumn("StoreID") && reader["StoreID"] != DBNull.Value)
                {
                    mObj.StoreID = (long)reader["StoreID"];
                }
                if (reader.HasColumn("TotalFiles") && reader["TotalFiles"] != DBNull.Value)
                {
                    mObj.TotalFiles = Convert.ToInt32(reader["TotalFiles"]);
                }
                //▼====136
                if (reader.HasColumn("RefRowID") && reader["RefRowID"] != DBNull.Value)
                {
                    mObj.RefRowID = (long)reader["RefRowID"];
                }
                //▲====136
                mResultList.Add(mObj);
            }

            return mResultList;
        }
        protected virtual List<RefShelfDetails> GetRefShelfDetailListFromReader(IDataReader reader)
        {
            List<RefShelfDetails> mResultList = new List<RefShelfDetails>();
            while (reader.Read())
            {
                var mObj = new RefShelfDetails();
                if (reader.HasColumn("RefShelfDetailID") && reader["RefShelfDetailID"] != DBNull.Value)
                {
                    mObj.RefShelfDetailID = (long)reader["RefShelfDetailID"];
                }
                if (reader.HasColumn("RefShelfID") && reader["RefShelfID"] != DBNull.Value)
                {
                    mObj.RefShelfID = (long)reader["RefShelfID"];
                }
                if (reader.HasColumn("LocCode") && reader["LocCode"] != DBNull.Value)
                {
                    mObj.LocCode = reader["LocCode"].ToString();
                }
                if (reader.HasColumn("LocName") && reader["LocName"] != DBNull.Value)
                {
                    mObj.LocName = reader["LocName"].ToString();
                }
                if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
                {
                    mObj.Note = reader["Note"].ToString();
                }
                if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
                {
                    mObj.CreatedDate = (DateTime)reader["CreatedDate"];
                }
                mResultList.Add(mObj);
            }

            return mResultList;
        }
        protected virtual List<PatientMedicalFileStorage> GetPatientMedicalFileStorageListFromReader(IDataReader reader)
        {
            List<PatientMedicalFileStorage> mResultList = new List<PatientMedicalFileStorage>();
            while (reader.Read())
            {
                var mObj = new PatientMedicalFileStorage();
                if (reader.HasColumn("PatientMedicalFileStorageID") && reader["PatientMedicalFileStorageID"] != DBNull.Value)
                {
                    mObj.PatientMedicalFileStorageID = (long)reader["PatientMedicalFileStorageID"];
                }
                if (reader.HasColumn("PatientMedicalFileID") && reader["PatientMedicalFileID"] != DBNull.Value)
                {
                    mObj.PatientMedicalFileID = (long)reader["PatientMedicalFileID"];
                }
                if (reader.HasColumn("RefShelfDetailID") && reader["RefShelfDetailID"] != DBNull.Value)
                {
                    mObj.RefShelfDetailID = (long)reader["RefShelfDetailID"];
                }
                if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
                {
                    mObj.CreatedDate = (DateTime)reader["CreatedDate"];
                }
                if (reader.HasColumn("FileCodeNumber") && reader["FileCodeNumber"] != DBNull.Value)
                {
                    mObj.FileCodeNumber = reader["FileCodeNumber"].ToString();
                }
                if (reader.HasColumn("LocCode") && reader["LocCode"] != DBNull.Value)
                {
                    mObj.LocCode = reader["LocCode"].ToString();
                }
                if (reader.HasColumn("FileCreatedDate") && reader["FileCreatedDate"] != DBNull.Value)
                {
                    mObj.FileCreatedDate = (DateTime)reader["FileCreatedDate"];
                }
                if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                {
                    mObj.FullName = reader["FullName"].ToString();
                }
                if (reader.HasColumn("LocName") && reader["LocName"] != DBNull.Value)
                {
                    mObj.LocName = reader["LocName"].ToString();
                }
                if (reader.HasColumn("RefShelfName") && reader["RefShelfName"] != DBNull.Value)
                {
                    mObj.RefShelfName = reader["RefShelfName"].ToString();
                }
                if (reader.HasColumn("swhlName") && reader["swhlName"] != DBNull.Value)
                {
                    mObj.swhlName = reader["swhlName"].ToString();
                }
                //▼====: #134
                if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
                {
                    mObj.PatientCode = reader["PatientCode"].ToString();
                }
                if (reader.HasColumn("TreatmentProgCode") && reader["TreatmentProgCode"] != DBNull.Value)
                {
                    mObj.TreatmentProgCode = reader["TreatmentProgCode"].ToString();
                }
                if (reader.HasColumn("ProgDateFrom") && reader["ProgDateFrom"] != DBNull.Value)
                {
                    mObj.ProgDateFrom = (DateTime)reader["ProgDateFrom"];
                }
                if (reader.HasColumn("ProgDateTo") && reader["ProgDateTo"] != DBNull.Value)
                {
                    mObj.ProgDateTo = (DateTime)reader["ProgDateTo"];
                }
                if (reader.HasColumn("ExpiryTime") && reader["ExpiryTime"] != DBNull.Value)
                {
                    mObj.ExpiryTime = reader["ExpiryTime"].ToString();
                }
                if (reader.HasColumn("OutPtTreatmentProgramID") && reader["OutPtTreatmentProgramID"] != DBNull.Value)
                {
                    mObj.OutPtTreatmentProgramID = (long)reader["OutPtTreatmentProgramID"];
                }
                //▲====: #134
                mResultList.Add(mObj);
            }

            return mResultList;
        }
        protected virtual List<PatientMedicalFileStorageCheckInCheckOut> GetPatientMedicalFileStorageCheckInCheckOutListFromReader(IDataReader reader)
        {
            List<PatientMedicalFileStorageCheckInCheckOut> mResultList = new List<PatientMedicalFileStorageCheckInCheckOut>();
            while (reader.Read())
            {
                var mObj = new PatientMedicalFileStorageCheckInCheckOut();
                if (reader.HasColumn("PatientMedicalFileCheckoutID") && reader["PatientMedicalFileCheckoutID"] != DBNull.Value)
                {
                    mObj.PatientMedicalFileCheckoutID = (long)reader["PatientMedicalFileCheckoutID"];
                }
                if (reader.HasColumn("PatientMedicalFileStorageID") && reader["PatientMedicalFileStorageID"] != DBNull.Value)
                {
                    mObj.PatientMedicalFileStorageID = (long)reader["PatientMedicalFileStorageID"];
                }
                if (reader.HasColumn("CheckinStaffID") && reader["CheckinStaffID"] != DBNull.Value)
                {
                    mObj.CheckinStaffID = (long)reader["CheckinStaffID"];
                }
                if (reader.HasColumn("CheckinDate") && reader["CheckinDate"] != DBNull.Value)
                {
                    mObj.CheckinDate = (DateTime)reader["CheckinDate"];
                }
                if (reader.HasColumn("CheckoutStaffID") && reader["CheckoutStaffID"] != DBNull.Value)
                {
                    mObj.CheckoutStaffID = (long)reader["CheckoutStaffID"];
                }
                if (reader.HasColumn("CheckoutDate") && reader["CheckoutDate"] != DBNull.Value)
                {
                    mObj.CheckoutDate = (DateTime)reader["CheckoutDate"];
                }
                if (reader.HasColumn("StaffPersonID") && reader["StaffPersonID"] != DBNull.Value)
                {
                    mObj.StaffPersonID = (long)reader["StaffPersonID"];
                }
                if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
                {
                    mObj.DeptID = (long)reader["DeptID"];
                }
                if (reader.HasColumn("DeptLocID") && reader["DeptLocID"] != DBNull.Value)
                {
                    mObj.DeptLocID = (long)reader["DeptLocID"];
                }
                if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
                {
                    mObj.RecCreatedDate = (DateTime)reader["RecCreatedDate"];
                }
                if (reader.HasColumn("LocCode") && reader["LocCode"] != DBNull.Value)
                {
                    mObj.LocCode = reader["LocCode"].ToString();
                }
                if (reader.HasColumn("LocName") && reader["LocName"] != DBNull.Value)
                {
                    mObj.LocName = reader["LocName"].ToString();
                }
                if (reader.HasColumn("RefShelfCode") && reader["RefShelfCode"] != DBNull.Value)
                {
                    mObj.RefShelfCode = reader["RefShelfCode"].ToString();
                }
                if (reader.HasColumn("ImportedDate") && reader["ImportedDate"] != DBNull.Value)
                {
                    mObj.ImportedDate = (DateTime)reader["ImportedDate"];
                }
                if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                {
                    mObj.FullName = reader["FullName"].ToString();
                }
                if (reader.HasColumn("FileCodeNumber") && reader["FileCodeNumber"] != DBNull.Value)
                {
                    mObj.FileCodeNumber = reader["FileCodeNumber"].ToString();
                }
                if (reader.HasColumn("FileCreatedDate") && reader["FileCreatedDate"] != DBNull.Value)
                {
                    mObj.FileCreatedDate = Convert.ToDateTime(reader["FileCreatedDate"]);
                }
                if (reader.HasColumn("DeptName") && reader["DeptName"] != DBNull.Value)
                {
                    mObj.DeptName = reader["DeptName"].ToString();
                }
                //TMA
                if (reader.HasColumn("IsAgeOnly") && reader["IsAgeOnly"] != DBNull.Value)
                {
                    mObj.IsAgeOnly = Convert.ToBoolean(reader["IsAgeOnly"]);
                }
                if (reader.HasColumn("yDOB") && reader["yDOB"] != DBNull.Value)
                {
                    mObj.yDOB = Convert.ToDateTime(reader["yDOB"]);
                }
                if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
                {
                    mObj.PatientID = (long)reader["PatientID"];
                }
                //
                if (reader.HasColumn("LocationName") && reader["LocationName"] != DBNull.Value)
                {
                    mObj.LocationName = reader["LocationName"].ToString();
                }
                if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
                {
                    mObj.PtRegistrationID = (long)reader["PtRegistrationID"];
                }
                if (reader.HasColumn("IsInPT") && reader["IsInPT"] != DBNull.Value)
                {
                    mObj.IsInPT = Convert.ToBoolean(reader["IsInPT"]);
                }
                if (reader.HasColumn("RefShelfName") && reader["RefShelfName"] != DBNull.Value)
                {
                    mObj.RefShelfName = reader["RefShelfName"].ToString();
                }
                if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
                {
                    mObj.PatientCode = reader["PatientCode"].ToString();
                }
                if (reader.HasColumn("swhlName") && reader["swhlName"] != DBNull.Value)
                {
                    mObj.swhlName = reader["swhlName"].ToString();
                }
                if (reader.HasColumn("BorrowBy") && reader["BorrowBy"] != DBNull.Value)
                {
                    mObj.BorrowBy = reader["BorrowBy"].ToString();
                }
                if (reader.HasColumn("MedicalFileStorageCheckID") && reader["MedicalFileStorageCheckID"] != DBNull.Value)
                {
                    mObj.MedicalFileStorageCheckID = (long)reader["MedicalFileStorageCheckID"];
                }
                //▼====: #134
                if (reader.HasColumn("RefRowName") && reader["RefRowName"] != DBNull.Value)
                {
                    mObj.RefRowName = reader["RefRowName"].ToString();
                }
                if (reader.HasColumn("ExpiryTime") && reader["ExpiryTime"] != DBNull.Value)
                {
                    mObj.ExpiryTime = reader["ExpiryTime"].ToString();
                }
                if (reader.HasColumn("MedicalFileStatus") && reader["MedicalFileStatus"] != DBNull.Value)
                {
                    mObj.MedicalFileStatus = reader["MedicalFileStatus"].ToString();
                }
                if (reader.HasColumn("OutPtTreatmentProgramID") && reader["OutPtTreatmentProgramID"] != DBNull.Value)
                {
                    mObj.OutPtTreatmentProgramID = (long)reader["OutPtTreatmentProgramID"];
                }
                if (reader.HasColumn("FileEndDate") && reader["FileEndDate"] != DBNull.Value)
                {
                    mObj.FileEndDate = Convert.ToDateTime(reader["FileEndDate"]);
                }
                if (reader.HasColumn("V_ReasonType") && reader["V_ReasonType"] != DBNull.Value)
                {
                    mObj.V_ReasonType = (long)reader["V_ReasonType"];
                }
                if (reader.HasColumn("Notes") && reader["Notes"] != DBNull.Value)
                {
                    mObj.Notes = reader["Notes"].ToString();
                }
                if (reader.HasColumn("BorrowingDay") && reader["BorrowingDay"] != DBNull.Value)
                {
                    mObj.BorrowingDay = (int)reader["BorrowingDay"];
                }
                if (reader.HasColumn("StaffPersonInID") && reader["StaffPersonInID"] != DBNull.Value)
                {
                    mObj.StaffPersonInID = (long)reader["StaffPersonInID"];
                }
                if (reader.HasColumn("DeptLocInID") && reader["DeptLocInID"] != DBNull.Value)
                {
                    mObj.DeptLocInID = (long)reader["DeptLocInID"];
                }
                if (reader.HasColumn("ExamDate") && reader["ExamDate"] != DBNull.Value)
                {
                    mObj.ExamDate = (DateTime)reader["ExamDate"];
                }
                if (reader.HasColumn("DischargeDate") && reader["DischargeDate"] != DBNull.Value)
                {
                    mObj.DischargeDate = (DateTime)reader["DischargeDate"];
                }
                //▲====: #134
                mResultList.Add(mObj);
            }

            return mResultList;
        }
        protected virtual List<StaffPersons> GetStaffPersonsListFromReader(IDataReader reader)
        {
            List<StaffPersons> mResultList = new List<StaffPersons>();
            while (reader.Read())
            {
                var mObj = new StaffPersons();
                if (reader.HasColumn("StaffPersonID") && reader["StaffPersonID"] != DBNull.Value)
                {
                    mObj.StaffPersonID = (long)reader["StaffPersonID"];
                }
                if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                {
                    mObj.FullName = reader["FullName"].ToString();
                }
                mResultList.Add(mObj);
            }

            return mResultList;
        }
        protected virtual List<TransferForm> GetTransferFormCollectionFromReader(IDataReader reader)
        {
            List<TransferForm> TransferFormList = new List<TransferForm>();
            while (reader.Read())
            {
                TransferForm Item = GetTransferFormFromReader(reader);
                TransferFormList.Add(Item);
            }
            return TransferFormList;
        }

        protected virtual TransferForm GetTransferFormFromReader(IDataReader reader)
        {
            //reader.Read();
            var item = new TransferForm();
            item.CurPatientRegistration = new PatientRegistration();
            item.TransferFromHos = new Hospital();
            item.TransferToHos = new Hospital();
            item.TransferFromDept = new RefDepartment();
            if (reader.HasColumn("TransferFormID") && reader["TransferFormID"] != DBNull.Value)
            {
                item.TransferFormID = (long)reader["TransferFormID"];
            }
            if (reader.HasColumn("TransferNum") && reader["TransferNum"] != DBNull.Value)
            {
                item.TransferNum = reader["TransferNum"].ToString();
            }
            if (reader.HasColumn("SavingNumber") && reader["SavingNumber"] != DBNull.Value)
            {
                item.SavingNumber = reader["SavingNumber"].ToString();
            }
            if (reader.HasColumn("V_TransferFormType") && reader["V_TransferFormType"] != DBNull.Value)
            {
                item.V_TransferFormType = (int)reader["V_TransferFormType"];
            }
            if (reader.HasColumn("PatientFindBy") && reader["PatientFindBy"] != DBNull.Value)
            {
                item.PatientFindBy = (int)reader["PatientFindBy"];
            }
            if (reader.HasColumn("TransferDate") && reader["TransferDate"] != DBNull.Value)
            {
                item.TransferDate = (DateTime)reader["TransferDate"];
            }
            if (reader.HasColumn("FromDate") && reader["FromDate"] != DBNull.Value)
            {
                item.FromDate = (DateTime)reader["FromDate"];
            }
            if (reader.HasColumn("ToDate") && reader["ToDate"] != DBNull.Value)
            {
                item.ToDate = (DateTime)reader["ToDate"];
            }
            if (reader.HasColumn("TuNgay") && reader["TuNgay"] != DBNull.Value)
            {
                item.TuNgay = (DateTime)reader["TuNgay"];
            }
            if (reader.HasColumn("DenNgay") && reader["DenNgay"] != DBNull.Value)
            {
                item.DenNgay = (DateTime)reader["DenNgay"];
            }
            if (reader.HasColumn("UsedServicesAndItems") && reader["UsedServicesAndItems"] != DBNull.Value)
            {
                item.UsedServicesAndItems = reader["UsedServicesAndItems"].ToString();
            }
            if (reader.HasColumn("PCLResult") && reader["PCLResult"] != DBNull.Value)
            {
                item.PCLResult = reader["PCLResult"].ToString();
            }
            if (reader.HasColumn("DiagnosisTreatment") && reader["DiagnosisTreatment"] != DBNull.Value)
            {
                item.DiagnosisTreatment = reader["DiagnosisTreatment"].ToString();
            }
            if (reader.HasColumn("ICD10") && reader["ICD10"] != DBNull.Value)
            {
                item.ICD10 = reader["ICD10"].ToString();
            }
            if (reader.HasColumn("DiagnosisTreatment_Final") && reader["DiagnosisTreatment_Final"] != DBNull.Value)
            {
                item.DiagnosisTreatment_Final = reader["DiagnosisTreatment_Final"].ToString();
            }
            if (reader.HasColumn("ICD10Final") && reader["ICD10Final"] != DBNull.Value)
            {
                item.ICD10Final = reader["ICD10Final"].ToString();
            }
            if (reader.HasColumn("ClinicalSign") && reader["ClinicalSign"] != DBNull.Value)
            {
                item.ClinicalSign = reader["ClinicalSign"].ToString();
            }
            if (reader.HasColumn("V_CMKTID") && reader["V_CMKTID"] != DBNull.Value)
            {
                item.V_CMKTID = (long)reader["V_CMKTID"];
            }
            if (reader.HasColumn("CMKT") && reader["CMKT"] != DBNull.Value)
            {
                item.CMKT = reader["CMKT"].ToString();
            }
            if (reader.HasColumn("V_PatientStatusID") && reader["V_PatientStatusID"] != DBNull.Value)
            {
                item.V_PatientStatusID = (long)reader["V_PatientStatusID"];
            }
            if (reader.HasColumn("PatientStatus") && reader["PatientStatus"] != DBNull.Value)
            {
                item.PatientStatus = reader["PatientStatus"].ToString();
            }
            if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
            {
                item.Note = reader["Note"].ToString();
            }
            if (reader.HasColumn("TransVehicle") && reader["TransVehicle"] != DBNull.Value)
            {
                item.TransVehicle = reader["TransVehicle"].ToString();
            }
            if (reader.HasColumn("V_TransferReasonID") && reader["V_TransferReasonID"] != DBNull.Value)
            {
                item.V_TransferReasonID = (long)reader["V_TransferReasonID"];
            }
            if (reader.HasColumn("TransferReason") && reader["TransferReason"] != DBNull.Value)
            {
                item.TransferReason = reader["TransferReason"].ToString();
            }
            if (reader.HasColumn("TransferBy") && reader["TransferBy"] != DBNull.Value)
            {
                item.TransferBy = reader["TransferBy"].ToString();
            }
            if (reader.HasColumn("V_TransferReasonID") && reader["V_TransferReasonID"] != DBNull.Value)
            {
                item.V_TreatmentResultID = (long)reader["V_TreatmentResultID"];
            }
            if (reader.HasColumn("TreatmentResult") && reader["TreatmentResult"] != DBNull.Value)
            {
                item.TreatmentResult = reader["TreatmentResult"].ToString();
            }
            if (reader.HasColumn("V_TransferTypeID") && reader["V_TransferTypeID"] != DBNull.Value)
            {
                item.V_TransferTypeID = (long)reader["V_TransferTypeID"];
            }
            if (reader.HasColumn("TransferType") && reader["TransferType"] != DBNull.Value)
            {
                item.TransferType = reader["TransferType"].ToString();
            }
            if (reader.HasColumn("TreatmentPlan") && reader["TreatmentPlan"] != DBNull.Value)
            {
                item.TreatmentPlan = reader["TreatmentPlan"].ToString();
            }
            if (reader.HasColumn("IsExistsError") && reader["IsExistsError"] != DBNull.Value)
            {
                item.IsExistsError = (bool)reader["IsExistsError"];
            }
            if (reader.HasColumn("IsDiffDiagnosis") && reader["IsDiffDiagnosis"] != DBNull.Value)
            {
                item.IsDiffDiagnosis = (bool)reader["IsDiffDiagnosis"];
            }
            //Thông tin đăng ký
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                item.CurPatientRegistration = GetPatientRegistrationFromReader(reader);
                if (item.CurPatientRegistration.HisID.HasValue && item.CurPatientRegistration.HisID.Value > 0)
                {
                    item.CurPatientRegistration.HealthInsurance = GetHealthInsuranceFromReader(reader);
                }
            }
            //bệnh viện chuyển
            if (reader.HasColumn("FromHosID") && reader["FromHosID"] != DBNull.Value)
            {
                item.TransferFromHos.HosID = (long)reader["FromHosID"];
            }
            if (reader.HasColumn("FromHosName") && reader["FromHosName"] != DBNull.Value)
            {
                item.TransferFromHos.HosName = reader["FromHosName"].ToString();
            }
            if (reader.HasColumn("FromHospitalCode") && reader["FromHospitalCode"] != DBNull.Value)
            {
                item.TransferFromHos.HospitalCode = reader["FromHospitalCode"].ToString();
            }
            if (reader.HasColumn("FromHICode") && reader["FromHICode"] != DBNull.Value)
            {
                item.TransferFromHos.HICode = reader["FromHICode"].ToString();
            }
            if (item.TransferFromHos.HosID > 0)
            {
                item.HospitalTransferName = item.TransferFromHos.HosName;
            }
            else
            {
                item.HospitalTransferName = "Tự đến";
            }
            //Chuyển đến
            if (reader.HasColumn("ToHosID") && reader["ToHosID"] != DBNull.Value)
            {
                item.TransferToHos.HosID = (long)reader["ToHosID"];
            }
            if (reader.HasColumn("ToHosName") && reader["ToHosName"] != DBNull.Value)
            {
                item.TransferToHos.HosName = reader["ToHosName"].ToString();
            }
            if (reader.HasColumn("ToHospitalCode") && reader["ToHospitalCode"] != DBNull.Value)
            {
                item.TransferToHos.HospitalCode = reader["ToHospitalCode"].ToString();
            }
            if (reader.HasColumn("ToHICode") && reader["ToHICode"] != DBNull.Value)
            {
                item.TransferToHos.HICode = reader["ToHICode"].ToString();
            }
            if (reader.HasColumn("DeptID") && reader["DeptID"] != DBNull.Value)
            {
                item.TransferFromDept = GetDepartmentFromReader(reader);
            }
            //▼==== #175
            try
            {
                if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
                {
                    item.CurPatientRegistration.Patient = GetPatientFromReader(reader);
                    /*▼====: #013*/
                    item.CurPatientRegistration.Patient.GenerateAgeString(item.CurPatientRegistration.ExamDate);
                    /*▲====: #013*/
                }
                else
                {
                    item.CurPatientRegistration.Patient = new Patient();
                }
            }
            catch
            {
            }
            //▲==== #175
            return item;
        }
        protected virtual TreatmentProcess GetTreatmentProcessFromReader(IDataReader reader)
        {
            //reader.Read();
            var item = new TreatmentProcess();
            item.CurPatientRegistration = new PatientRegistration();

            if (reader.HasColumn("TreatmentProcessID") && reader["TreatmentProcessID"] != DBNull.Value)
            {
                item.TreatmentProcessID = (long)reader["TreatmentProcessID"];
            }
            if (reader.HasColumn("PathologicalProcess") && reader["PathologicalProcess"] != DBNull.Value)
            {
                item.PathologicalProcess = reader["PathologicalProcess"].ToString();
            }
            if (reader.HasColumn("PCLResult") && reader["PCLResult"] != DBNull.Value)
            {
                item.PCLResult = reader["PCLResult"].ToString();
            }
            if (reader.HasColumn("Diagnosis") && reader["Diagnosis"] != DBNull.Value)
            {
                item.Diagnosis = reader["Diagnosis"].ToString();
            }
            if (reader.HasColumn("Treatments") && reader["Treatments"] != DBNull.Value)
            {
                item.Treatments = reader["Treatments"].ToString();
            }
            if (reader.HasColumn("DischargedCondition") && reader["DischargedCondition"] != DBNull.Value)
            {
                item.DischargedCondition = reader["DischargedCondition"].ToString();
            }
            if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
            {
                item.Note = reader["Note"].ToString();
            }
            if (reader.HasColumn("AdmissionDate") && reader["AdmissionDate"] != DBNull.Value)
            {
                item.FromDate = Convert.ToDateTime(reader["AdmissionDate"]);
            }
            if (reader.HasColumn("DischargeDate") && reader["DischargeDate"] != DBNull.Value)
            {
                item.ToDate = Convert.ToDateTime(reader["DischargeDate"]);
            }
            //Thông tin đăng ký
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                item.CurPatientRegistration = GetPatientRegistrationFromReader(reader);
                if (item.CurPatientRegistration.HisID.HasValue && item.CurPatientRegistration.HisID.Value > 0)
                {
                    item.CurPatientRegistration.HealthInsurance = GetHealthInsuranceFromReader(reader);
                }
            }
            //▼==== #174
            if (reader.HasColumn("ResultsEvaluation") && reader["ResultsEvaluation"] != DBNull.Value)
            {
                item.ResultsEvaluation = Convert.ToString(reader["ResultsEvaluation"]);
            }
            if (reader.HasColumn("Prognosis") && reader["Prognosis"] != DBNull.Value)
            {
                item.Prognosis = Convert.ToString(reader["Prognosis"]);
            }
            if (reader.HasColumn("TreatmentsProcess") && reader["TreatmentsProcess"] != DBNull.Value)
            {
                item.TreatmentsProcess = Convert.ToString(reader["TreatmentsProcess"]);
            }
            if (reader.HasColumn("HeadOfDepartmentDoctorStaffID") && reader["HeadOfDepartmentDoctorStaffID"] != DBNull.Value)
            {
                item.HeadOfDepartmentDoctorStaffID = (long)reader["HeadOfDepartmentDoctorStaffID"];
            }
            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                item.DoctorStaffID = (long)reader["DoctorStaffID"];
            }
            if (reader.HasColumn("DeptName") && reader["DeptName"] != DBNull.Value)
            {
                item.DeptName = Convert.ToString(reader["DeptName"]);
            }
            if (reader.HasColumn("LocationName") && reader["LocationName"] != DBNull.Value)
            {
                item.LocationName = Convert.ToString(reader["LocationName"]);
            }
            if (reader.HasColumn("BedNumber") && reader["BedNumber"] != DBNull.Value)
            {
                item.BedNumber = Convert.ToString(reader["BedNumber"]);
            }
            //▲==== #174
            return item;
        }
        protected virtual string GetXMLPatientMedicalFileStorageFromList(List<PatientMedicalFileStorage> ListPatientMedicalFileStorage)
        {
            if (ListPatientMedicalFileStorage != null)
            {
                var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                        new XElement("Root",
                         from item in ListPatientMedicalFileStorage
                         select new XElement("PatientMedicalFileStorage",
                                new XElement("PatientMedicalFileStorageID", item.PatientMedicalFileStorageID),
                                new XElement("PatientMedicalFileID", item.PatientMedicalFileID),
                                new XElement("RefShelfDetailID", item.RefShelfDetailID),
                                new XElement("FileCodeNumber", item.FileCodeNumber),
                                new XElement("LocCode", item.LocCode),
                                new XElement("FullName", item.FullName),
                                new XElement("ExpiryTime", item.ExpiryTime)
                             )));
                return xmlDocument.ToString();
            }
            else
            {
                return null;
            }
        }
        //==== #003
        protected virtual XDocument GenerateListToXML(IList<RefDepartment> DeptArray)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                       new XElement("DeptArray",
                       from result in DeptArray
                       select new XElement("RefDepartment",
                       new XElement("DeptID", result.DeptID))));
            return xmlDocument;
        }
        //==== #003
        protected virtual string GetRegistrationXMLFromMedicalFileListItem(List<PatientMedicalFileStorageCheckInCheckOut> ListItem)
        {
            if (ListItem != null)
            {
                var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                        new XElement("root",
                         from item in ListItem
                         select new XElement("Registration",
                                new XElement("PtRegistrationID", item.PtRegistrationID),
                                new XElement("IsInPT", item.IsInPT),
                                new XElement("FileCodeNumber", item.FileCodeNumber),
                                new XElement("MedicalFileStorageCheckID", item.MedicalFileStorageCheckID)
                             )));
                return xmlDocument.ToString();
            }
            else
            {
                return null;
            }
        }
        /*▼====: #007*/
        protected virtual List<ConsultingDiagnosys> GetConsultingDiagnosysFromReader(IDataReader reader)
        {
            List<ConsultingDiagnosys> ConsultingDiagnosysArray = new List<ConsultingDiagnosys>();
            while (reader.Read())
            {
                ConsultingDiagnosys ConsultingDiagnosysItem = new ConsultingDiagnosys();
                ConsultingDiagnosysItem.Patient = GetPatientFromReader(reader);
                ConsultingDiagnosysItem.Registration = GetPatientRegistrationFromReader(reader);
                ConsultingDiagnosysItem.SupportCharityOrganization = GetCharityOrganizationFromReader(reader);
                ConsultingDiagnosysItem.SurgeryScheduleDetail = GetSurgeryScheduleDetailFromReader(reader);
                if (reader.HasColumn("ConsultingDiagnosysID") && reader["ConsultingDiagnosysID"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.ConsultingDiagnosysID = (long)reader["ConsultingDiagnosysID"];
                    ConsultingDiagnosysItem.Patient.ConsultingDiagnosysID = ConsultingDiagnosysItem.ConsultingDiagnosysID;
                }
                if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.PatientID = (long)reader["PatientID"];
                }

                if (reader.HasColumn("PatientName") && reader["PatientName"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.PatientName = reader["PatientName"].ToString();
                }
                if (reader.HasColumn("PatientCode") && reader["PatientCode"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.PatientCode = reader["PatientCode"].ToString();
                }
                ConsultingDiagnosysItem.PhysicalExamination = GetPhysicalExaminationFromReader(reader);
                if (reader.HasColumn("FirstExamDate") && reader["FirstExamDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.FirstExamDate = Convert.ToDateTime(reader["FirstExamDate"]);
                }
                if (reader.HasColumn("NextExamDate") && reader["NextExamDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.NextExamDate = Convert.ToDateTime(reader["NextExamDate"]);
                }
                if (reader.HasColumn("ConsultingDate") && reader["ConsultingDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.ConsultingDate = Convert.ToDateTime(reader["ConsultingDate"]);
                }
                if (reader.HasColumn("ConsultingDoctor") && reader["ConsultingDoctor"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.ConsultingDoctor = (long)reader["ConsultingDoctor"];
                }
                if (reader.HasColumn("ConsultingResult") && reader["ConsultingResult"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.ConsultingResult = reader["ConsultingResult"].ToString();
                }
                if (reader.HasColumn("OutPtConsultingDate") && reader["OutPtConsultingDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.OutPtConsultingDate = Convert.ToDateTime(reader["OutPtConsultingDate"]);
                }
                if (reader.HasColumn("OutPtConsultingDoctor") && reader["OutPtConsultingDoctor"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.OutPtConsultingDoctor = (long)reader["OutPtConsultingDoctor"];
                }
                if (reader.HasColumn("OutPtConsultingResult") && reader["OutPtConsultingResult"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.OutPtConsultingResult = reader["OutPtConsultingResult"].ToString();
                }
                if (reader.HasColumn("V_DiagnosticType") && reader["V_DiagnosticType"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.V_DiagnosticType = new Lookup { LookupID = (long)reader["V_DiagnosticType"] };
                }
                if (reader.HasColumn("V_TreatmentMethod") && reader["V_TreatmentMethod"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.V_TreatmentMethod = new Lookup { LookupID = (long)reader["V_TreatmentMethod"] };
                }
                if (reader.HasColumn("V_HeartSurgicalType") && reader["V_HeartSurgicalType"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.V_HeartSurgicalType = new Lookup { LookupID = (long)reader["V_HeartSurgicalType"] };
                }
                if (reader.HasColumn("ValveIncluded") && reader["ValveIncluded"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.ValveIncluded = Convert.ToBoolean(reader["ValveIncluded"]);
                }
                if (reader.HasColumn("ValveQty") && reader["ValveQty"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.ValveQty = Convert.ToInt16(reader["ValveQty"]);
                }
                if (reader.HasColumn("V_ValveType") && reader["V_ValveType"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.V_ValveType = new Lookup { LookupID = (long)reader["V_ValveType"] };
                }
                if (reader.HasColumn("RingIncluded") && reader["RingIncluded"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.RingIncluded = Convert.ToBoolean(reader["RingIncluded"]);
                }
                if (reader.HasColumn("RingQty") && reader["RingQty"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.RingQty = Convert.ToInt16(reader["RingQty"]);
                }
                if (reader.HasColumn("CoronaryArtery") && reader["CoronaryArtery"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.CoronaryArtery = Convert.ToBoolean(reader["CoronaryArtery"]);
                }
                if (reader.HasColumn("MitralIncompetence") && reader["MitralIncompetence"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.MitralIncompetence = Convert.ToBoolean(reader["MitralIncompetence"]);
                }
                if (reader.HasColumn("BloodDonorNumber") && reader["BloodDonorNumber"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.BloodDonorNumber = Convert.ToInt16(reader["BloodDonorNumber"]);
                }
                if (reader.HasColumn("EstimationPrice") && reader["EstimationPrice"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.EstimationPrice = Convert.ToDecimal(reader["EstimationPrice"]);
                }
                if (reader.HasColumn("AdminProcessExpDate") && reader["AdminProcessExpDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.AdminProcessExpDate = Convert.ToDateTime(reader["AdminProcessExpDate"]);
                }
                if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.Note = reader["Note"].ToString();
                }
                if (reader.HasColumn("CoronarographyExpPaidTime") && reader["CoronarographyExpPaidTime"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.CoronarographyExpPaidTime = Convert.ToDateTime(reader["CoronarographyExpPaidTime"]);
                }
                if (reader.HasColumn("SurgeryExpPaidTime") && reader["SurgeryExpPaidTime"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.SurgeryExpPaidTime = Convert.ToDateTime(reader["SurgeryExpPaidTime"]);
                }
                if (reader.HasColumn("AdditionalItemsPaidTime") && reader["AdditionalItemsPaidTime"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.AdditionalItemsPaidTime = Convert.ToDateTime(reader["AdditionalItemsPaidTime"]);
                }
                if (reader.HasColumn("IsEnoughBloodDonor") && reader["IsEnoughBloodDonor"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.IsEnoughBloodDonor = Convert.ToBoolean(reader["IsEnoughBloodDonor"]);
                }
                if (reader.HasColumn("TMH_ExamDate") && reader["TMH_ExamDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.TMH_ExamDate = Convert.ToBoolean(reader["TMH_ExamDate"]);
                }
                if (reader.HasColumn("RHM_ExamDate") && reader["RHM_ExamDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.RHM_ExamDate = Convert.ToBoolean(reader["RHM_ExamDate"]);
                }
                if (reader.HasColumn("Transferred_KT_Date") && reader["Transferred_KT_Date"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.Transferred_KT_Date = Convert.ToBoolean(reader["Transferred_KT_Date"]);
                }
                if (reader.HasColumn("CoronarographyDate") && reader["CoronarographyDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.CoronarographyDate = Convert.ToDateTime(reader["CoronarographyDate"]);
                }
                if (reader.HasColumn("AngioDate") && reader["AngioDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.AngioDate = Convert.ToDateTime(reader["AngioDate"]);
                }
                if (reader.HasColumn("RVPDate") && reader["RVPDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.RVPDate = Convert.ToBoolean(reader["RVPDate"]);
                }
                if (reader.HasColumn("Remark") && reader["Remark"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.Remark = reader["Remark"].ToString();
                }
                if (reader.HasColumn("ExpAdmissionDate") && reader["ExpAdmissionDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.ExpAdmissionDate = Convert.ToDateTime(reader["ExpAdmissionDate"]);
                }
                if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.PtRegistrationID = (long)reader["PtRegistrationID"];
                }
                if (reader.HasColumn("Createdby") && reader["Createdby"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.Createdby = (long)reader["Createdby"];
                }
                if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
                }
                if (reader.HasColumn("AdminProcessApprovedDate") && reader["AdminProcessApprovedDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.AdminProcessApprovedDate = Convert.ToDateTime(reader["AdminProcessApprovedDate"]);
                }
                if (reader.HasColumn("IsAllExamCompleted") && reader["IsAllExamCompleted"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.IsAllExamCompleted = Convert.ToBoolean(reader["IsAllExamCompleted"]);
                    if (reader.HasColumn("ExamCompletedDate") && reader["ExamCompletedDate"] != DBNull.Value)
                    {
                        ConsultingDiagnosysItem.ExamCompletedDate = Convert.ToDateTime(reader["ExamCompletedDate"]);
                    }
                }
                if (reader.HasColumn("ConsultingDoctorName") && reader["ConsultingDoctorName"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.ConsultingDoctorName = reader["ConsultingDoctorName"].ToString();
                }
                if (reader.HasColumn("OutPtConsultingDoctorName") && reader["OutPtConsultingDoctorName"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.OutPtConsultingDoctorName = reader["OutPtConsultingDoctorName"].ToString();
                }
                if (reader.HasColumn("SurgeryDate") && reader["SurgeryDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.SurgeryDate = Convert.ToDateTime(reader["SurgeryDate"]);
                    if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
                    {
                        ConsultingDiagnosysItem.DoctorStaff = new Staff { StaffID = (long)reader["DoctorStaffID"] };
                    }
                }
                if (reader.HasColumn("PrevSugeryDiagnostic") && reader["PrevSugeryDiagnostic"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.PrevSugeryDiagnostic = reader["PrevSugeryDiagnostic"].ToString();
                }
                if (reader.HasColumn("FinalConsultingDiagnosys") && reader["FinalConsultingDiagnosys"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.FinalConsultingDiagnosys = reader["FinalConsultingDiagnosys"].ToString();
                }
                if (reader.HasColumn("Intervention") && reader["Intervention"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.Intervention = reader["Intervention"].ToString();
                }
                if (reader.HasColumn("ShortIntervention") && reader["ShortIntervention"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.ShortIntervention = reader["ShortIntervention"].ToString();
                }
                if (reader.HasColumn("PlastieMitrale") && reader["PlastieMitrale"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.PlastieMitrale = Convert.ToBoolean(reader["PlastieMitrale"]);
                }
                if (reader.HasColumn("PTMaze") && reader["PTMaze"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.PTMaze = Convert.ToBoolean(reader["PTMaze"]);
                }
                if (reader.HasColumn("DuraGraft") && reader["DuraGraft"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.DuraGraft = Convert.ToBoolean(reader["DuraGraft"]);
                }
                if (reader.HasColumn("PCLExamStartDated") && reader["PCLExamStartDated"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.PCLExamStartDated = Convert.ToDateTime(reader["PCLExamStartDated"]);
                }
                if (reader.HasColumn("PrevSugeryNote") && reader["PrevSugeryNote"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.PrevSugeryNote = reader["PrevSugeryNote"].ToString();
                }
                if (reader.HasColumn("BloodInfoGettedDate") && reader["BloodInfoGettedDate"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.BloodInfoGettedDate = Convert.ToDateTime(reader["BloodInfoGettedDate"]);
                }
                if (reader.HasColumn("IsCancelSurgery") && reader["IsCancelSurgery"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.IsCancelSurgery = Convert.ToBoolean(reader["IsCancelSurgery"]);
                }
                if (reader.HasColumn("ReasonCancelSurgery") && reader["ReasonCancelSurgery"] != DBNull.Value)
                {
                    ConsultingDiagnosysItem.ReasonCancelSurgery = reader["ReasonCancelSurgery"].ToString();
                }
                ConsultingDiagnosysArray.Add(ConsultingDiagnosysItem);
            }
            return ConsultingDiagnosysArray;
        }
        protected virtual List<SurgerySchedule> GetSurgeryScheduleCollectionFromReader(IDataReader reader)
        {
            List<SurgerySchedule> mItem = new List<SurgerySchedule>();
            while (reader.Read())
            {
                mItem.Add(GetSurgeryScheduleFromReader(reader));
            }
            return mItem;
        }
        protected virtual SurgerySchedule GetSurgeryScheduleFromReader(IDataReader reader)
        {
            SurgerySchedule mItem = new SurgerySchedule();
            if (reader.HasColumn("SurgeryScheduleID") && reader["SurgeryScheduleID"] != DBNull.Value)
                mItem.SurgeryScheduleID = (long)reader["SurgeryScheduleID"];
            if (reader.HasColumn("SSName") && reader["SSName"] != DBNull.Value)
                mItem.SSName = reader["SSName"].ToString();
            if (reader.HasColumn("SSCreationDate") && reader["SSCreationDate"] != DBNull.Value)
                mItem.SSCreationDate = Convert.ToDateTime(reader["SSCreationDate"]);
            if (reader.HasColumn("SSFromDate") && reader["SSFromDate"] != DBNull.Value)
                mItem.SSFromDate = Convert.ToDateTime(reader["SSFromDate"]);
            if (reader.HasColumn("SSToDate") && reader["SSToDate"] != DBNull.Value)
                mItem.SSToDate = Convert.ToDateTime(reader["SSToDate"]);
            if (reader.HasColumn("SSCreatorStaffID") && reader["SSCreatorStaffID"] != DBNull.Value)
                mItem.SSCreatorStaffID = (long)reader["SSCreatorStaffID"];
            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
                mItem.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
            if (reader.HasColumn("SSNote") && reader["SSNote"] != DBNull.Value)
                mItem.SSNote = reader["SSNote"].ToString();
            return mItem;
        }
        protected virtual List<SurgeryScheduleDetail> GetSurgeryScheduleDetailCollectionFromReader(IDataReader reader)
        {
            List<SurgeryScheduleDetail> mItem = new List<SurgeryScheduleDetail>();
            while (reader.Read())
            {
                mItem.Add(GetSurgeryScheduleDetailFromReader(reader));
            }
            return mItem;
        }
        protected virtual SurgeryScheduleDetail GetSurgeryScheduleDetailFromReader(IDataReader reader)
        {
            SurgeryScheduleDetail mItem = new SurgeryScheduleDetail();
            if (reader.HasColumn("SurgeryScheduleDetailID") && reader["SurgeryScheduleDetailID"] != DBNull.Value)
                mItem.SurgeryScheduleDetailID = (long)reader["SurgeryScheduleDetailID"];
            if (reader.HasColumn("SurgeryScheduleID") && reader["SurgeryScheduleID"] != DBNull.Value)
                mItem.SurgeryScheduleID = (long)reader["SurgeryScheduleID"];
            if (reader.HasColumn("ConsultingDiagnosysID") && reader["ConsultingDiagnosysID"] != DBNull.Value)
                mItem.ConsultingDiagnosysID = (long)reader["ConsultingDiagnosysID"];
            if (reader.HasColumn("SSD_Date") && reader["SSD_Date"] != DBNull.Value)
                mItem.SSD_Date = Convert.ToDateTime(reader["SSD_Date"]);
            if (reader.HasColumn("SSD_Room") && reader["SSD_Room"] != DBNull.Value)
                mItem.SSD_Room = (long)reader["SSD_Room"];
            if (reader.HasColumn("PreOpDiagnosys") && reader["PreOpDiagnosys"] != DBNull.Value)
                mItem.PreOpDiagnosys = reader["PreOpDiagnosys"].ToString();
            if (reader.HasColumn("OpIntervention") && reader["OpIntervention"] != DBNull.Value)
                mItem.OpIntervention = reader["OpIntervention"].ToString();
            if (reader.HasColumn("OpSeqNum") && reader["OpSeqNum"] != DBNull.Value)
                mItem.OpSeqNum = Convert.ToInt16(reader["OpSeqNum"]);
            if (reader.HasColumn("OpNote") && reader["OpNote"] != DBNull.Value)
                mItem.OpNote = reader["OpNote"].ToString();
            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
                mItem.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
            if (reader.HasColumn("DeletedDate") && reader["DeletedDate"] != DBNull.Value)
                mItem.DeletedDate = Convert.ToDateTime(reader["DeletedDate"]);
            return mItem;
        }
        protected virtual List<SurgeryScheduleDetail_TeamMember> GetSurgeryScheduleDetail_TeamMemberCollectionFromReader(IDataReader reader)
        {
            List<SurgeryScheduleDetail_TeamMember> mItem = new List<SurgeryScheduleDetail_TeamMember>();
            while (reader.Read())
            {
                mItem.Add(GetSurgeryScheduleDetail_TeamMemberFromReader(reader));
            }
            return mItem;
        }
        protected virtual SurgeryScheduleDetail_TeamMember GetSurgeryScheduleDetail_TeamMemberFromReader(IDataReader reader)
        {
            SurgeryScheduleDetail_TeamMember mItem = new SurgeryScheduleDetail_TeamMember();
            if (reader.HasColumn("SSD_TeamMemberID") && reader["SSD_TeamMemberID"] != DBNull.Value)
                mItem.SSD_TeamMemberID = (long)reader["SSD_TeamMemberID"];
            if (reader.HasColumn("SurgeryScheduleDetailID") && reader["SurgeryScheduleDetailID"] != DBNull.Value)
                mItem.SurgeryScheduleDetailID = (long)reader["SurgeryScheduleDetailID"];
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
                mItem.StaffID = (long)reader["StaffID"];
            if (reader.HasColumn("V_SurgeryTeamRoleID") && reader["V_SurgeryTeamRoleID"] != DBNull.Value)
                mItem.V_SurgeryTeamRoleID = (long)reader["V_SurgeryTeamRoleID"];
            if (reader.HasColumn("RecCreatedDate") && reader["RecCreatedDate"] != DBNull.Value)
                mItem.RecCreatedDate = Convert.ToDateTime(reader["RecCreatedDate"]);
            if (reader.HasColumn("DeletedDate") && reader["DeletedDate"] != DBNull.Value)
                mItem.DeletedDate = Convert.ToDateTime(reader["DeletedDate"]);
            return mItem;
        }
        protected virtual string SurgeryScheduleDetail_TeamMemberToXML(List<SurgeryScheduleDetail_TeamMember> items)
        {
            if (items == null) return null;
            var mXDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"), new XElement("Root",
            from item in items
            select new XElement("SurgeryScheduleDetail_TeamMember",
                new XElement("SSD_TeamMemberID", item.SSD_TeamMemberID),
                new XElement("StaffID", item.StaffID),
                new XElement("SurgeryScheduleDetailID", item.SurgeryScheduleDetailID)
                )));
            return mXDocument.ToString();
        }
        /*▲====: #007*/
        /*▼====: #008*/
        protected virtual List<Bid> GetBidCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<Bid>();
            while (reader.Read())
            {
                retVal.Add(GetBidFromReader(reader));
            }
            return retVal;
        }
        protected virtual Bid GetBidFromReader(IDataReader reader)
        {
            var p = new Bid();
            if (reader.HasColumn("BidID") && reader["BidID"] != DBNull.Value)
            {
                p.BidID = (long)reader["BidID"];
            }
            if (reader.HasColumn("BidName") && reader["BidName"] != DBNull.Value)
            {
                p.BidName = reader["BidName"].ToString();
            }
            if (reader.HasColumn("PermitNumber") && reader["PermitNumber"] != DBNull.Value)
            {
                p.PermitNumber = reader["PermitNumber"].ToString();
            }
            if (reader.HasColumn("ValidDateFrom") && reader["ValidDateFrom"] != DBNull.Value)
            {
                p.ValidDateFrom = Convert.ToDateTime(reader["ValidDateFrom"]);
            }
            if (reader.HasColumn("ValidDateTo") && reader["ValidDateTo"] != DBNull.Value)
            {
                p.ValidDateTo = Convert.ToDateTime(reader["ValidDateTo"]);
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = (long)reader["StaffID"];
            }
            if (reader.HasColumn("IsMedDept") && reader["IsMedDept"] != DBNull.Value)
            {
                p.IsMedDept = (bool)reader["IsMedDept"];
            }
            if (reader.HasColumn("V_MedProductType") && reader["V_MedProductType"] != DBNull.Value)
            {
                p.V_MedProductType = (long)reader["V_MedProductType"];
            }
            //▼====: #083
            if (reader.HasColumn("BidGroupName") && reader["BidGroupName"] != DBNull.Value)
            {
                p.BidGroupName = reader["BidGroupName"].ToString();
            }
            //▲====: #083
            //▼====: #166
            if (reader.HasColumn("YearStr") && reader["YearStr"] != DBNull.Value)
            {
                p.YearStr = reader["YearStr"].ToString();
            }
            //▲====: #166
            return p;
        }
        protected virtual List<BidDetail> GetBidDetailCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<BidDetail>();
            while (reader.Read())
            {
                retVal.Add(GetBidDetailFromReader(reader));
            }
            return retVal;
        }
        protected virtual BidDetail GetBidDetailFromReader(IDataReader reader)
        {
            var p = new BidDetail();
            if (reader.HasColumn("BidDetailID") && reader["BidDetailID"] != DBNull.Value)
            {
                p.BidDetailID = (long)reader["BidDetailID"];
            }
            if (reader.HasColumn("BidID") && reader["BidID"] != DBNull.Value)
            {
                p.BidID = (long)reader["BidID"];
            }
            if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
            {
                p.DrugID = (long)reader["DrugID"];
            }
            if (reader.HasColumn("ApprovedVersionID") && reader["ApprovedVersionID"] != DBNull.Value)
            {
                p.ApprovedVersionID = (long)reader["ApprovedVersionID"];
            }
            if (reader.HasColumn("IsMedDept") && reader["IsMedDept"] != DBNull.Value)
            {
                p.IsMedDept = Convert.ToBoolean(reader["IsMedDept"]);
            }
            if (reader.HasColumn("DrugCode") && reader["DrugCode"] != DBNull.Value)
            {
                p.DrugCode = reader["DrugCode"].ToString();
            }
            if (reader.HasColumn("ReportBrandName") && reader["ReportBrandName"] != DBNull.Value)
            {
                p.ReportBrandName = reader["ReportBrandName"].ToString();
            }
            if (reader.HasColumn("Visa") && reader["Visa"] != DBNull.Value)
            {
                p.Visa = reader["Visa"].ToString();
            }
            if (reader.HasColumn("VersionID") && reader["VersionID"] != DBNull.Value)
            {
                p.VersionID = (long)reader["VersionID"];
            }
            if (reader.HasColumn("HICode") && reader["HICode"] != DBNull.Value)
            {
                p.HICode = reader["HICode"].ToString();
            }
            if (reader.HasColumn("GroupCode") && reader["GroupCode"] != DBNull.Value)
            {
                p.GroupCode = reader["GroupCode"].ToString();
            }
            if (reader.HasColumn("BidCode") && reader["BidCode"] != DBNull.Value)
            {
                p.BidCode = reader["BidCode"].ToString();
            }
            if (reader.HasColumn("Content") && reader["Content"] != DBNull.Value)
            {
                p.Content = reader["Content"].ToString();
            }
            if (reader.HasColumn("ApprovedQty") && reader["ApprovedQty"] != DBNull.Value)
            {
                p.ApprovedQty = Convert.ToInt32(reader["ApprovedQty"]);
            }
            if (reader.HasColumn("IsApproved") && reader["IsApproved"] != DBNull.Value)
            {
                p.IsApproved = Convert.ToBoolean(reader["IsApproved"]);
            }
            if (reader.HasColumn("RemainingQty") && reader["RemainingQty"] != DBNull.Value)
            {
                p.RemainingQty = Convert.ToInt32(reader["RemainingQty"]);
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("InQuantity") && reader["InQuantity"] != DBNull.Value)
            {
                p.InQuantity = Convert.ToInt32(reader["InQuantity"]);
            }
            p.Supplier = new DrugDeptSupplier();
            if (reader.HasColumn("SupplierID") && reader["SupplierID"] != DBNull.Value)
            {
                p.Supplier.SupplierID = Convert.ToInt64(reader["SupplierID"]);
            }
            if (reader.HasColumn("SupplierCode") && reader["SupplierCode"] != DBNull.Value)
            {
                p.Supplier.SupplierCode = Convert.ToString(reader["SupplierCode"]);
            }
            if (reader.HasColumn("SupplierName") && reader["SupplierName"] != DBNull.Value)
            {
                p.Supplier.SupplierName = Convert.ToString(reader["SupplierName"]);
            }
            if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
            {
                p.InCost = Convert.ToDecimal(reader["InCost"]);
            }
            if (reader.HasColumn("ContractNo") && reader["ContractNo"] != DBNull.Value)
            {
                p.ContractNo = Convert.ToString(reader["ContractNo"]);
            }
            if (reader.HasColumn("IsMedDept") && reader["IsMedDept"] != DBNull.Value)
            {
                p.IsMedDept = Convert.ToBoolean(reader["IsMedDept"]);
            }
            if (reader.HasColumn("IsEditable") && reader["IsEditable"] != DBNull.Value)
            {
                p.IsEditable = Convert.ToBoolean(reader["IsEditable"]);
            }
            if (reader.HasColumn("RemainingOutQty") && reader["RemainingOutQty"] != DBNull.Value)
            {
                p.RemainingOutQty = Convert.ToDecimal(reader["RemainingOutQty"]);
            }
            if (reader.HasColumn("UnitName") && reader["UnitName"] != DBNull.Value)
            {
                p.UnitName = reader["UnitName"].ToString();
            }
            if (reader.HasColumn("RouteOfAdministration") && reader["RouteOfAdministration"] != DBNull.Value)
            {
                p.RouteOfAdministration = reader["RouteOfAdministration"].ToString();
            }
            //▼====: #083
            if (reader.HasColumn("TCKTAndTCCNGroup") && reader["TCKTAndTCCNGroup"] != DBNull.Value)
            {
                p.TCKTAndTCCNGroup = reader["TCKTAndTCCNGroup"].ToString();
            }
            if (reader.HasColumn("BidGroupName") && reader["BidGroupName"] != DBNull.Value)
            {
                p.BidGroupName = reader["BidGroupName"].ToString();
            }
            if (reader.HasColumn("BidCodeStr") && reader["BidCodeStr"] != DBNull.Value)
            {
                p.BidCodeStr = reader["BidCodeStr"].ToString();
            }
            //▲====: #083
            //▼====: #166
            if (reader.HasColumn("YearStr") && reader["YearStr"] != DBNull.Value)
            {
                p.YearStr = reader["YearStr"].ToString();
            }
            //▲====: #166
            return p;
        }
        protected virtual XDocument BidDetailCollectionToXML(List<BidDetail> items)
        {
            if (items == null)
                return null;
            var mXDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"), new XElement("Root",
            from item in items
            select new XElement("BidDetail",
                new XElement("DrugID", item.DrugID),
                new XElement("VersionID", item.VersionID),
                new XElement("ApprovedVersionID", item.ApprovedVersionID),
                new XElement("BidDetailID", item.BidDetailID),
                new XElement("VersionID", item.VersionID),
                new XElement("HICode", item.HICode),
                new XElement("ReportBrandName", item.ReportBrandName),
                new XElement("Visa", item.Visa),
                new XElement("Content", item.Content),
                new XElement("ApprovedQty", item.ApprovedQty),
                new XElement("IsApproved", item.IsApproved),
                new XElement("BidCode", item.BidCode),
                new XElement("SupplierID", item.Supplier == null ? null : (long?)item.Supplier.SupplierID),
                new XElement("InCost", item.InCost),
                new XElement("ContractNo", item.ContractNo),
                //▼====: #083
                new XElement("BidGroupName", item.BidGroupName),
                new XElement("RemainingQty", item.RemainingQty),
                //▲====: #083
                //▼====: #166
                new XElement("YearStr", item.YearStr)
                //▲====: #166
            )));
            return mXDocument;
        }
        /*▲====: #008*/
        /*▼====: #010*/
        protected virtual List<HOSPayment> GetHOSPaymentCollectionFromReader(IDataReader reader)
        {
            var mHOSPayments = new List<HOSPayment>();
            while (reader.Read())
            {
                mHOSPayments.Add(GetHOSPaymentFromReader(reader));
            }

            return mHOSPayments;
        }
        protected virtual HOSPayment GetHOSPaymentFromReader(IDataReader reader)
        {
            var mHOSPayment = new HOSPayment();
            if (reader.HasColumn("HOSPaymentID") && reader["HOSPaymentID"] != DBNull.Value)
            {
                mHOSPayment.HOSPaymentID = (long)reader["HOSPaymentID"];
            }
            if (reader.HasColumn("V_PayReson") && reader["V_PayReson"] != DBNull.Value)
            {
                mHOSPayment.V_PayReson = (long)reader["V_PayReson"];
                if (reader.HasColumn("PayReson") && reader["PayReson"] != DBNull.Value)
                {
                    mHOSPayment.PayReson = new Lookup { LookupID = mHOSPayment.V_PayReson, ObjectValue = reader["PayReson"].ToString(), ObjectName = "V_PayReson" };
                }
            }
            if (reader.HasColumn("PaymentDate") && reader["PaymentDate"] != DBNull.Value)
            {
                mHOSPayment.PaymentDate = Convert.ToDateTime(reader["PaymentDate"]);
            }
            if (reader.HasColumn("TransactionDate") && reader["TransactionDate"] != DBNull.Value)
            {
                mHOSPayment.TransactionDate = Convert.ToDateTime(reader["TransactionDate"]);
            }
            if (reader.HasColumn("PaymentReson") && reader["PaymentReson"] != DBNull.Value)
            {
                mHOSPayment.PaymentReson = reader["PaymentReson"].ToString();
            }
            if (reader.HasColumn("PaymentNotice") && reader["PaymentNotice"] != DBNull.Value)
            {
                mHOSPayment.PaymentNotice = reader["PaymentNotice"].ToString();
            }
            if (reader.HasColumn("PaymentAmount") && reader["PaymentAmount"] != DBNull.Value)
            {
                mHOSPayment.PaymentAmount = Convert.ToDecimal(reader["PaymentAmount"]);
            }
            if (reader.HasColumn("V_CharityObjectType") && reader["V_CharityObjectType"] != DBNull.Value)
            {
                mHOSPayment.V_CharityObjectType = (long)reader["V_CharityObjectType"];
            }
            if (reader.HasColumn("V_PatientSubject") && reader["V_PatientSubject"] != DBNull.Value)
            {
                mHOSPayment.V_PatientSubject = (long)reader["V_PatientSubject"];
            }
            if (reader.HasColumn("NumbOfPerson") && reader["NumbOfPerson"] != DBNull.Value)
            {
                mHOSPayment.NumbOfPerson = Convert.ToInt32(reader["NumbOfPerson"]);
            }
            if (reader.HasColumn("PatientName") && reader["PatientName"] != DBNull.Value)
            {
                mHOSPayment.PatientName = reader["PatientName"].ToString();
            }
            if (reader.HasColumn("DOB") && reader["DOB"] != DBNull.Value)
            {
                mHOSPayment.DOB = Convert.ToDateTime(reader["DOB"]);
            }
            return mHOSPayment;
        }
        /*▲====: #010*/
        protected virtual List<DrugDeptProductGroupReportType> GetDrugDeptMATReportTypeCollectionFromReader(IDataReader reader)
        {
            var mDrugDeptMATReportTypeCollection = new List<DrugDeptProductGroupReportType>();
            while (reader.Read())
            {
                mDrugDeptMATReportTypeCollection.Add(GetDrugDeptMATReportTypeFromReader(reader));
            }
            return mDrugDeptMATReportTypeCollection;
        }
        protected virtual DrugDeptProductGroupReportType GetDrugDeptMATReportTypeFromReader(IDataReader reader)
        {
            DrugDeptProductGroupReportType mDrugDeptMATReportType = new DrugDeptProductGroupReportType();
            if (reader.HasColumn("DrugDeptProductGroupReportTypeID") && reader["DrugDeptProductGroupReportTypeID"] != DBNull.Value)
            {
                mDrugDeptMATReportType.DrugDeptProductGroupReportTypeID = (long)reader["DrugDeptProductGroupReportTypeID"];
            }
            if (reader.HasColumn("DrugDeptProductGroupReportTypeCode") && reader["DrugDeptProductGroupReportTypeCode"] != DBNull.Value)
            {
                mDrugDeptMATReportType.DrugDeptProductGroupReportTypeCode = reader["DrugDeptProductGroupReportTypeCode"].ToString();
            }
            if (reader.HasColumn("DrugDeptProductGroupReportTypeName") && reader["DrugDeptProductGroupReportTypeName"] != DBNull.Value)
            {
                mDrugDeptMATReportType.DrugDeptProductGroupReportTypeName = reader["DrugDeptProductGroupReportTypeName"].ToString();
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                mDrugDeptMATReportType.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                mDrugDeptMATReportType.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            return mDrugDeptMATReportType;
        }
        //▼====: #022
        protected virtual List<object> GetLabSoftCategoryCollectionFromReader(IDataReader aReader, eLabSoftCategory eLabSoftCategory)
        {
            List<object> mItemCollection = new List<object>();
            while (aReader.Read())
            {
                mItemCollection.Add(GetLabSoftCategoryFromReader(aReader, eLabSoftCategory));
            }
            return mItemCollection;
        }
        protected virtual object GetLabSoftCategoryFromReader(IDataReader aReader, eLabSoftCategory eLabSoftCategory)
        {
            if (eLabSoftCategory == eLabSoftCategory.Doctors)
            {
                LIS_Staff mItem = new LIS_Staff();
                if (aReader.HasColumn("MaBacSi") && aReader["MaBacSi"] != DBNull.Value)
                {
                    mItem.MaBacSi = aReader["MaBacSi"].ToString();
                }
                if (aReader.HasColumn("TenBacSi") && aReader["TenBacSi"] != DBNull.Value)
                {
                    mItem.TenBacSi = aReader["TenBacSi"].ToString();
                }
                return mItem;
            }
            else if (eLabSoftCategory == eLabSoftCategory.Departments)
            {
                LIS_Department mItem = new LIS_Department();
                if (aReader.HasColumn("MaKhoaPhong") && aReader["MaKhoaPhong"] != DBNull.Value)
                {
                    mItem.MaPhongBan = aReader["MaKhoaPhong"].ToString();
                }
                if (aReader.HasColumn("TenKhoaPhong") && aReader["TenKhoaPhong"] != DBNull.Value)
                {
                    mItem.TenPhongBan = aReader["TenKhoaPhong"].ToString();
                }
                return mItem;
            }
            else if (eLabSoftCategory == eLabSoftCategory.Objects)
            {
                LIS_Object mItem = new LIS_Object();
                if (aReader.HasColumn("MaDoiTuong") && aReader["MaDoiTuong"] != DBNull.Value)
                {
                    mItem.MaDoiTuong = aReader["MaDoiTuong"].ToString();
                }
                if (aReader.HasColumn("TenDoiTuong") && aReader["TenDoiTuong"] != DBNull.Value)
                {
                    mItem.TenDoiTuong = aReader["TenDoiTuong"].ToString();
                }
                return mItem;
            }
            else if (eLabSoftCategory == eLabSoftCategory.PCLItems)
            {
                LIS_PCLItem mItem = new LIS_PCLItem();
                if (aReader.HasColumn("MaDichVu") && aReader["MaDichVu"] != DBNull.Value)
                {
                    mItem.Madichvu = aReader["MaDichVu"].ToString();
                }
                if (aReader.HasColumn("MaDichVuCha") && aReader["MaDichVuCha"] != DBNull.Value)
                {
                    mItem.Dichvucaptren = aReader["MaDichVuCha"].ToString();
                }
                if (aReader.HasColumn("TenDichVu") && aReader["TenDichVu"] != DBNull.Value)
                {
                    mItem.Tendichvu = aReader["TenDichVu"].ToString();
                }
                if (aReader.HasColumn("DonViTinh") && aReader["DonViTinh"] != DBNull.Value)
                {
                    mItem.Donvitinh = aReader["DonViTinh"].ToString();
                }
                if (aReader.HasColumn("Type") && aReader["Type"] != DBNull.Value)
                {
                    mItem.Type = Convert.ToInt16(aReader["Type"]);
                }
                return mItem;
            }
            else if (eLabSoftCategory == eLabSoftCategory.Devices)
            {
                LIS_Device mItem = new LIS_Device();
                if (aReader.HasColumn("MaThietBi") && aReader["MaThietBi"] != DBNull.Value)
                {
                    mItem.MaThietBi = aReader["MaThietBi"].ToString();
                }
                if (aReader.HasColumn("TenThietBi") && aReader["TenThietBi"] != DBNull.Value)
                {
                    mItem.TenThietBi = aReader["TenThietBi"].ToString();
                }
                return mItem;
            }
            else if (eLabSoftCategory == eLabSoftCategory.Users)
            {
                LIS_User mItem = new LIS_User();
                if (aReader.HasColumn("MaNguoiDung") && aReader["MaNguoiDung"] != DBNull.Value)
                {
                    mItem.MaNguoiDung = aReader["MaNguoiDung"].ToString();
                }
                if (aReader.HasColumn("TenNguoiDung") && aReader["TenNguoiDung"] != DBNull.Value)
                {
                    mItem.TenNguoiDung = aReader["TenNguoiDung"].ToString();
                }
                return mItem;
            }
            return null;
        }
        protected virtual List<LIS_PCLRequest> GetLIS_PCLRequestCollectionFromReader(IDataReader aReader)
        {
            List<LIS_PCLRequest> mItemCollection = new List<LIS_PCLRequest>();
            while (aReader.Read())
            {
                mItemCollection.Add(GetLIS_PCLRequestFromReader(aReader));
            }
            return mItemCollection;
        }
        protected virtual LIS_PCLRequest GetLIS_PCLRequestFromReader(IDataReader aReader)
        {
            LIS_PCLRequest mItem = new LIS_PCLRequest();
            if (aReader.HasColumn("SoPhieuChiDinh") && aReader["SoPhieuChiDinh"] != DBNull.Value)
            {
                mItem.SoPhieuChiDinh = aReader["SoPhieuChiDinh"].ToString();
            }
            if (aReader.HasColumn("MaDichVu") && aReader["MaDichVu"] != DBNull.Value)
            {
                mItem.MaDichVu = aReader["MaDichVu"].ToString();
            }
            if (aReader.HasColumn("TenDichVu") && aReader["TenDichVu"] != DBNull.Value)
            {
                mItem.TenDichVu = aReader["TenDichVu"].ToString();
            }
            if (aReader.HasColumn("NgayChiDinh") && aReader["NgayChiDinh"] != DBNull.Value)
            {
                mItem.NgayChiDinh = Convert.ToDateTime(aReader["NgayChiDinh"]);
            }
            else if (aReader.HasColumn("ThoiGianChiDinh") && aReader["ThoiGianChiDinh"] != DBNull.Value)
            {
                mItem.ThoiGianChiDinh = Convert.ToDateTime(aReader["ThoiGianChiDinh"]);
            }
            if (aReader.HasColumn("KetQua") && aReader["KetQua"] != DBNull.Value)
            {
                mItem.KetQua = aReader["KetQua"].ToString();
            }
            if (aReader.HasColumn("MaBenhNhan") && aReader["MaBenhNhan"] != DBNull.Value)
            {
                mItem.MaBenhNhan = aReader["MaBenhNhan"].ToString();
            }
            if (aReader.HasColumn("TenBenhNhan") && aReader["TenBenhNhan"] != DBNull.Value)
            {
                mItem.TenBenhNhan = aReader["TenBenhNhan"].ToString();
            }
            if (aReader.HasColumn("DiaChi") && aReader["DiaChi"] != DBNull.Value)
            {
                mItem.DiaChi = aReader["DiaChi"].ToString();
            }
            if (aReader.HasColumn("NamSinh") && aReader["NamSinh"] != DBNull.Value)
            {
                mItem.NamSinh = Convert.ToInt32(aReader["NamSinh"]);
            }
            if (aReader.HasColumn("GioiTinh") && aReader["GioiTinh"] != DBNull.Value)
            {
                mItem.GioiTinh = aReader["GioiTinh"].ToString();
            }
            if (aReader.HasColumn("ChanDoan") && aReader["ChanDoan"] != DBNull.Value)
            {
                mItem.ChanDoan = aReader["ChanDoan"].ToString();
            }
            if (aReader.HasColumn("MaDoiTuong") && aReader["MaDoiTuong"] != DBNull.Value)
            {
                mItem.MaDoiTuong = aReader["MaDoiTuong"].ToString();
            }
            if (aReader.HasColumn("TenDoiTuong") && aReader["TenDoiTuong"] != DBNull.Value)
            {
                mItem.TenDoiTuong = aReader["TenDoiTuong"].ToString();
            }
            if (aReader.HasColumn("MaKhoaPhong") && aReader["MaKhoaPhong"] != DBNull.Value)
            {
                mItem.MaKhoaPhong = aReader["MaKhoaPhong"].ToString();
            }
            if (aReader.HasColumn("TenKhoaPhong") && aReader["TenKhoaPhong"] != DBNull.Value)
            {
                mItem.TenKhoaPhong = aReader["TenKhoaPhong"].ToString();
            }
            if (aReader.HasColumn("MaBacSi") && aReader["MaBacSi"] != DBNull.Value)
            {
                mItem.MaBacSi = aReader["MaBacSi"].ToString();
            }
            if (aReader.HasColumn("TenBacSi") && aReader["TenBacSi"] != DBNull.Value)
            {
                mItem.TenBacSi = aReader["TenBacSi"].ToString();
            }
            if (aReader.HasColumn("TrangThai") && aReader["TrangThai"] != DBNull.Value)
            {
                mItem.TrangThai = Convert.ToInt32(aReader["TrangThai"]);
            }
            //▼====: #078
            if (aReader.HasColumn("CanNang") && aReader["CanNang"] != DBNull.Value)
            {
                mItem.CanNang = Convert.ToInt32(aReader["CanNang"]);
            }
            if (aReader.HasColumn("ChieuCao") && aReader["ChieuCao"] != DBNull.Value)
            {
                mItem.ChieuCao = Convert.ToInt32(aReader["ChieuCao"]);
            }
            if (aReader.HasColumn("Tuoi") && aReader["Tuoi"] != DBNull.Value)
            {
                mItem.Tuoi = Convert.ToInt32(aReader["Tuoi"]);
            }
            if (aReader.HasColumn("TreEm") && aReader["TreEm"] != DBNull.Value)
            {
                mItem.TreEm = Convert.ToBoolean(aReader["TreEm"]);
            }
            //▲====: #078
            return mItem;
        }
        //▲====: #022
        /*▼====: #029*/
        protected virtual List<Um_ModuleFunctionOperations> GetAllDetails_ModuleFunctionOperations(IDataReader aReader)
        {
            List<Um_ModuleFunctionOperations> item = new List<Um_ModuleFunctionOperations>();
            while (aReader.Read())
            {
                item.Add(GetAllDetails_ModuleFunctionOperationsFromReader(aReader));
            }
            return item;
        }
        protected virtual Um_ModuleFunctionOperations GetAllDetails_ModuleFunctionOperationsFromReader(IDataReader aReader)
        {
            Um_ModuleFunctionOperations mItem = new Um_ModuleFunctionOperations();
            if (aReader.HasColumn("ModuleID") && aReader["ModuleID"] != DBNull.Value)
            {
                mItem.ModuleID = Convert.ToInt32(aReader["ModuleID"]);
            }
            if (aReader.HasColumn("eNumModule") && aReader["eNumModule"] != DBNull.Value)
            {
                mItem.eNumModule = Convert.ToInt32(aReader["eNumModule"]);
            }
            if (aReader.HasColumn("ModuleName") && aReader["ModuleName"] != DBNull.Value)
            {
                mItem.ModuleName = aReader["ModuleName"].ToString();
            }
            if (aReader.HasColumn("ModuleDescription") && aReader["ModuleDescription"] != DBNull.Value)
            {
                mItem.ModuleDescription = aReader["ModuleDescription"].ToString();
            }
            if (aReader.HasColumn("FunctionID") && aReader["FunctionID"] != DBNull.Value)
            {
                mItem.FunctionID = (long)aReader["FunctionID"];
            }
            if (aReader.HasColumn("eNumFunction") && aReader["eNumFunction"] != DBNull.Value)
            {
                mItem.eNumFunction = Convert.ToInt32(aReader["eNumFunction"]);
            }
            if (aReader.HasColumn("FunctionName") && aReader["FunctionName"] != DBNull.Value)
            {
                mItem.FunctionName = aReader["FunctionName"].ToString();
            }
            if (aReader.HasColumn("FunctionDescription") && aReader["FunctionDescription"] != DBNull.Value)
            {
                mItem.FunctionDescription = aReader["FunctionDescription"].ToString();
            }
            if (aReader.HasColumn("OperationID") && aReader["OperationID"] != DBNull.Value)
            {
                mItem.OperationID = Convert.ToInt32(aReader["OperationID"]);
            }
            if (aReader.HasColumn("OperationName") && aReader["OperationName"] != DBNull.Value)
            {
                mItem.OperationName = aReader["OperationName"].ToString();
            }
            if (aReader.HasColumn("OperationDescription") && aReader["OperationDescription"] != DBNull.Value)
            {
                mItem.OperationDescription = aReader["OperationDescription"].ToString();
            }
            if (aReader.HasColumn("EnumOperation") && aReader["EnumOperation"] != DBNull.Value)
            {
                mItem.EnumOperation = Convert.ToInt32(aReader["EnumOperation"]);
            }
            return mItem;
        }
        /*▲====: #029*/
        protected virtual IList<OutPatientCashAdvance> GetOutPatientCashAdvanceFromReader(IDataReader aReader)
        {
            var mCollection = new List<OutPatientCashAdvance>();
            while (aReader.Read())
            {
                OutPatientCashAdvance mitem = new OutPatientCashAdvance();
                mitem.FillData(aReader);
                mCollection.Add(mitem);
            }
            return mCollection;
        }

        protected virtual IList<OutPatientCashAdvanceLink> GetOutPatientCashAdvanceLinkCollectionFromReader(IDataReader aReader)
        {
            var mCollection = new List<OutPatientCashAdvanceLink>();
            while (aReader.Read())
            {
                OutPatientCashAdvanceLink mitem = new OutPatientCashAdvanceLink();
                mitem.FillData(aReader);
                mCollection.Add(mitem);
            }
            return mCollection;
        }
        //▼====== #045
        protected virtual InwardDrugClinicDept GetInwardDrugPharmacyFromReader(IDataReader reader)
        {
            var p = new InwardDrugClinicDept
            {
                GenMedProductID = reader["DrugID"] as long?,
                InBatchNumber = reader["InBatchNumber"].ToString(),
                InBuyingPrice = (decimal)reader["InBuyingPrice"],
                InExpiryDate = reader["InExpiryDate"] as DateTime?,
                InID = (long)reader["InID"],
                InProductionDate = reader["InProductionDate"] as DateTime?,
                InQuantity = Convert.ToDecimal(reader["InQuantity"]),
                inviID = (long)reader["inviID"],
                Remaining = Convert.ToDecimal(reader["Remaining"])
            };
            if (reader.HasColumn("IsLoad") && reader["IsLoad"] != DBNull.Value)
            {
                p.IsLoad = Convert.ToInt16(reader["IsLoad"]);
            }
            if (reader.HasColumn("IsPercentage") && reader["IsPercentage"] != DBNull.Value)
            {
                p.IsPercentage = Convert.ToBoolean(reader["IsPercentage"]);
            }

            p.TotalPriceNotVAT = Convert.ToDecimal(reader["InQuantity"]) * (decimal)reader["InBuyingPrice"];

            p.SelectedShelfDrugLocation = new RefShelfDrugLocation();
            if (reader.HasColumn("SdlID") && reader["SdlID"] != DBNull.Value)
            {
                p.SdlID = reader["SdlID"] as long?;
                p.SelectedShelfDrugLocation.SdlID = (long)reader["SdlID"];
                if (reader.HasColumn("SdlDescription") && reader["SdlDescription"] != DBNull.Value)
                {
                    p.SelectedShelfDrugLocation.SdlDescription = reader["SdlDescription"].ToString();
                    p.SdlDescription = reader["SdlDescription"].ToString();
                }
            }
            if (reader.HasColumn("InBatchNumber") && reader["InBatchNumber"] != DBNull.Value)
            {
                p.InBatchNumber = reader["InBatchNumber"].ToString();
            }
            if (reader.HasColumn("InProductionDate") && reader["InProductionDate"] != DBNull.Value)
            {
                p.InProductionDate = Convert.ToDateTime(reader["InProductionDate"]);
            }
            p.RefGenMedProductDetails = new RefGenMedProductDetails();
            if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
            {
                if (reader.HasColumn("DrugID") && reader["DrugID"] != DBNull.Value)
                {
                    p.RefGenMedProductDetails.GenMedProductID = (long)reader["DrugID"];
                }
                if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
                {
                    p.RefGenMedProductDetails.BrandName = reader["BrandName"].ToString();
                }
                if (reader.HasColumn("GenericName") && reader["GenericName"] != DBNull.Value)
                {
                    p.RefGenMedProductDetails.GenericName = reader["GenericName"].ToString();
                }
                if (reader.HasColumn("DrugCode") && reader["DrugCode"] != DBNull.Value)
                {
                    p.RefGenMedProductDetails.Code = reader["DrugCode"].ToString();
                }
                if (reader.HasColumn("ShelfName") && reader["ShelfName"] != DBNull.Value)
                {
                    p.RefGenMedProductDetails.ShelfName = reader["ShelfName"].ToString();
                }
                if (reader.HasColumn("HIDrugCode") && reader["HIDrugCode"] != DBNull.Value)
                {
                    p.RefGenMedProductDetails.HICode = reader["HIDrugCode"] == null ? "" : reader["HIDrugCode"].ToString();
                }
                if (reader.HasColumn("UnitName") && reader["UnitName"] != DBNull.Value)
                {
                    p.RefGenMedProductDetails.SelectedUnit = new RefUnit();
                    p.RefGenMedProductDetails.SelectedUnit.UnitName = reader["UnitName"].ToString();
                }
            }
            p.SelectedStaffInput = new Staff();
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.SelectedStaffInput.StaffID = (long)reader["StaffID"];
                if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                {
                    p.SelectedStaffInput.FullName = reader["FullName"].ToString();
                }
            }
            if (reader.HasColumn("swhlName") && reader["swhlName"] != DBNull.Value)
            {
                p.swhlName = reader["swhlName"].ToString();
            }
            if (reader.HasColumn("V_GoodsType") && reader["V_GoodsType"] != DBNull.Value)
            {
                p.V_GoodsType = (long)reader["V_GoodsType"];
            }
            if (reader.HasColumn("GoodsTypeName") && reader["GoodsTypeName"] != DBNull.Value)
            {
                p.GoodsTypeName = reader["GoodsTypeName"].ToString();
            }
            if (reader.HasColumn("IsPercent") && reader["IsPercent"] != DBNull.Value)
            {
                p.IsPercent = (bool)reader["IsPercent"];
            }
            if (reader.HasColumn("DiscountByPercent") && reader["DiscountByPercent"] != DBNull.Value)
            {
                p.DiscountingByPercent = Convert.ToDecimal(reader["DiscountByPercent"]);
            }
            if (reader.HasColumn("Discounting") && reader["Discounting"] != DBNull.Value)
            {
                p.Discounting = Convert.ToDecimal(reader["Discounting"]);
            }
            if (reader.HasColumn("IsPercent") && reader["IsPercent"] != DBNull.Value)
            {
                p.IsPercent = (bool)reader["IsPercent"];
            }
            if (reader.HasColumn("NoPrint") && reader["NoPrint"] != DBNull.Value)
            {
                p.NoPrint = reader["NoPrint"] as bool?;
            }
            if (reader.HasColumn("InCost") && reader["InCost"] != DBNull.Value)
            {
                p.InBuyingPriceActual = (decimal)reader["InCost"];
            }

            if (reader.HasColumn("NormalPrice") && reader["NormalPrice"] != DBNull.Value)
            {
                p.NormalPrice = (decimal)reader["NormalPrice"];
            }
            if (reader.HasColumn("HIPatientPrice") && reader["HIPatientPrice"] != DBNull.Value)
            {
                p.HIPatientPrice = (decimal)reader["HIPatientPrice"];
            }
            if (reader.HasColumn("HIAllowedPrice") && reader["HIAllowedPrice"] != DBNull.Value)
            {
                p.HIAllowedPrice = (decimal)reader["HIAllowedPrice"];
            }
            if (reader.HasColumn("OutID") && reader["OutID"] != DBNull.Value)
            {
                p.OutID = reader["OutID"] as long?;
            }
            if (reader.HasColumn("MedDeptQty") && reader["MedDeptQty"] != DBNull.Value)
            {
                p.MedDeptQty = Convert.ToInt32(reader["MedDeptQty"]);
            }

            if (reader.HasColumn("DrugVersionID") && reader["DrugVersionID"] != DBNull.Value)
            {
                p.GenMedVersionID = Convert.ToInt64(reader["DrugVersionID"]);
            }
            #region Copy lại, để khi đổi giá bán theo lô, so sánh cái cũ và cái mới, nếu cái mới khác cái cũ thì đổi trạng thái cái mới là Modified.
            p.NormalPrice_Orig = p.NormalPrice;
            p.HIPatientPrice_Orig = p.HIPatientPrice;
            p.HIAllowedPrice_Orig = p.HIAllowedPrice;
            #endregion
            if (reader.HasColumn("inviID") && reader["inviID"] != DBNull.Value)
            {
                p.inviID = (long)reader["inviID"];
                p.SelectedInwardDrugMedDeptInvoice = new InwardDrugClinicDeptInvoice();
                p.SelectedInwardDrugMedDeptInvoice.inviID = (long)reader["inviID"];
                if (reader.HasColumn("InvID") && reader["InvID"] != DBNull.Value)
                {
                    p.SelectedInwardDrugMedDeptInvoice.InvID = reader["InvID"].ToString();
                }
                if (reader.HasColumn("DSPTModifiedDate") && reader["DSPTModifiedDate"] != DBNull.Value)
                {
                    p.SelectedInwardDrugMedDeptInvoice.DSPTModifiedDate = Convert.ToDateTime(reader["DSPTModifiedDate"]);
                }
            }

            if (reader.HasColumn("VAT") && reader["VAT"] != DBNull.Value)
            {
                p.VAT = Convert.ToDecimal(reader["VAT"]);
            }
            else
            {
                p.VAT = null;
            }
            return p;
        }

        protected virtual List<InwardDrugClinicDept> GetInwardDrugPharmacyCollectionFromReader(IDataReader reader)
        {
            var lst = new List<InwardDrugClinicDept>();
            while (reader.Read())
            {
                lst.Add(GetInwardDrugPharmacyFromReader(reader));
            }
            return lst;
        }
        //▲====== #045

        //▼====== #047
        protected virtual List<InsuranceBenefitCategories> GetInsuranceBenefitCategoriesCollectionFromReader(IDataReader reader)
        {
            var p = new List<eHCMS.Configurations.InsuranceBenefitCategories>();
            while (reader.Read())
            {
                p.Add(GetInsuranceBenefitCategoriesFromReader(reader));
            }
            return p;
        }
        protected virtual InsuranceBenefitCategories GetInsuranceBenefitCategoriesFromReader(IDataReader reader)
        {
            var p = new InsuranceBenefitCategories();
            try
            {
                if (reader.HasColumn("HIPCode") && reader["HIPCode"] != DBNull.Value)
                {
                    p.HIPCode = reader["HIPCode"].ToString();
                }
                if (reader.HasColumn("BenefitCode") && reader["BenefitCode"] != DBNull.Value)
                {
                    p.BenefitCode = reader["BenefitCode"].ToString();
                }
                if (reader.HasColumn("RebatePercentage") && reader["RebatePercentage"] != DBNull.Value)
                {
                    p.RebatePercentage = float.Parse(reader["RebatePercentage"].ToString());
                }
                if (reader.HasColumn("IBeID") && reader["IBeID"] != DBNull.Value)
                {
                    p.IBeID = int.Parse(reader["IBeID"].ToString());
                }
            }
            catch (Exception e)
            {
                AxLogger.Instance.LogError(e);
            }
            return p;
        }
        protected virtual List<InsuranceBenefitCategories_Data> GetInsuranceBenefitCategories_DataCollectionFromReader(IDataReader reader)
        {
            var p = new List<InsuranceBenefitCategories_Data>();
            while (reader.Read())
            {
                p.Add(GetInsuranceBenefitCategories_DataFromReader(reader));
            }
            return p;
        }
        protected virtual InsuranceBenefitCategories_Data GetInsuranceBenefitCategories_DataFromReader(IDataReader reader)
        {
            var p = new InsuranceBenefitCategories_Data();
            try
            {
                if (reader.HasColumn("HIPCode") && reader["HIPCode"] != DBNull.Value)
                {
                    p.HIPCode = reader["HIPCode"].ToString();
                }
                if (reader.HasColumn("BenefitCode") && reader["BenefitCode"] != DBNull.Value)
                {
                    p.BenefitCode = reader["BenefitCode"].ToString();
                }
                if (reader.HasColumn("RebatePercentage") && reader["RebatePercentage"] != DBNull.Value)
                {
                    p.RebatePercentage = decimal.Parse(reader["RebatePercentage"].ToString());
                }
                if (reader.HasColumn("IBeID") && reader["IBeID"] != DBNull.Value)
                {
                    p.IBeID = int.Parse(reader["IBeID"].ToString());
                }
                if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
                {
                    p.IsActive = bool.Parse(reader["IsActive"].ToString());
                }
                if (reader.HasColumn("HIPGroup") && reader["HIPGroup"] != DBNull.Value)
                {
                    p.HIPGroup = int.Parse(reader["HIPGroup"].ToString());
                }
                if (reader.HasColumn("HIPName") && reader["HIPName"] != DBNull.Value)
                {
                    p.HIPName = reader["HIPName"].ToString();
                }
                if (reader.HasColumn("Notes") && reader["Notes"] != DBNull.Value)
                {
                    p.Notes = reader["Notes"].ToString();
                }
            }
            catch (Exception e)
            {
                AxLogger.Instance.LogError(e);
            }
            return p;
        }
        //▲====== #047
        //▼====== #048
        protected virtual List<RequestDrugInwardForHiStore> GetRequestDrugInwardHIStoreCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RequestDrugInwardForHiStore>();
            while (reader.Read())
            {
                lst.Add(GetRequestDrugInwardHIStoreFromReader(reader));
            }
            return lst;
        }


        protected virtual RequestDrugInwardForHiStore GetRequestDrugInwardHIStoreFromReader(IDataReader reader)
        {
            var p = new RequestDrugInwardForHiStore { RequestDrugInwardHiStoreID = (long)reader["RequestDrugInwardHiStoreID"] };
            if (reader["ReqDate"] != DBNull.Value)
            {
                p.ReqDate = (DateTime)reader["ReqDate"];
            }
            p.ReqNumCode = reader["ReqNumCode"].ToString();
            p.ReqStatus = reader["ReqStatus"] as long?;
            p.StaffID = (long)reader["StaffID"];
            p.SelectedStaff = new Staff { StaffID = (long)reader["StaffID"] };
            if (reader.HasColumn("FullName"))
            {
                p.SelectedStaff.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("SPhoneNumber"))
            {
                p.SelectedStaff.SPhoneNumber = reader["SPhoneNumber"].ToString();
            }
            if (reader.HasColumn("SStreetAddress"))
            {
                p.SelectedStaff.SStreetAddress = reader["SStreetAddress"].ToString();
            }
            p.InDeptStoreID = reader["InDeptStoreID"] as long?;
            if (reader["InDeptStoreID"] != DBNull.Value)
            {
                p.InDeptStoreObject = new RefStorageWarehouseLocation { StoreID = (long)reader["InDeptStoreID"] };
                if (reader.HasColumn("InDeptStoreName"))
                {
                    p.InDeptStoreObject.swhlName = reader["InDeptStoreName"].ToString();
                }
            }

            p.OutFromStoreID = reader["OutFromStoreID"] as long?;
            if (reader["OutFromStoreID"] != DBNull.Value)
            {
                p.OutFromStoreObject = new RefStorageWarehouseLocation { StoreID = (long)reader["OutFromStoreID"] };
                if (reader.HasColumn("OutFromStoreName"))
                {
                    p.OutFromStoreObject.swhlName = reader["OutFromStoreName"].ToString();
                }
            }
            p.DeptID = reader["DeptID"] as long?;
            p.Comment = reader["Comment"].ToString();
            if (reader.HasColumn("DaNhanHang"))
            {
                p.DaNhanHang = reader["DaNhanHang"] as bool?;
            }
            if (reader.HasColumn("RefGenDrugCatID_1") && reader["RefGenDrugCatID_1"] != DBNull.Value)
            {
                p.RefGenDrugCatID_1 = Convert.ToInt64(reader["RefGenDrugCatID_1"]);
            }
            if (reader.HasColumn("IsApproved") && reader["IsApproved"] != DBNull.Value)
            {
                p.IsApproved = reader["IsApproved"] as bool?;
            }
            if (reader.HasColumn("ApprovedStaffID") && reader["ApprovedStaffID"] != DBNull.Value)
            {
                p.ApprovedStaffID = reader["ApprovedStaffID"] as long?;
            }
            if (reader.HasColumn("ApprovedDate") && reader["ApprovedDate"] != DBNull.Value)
            {
                p.ApprovedDate = reader["ApprovedDate"] as DateTime?;
            }
            if (reader.HasColumn("FromDate") && reader["FromDate"] != DBNull.Value)
            {
                p.FromDate = reader["FromDate"] as DateTime?;
            }
            if (reader.HasColumn("ToDate") && reader["ToDate"] != DBNull.Value)
            {
                p.ToDate = reader["ToDate"] as DateTime?;
            }

            if (reader.HasColumn("Checked") && reader["Checked"] != DBNull.Value)
            {
                p.Checked = (bool)reader["Checked"];
            }
            return p;
        }
        protected virtual List<RequestDrugInwardForHiStoreDetails> GetReqOutwardDrugHIStoreDetailsCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RequestDrugInwardForHiStoreDetails>();
            while (reader.Read())
            {
                lst.Add(GetReqOutwardDrugHIStoreDetailsFromReader(reader));
            }
            return lst;
        }

        protected virtual RequestDrugInwardForHiStoreDetails GetReqOutwardDrugHIStoreDetailsFromReader(IDataReader reader)
        {
            var p = new RequestDrugInwardForHiStoreDetails
            {
                RequestDrugInwardHiStoreID = (long)reader["RequestDrugInwardHiStoreID"],
                GenMedProductID = (long)reader["GenMedProductID"]
            };

            if (reader.HasColumn("OutHIStoretReqID") && reader["OutHIStoretReqID"] != DBNull.Value)
            {
                p.OutHIStoretReqID = (long)reader["OutHIStoretReqID"];
            }

            try
            {
                p.RefGenericDrugDetail = GetRefGenMedProductDetailsFromReader(reader);
            }
            catch
            {
            }
            if (reader.HasColumn("PrescribedQty") && reader["PrescribedQty"] != DBNull.Value)
            {
                p.PrescribedQty = (decimal)reader["PrescribedQty"];
            }
            if (reader.HasColumn("ItemVerfStat") && reader["ItemVerfStat"] != DBNull.Value)
            {
                p.ItemVerfStat = Convert.ToInt16(reader["ItemVerfStat"]);
            }

            if (reader.HasColumn("ReqQty") && reader["ReqQty"] != DBNull.Value)
            {
                p.ReqQty = (decimal)reader["ReqQty"];
            }

            if (reader.HasColumn("ReqQtyStr") && reader["ReqQtyStr"] != DBNull.Value)
            {
                p.ReqQtyStr = reader["ReqQtyStr"].ToString();
            }

            if (reader.HasColumn("ApprovedQty") && reader["ApprovedQty"] != DBNull.Value)
            {
                p.ApprovedQty = (decimal)reader["ApprovedQty"];
            }
            p.OrgNotes = String.Empty;
            if (reader.HasColumn("Notes") && reader["Notes"] != DBNull.Value)
            {
                p.Notes = reader["Notes"].ToString();
                p.OrgNotes = reader["Notes"].ToString();
            }
            if (reader.HasColumn("QtyOutward") && reader["QtyOutward"] != DBNull.Value)
            {
                p.QtyOutward = (int)reader["QtyOutward"];
            }
            if (reader.HasColumn("QtyRemaining") && reader["QtyRemaining"] != DBNull.Value)
            {
                p.QtyRemaining = (int)reader["QtyRemaining"];
            }
            p.EntityState = EntityState.PERSITED;

            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = reader["PtRegistrationID"] as long?;
                if (p.PtRegistrationID > 0)
                {
                    p.CurPatientRegistration = GetPatientRegistrationFromReader(reader);
                }
            }
            if (reader.HasColumn("ApprovedNotes") && reader["ApprovedNotes"] != DBNull.Value)
            {
                p.ApprovedNotes = reader["ApprovedNotes"].ToString();
            }

            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = reader["StaffID"] as long?;
            }
            if (reader.HasColumn("StaffName") && reader["StaffName"] != DBNull.Value)
            {
                p.StaffName = reader["StaffName"].ToString();
            }
            if (reader.HasColumn("DateTimeSelection") && reader["DateTimeSelection"] != DBNull.Value)
            {
                p.DateTimeSelection = (DateTime)reader["DateTimeSelection"];
            }

            if (reader.HasColumn("MDose") && reader["MDose"] != DBNull.Value)
            {
                p.MDose = Convert.ToSingle(reader["MDose"]);
            }
            if (reader.HasColumn("ADose") && reader["ADose"] != DBNull.Value)
            {
                p.ADose = Convert.ToSingle(reader["ADose"]);
            }
            if (reader.HasColumn("EDose") && reader["EDose"] != DBNull.Value)
            {
                p.EDose = Convert.ToSingle(reader["EDose"]);
            }
            if (reader.HasColumn("NDose") && reader["NDose"] != DBNull.Value)
            {
                p.NDose = Convert.ToSingle(reader["NDose"]);
            }

            if (reader.HasColumn("MDoseStr") && reader["MDoseStr"] != DBNull.Value)
            {
                p.MDoseStr = reader["MDoseStr"].ToString();
            }
            if (reader.HasColumn("ADoseStr") && reader["ADoseStr"] != DBNull.Value)
            {
                p.ADoseStr = reader["ADoseStr"].ToString();
            }
            if (reader.HasColumn("EDoseStr") && reader["EDoseStr"] != DBNull.Value)
            {
                p.EDoseStr = reader["EDoseStr"].ToString();
            }
            if (reader.HasColumn("NDoseStr") && reader["NDoseStr"] != DBNull.Value)
            {
                p.NDoseStr = reader["NDoseStr"].ToString();
            }

            if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
            {
                p.DoctorStaff = new Staff();
                p.DoctorStaff.StaffID = Convert.ToInt64(reader["DoctorStaffID"]);
                if (reader.HasColumn("DoctorStaffName") && reader["DoctorStaffName"] != DBNull.Value)
                {
                    p.DoctorStaff.FullName = reader["DoctorStaffName"].ToString();
                }
            }
            if (reader.HasColumn("MedicalInstructionDate") && reader["MedicalInstructionDate"] != DBNull.Value)
            {
                p.MedicalInstructionDate = Convert.ToDateTime(reader["MedicalInstructionDate"]);
            }
            if (reader.HasColumn("RemainingQty") && reader["RemainingQty"] != DBNull.Value)
            {
                p.RemainingQty = Convert.ToDecimal(reader["RemainingQty"]);
            }
            return p;
        }
        //▲====== #048
        protected virtual List<RptOutPtTransactionFinalizationDetail> GetRptOutPtTransactionFinalizationDetailCollectionFromReader(IDataReader reader)
        {
            var mHOSPayments = new List<RptOutPtTransactionFinalizationDetail>();
            while (reader.Read())
            {
                mHOSPayments.Add(GetRptOutPtTransactionFinalizationDetailFromReader(reader));
            }
            return mHOSPayments;
        }
        protected virtual RptOutPtTransactionFinalizationDetail GetRptOutPtTransactionFinalizationDetailFromReader(IDataReader reader)
        {
            var mItem = new RptOutPtTransactionFinalizationDetail();
            mItem.FillData(reader);
            return mItem;
        }
        protected virtual DQGReport GetDQGReportWithDetailFromReader(IDataReader reader)
        {
            var mItemCollections = new List<DQGReport>();
            while (reader.Read())
            {
                var mItem = new DQGReport();
                mItem.FillData(reader);
                mItemCollections.Add(mItem);
            }
            if (mItemCollections == null || mItemCollections.Count != 1)
            {
                throw new Exception(eHCMSResources.T0074_G1_I);
            }
            List<DQG_phieu_nhap> DQG_phieu_nhap = new List<DQG_phieu_nhap>();
            List<DQG_phieu_nhap_chi_tiet> DQG_phieu_nhap_chi_tiet = new List<DQG_phieu_nhap_chi_tiet>();
            List<DQG_don_thuoc> DQG_don_thuoc = new List<DQG_don_thuoc>();
            List<DQG_don_thuoc_chi_tiet> DQG_don_thuoc_chi_tiet = new List<DQG_don_thuoc_chi_tiet>();
            List<DQG_hoa_don> DQG_hoa_don = new List<DQG_hoa_don>();
            List<DQG_hoa_don_chi_tiet> DQG_hoa_don_chi_tiet = new List<DQG_hoa_don_chi_tiet>();
            List<DQG_phieu_xuat> DQG_phieu_xuat = new List<DQG_phieu_xuat>();
            List<DQG_phieu_xuat_chi_tiet> DQG_phieu_xuat_chi_tiet = new List<DQG_phieu_xuat_chi_tiet>();
            if (reader.NextResult())
            {
                while (reader.Read())
                {
                    var mItem = new DQG_phieu_nhap();
                    mItem.FillData(reader);
                    DQG_phieu_nhap.Add(mItem);
                }
            }
            if (reader.NextResult())
            {
                while (reader.Read())
                {
                    var mItem = new DQG_phieu_nhap_chi_tiet();
                    mItem.FillData(reader);
                    DQG_phieu_nhap_chi_tiet.Add(mItem);
                }
                foreach (var item in DQG_phieu_nhap)
                {
                    item.chi_tiet = DQG_phieu_nhap_chi_tiet.Where(x => x.id_phieu_nhap == item.id_phieu_nhap).ToList();
                }
            }
            if (reader.NextResult())
            {
                while (reader.Read())
                {
                    var mItem = new DQG_don_thuoc();
                    mItem.FillData(reader);
                    DQG_don_thuoc.Add(mItem);
                }
            }
            if (reader.NextResult())
            {
                while (reader.Read())
                {
                    var mItem = new DQG_don_thuoc_chi_tiet();
                    mItem.FillData(reader);
                    DQG_don_thuoc_chi_tiet.Add(mItem);
                }
                foreach (var item in DQG_don_thuoc)
                {
                    item.chi_tiet = DQG_don_thuoc_chi_tiet.Where(x => x.id_don_thuoc == item.id_don_thuoc).ToList();
                }
            }
            if (reader.NextResult())
            {
                while (reader.Read())
                {
                    var mItem = new DQG_hoa_don();
                    mItem.FillData(reader);
                    DQG_hoa_don.Add(mItem);
                }
            }
            if (reader.NextResult())
            {
                while (reader.Read())
                {
                    var mItem = new DQG_hoa_don_chi_tiet();
                    mItem.FillData(reader);
                    DQG_hoa_don_chi_tiet.Add(mItem);
                }
                foreach (var item in DQG_hoa_don)
                {
                    item.chi_tiet = DQG_hoa_don_chi_tiet.Where(x => x.id_hoa_don == item.id_hoa_don).ToList();
                }
            }
            if (reader.NextResult())
            {
                while (reader.Read())
                {
                    var mItem = new DQG_phieu_xuat();
                    mItem.FillData(reader);
                    DQG_phieu_xuat.Add(mItem);
                }
            }
            if (reader.NextResult())
            {
                while (reader.Read())
                {
                    var mItem = new DQG_phieu_xuat_chi_tiet();
                    mItem.FillData(reader);
                    DQG_phieu_xuat_chi_tiet.Add(mItem);
                }
                foreach (var item in DQG_phieu_xuat)
                {
                    item.chi_tiet = DQG_phieu_xuat_chi_tiet.Where(x => x.id_phieu_xuat == item.id_phieu_xuat).ToList();
                }
            }
            reader.Close();
            mItemCollections.First().phieu_nhap = DQG_phieu_nhap;
            mItemCollections.First().don_thuoc = DQG_don_thuoc;
            mItemCollections.First().hoa_don = DQG_hoa_don;
            mItemCollections.First().phieu_xuat = DQG_phieu_xuat;
            return mItemCollections.First();
        }
        protected virtual List<DQGReport> GetDQGReportCollectionFromReader(IDataReader reader)
        {
            var mItemCollections = new List<DQGReport>();
            while (reader.Read())
            {
                var mItem = new DQGReport();
                mItem.FillData(reader);
                mItemCollections.Add(mItem);
            }
            reader.Close();
            return mItemCollections;
        }
        protected virtual IList<HospitalClient> GetHospitalClientCollectionFromReader(IDataReader reader)
        {
            List<HospitalClient> mItemCollection = new List<HospitalClient>();
            while (reader.Read())
            {
                var mItem = new HospitalClient();
                mItem.FillData(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        protected virtual IList<HospitalClientContract> GetHospitalClientContractCollectionFromReader(IDataReader reader)
        {
            List<HospitalClientContract> mItemCollection = new List<HospitalClientContract>();
            while (reader.Read())
            {
                var mItem = new HospitalClientContract();
                mItem.FillData(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        protected virtual IList<ClientContractServiceItem> GetClientContractServiceItemCollectionFromReader(IDataReader reader)
        {
            List<ClientContractServiceItem> mItemCollection = new List<ClientContractServiceItem>();
            while (reader.Read())
            {
                var mItem = new ClientContractServiceItem();
                mItem.FillData(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        protected virtual IList<HosClientContractPatient> GetHosClientContractPatientCollectionFromReader(IDataReader reader)
        {
            List<HosClientContractPatient> mItemCollection = new List<HosClientContractPatient>();
            while (reader.Read())
            {
                var mItem = new HosClientContractPatient();
                mItem.FillData(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        protected virtual IList<ClientContractServiceItemPatientLink> GetClientContractServiceItemPatientLinkCollectionFromReader(IDataReader reader)
        {
            List<ClientContractServiceItemPatientLink> mItemCollection = new List<ClientContractServiceItemPatientLink>();
            while (reader.Read())
            {
                var mItem = new ClientContractServiceItemPatientLink();
                mItem.FillData(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        protected virtual IList<HosClientContractFinalization> GetHosClientContractFinalizationCollectionFromReader(IDataReader reader)
        {
            List<HosClientContractFinalization> mItemCollection = new List<HosClientContractFinalization>();
            while (reader.Read())
            {
                var mItem = new HosClientContractFinalization();
                mItem.FillData(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        protected virtual string ConvertInwardDrugMedDeptFromDrugDeptPurchaseOrderDetailToXML(List<DrugDeptPurchaseOrderDetail> OrderDetails, long inviID)
        {
            if (OrderDetails == null || OrderDetails.Count == 0 || inviID == 0)
            {
                return null;
            }
            var mXDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
            new XElement("DrugDeptPurchaseOrderDetail",
            new XElement("inviID", inviID),
            from aDetailItem in OrderDetails
            select new XElement("item",
                new XElement("SdlID", aDetailItem.SdlID),
                new XElement("GenMedProductID", aDetailItem.GenMedProductID),
                new XElement("InBatchNumber", aDetailItem.InBatchNumber),
                new XElement("InProductionDate", !aDetailItem.InProductionDate.HasValue || aDetailItem.InProductionDate == null ? null : aDetailItem.InProductionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                new XElement("InExpiryDate", !aDetailItem.InExpiryDate.HasValue || aDetailItem.InExpiryDate == null ? null : aDetailItem.InExpiryDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                new XElement("InQuantity", aDetailItem.InQuantity),
                new XElement("InBuyingPrice", aDetailItem.UnitPrice),
                new XElement("V_GoodsType", aDetailItem.V_GoodsType == null ? null : (long?)aDetailItem.V_GoodsType.LookupID),
                new XElement("DrugDeptPoDetailID", aDetailItem.DrugDeptPoDetailID),
                new XElement("SdlDescription", aDetailItem.SdlDescription),
                new XElement("Discounting", aDetailItem.Discounting),
                new XElement("DiscountByPercent", aDetailItem.DiscountingByPercent),
                new XElement("IsPercent", aDetailItem.IsPercent),
                new XElement("NoPrint", aDetailItem.NoPrint),
                new XElement("PackageQuantity", aDetailItem.PackageQuantity),
                new XElement("PackagePrice", aDetailItem.PackagePrice),
                new XElement("IsUnitPackage", aDetailItem.IsUnitPackage),
                new XElement("TotalPriceNotVAT", aDetailItem.TotalPriceNotVAT),
                new XElement("NormalPrice", aDetailItem.RefGenMedProductDetail != null ? aDetailItem.RefGenMedProductDetail.NormalPrice : 0),
                new XElement("HIPatientPrice", aDetailItem.RefGenMedProductDetail != null ? aDetailItem.RefGenMedProductDetail.HIPatientPrice : 0),
                new XElement("HIAllowedPrice", aDetailItem.RefGenMedProductDetail != null ? aDetailItem.RefGenMedProductDetail.HIAllowedPrice : 0),
                new XElement("BidID", aDetailItem.RefGenMedProductDetail != null ? (long?)aDetailItem.RefGenMedProductDetail.BidID : null),
                new XElement("VAT", aDetailItem.VAT),
                new XElement("IsNotVat", aDetailItem.IsNotVat)
                )));
            return mXDocument.ToString();
        }
        protected virtual string ConvertInwardDrugMedDeptFromDrugDeptPurchaseOrderDetailToXMLWithoutInviID(List<DrugDeptPurchaseOrderDetail> OrderDetails)
        {
            if (OrderDetails == null || OrderDetails.Count == 0)
            {
                return null;
            }
            var mXDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
            new XElement("DrugDeptPurchaseOrderDetail",
            from aDetailItem in OrderDetails
            select new XElement("item",
                new XElement("SdlID", aDetailItem.SdlID),
                new XElement("GenMedProductID", aDetailItem.GenMedProductID),
                new XElement("InBatchNumber", aDetailItem.InBatchNumber),
                new XElement("InProductionDate", !aDetailItem.InProductionDate.HasValue || aDetailItem.InProductionDate == null ? null : aDetailItem.InProductionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                new XElement("InExpiryDate", !aDetailItem.InExpiryDate.HasValue || aDetailItem.InExpiryDate == null ? null : aDetailItem.InExpiryDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                new XElement("InQuantity", aDetailItem.InQuantity),
                new XElement("InBuyingPrice", aDetailItem.UnitPrice),
                new XElement("V_GoodsType", aDetailItem.V_GoodsType == null ? null : (long?)aDetailItem.V_GoodsType.LookupID),
                new XElement("DrugDeptPoDetailID", aDetailItem.DrugDeptPoDetailID),
                new XElement("SdlDescription", aDetailItem.SdlDescription),
                new XElement("Discounting", aDetailItem.Discounting),
                new XElement("DiscountByPercent", aDetailItem.DiscountingByPercent),
                new XElement("IsPercent", aDetailItem.IsPercent),
                new XElement("NoPrint", aDetailItem.NoPrint),
                new XElement("PackageQuantity", aDetailItem.PackageQuantity),
                new XElement("PackagePrice", aDetailItem.PackagePrice),
                new XElement("IsUnitPackage", aDetailItem.IsUnitPackage),
                new XElement("TotalPriceNotVAT", aDetailItem.TotalPriceNotVAT),
                new XElement("NormalPrice", aDetailItem.RefGenMedProductDetail != null ? aDetailItem.RefGenMedProductDetail.NormalPrice : 0),
                new XElement("HIPatientPrice", aDetailItem.RefGenMedProductDetail != null ? aDetailItem.RefGenMedProductDetail.HIPatientPrice : 0),
                new XElement("HIAllowedPrice", aDetailItem.RefGenMedProductDetail != null ? aDetailItem.RefGenMedProductDetail.HIAllowedPrice : 0),
                new XElement("BidID", aDetailItem.RefGenMedProductDetail != null ? (long?)aDetailItem.RefGenMedProductDetail.BidID : null))));
            return mXDocument.ToString();
        }
        protected virtual MedicalExaminationResult GetMedicalExaminationResultFromReader(IDataReader aReader)
        {
            var aItem = new MedicalExaminationResult();
            aItem.FillData(aReader);
            return aItem;
        }
        protected virtual IList<TreatmentHistory> GetTreatmentHistoryCollectionFromReader(IDataReader reader)
        {
            List<TreatmentHistory> mItemCollection = new List<TreatmentHistory>();
            while (reader.Read())
            {
                var mItem = new TreatmentHistory();
                mItem.FillData(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }
        protected virtual IList<HistoryAndPhysicalExaminationInfo> GetHistoryAndPhysicalExaminationInfoCollectionFromReader(IDataReader reader)
        {
            List<HistoryAndPhysicalExaminationInfo> mItemCollection = new List<HistoryAndPhysicalExaminationInfo>();
            while (reader.Read())
            {
                var mItem = new HistoryAndPhysicalExaminationInfo();
                mItem.FillData(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }

        public string ConvertDetailsListPatientToXml(List<APIPatient> ListPatient)
        {
            XDocument xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                new XElement("Patient",
                from details in ListPatient
                select new XElement("RecInfo",
                new XElement("PatientCode", details.PatientCode),
                new XElement("FullName", details.FullName),
                new XElement("GenderString", details.GenderString),
                new XElement("DOB", details.DOB),
                new XElement("PatientFullStreetAddress", details.PatientFullStreetAddress),
                new XElement("PatientCellPhoneNumber", details.PatientCellPhoneNumber),
                new XElement("ContractNo", details.ContractNo),
                new XElement("ContractPatientGroupID", details.ContractPatientGroupID)
            )));
            return xmlDocument.ToString();
        }
        protected virtual string InvoiceDetailCollectionToXml(IList<OutwardDrugClinicDeptInvoice> InvoiceCollection)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                new XElement("root",
                from item in InvoiceCollection
                select new XElement("item",
                        new XElement("StoreID", item.StoreID),
                        new XElement("CustomerName", item.CustomerName),
                        new XElement("PhoneNumber", item.PhoneNumber),
                        new XElement("Address", item.Address),
                        new XElement("OutInvID", item.OutInvID),
                        new XElement("V_OutputTo", item.V_OutputTo),
                        new XElement("OutputToID", item.OutputToID),
                        new XElement("Notes", item.Notes),
                        new XElement("PtRegistrationID", item.PtRegistrationID),
                        new XElement("ReqDrugInClinicDeptID", item.ReqDrugInClinicDeptID),
                        new XElement("XML", new XElement("OutwardDrugClinicDepts",
                            from aChildItem in item.OutwardDrugClinicDepts
                            select new XElement("OutwardDrugClinicDept",
                                new XElement("OutID", aChildItem.OutID),
                                new XElement("GenMedProductID", aChildItem.GenMedProductID),
                                new XElement("InID", aChildItem.InID),
                                new XElement("HIBenefit", aChildItem.HIBenefit),
                                new XElement("OutQuantity", aChildItem.OutQuantity),
                                new XElement("OutPrice", aChildItem.OutPrice),
                                new XElement("OutNotes", aChildItem.OutNotes),
                                new XElement("OutAmount", aChildItem.OutAmount),
                                new XElement("OutPriceDifference", aChildItem.OutPriceDifference),
                                new XElement("OutAmountCoPay", aChildItem.OutAmountCoPay),
                                new XElement("OutHIRebate", aChildItem.OutHIRebate),
                                new XElement("Qty", aChildItem.Qty),
                                new XElement("HIAllowedPrice", aChildItem.HIAllowedPrice),
                                new XElement("QtyReturn", aChildItem.QtyReturn),
                                new XElement("OutClinicDeptReqID", aChildItem.OutClinicDeptReqID),
                                new XElement("IsCountHI", aChildItem.IsCountHI),
                                new XElement("IsCountPatient", aChildItem.IsCountPatient),
                                new XElement("V_MedicalMaterial", aChildItem.V_MedicalMaterial),
                                new XElement("HIPaymentPercent", aChildItem.HIPaymentPercent),
                                new XElement("MDose", aChildItem.MDose),
                                new XElement("ADose", aChildItem.ADose),
                                new XElement("EDose", aChildItem.EDose),
                                new XElement("NDose", aChildItem.NDose),
                                new XElement("MDoseStr", aChildItem.MDoseStr),
                                new XElement("ADoseStr", aChildItem.ADoseStr),
                                new XElement("EDoseStr", aChildItem.EDoseStr),
                                new XElement("NDoseStr", aChildItem.NDoseStr),
                                new XElement("Administration", aChildItem.Administration == null ? null : Globals.GetSafeXMLString(aChildItem.Administration)),
                                new XElement("DoctorStaffID", aChildItem.DoctorStaff == null ? 0 : aChildItem.DoctorStaff.StaffID),
                                new XElement("MedicalInstructionDate", !aChildItem.MedicalInstructionDate.HasValue || aChildItem.MedicalInstructionDate == null ? null : aChildItem.MedicalInstructionDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff")),
                                //▼===== #072
                                new XElement("VAT", aChildItem.VAT)
                                //▲===== #072
                                ))),
                        new XElement("ReqDrugInClinicDeptIDList", null),
                        new XElement("OutPtRegistrationID", item.OutPtRegistrationID)
                    )));
            return xmlDocument.ToString();
        }
        //▼===== #063
        protected virtual List<DiagnosysConsultationSummary> GetDiagnosysConsultationSummaryCollection(IDataReader reader)
        {
            var lst = new List<DiagnosysConsultationSummary>();
            while (reader.Read())
            {
                lst.Add(GetDiagnosysConsultationSummaryFromReader(reader));
            }
            return lst;
        }
        protected virtual DiagnosysConsultationSummary GetDiagnosysConsultationSummaryFromReader(IDataReader reader)
        {
            var p = new DiagnosysConsultationSummary();
            if (reader.HasColumn("DiagConsultationSummaryID") && reader["DiagConsultationSummaryID"] != DBNull.Value)
            {
                p.DiagConsultationSummaryID = (long)reader["DiagConsultationSummaryID"];
            }
            if (reader.HasColumn("ConsultationDate") && reader["ConsultationDate"] != DBNull.Value)
            {
                p.ConsultationDate = Convert.ToDateTime(reader["ConsultationDate"]);
            }
            if (reader.HasColumn("ConsultationDiagnosis") && reader["ConsultationDiagnosis"] != DBNull.Value)
            {
                p.ConsultationDiagnosis = reader["ConsultationDiagnosis"].ToString();
            }
            if (reader.HasColumn("ConsultationResult") && reader["ConsultationResult"] != DBNull.Value)
            {
                p.ConsultationResult = reader["ConsultationResult"].ToString();
            }
            if (reader.HasColumn("RecCreateDate") && reader["RecCreateDate"] != DBNull.Value)
            {
                p.RecCreateDate = Convert.ToDateTime(reader["RecCreateDate"]);
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = (long)reader["StaffID"];
            }
            if (reader.HasColumn("ModifiedDate") && reader["ModifiedDate"] != DBNull.Value)
            {
                p.ModifiedDate = Convert.ToDateTime(reader["ModifiedDate"]);
            }
            if (reader.HasColumn("ModifiedStaffID") && reader["ModifiedStaffID"] != DBNull.Value)
            {
                p.ModifiedStaffID = (long)reader["ModifiedStaffID"];
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = (long)reader["PtRegistrationID"];
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                p.V_RegistrationType = (long)reader["V_RegistrationType"];
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientID = (long)reader["PatientID"];
            }
            if (reader.HasColumn("V_DiagnosysConsultation") && reader["V_DiagnosysConsultation"] != DBNull.Value)
            {
                p.V_DiagnosysConsultation = (long)reader["V_DiagnosysConsultation"];
            }
            if (reader.HasColumn("Title") && reader["Title"] != DBNull.Value)
            {
                p.Title = reader["Title"].ToString();
            }
            if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
            {
                p.FullName = reader["FullName"].ToString();
            }
            if (reader.HasColumn("ObjectValue") && reader["ObjectValue"] != DBNull.Value)
            {
                p.V_DiagnosysConsultationMask = reader["ObjectValue"].ToString();
            }
            if (reader.HasColumn("ConsultationSummary") && reader["ConsultationSummary"] != DBNull.Value)
            {
                p.ConsultationSummary = reader["ConsultationSummary"].ToString();
            }
            if (reader.HasColumn("ConsultationTreatment") && reader["ConsultationTreatment"] != DBNull.Value)
            {
                p.ConsultationTreatment = reader["ConsultationTreatment"].ToString();
            }
            if (reader.HasColumn("SecretaryStaffID") && reader["SecretaryStaffID"] != DBNull.Value)
            {
                p.SecretaryStaffID = Convert.ToInt64(reader["SecretaryStaffID"]);
            }
            if (reader.HasColumn("PresiderStaffID") && reader["PresiderStaffID"] != DBNull.Value)
            {
                p.PresiderStaffID = Convert.ToInt64(reader["PresiderStaffID"]);
            }
            return p;
        }
        protected virtual string ConvertListStaffToXml(List<Staff> items)
        {
            if (items != null)
            {
                var sb = new StringBuilder();
                sb.Append("<Staff>");
                foreach (var details in items)
                {
                    if (details == null) continue;
                    sb.Append("<RecInfo>");
                    sb.AppendFormat("<StaffID>{0}</StaffID>", details.StaffID);
                    sb.Append("</RecInfo>");
                }
                sb.Append("</Staff>");
                return sb.ToString();
            }
            else
            {
                return null;
            }
        }
        protected virtual string ConvertICD10ToXml(List<DiagnosisIcd10Items> items)
        {
            if (items != null)
            {
                var sb = new StringBuilder();
                sb.Append("<DiagnosisIcd10Items>");
                foreach (var details in items)
                {
                    if (details == null) continue;
                    sb.Append("<RecInfo>");
                    sb.AppendFormat("<ICD10Code>{0}</ICD10Code>", details.ICD10Code);
                    sb.AppendFormat("<IsMain>{0}</IsMain>", details.IsMain);
                    sb.Append("</RecInfo>");
                }
                sb.Append("</DiagnosisIcd10Items>");
                return sb.ToString();
            }
            else
            {
                return null;
            }
        }
        //▲====== #063
        protected virtual string ConvertIDCollectionToXML(long[] items)
        {
            if (items != null)
            {
                var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"), new XElement("root",
                    from item in items
                    select new XElement("item", new XElement("ID", item))));
                return xmlDocument.ToString();
            }
            else
            {
                return null;
            }
        }
        protected virtual List<ConsultationRoomStaffAllocationServiceList> GetConsultationRoomStaffAllocationServiceListCollectionFromReader(IDataReader CurrentReader)
        {
            List<ConsultationRoomStaffAllocationServiceList> mItemCollection = new List<ConsultationRoomStaffAllocationServiceList>();
            while (CurrentReader.Read())
            {
                var CurrentItem = new ConsultationRoomStaffAllocationServiceList();
                CurrentItem.FillData(CurrentReader);
                mItemCollection.Add(CurrentItem);
            }
            return mItemCollection;
        }
        protected virtual List<ConsultationRoomStaffAllocationService> GetConsultationRoomStaffAllocationServiceCollectionFromReader(IDataReader CurrentReader)
        {
            List<ConsultationRoomStaffAllocationService> mItemCollection = new List<ConsultationRoomStaffAllocationService>();
            while (CurrentReader.Read())
            {
                var CurrentItem = new ConsultationRoomStaffAllocationService();
                CurrentItem.FillData(CurrentReader);
                mItemCollection.Add(CurrentItem);
            }
            return mItemCollection;
        }
        protected virtual List<HosClientContractPatientGroup> GetHosClientContractPatientGroupCollectionFromReader(IDataReader reader)
        {
            List<HosClientContractPatientGroup> mItemCollection = new List<HosClientContractPatientGroup>();
            while (reader.Read())
            {
                var mItem = new HosClientContractPatientGroup();
                mItem.FillData(reader);
                mItemCollection.Add(mItem);
            }
            return mItemCollection;
        }

        #region Tạm ứng ngoại trú
        protected virtual List<PatientAccount> GetPatientAccountCollection(IDataReader reader)
        {
            var lst = new List<PatientAccount>();
            while (reader.Read())
            {
                lst.Add(GetPatientAccountFromReader(reader));
            }
            return lst;
        }

        protected virtual PatientAccount GetPatientAccountFromReader(IDataReader reader)
        {
            var p = new PatientAccount();
            if (reader.HasColumn("PatientAccountID") && reader["PatientAccountID"] != DBNull.Value)
            {
                p.PatientAccountID = (long)reader["PatientAccountID"];
            }
            if (reader.HasColumn("AccountNumber") && reader["AccountNumber"] != DBNull.Value)
            {
                p.AccountNumber = reader["AccountNumber"].ToString();
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientID = (long)reader["PatientID"];
            }
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = Convert.ToBoolean(reader["IsActive"]);
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            return p;
        }

        protected virtual List<PatientAccountTransaction> GetPatientAccountTransactionCollection(IDataReader reader)
        {
            var lst = new List<PatientAccountTransaction>();
            while (reader.Read())
            {
                lst.Add(GetPatientAccountTransactionFromReader(reader));
            }
            return lst;
        }
        protected virtual PatientAccountTransaction GetPatientAccountTransactionFromReader(IDataReader reader)
        {
            var p = new PatientAccountTransaction();
            if (reader.HasColumn("PtAccountTranID") && reader["PtAccountTranID"] != DBNull.Value)
            {
                p.PtAccountTranID = (long)reader["PtAccountTranID"];
            }
            if (reader.HasColumn("PatientAccountID") && reader["PatientAccountID"] != DBNull.Value)
            {
                p.PatientAccountID = (long)reader["PatientAccountID"];
            }
            if (reader.HasColumn("TranReceiptNum") && reader["TranReceiptNum"] != DBNull.Value)
            {
                p.TranReceiptNum = reader["TranReceiptNum"].ToString();
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.Staff = new Staff();
                p.Staff.StaffID = (long)reader["StaffID"];
                if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                {
                    p.Staff.FullName = reader["FullName"].ToString();
                }
            }
            if (reader.HasColumn("V_PaymentMode") && reader["V_PaymentMode"] != DBNull.Value)
            {
                p.V_PaymentMode = new Lookup();
                if (reader.HasColumn("V_PaymentMode") && reader["V_PaymentMode"] != DBNull.Value)
                {
                    p.V_PaymentMode.ObjectName = reader["V_PaymentMode"].ToString();
                }
                if (reader.HasColumn("V_PaymentMode_ID") && reader["V_PaymentMode_ID"] != DBNull.Value)
                {
                    p.V_PaymentMode.LookupID = (long)reader["V_PaymentMode_ID"];
                }
                if (reader.HasColumn("V_PaymentMode_Value") && reader["V_PaymentMode_Value"] != DBNull.Value)
                {
                    p.V_PaymentMode.ObjectValue = reader["V_PaymentMode_Value"].ToString();
                }
            }
            if (reader.HasColumn("V_PtAccountTranType") && reader["V_PtAccountTranType"] != DBNull.Value)
            {
                p.V_PtAccountTranType = new Lookup();
                if (reader.HasColumn("V_PtAccountTranType") && reader["V_PtAccountTranType"] != DBNull.Value)
                {
                    p.V_PtAccountTranType.ObjectName = reader["V_PtAccountTranType"].ToString();
                }
                if (reader.HasColumn("V_PtAccountTranType_ID") && reader["V_PtAccountTranType_ID"] != DBNull.Value)
                {
                    p.V_PtAccountTranType.LookupID = (long)reader["V_PtAccountTranType_ID"];
                }
                if (reader.HasColumn("V_PtAccountTranType_Value") && reader["V_PtAccountTranType_Value"] != DBNull.Value)
                {
                    p.V_PtAccountTranType.ObjectValue = reader["V_PtAccountTranType_Value"].ToString();
                }
            }
            if (reader.HasColumn("V_PaymentReason") && reader["V_PaymentReason"] != DBNull.Value)
            {
                p.V_PaymentReason = new Lookup();
                if (reader.HasColumn("V_PaymentReason") && reader["V_PaymentReason"] != DBNull.Value)
                {
                    p.V_PaymentReason.ObjectName = reader["V_PaymentReason"].ToString();
                }
                if (reader.HasColumn("V_PaymentReason_ID") && reader["V_PaymentReason_ID"] != DBNull.Value)
                {
                    p.V_PaymentReason.LookupID = (long)reader["V_PaymentReason_ID"];
                }
                if (reader.HasColumn("V_PaymentReason_Value") && reader["V_PaymentReason_Value"] != DBNull.Value)
                {
                    p.V_PaymentReason.ObjectValue = reader["V_PaymentReason_Value"].ToString();
                }
            }
            if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
            {
                p.Note = reader["Note"].ToString();
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader["CreditAmount"] != DBNull.Value && reader["CreditAmount"] != DBNull.Value)
            {
                p.CreditAmount = (decimal)reader["CreditAmount"];
            }
            if (reader["DebitAmount"] != DBNull.Value && reader["DebitAmount"] != DBNull.Value)
            {
                p.DebitAmount = (decimal)reader["DebitAmount"];
            }
            if (reader.HasColumn("TransactionDate") && reader["TransactionDate"] != DBNull.Value)
            {
                p.TransactionDate = Convert.ToDateTime(reader["TransactionDate"]);
            }
            return p;
        }
        #endregion
        protected virtual XDocument GenerateListToXMLWithNameSpace_ExamResultDetail(IList<PatientPCLImagingResultDetail> resultDetails)
        {
            var xmlDocument = new XDocument(new XDeclaration("1.0", "UTF-8", "yes"),
                new XElement("ResultDetails",
                        from detail in resultDetails
                        select new XElement("ResultDetail",
                        new XElement("PCLImgResultID", detail.PCLImgResultID),
                        new XElement("PCLImgResultDetailID", detail.PCLImgResultDetailID),
                        new XElement("PCLExamTypeTestItemID", detail.PCLExamTypeTestItemID),
                        new XElement("PCLExamTestItemID", detail.PCLExamTestItemID),
                        new XElement("PrintIdx", detail.PrintIdx),
                        new XElement("Value", detail.Value)
                )));
            return xmlDocument;
        }

        #region Quản lý điều dưỡng thực hiện y lệnh
        //▼====: #102
        public List<TicketCare> GetTicketCareListFromReader(IDataReader reader)
        {
            List<TicketCare> p = new List<TicketCare>();
            while (reader.Read())
            {
                TicketCare item = GetTicketCareFromReader(reader);
                p.Add(item);
            }
            return p;
        }

        protected virtual TicketCare GetTicketCareFromReader(IDataReader reader)
        {
            var p = new TicketCare();
            if (reader.HasColumn("TicketCareID") && reader["TicketCareID"] != DBNull.Value)
            {
                p.TicketCareID = Convert.ToInt64(reader["TicketCareID"]);
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = Convert.ToInt64(reader["StaffID"]);
            }
            if (reader.HasColumn("IntPtDiagDrInstructionID") && reader["IntPtDiagDrInstructionID"] != DBNull.Value)
            {
                p.IntPtDiagDrInstructionID = Convert.ToInt64(reader["IntPtDiagDrInstructionID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaffID = Convert.ToInt64(reader["CreatedStaffID"]);
                p.CreatedStaff = new Staff();
                p.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);
                if (reader.HasColumn("CreatedStaffFullName") && reader["CreatedStaffFullName"] != DBNull.Value)
                {
                    p.CreatedStaff.FullName = reader["CreatedStaffFullName"].ToString();
                }
            }
            if (reader.HasColumn("OrientedTreatment") && reader["OrientedTreatment"] != DBNull.Value)
            {
                p.OrientedTreatment = reader["OrientedTreatment"].ToString();
            }
            if (reader.HasColumn("ExcuteInstruction") && reader["ExcuteInstruction"] != DBNull.Value)
            {
                p.ExcuteInstruction = reader["ExcuteInstruction"].ToString();
            }
            if (reader.HasColumn("DateExcute") && reader["DateExcute"] != DBNull.Value)
            {
                p.DateExcute = Convert.ToDateTime(reader["DateExcute"]);
            }
            if (reader.HasColumn("MarkAsDeleted") && reader["MarkAsDeleted"] != DBNull.Value)
            {
                p.MarkAsDeleted = Convert.ToBoolean(reader["MarkAsDeleted"]);
            }
            if (reader.HasColumn("V_LevelCare") && reader["V_LevelCare"] != DBNull.Value)
            {
                p.V_LevelCare = Convert.ToInt64(reader["V_LevelCare"]);
            }
            if (reader.HasColumn("ExamDate") && reader["ExamDate"] != DBNull.Value)
            {
                p.ExamDate = Convert.ToDateTime(reader["ExamDate"]);
            }
            if (reader.HasColumn("DoctorName") && reader["DoctorName"] != DBNull.Value)
            {
                p.DoctorName = reader["DoctorName"].ToString();
            }
            return p;
        }

        public List<ExecuteDrug> GetExecuteDrugListFromReader(IDataReader reader)
        {
            List<ExecuteDrug> p = new List<ExecuteDrug>();
            while (reader.Read())
            {
                ExecuteDrug item = GetExecuteDrugFromReader(reader);
                p.Add(item);
            }
            List<ExecuteDrug> result = new List<ExecuteDrug>();
            long ExecuteDrugID = 0;
            ExecuteDrug executeDrug = null;
            ExecuteDrugDetail executeDrugDetail = null;
            foreach (var item in p)
            {
                if (ExecuteDrugID == 0)
                {
                    // dòng đầu tiên
                    ExecuteDrugID = item.ExecuteDrugID;
                    executeDrug = new ExecuteDrug();
                    executeDrug = item.EntityDeepCopy();
                    executeDrugDetail = new ExecuteDrugDetail();
                    if (item.ExecuteDrugDetail != null)
                    {
                        executeDrugDetail = item.ExecuteDrugDetail.EntityDeepCopy();
                    }
                    if (executeDrug.ExecuteDrugDetailList == null)
                    {
                        executeDrug.ExecuteDrugDetailList = new List<ExecuteDrugDetail>();
                    }
                    executeDrug.ExecuteDrugDetailList.Add(executeDrugDetail);
                    result.Add(executeDrug);
                }
                else
                {
                    // kiểm tra trùng với thuốc không
                    if (item.ExecuteDrugID != ExecuteDrugID)
                    {
                        executeDrug = new ExecuteDrug();
                        executeDrug = item.EntityDeepCopy();
                        executeDrugDetail = new ExecuteDrugDetail();
                        if (item.ExecuteDrugDetail != null)
                        {
                            executeDrugDetail = item.ExecuteDrugDetail.EntityDeepCopy();
                        }
                        if (executeDrug.ExecuteDrugDetailList == null)
                        {
                            executeDrug.ExecuteDrugDetailList = new List<ExecuteDrugDetail>();
                        }
                        executeDrug.ExecuteDrugDetailList.Add(executeDrugDetail);
                        result.Add(executeDrug);
                    }
                    else
                    {
                        if (item.ExecuteDrugDetail != null && item.ExecuteDrugDetail.ExecuteDrugDetailID != executeDrugDetail.ExecuteDrugDetailID)
                        {
                            executeDrugDetail = new ExecuteDrugDetail();
                            if (item.ExecuteDrugDetail != null)
                            {
                                executeDrugDetail = item.ExecuteDrugDetail.EntityDeepCopy();
                            }
                            if (executeDrug.ExecuteDrugDetailList == null)
                            {
                                executeDrug.ExecuteDrugDetailList = new List<ExecuteDrugDetail>();
                            }
                            executeDrug.ExecuteDrugDetailList.Add(executeDrugDetail);
                        }
                    }
                    ExecuteDrugID = item.ExecuteDrugID;
                }
            }
            return result;
        }

        protected virtual ExecuteDrug GetExecuteDrugFromReader(IDataReader reader)
        {
            var p = new ExecuteDrug();
            if (reader.HasColumn("ExecuteDrugID") && reader["ExecuteDrugID"] != DBNull.Value)
            {
                p.ExecuteDrugID = Convert.ToInt64(reader["ExecuteDrugID"]);
            }
            if (reader.HasColumn("MarkAsDeleted") && reader["MarkAsDeleted"] != DBNull.Value)
            {
                p.MarkAsDeleted = Convert.ToBoolean(reader["MarkAsDeleted"]);
            }
            if (reader.HasColumn("V_LevelCare") && reader["V_LevelCare"] != DBNull.Value)
            {
                p.V_LevelCare = Convert.ToInt64(reader["V_LevelCare"]);
            }
            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                RefGenMedProductDetails drug = new RefGenMedProductDetails();
                p.DrugInfo = GetRefGenMedProductDetailsFromReader(reader);
            }
            if (reader.HasColumn("Qty") && reader["Qty"] != DBNull.Value)
            {
                p.Qty = Convert.ToDecimal(reader["Qty"]);
            }
            if (reader.HasColumn("NumberOfUse") && reader["NumberOfUse"] != DBNull.Value)
            {
                p.NumberOfUse = Convert.ToInt32(reader["NumberOfUse"]);
            }
            if (reader.HasColumn("ExecuteDrugDetailID") && reader["ExecuteDrugDetailID"] != DBNull.Value)
            {
                p.ExecuteDrugDetail = GetExecuteDrugDetailFromReader(reader);
            }
            return p;
        }


        protected virtual ExecuteDrugDetail GetExecuteDrugDetailFromReader(IDataReader reader)
        {
            var p = new ExecuteDrugDetail();
            if (reader.HasColumn("ExecuteDrugDetailID") && reader["ExecuteDrugDetailID"] != DBNull.Value)
            {
                p.ExecuteDrugDetailID = Convert.ToInt64(reader["ExecuteDrugDetailID"]);
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = Convert.ToInt64(reader["StaffID"]);
                p.NurseStaff = new Staff();
                p.NurseStaff.StaffID = Convert.ToInt64(reader["StaffID"]);
                if (reader.HasColumn("StaffFullName") && reader["StaffFullName"] != DBNull.Value)
                {
                    p.NurseStaff.FullName = reader["StaffFullName"].ToString();
                }
            }
            if (reader.HasColumn("DateExecute") && reader["DateExecute"] != DBNull.Value)
            {
                p.DateExecute = Convert.ToDateTime(reader["DateExecute"]);
            }
            if (reader.HasColumn("MarkAsDeleted") && reader["MarkAsDeleted"] != DBNull.Value)
            {
                p.MarkAsDeleted = Convert.ToBoolean(reader["MarkAsDeleted"]);
            }
            return p;
        }
        //▲====: #102
        #endregion

        protected virtual List<DiseaseProgression> GetDiseaseProgressionCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<DiseaseProgression>();
            while (reader.Read())
            {
                retVal.Add(GetDiseaseProgressionFromReader(reader));
            }
            return retVal;
        }

        protected virtual DiseaseProgression GetDiseaseProgressionFromReader(IDataReader reader)
        {
            var p = new DiseaseProgression
            {
                DiseaseProgressionID = (long)reader["DiseaseProgressionID"]
            };

            if (reader.HasColumn("DiseaseProgressionName") && reader["DiseaseProgressionName"] != DBNull.Value)
            {
                p.DiseaseProgressionName = reader["DiseaseProgressionName"].ToString();
            }
            if (reader.HasColumn("DiseaseProgressionNameWithUFW") && reader["DiseaseProgressionNameWithUFW"] != DBNull.Value)
            {
                p.DiseaseProgressionNameWithUFW = reader["DiseaseProgressionNameWithUFW"].ToString();
            }
            if (reader.HasColumn("UseForWebsite") && reader["UseForWebsite"] != DBNull.Value)
            {
                p.UseForWebsite = Convert.ToBoolean(reader["UseForWebsite"]);
            }
            return p;
        }
        protected virtual List<DiseaseProgressionDetails> GetDiseaseProgressionDetailsCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<DiseaseProgressionDetails>();
            while (reader.Read())
            {
                retVal.Add(GetDiseaseProgressionDetailsFromReader(reader));
            }
            return retVal;
        }

        protected virtual DiseaseProgressionDetails GetDiseaseProgressionDetailsFromReader(IDataReader reader)
        {
            var p = new DiseaseProgressionDetails
            {
                DiseaseProgressionDetailID = (long)reader["DiseaseProgressionDetailID"]
            };
            if (reader.HasColumn("DiseaseProgressionID") && reader["DiseaseProgressionID"] != DBNull.Value)
            {
                p.DiseaseProgressionID = (long)reader["DiseaseProgressionID"];
            }
            if (reader.HasColumn("DiseaseProgressionDetailName") && reader["DiseaseProgressionDetailName"] != DBNull.Value)
            {
                p.DiseaseProgressionDetailName = reader["DiseaseProgressionDetailName"].ToString();
            }
            return p;
        }
        //▼====: #128
        public List<OutpatientTreatmentType> GetOutpatientTreatmentTypeCollectionFromReader(IDataReader reader)
        {
            List<OutpatientTreatmentType> p = new List<OutpatientTreatmentType>();
            while (reader.Read())
            {
                OutpatientTreatmentType item = GetOutpatientTreatmentTypeFromReader(reader);
                p.Add(item);
            }
            return p;
        }

        protected virtual OutpatientTreatmentType GetOutpatientTreatmentTypeFromReader(IDataReader reader)
        {
            var p = new OutpatientTreatmentType();
            if (reader.HasColumn("OutpatientTreatmentTypeID") && reader["OutpatientTreatmentTypeID"] != DBNull.Value)
            {
                p.OutpatientTreatmentTypeID = Convert.ToInt64(reader["OutpatientTreatmentTypeID"]);
            }
            if (reader.HasColumn("OutpatientTreatmentName") && reader["OutpatientTreatmentName"] != DBNull.Value)
            {
                p.OutpatientTreatmentName = Convert.ToString(reader["OutpatientTreatmentName"]);
            }
            if (reader.HasColumn("MaxNumOfDayMedicalRecord") && reader["MaxNumOfDayMedicalRecord"] != DBNull.Value)
            {
                p.MaxNumOfDayMedicalRecord = Convert.ToInt32(reader["MaxNumOfDayMedicalRecord"]);
            }
            if (reader.HasColumn("MinNumOfDayMedicalRecord") && reader["MinNumOfDayMedicalRecord"] != DBNull.Value)
            {
                p.MinNumOfDayMedicalRecord = Convert.ToInt32(reader["MinNumOfDayMedicalRecord"]);
            }
            if (reader.HasColumn("MaxNumOfDayTreatment") && reader["MaxNumOfDayTreatment"] != DBNull.Value)
            {
                p.MaxNumOfDayTreatment = Convert.ToInt32(reader["MaxNumOfDayTreatment"]);
            }
            if (reader.HasColumn("MinNumOfDayTreatment") && reader["MinNumOfDayTreatment"] != DBNull.Value)
            {
                p.MinNumOfDayTreatment = Convert.ToInt32(reader["MinNumOfDayTreatment"]);
            }
            if (reader.HasColumn("MaxNumOfDayMedicine") && reader["MaxNumOfDayMedicine"] != DBNull.Value)
            {
                p.MaxNumOfDayMedicine = Convert.ToInt32(reader["MaxNumOfDayMedicine"]);
            }
            if (reader.HasColumn("MinNumOfDayMedicine") && reader["MinNumOfDayMedicine"] != DBNull.Value)
            {
                p.MinNumOfDayMedicine = Convert.ToInt32(reader["MinNumOfDayMedicine"]);
            }
            if (reader.HasColumn("ListICD10") && reader["ListICD10"] != DBNull.Value)
            {
                p.ListICD10 = reader["ListICD10"].ToString();
                //p.GetListICD10Code();
            }
            if (reader.HasColumn("OutpatientTreatmentCode") && reader["OutpatientTreatmentCode"] != DBNull.Value)
            {
                p.OutpatientTreatmentCode = Convert.ToString(reader["OutpatientTreatmentCode"]);
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("IsChronic") && reader["IsChronic"] != DBNull.Value)
            {
                p.IsChronic = Convert.ToBoolean(reader["IsChronic"]);
            }
            return p;
        }
        //▲====: #128
        //▼====: #157
        public List<RefApplicationConfig> GetRefApplicationConfigCollectionFromReader(IDataReader reader)
        {
            List<RefApplicationConfig> p = new List<RefApplicationConfig>();
            while (reader.Read())
            {
                RefApplicationConfig item = GetRefApplicationConfigFromReader(reader);
                p.Add(item);
            }
            return p;
        }

        protected virtual RefApplicationConfig GetRefApplicationConfigFromReader(IDataReader reader)
        {
            var p = new RefApplicationConfig();
            if (reader.HasColumn("ConfigItemID") && reader["ConfigItemID"] != DBNull.Value)
            {
                p.ConfigItemID = Convert.ToInt64(reader["ConfigItemID"]);
            }
            if (reader.HasColumn("ConfigItemKey") && reader["ConfigItemKey"] != DBNull.Value)
            {
                p.ConfigItemKey = Convert.ToString(reader["ConfigItemKey"]);
            }
            if (reader.HasColumn("ConfigItemValue") && reader["ConfigItemValue"] != DBNull.Value)
            {
                p.ConfigItemValue = Convert.ToString(reader["ConfigItemValue"]);
            }
            if (reader.HasColumn("ConfigItemNotes") && reader["ConfigItemNotes"] != DBNull.Value)
            {
                p.ConfigItemNotes = Convert.ToString(reader["ConfigItemNotes"]);
            }
            return p;
        }
        //▲====: #157
        public List<OutpatientTreatmentTypeICD10Link> GetOutpatientTreatmentTypeICD10LinkCollectionFromReader(IDataReader reader)
        {
            List<OutpatientTreatmentTypeICD10Link> p = new List<OutpatientTreatmentTypeICD10Link>();
            while (reader.Read())
            {
                OutpatientTreatmentTypeICD10Link item = GetOutpatientTreatmentTypeICD10LinkFromReader(reader);
                p.Add(item);
            }
            return p;
        }
        protected virtual OutpatientTreatmentTypeICD10Link GetOutpatientTreatmentTypeICD10LinkFromReader(IDataReader reader)
        {
            var p = new OutpatientTreatmentTypeICD10Link();
            if (reader.HasColumn("OutpatientTreatmentTypeICD10LinkID") && reader["OutpatientTreatmentTypeICD10LinkID"] != DBNull.Value)
            {
                p.OutpatientTreatmentTypeICD10LinkID = Convert.ToInt64(reader["OutpatientTreatmentTypeICD10LinkID"]);
            }
            if (reader.HasColumn("ICD10") && reader["ICD10"] != DBNull.Value)
            {
                p.ICD10 = Convert.ToString(reader["ICD10"]);
            }
            if (reader.HasColumn("OutpatientTreatmentTypeID") && reader["OutpatientTreatmentTypeID"] != DBNull.Value)
            {
                p.OutpatientTreatmentTypeID = Convert.ToInt64(reader["OutpatientTreatmentTypeID"]);
            }
            if (reader.HasColumn("IDCode") && reader["IDCode"] != DBNull.Value)
            {
                p.IDCode = Convert.ToInt64(reader["IDCode"]);
            }
            if (reader.HasColumn("DiseaseNameVN") && reader["DiseaseNameVN"] != DBNull.Value)
            {
                p.DiseaseNameVN = Convert.ToString(reader["DiseaseNameVN"]);
            }
            if (reader.HasColumn("DiseaseDescription") && reader["DiseaseDescription"] != DBNull.Value)
            {
                p.DiseaseDescription = Convert.ToString(reader["DiseaseDescription"]);
            }
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = Convert.ToBoolean(reader["IsActive"]);
            }
            //▼==== #181
            if (reader.HasColumn("ICD_IsActive") && reader["ICD_IsActive"] != DBNull.Value)
            {
                p.ICD_IsActive = Convert.ToBoolean(reader["ICD_IsActive"]);
            }
            if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
            {
                p.Note = Convert.ToString(reader["Note"]);
            }
            //▲==== #181
            return p;
        }
        //▼==== #136
        protected static List<RefRows> GetRefRowsListFromReader(IDataReader reader)
        {
            List<RefRows> mResultList = new List<RefRows>();
            while (reader.Read())
            {
                var mObj = new RefRows();
                if (reader.HasColumn("RefRowID") && reader["RefRowID"] != DBNull.Value)
                {
                    mObj.RefRowID = (long)reader["RefRowID"];
                }
                if (reader.HasColumn("RefRowCode") && reader["RefRowCode"] != DBNull.Value)
                {
                    mObj.RefRowCode = reader["RefRowCode"].ToString();
                }
                if (reader.HasColumn("RefRowName") && reader["RefRowName"] != DBNull.Value)
                {
                    mObj.RefRowName = reader["RefRowName"].ToString();
                }
                if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
                {
                    mObj.Note = reader["Note"].ToString();
                }
                if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
                {
                    mObj.CreatedDate = (DateTime)reader["CreatedDate"];
                }
                if (reader.HasColumn("swhlName") && reader["swhlName"] != DBNull.Value)
                {
                    mObj.swhlName = reader["swhlName"].ToString();
                }
                if (reader.HasColumn("StoreID") && reader["StoreID"] != DBNull.Value)
                {
                    mObj.StoreID = (long)reader["StoreID"];
                }
                if (reader.HasColumn("TotalFiles") && reader["TotalFiles"] != DBNull.Value)
                {
                    mObj.TotalFiles = Convert.ToInt32(reader["TotalFiles"]);
                }
                mResultList.Add(mObj);
            }
            return mResultList;
        }
        //▲==== #136
        protected virtual PatientCardDetail GetPatientCardDetailFromReader(IDataReader reader)
        {
            var mObj = new PatientCardDetail();
            if (reader.HasColumn("PatientCardDetailID") && reader["PatientCardDetailID"] != DBNull.Value)
            {
                mObj.PatientCardDetailID = Convert.ToInt64(reader["PatientCardDetailID"]);
            }
            if (reader.HasColumn("CardID") && reader["CardID"] != DBNull.Value)
            {
                mObj.CardID = Convert.ToInt64(reader["CardID"]);
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                mObj.PatientID = Convert.ToInt64(reader["PatientID"]);
            }
            if (reader.HasColumn("AccountNumber") && reader["AccountNumber"] != DBNull.Value)
            {
                mObj.AccountNumber = Convert.ToString(reader["AccountNumber"]);
            }
            if (reader.HasColumn("V_PatientClass") && reader["V_PatientClass"] != DBNull.Value)
            {
                mObj.V_PatientClass = Convert.ToInt64(reader["V_PatientClass"]);
            }
            if (reader.HasColumn("OpenCardDate") && reader["OpenCardDate"] != DBNull.Value)
            {
                mObj.OpenCardDate = Convert.ToDateTime(reader["OpenCardDate"]);
            }
            if (reader.HasColumn("ExpireCardDate") && reader["ExpireCardDate"] != DBNull.Value)
            {
                mObj.ExpireCardDate = Convert.ToDateTime(reader["ExpireCardDate"]);
            }
            if (reader.HasColumn("Logmodified") && reader["Logmodified"] != DBNull.Value)
            {
                mObj.Logmodified = Convert.ToString(reader["Logmodified"]);
            }

            return mObj;
        }
        protected virtual DeathCheckRecord GetDeathCheckRecordFromReader(IDataReader reader)
        {
            var mObj = new DeathCheckRecord();
            if (reader.HasColumn("DeathCheckRecordID") && reader["DeathCheckRecordID"] != DBNull.Value)
            {
                mObj.DeathCheckRecordID = Convert.ToInt64(reader["DeathCheckRecordID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                mObj.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                mObj.PatientID = Convert.ToInt64(reader["PatientID"]);
            }
            if (reader.HasColumn("MedicalCode") && reader["MedicalCode"] != DBNull.Value)
            {
                mObj.MedicalCode = Convert.ToString(reader["MedicalCode"]);
            }
            if (reader.HasColumn("CheckRecordDate") && reader["CheckRecordDate"] != DBNull.Value)
            {
                mObj.CheckRecordDate = Convert.ToDateTime(reader["CheckRecordDate"]);
            }
            if (reader.HasColumn("PresideStaffID") && reader["PresideStaffID"] != DBNull.Value)
            {
                mObj.PresideStaffID = Convert.ToInt64(reader["PresideStaffID"]);
            }
            if (reader.HasColumn("SecretaryStaffID") && reader["SecretaryStaffID"] != DBNull.Value)
            {
                mObj.SecretaryStaffID = Convert.ToInt64(reader["SecretaryStaffID"]);
            }
            if (reader.HasColumn("MemberStaff") && reader["MemberStaff"] != DBNull.Value)
            {
                mObj.MemberStaff = Convert.ToString(reader["MemberStaff"]);
            }
            if (reader.HasColumn("TreatmentProcess") && reader["TreatmentProcess"] != DBNull.Value)
            {
                mObj.TreatmentProcess = Convert.ToString(reader["TreatmentProcess"]);
            }
            if (reader.HasColumn("Conclude") && reader["Conclude"] != DBNull.Value)
            {
                mObj.Conclude = Convert.ToString(reader["Conclude"]);
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                mObj.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("ModifiedLog") && reader["ModifiedLog"] != DBNull.Value)
            {
                mObj.ModifiedLog = Convert.ToString(reader["ModifiedLog"]);
            }

            return mObj;
        }
        //▼====: #156
        protected virtual List<DTDT_don_thuoc> GetDTDTDonThuocCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<DTDT_don_thuoc>();
            while (reader.Read())
            {
                retVal.Add(GetDTDT_don_thuocFromReader(reader));
            }
            List<DTDT_don_thuoc> result = new List<DTDT_don_thuoc>();
            long id_don_thuoc = 0;
            DTDT_don_thuoc donThuoc = null;
            DTDT_don_thuoc_chi_tiet donThuocChitiet = null;
            foreach (var item in retVal)
            {
                if (id_don_thuoc == 0)
                {
                    // dòng đầu tiên
                    id_don_thuoc = item.id_don_thuoc;
                    donThuoc = new DTDT_don_thuoc();
                    donThuoc = item.EntityDeepCopy();
                    donThuocChitiet = new DTDT_don_thuoc_chi_tiet();
                    if (item.thong_tin_don_thuoc_item != null)
                    {
                        donThuocChitiet = item.thong_tin_don_thuoc_item.EntityDeepCopy();
                    }
                    if (donThuoc.thong_tin_don_thuoc == null)
                    {
                        donThuoc.thong_tin_don_thuoc = new List<DTDT_don_thuoc_chi_tiet>();
                    }
                    donThuoc.thong_tin_don_thuoc.Add(donThuocChitiet);
                    result.Add(donThuoc);
                }
                else
                {
                    // kiểm tra trùng với thuốc không
                    if (item.id_don_thuoc != id_don_thuoc)
                    {
                        donThuoc = new DTDT_don_thuoc();
                        donThuoc = item.EntityDeepCopy();
                        donThuocChitiet = new DTDT_don_thuoc_chi_tiet();
                        if (item.thong_tin_don_thuoc_item != null)
                        {
                            donThuocChitiet = item.thong_tin_don_thuoc_item.EntityDeepCopy();
                        }
                        if (donThuoc.thong_tin_don_thuoc == null)
                        {
                            donThuoc.thong_tin_don_thuoc = new List<DTDT_don_thuoc_chi_tiet>();
                        }
                        donThuoc.thong_tin_don_thuoc.Add(donThuocChitiet);
                        result.Add(donThuoc);
                    }
                    else
                    {
                        if (item.thong_tin_don_thuoc_item != null && item.thong_tin_don_thuoc_item.id_don_thuoc_chi_tiet != donThuocChitiet.id_don_thuoc_chi_tiet)
                        {
                            donThuocChitiet = new DTDT_don_thuoc_chi_tiet();
                            if (item.thong_tin_don_thuoc_item != null)
                            {
                                donThuocChitiet = item.thong_tin_don_thuoc_item.EntityDeepCopy();
                            }
                            if (donThuoc.thong_tin_don_thuoc == null)
                            {
                                donThuoc.thong_tin_don_thuoc = new List<DTDT_don_thuoc_chi_tiet>();
                            }
                            donThuoc.thong_tin_don_thuoc.Add(donThuocChitiet);
                        }
                    }
                    id_don_thuoc = item.id_don_thuoc;
                }
            }
            return result;
        }
        //▲====: #156

        //▼==== #164
        protected virtual List<DQG_don_thuoc> GetDQG_don_thuocCollectionFromReader(IDataReader reader)
        {
            List<DQG_don_thuoc> p = new List<DQG_don_thuoc>();
            while (reader.Read())
            {
                DQG_don_thuoc mItem = new DQG_don_thuoc();
                mItem.FillData(reader);
                p.Add(mItem);
            }
            return p;
        }

        protected virtual List<DQG_don_thuoc_chi_tiet> GetDQG_don_thuoc_chi_tietCollectionFromReader(IDataReader reader)
        {
            var p = new List<DQG_don_thuoc_chi_tiet>();
            while (reader.Read())
            {
                var mItem = new DQG_don_thuoc_chi_tiet();
                mItem.FillData(reader);
                p.Add(mItem);
            }
            return p;
        }
        //▲==== #164

        //▼==== #166
        protected virtual RefNationality GetNationalityFromReader(IDataReader reader)
        {
            var p = new RefNationality { NationalityID = (long)reader["NationalityID"] };
            if (reader.HasColumn("NationalityCode"))
            {
                p.NationalityCode = reader["NationalityCode"].ToString();
            }
            if (reader.HasColumn("NationalityName"))
            {
                p.NationalityName = reader["NationalityName"].ToString();
            }
            return p;
        }
        protected virtual List<RefNationality> GetNationalityCollectionFromReader(IDataReader reader)
        {
            var countries = new List<RefNationality>();
            while (reader.Read())
            {
                countries.Add(GetNationalityFromReader(reader));
            }
            return countries;
        }

        protected virtual RefJob GetJobFromReader(IDataReader reader)
        {
            var p = new RefJob { JobID = (long)reader["JobID"] };
            if (reader.HasColumn("JobCode") && reader["JobCode"] != DBNull.Value)
            {
                p.JobCode = reader["JobCode"].ToString();
            }
            if (reader.HasColumn("JobName") && reader["JobName"] != DBNull.Value)
            {
                p.JobName = reader["JobName"].ToString();
            }

            if (reader.HasColumn("JobParentID") && reader["JobParentID"] != DBNull.Value)
            {
                p.JobParentID = (long)reader["JobParentID"];
            }
            return p;
        }
        protected virtual List<RefJob> GetJobCollectionFromReader(IDataReader reader)
        {
            var jobs = new List<RefJob>();
            while (reader.Read())
            {
                jobs.Add(GetJobFromReader(reader));
            }
            return jobs;
        }
        //▲==== #166

        //▼==== #171
        protected virtual string ConvertResourceListToXML(IList<Resources> items)
        {
            if (items != null)
            {
                var sb = new StringBuilder();
                sb.Append("<Resources>");
                foreach (var details in items)
                {
                    if (details.RscrID == 0) continue;
                    sb.Append("<RecInfo>");
                    sb.AppendFormat("<RscrID>{0}</RscrID>", details.RscrID);
                    sb.AppendFormat("<HIRepResourceCode>{0}</HIRepResourceCode>", details.HIRepResourceCode);
                    sb.AppendFormat("<ItemName>{0}</ItemName>", details.ItemName);
                    sb.Append("</RecInfo>");
                }
                sb.Append("</Resources>");
                return sb.ToString();
            }
            else
            {
                return null;
            }
        }
        
        protected virtual DischargePapersInfo GetDischargePapersInfoFromReader(IDataReader reader)
        {        
            var info = new DischargePapersInfo();
            if (reader.HasColumn("PaperID") && reader["PaperID"] != DBNull.Value)
            {
                info.PaperID = Convert.ToInt64(reader["PaperID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                info.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                info.V_RegistrationType = Convert.ToInt64(reader["V_RegistrationType"]);
            }
            if (reader.HasColumn("HeadOfDepartmentDoctorStaffID") && reader["HeadOfDepartmentDoctorStaffID"] != DBNull.Value)
            {
                info.HeadOfDepartmentDoctorStaffID = Convert.ToInt64(reader["HeadOfDepartmentDoctorStaffID"]);
            }
            if (reader.HasColumn("UnitLeaderDoctorStaffID") && reader["UnitLeaderDoctorStaffID"] != DBNull.Value)
            {
                info.UnitLeaderDoctorStaffID = Convert.ToInt64(reader["UnitLeaderDoctorStaffID"]);
            }
            if (reader.HasColumn("IsPregnancyTermination") && reader["IsPregnancyTermination"] != DBNull.Value)
            {
                info.IsPregnancyTermination = Convert.ToBoolean(reader["IsPregnancyTermination"]);
            }
            if (reader.HasColumn("PregnancyTerminationDateTime") && reader["PregnancyTerminationDateTime"] != DBNull.Value)
            {
                info.PregnancyTerminationDateTime = Convert.ToDateTime(reader["PregnancyTerminationDateTime"]);
            }
            if (reader.HasColumn("ReasonOfPregnancyTermination") && reader["ReasonOfPregnancyTermination"] != DBNull.Value)
            {
                info.ReasonOfPregnancyTermination = Convert.ToString(reader["ReasonOfPregnancyTermination"]);
            }
            if (reader.HasColumn("FetalAge") && reader["FetalAge"] != DBNull.Value)
            {
                info.FetalAge = reader["FetalAge"].ToString();
            }
            if (reader.HasColumn("NumberDayOfLeaveForTreatment") && reader["NumberDayOfLeaveForTreatment"] != DBNull.Value)
            {
                info.NumberDayOfLeaveForTreatment = Convert.ToInt32(reader["NumberDayOfLeaveForTreatment"]);
            }
            if (reader.HasColumn("FromDateLeaveForTreatment") && reader["FromDateLeaveForTreatment"] != DBNull.Value)
            {
                info.FromDateLeaveForTreatment = Convert.ToDateTime(reader["FromDateLeaveForTreatment"]);
            }
            if (reader.HasColumn("ToDateLeaveForTreatment") && reader["ToDateLeaveForTreatment"] != DBNull.Value)
            {
                info.ToDateLeaveForTreatment = Convert.ToDateTime(reader["ToDateLeaveForTreatment"]);
            }

            if (reader.HasColumn("DischargeDiagnostic") && reader["DischargeDiagnostic"] != DBNull.Value)
            {
                info.DischargeDiagnostic = Convert.ToString(reader["DischargeDiagnostic"]);
            }
            if (reader.HasColumn("TreatmentMethod") && reader["TreatmentMethod"] != DBNull.Value)
            {
                info.TreatmentMethod = Convert.ToString(reader["TreatmentMethod"]);
            }
            if (reader.HasColumn("Notes") && reader["Notes"] != DBNull.Value)
            {
                info.Notes = Convert.ToString(reader["Notes"]);
            }
            return info;
        }

        protected virtual List<DischargePapersInfo> GetDischargePapersInfoCollectionFromReader(IDataReader reader)
        {
            var lst = new List<DischargePapersInfo>();
            while (reader.Read())
            {
                lst.Add(GetDischargePapersInfoFromReader(reader));
            }
            return lst;
        }
        //▲==== #171

        //▼==== #174
        protected virtual AgeOfTheArtery GetAgeOfTheArteryFromReader(IDataReader reader)
        {
            var info = new AgeOfTheArtery();
            if (reader.HasColumn("AgeOfTheArteryID") && reader["AgeOfTheArteryID"] != DBNull.Value)
            {
                info.AgeOfTheArteryID = Convert.ToInt64(reader["AgeOfTheArteryID"]);
            }
            try
            {
                info.Patient = new Patient();
                if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
                {
                    info.Patient.PatientID = Convert.ToInt64(reader["PatientID"]);
                }
                if (reader.HasColumn("Age") && reader["Age"] != DBNull.Value)
                {
                    info.Patient.Age = Convert.ToInt32(reader["Age"]);
                }
            }
            catch
            { }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                info.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                info.V_RegistrationType = Convert.ToInt64(reader["V_RegistrationType"]);
            }
            if (reader.HasColumn("PatientClassID") && reader["PatientClassID"] != DBNull.Value)
            {
                info.PatientClassID = Convert.ToInt64(reader["PatientClassID"]);
            }
            if (reader.HasColumn("AgePoint") && reader["AgePoint"] != DBNull.Value)
            {
                info.AgePoint = Convert.ToInt32(reader["AgePoint"]);
            }
            if (reader.HasColumn("BloodPressure") && reader["BloodPressure"] != DBNull.Value)
            {
                info.BloodPressure = float.Parse(reader["BloodPressure"].ToString());
            }
            if (reader.HasColumn("IsTreatmentBloodPressure") && reader["IsTreatmentBloodPressure"] != DBNull.Value)
            {
                info.IsTreatmentBloodPressure = Convert.ToBoolean(reader["IsTreatmentBloodPressure"]);
            }
            if (reader.HasColumn("BloodPressureScore") && reader["BloodPressureScore"] != DBNull.Value)
            {
                info.BloodPressureScore = Convert.ToInt32(reader["BloodPressureScore"]);
            }
            if (reader.HasColumn("HDL") && reader["HDL"] != DBNull.Value)
            {
                info.HDL = float.Parse(reader["HDL"].ToString());
            }
            if (reader.HasColumn("HDLScore") && reader["HDLScore"] != DBNull.Value)
            {
                info.HDLScore = Convert.ToInt32(reader["HDLScore"]);
            }
            if (reader.HasColumn("Cholesterol") && reader["Cholesterol"] != DBNull.Value)
            {
                info.Cholesterol = float.Parse(reader["Cholesterol"].ToString());
            }
            if (reader.HasColumn("CholesterolScore") && reader["CholesterolScore"] != DBNull.Value)
            {
                info.CholesterolScore = Convert.ToInt32(reader["CholesterolScore"]);
            }
            if (reader.HasColumn("IsSmoke") && reader["IsSmoke"] != DBNull.Value)
            {
                info.IsSmoke = Convert.ToBoolean(reader["IsSmoke"]);
            }
            if (reader.HasColumn("SmokeScore") && reader["SmokeScore"] != DBNull.Value)
            {
                info.SmokeScore = Convert.ToInt32(reader["SmokeScore"]);
            }
            if (reader.HasColumn("Diabetes") && reader["Diabetes"] != DBNull.Value)
            {
                info.Diabetes = Convert.ToBoolean(reader["Diabetes"]);
            }
            if (reader.HasColumn("DiabetesScore") && reader["DiabetesScore"] != DBNull.Value)
            {
                info.DiabetesScore = Convert.ToInt32(reader["DiabetesScore"]);
            }
            if (reader.HasColumn("TotalScore") && reader["TotalScore"] != DBNull.Value)
            {
                info.TotalScore = Convert.ToInt32(reader["TotalScore"]);
            }
            if (reader.HasColumn("AgePointOfTheArtery") && reader["AgePointOfTheArtery"] != DBNull.Value)
            {
                info.AgePointOfTheArtery = Convert.ToInt32(reader["AgePointOfTheArtery"]);
            }
            if (reader.HasColumn("Height") && reader["Height"] != DBNull.Value)
            {
                info.Height = float.Parse(reader["Height"].ToString());
            }
            if (reader.HasColumn("Weight") && reader["Weight"] != DBNull.Value)
            {
                info.Weight = float.Parse(reader["Weight"].ToString());
            }
            if (reader.HasColumn("Waist") && reader["Waist"] != DBNull.Value)
            {
                info.Waist = float.Parse(reader["Waist"].ToString());
            }
            if (reader.HasColumn("BMI") && reader["BMI"] != DBNull.Value)
            {
                info.BMI = Convert.ToDecimal(reader["BMI"]);
            }
            if (reader.HasColumn("Diagnosic") && reader["Diagnosic"] != DBNull.Value)
            {
                info.Diagnosic = reader["Diagnosic"].ToString();
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                info.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            try
            {
                info.CreatedStaff = new Staff();

                if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
                {
                    info.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);
                }
            }
            catch
            { }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                info.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            try
            {
                info.LastUpdateStaff = new Staff();
                
                if (reader.HasColumn("LastUpdateStaffID") && reader["LastUpdateStaffID"] != DBNull.Value)
                {
                    info.LastUpdateStaff.StaffID = Convert.ToInt64(reader["LastUpdateStaffID"]);
                }
            }
            catch
            { }
            if (reader.HasColumn("LastUpdateDate") && reader["LastUpdateDate"] != DBNull.Value)
            {
                info.LastUpdateDate = Convert.ToDateTime(reader["LastUpdateDate"]);
            }
            return info;
        }

        protected virtual List<AgeOfTheArtery> GetAgeOfTheArteryCollectionFromReader(IDataReader reader)
        {
            var lst = new List<AgeOfTheArtery>();
            while (reader.Read())
            {
                lst.Add(GetAgeOfTheArteryFromReader(reader));
            }
            return lst;
        }
        //▲==== #174

        //▼==== #174
        protected virtual List<TreatmentProcess> GetTreatmentProcessCollectionFromReader(IDataReader reader)
        {
            var lst = new List<TreatmentProcess>();
            while (reader.Read())
            {
                lst.Add(GetTreatmentProcessFromReader(reader));
            }
            return lst;
        }
        //▲==== #174

        //▼==== #176
        protected virtual List<RequestDrugForTechnicalService> GetRequestDrugForTechnicalServiceCollectionFromReader(IDataReader reader)
        {
            var lst = new List<RequestDrugForTechnicalService>();
            while (reader.Read())
            {
                lst.Add(GetRequestDrugForTechnicalServiceFromReader(reader));
            }
            return lst;
        }
        protected virtual RequestDrugForTechnicalService GetRequestDrugForTechnicalServiceFromReader(IDataReader reader)
        {
            var p = new RequestDrugForTechnicalService { ReqForTechID = (long)reader["ReqForTechID"] };
            if (reader["ReqDate"] != DBNull.Value)
            {
                p.ReqDate = (DateTime)reader["ReqDate"];
            }
            if (reader.HasColumn("StaffID") && reader["StaffID"] != DBNull.Value)
            {
                p.StaffID = (long)reader["StaffID"];
            }
            if (reader.HasColumn("StaffName") && reader["StaffName"] != DBNull.Value)
            {
                p.StaffName = reader["StaffName"].ToString();
            }         
            if (reader.HasColumn("InDeptStoreID") && reader["InDeptStoreID"] != DBNull.Value)
            {
                p.InDeptStoreID = reader["InDeptStoreID"] as long?;
                p.InDeptStoreObject = new RefStorageWarehouseLocation { StoreID = (long)reader["InDeptStoreID"] };
                if (reader.HasColumn("InDeptDeptID") && reader["InDeptDeptID"] != DBNull.Value)
                {
                    p.InDeptStoreObject.DeptID = reader["InDeptDeptID"] as long?;
                }
                if (reader.HasColumn("InDeptStoreName"))
                {
                    p.InDeptStoreObject.swhlName = reader["InDeptStoreName"].ToString();
                }
            }
            if (reader.HasColumn("OutFromStoreID") && reader["OutFromStoreID"] != DBNull.Value)
            {
                p.OutFromStoreID = reader["OutFromStoreID"] as long?;
                p.OutFromStoreObject = new RefStorageWarehouseLocation { StoreID = (long)reader["OutFromStoreID"] };
                if (reader.HasColumn("OutFromStoreName"))
                {
                    p.OutFromStoreObject.swhlName = reader["OutFromStoreName"].ToString();
                }
            }
            if (reader.HasColumn("Comment") && reader["Comment"] != DBNull.Value)
            {
                p.Comment = reader["Comment"].ToString();
            }
            if (reader.HasColumn("IsLock") && reader["IsLock"] != DBNull.Value)
            {
                p.IsLock = (bool)reader["IsLock"];
            }
            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                p.PtRegDetailID = (long)reader["PtRegDetailID"];
            }
            return p;
        }
        //▲==== #176

        //▼==== #177
        protected virtual Specimen GetSpecimenFromReader(IDataReader reader)
        {
            var info = new Specimen();
            if (reader.HasColumn("SpecimenID") && reader["SpecimenID"] != DBNull.Value)
            {
                info.SpecimenID = Convert.ToInt64(reader["SpecimenID"]);
            }
            if (reader.HasColumn("SpecimenName") && reader["SpecimenName"] != DBNull.Value)
            {
                info.SpecimenName = reader["SpecimenName"].ToString();
            }
            if (reader.HasColumn("SpecimenNameEng") && reader["SpecimenNameEng"] != DBNull.Value)
            {
                info.SpecimenNameEng = reader["SpecimenNameEng"].ToString();
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                info.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            try
            {
                info.CreatedStaff = new Staff();

                if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
                {
                    info.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);
                }
            }
            catch
            { }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                info.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            try
            {
                info.LastUpdateStaff = new Staff();

                if (reader.HasColumn("LastUpdateStaffID") && reader["LastUpdateStaffID"] != DBNull.Value)
                {
                    info.LastUpdateStaff.StaffID = Convert.ToInt64(reader["LastUpdateStaffID"]);
                }
            }
            catch
            { }
            if (reader.HasColumn("LastUpdateDate") && reader["LastUpdateDate"] != DBNull.Value)
            {
                info.LastUpdateDate = Convert.ToDateTime(reader["LastUpdateDate"]);
            }
            return info;
        }

        protected virtual List<Specimen> GetSpecimenCollectionFromReader(IDataReader reader)
        {
            var retVal = new List<Specimen>();
            while (reader.Read())
            {
                var recLoc = GetSpecimenFromReader(reader);
                retVal.Add(recLoc);
            }
            return retVal;
        }
        //▲==== #177
        
        //▼==== #188
        public List<PrescriptionMaxHIPayGroup> GetPrescriptionMaxHIPayGroupCollectionFromReader(IDataReader reader, bool ForCheck = false)
        {
            List<PrescriptionMaxHIPayGroup> p = new List<PrescriptionMaxHIPayGroup>();
            while (reader.Read())
            {
                PrescriptionMaxHIPayGroup item = GetPrescriptionMaxHIPayGroupFromReader(reader, ForCheck);
                p.Add(item);
            }
            return p;
        }

        protected virtual PrescriptionMaxHIPayGroup GetPrescriptionMaxHIPayGroupFromReader(IDataReader reader, bool ForCheck = false)
        {
            var p = new PrescriptionMaxHIPayGroup();
            p.V_RegistrationType = new Lookup();
            p.CreatedStaff = new Staff();
            p.LastUpdateStaff = new Staff();

            if (reader.HasColumn("PrescriptionMaxHIPayGroupID") && reader["PrescriptionMaxHIPayGroupID"] != DBNull.Value)
            {
                p.PrescriptionMaxHIPayGroupID = Convert.ToInt64(reader["PrescriptionMaxHIPayGroupID"]);
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                p.V_RegistrationType.LookupID = Convert.ToInt64(reader["V_RegistrationType"]);

                if (reader.HasColumn("V_RegistrationTypeStr") && reader["V_RegistrationTypeStr"] != DBNull.Value)
                {
                    p.V_RegistrationType.ObjectValue = Convert.ToString(reader["V_RegistrationTypeStr"]);
                }
            }
            if (reader.HasColumn("GroupCode") && reader["GroupCode"] != DBNull.Value)
            {
                p.GroupCode = Convert.ToString(reader["GroupCode"]);
            }
            if (reader.HasColumn("GroupName") && reader["GroupName"] != DBNull.Value)
            {
                p.GroupName = Convert.ToString(reader["GroupName"]);
            }
            if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
            {
                p.Note = Convert.ToString(reader["Note"]);
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);

                if (reader.HasColumn("CStaffFullName") && reader["CStaffFullName"] != DBNull.Value)
                {
                    p.CreatedStaff.FullName = Convert.ToString(reader["CStaffFullName"]);
                }
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("LastUpdateStaffID") && reader["LastUpdateStaffID"] != DBNull.Value)
            {
                p.LastUpdateStaff.StaffID = Convert.ToInt64(reader["LastUpdateStaffID"]);

                if (reader.HasColumn("UStaffFullName") && reader["UStaffFullName"] != DBNull.Value)
                {
                    p.LastUpdateStaff.FullName = Convert.ToString(reader["UStaffFullName"]);
                }
            }
            if (reader.HasColumn("LastUpdateDate") && reader["LastUpdateDate"] != DBNull.Value)
            {
                p.LastUpdateDate = Convert.ToDateTime(reader["LastUpdateDate"]);
            }
            //if (ForCheck)
            //{
            //    if (reader.NextResult())
            //    {
            //        try
            //        {
            //            p.PrescriptionMaxHIPayDrugLists = new ObservableCollection<PrescriptionMaxHIPayDrugList>();
            //            p.PrescriptionMaxHIPayDrugLists = GetPrescriptionMaxHIPayDrugListCollectionFromReader(reader).ToObservableCollection();
            //        }
            //        catch { }
            //    }
            //    if (reader.NextResult())
            //    {
            //        try
            //        {
            //            p.ListICD10Code = new ObservableCollection<PrescriptionMaxHIPayLinkICD>();
            //            p.ListICD10Code = GetPrescriptionMaxHIPayLinkICDCollectionFromReader(reader).ToObservableCollection();
            //        }
            //        catch { }
            //    }
            //}
            return p;
        }

        public List<PrescriptionMaxHIPayLinkICD> GetPrescriptionMaxHIPayLinkICDCollectionFromReader(IDataReader reader)
        {
            List<PrescriptionMaxHIPayLinkICD> p = new List<PrescriptionMaxHIPayLinkICD>();
            while (reader.Read())
            {
                PrescriptionMaxHIPayLinkICD item = GetPrescriptionMaxHIPayLinkICDFromReader(reader);
                p.Add(item);
            }
            return p;
        }

        protected virtual PrescriptionMaxHIPayLinkICD GetPrescriptionMaxHIPayLinkICDFromReader(IDataReader reader)
        {
            var p = new PrescriptionMaxHIPayLinkICD();
            p.CreatedStaff = new Staff();
            p.DeletedStaff = new Staff();
            if (reader.HasColumn("PrescriptionMaxHIPayLinkICDID") && reader["PrescriptionMaxHIPayLinkICDID"] != DBNull.Value)
            {
                p.PrescriptionMaxHIPayLinkICDID = Convert.ToInt64(reader["PrescriptionMaxHIPayLinkICDID"]);
            }
            if (reader.HasColumn("PrescriptionMaxHIPayGroupID") && reader["PrescriptionMaxHIPayGroupID"] != DBNull.Value)
            {
                p.PrescriptionMaxHIPayGroupID = Convert.ToInt64(reader["PrescriptionMaxHIPayGroupID"]);
            }
            if (reader.HasColumn("ICD10") && reader["ICD10"] != DBNull.Value)
            {
                p.ICD10 = Convert.ToString(reader["ICD10"]);
            }
            if (reader.HasColumn("IDCode") && reader["IDCode"] != DBNull.Value)
            {
                p.IDCode = Convert.ToInt64(reader["IDCode"]);
            }
            if (reader.HasColumn("DiseaseNameVN") && reader["DiseaseNameVN"] != DBNull.Value)
            {
                p.DiseaseNameVN = Convert.ToString(reader["DiseaseNameVN"]);
            }
            if (reader.HasColumn("DiseaseDescription") && reader["DiseaseDescription"] != DBNull.Value)
            {
                p.DiseaseDescription = Convert.ToString(reader["DiseaseDescription"]);
            }
            if (reader.HasColumn("IsActive") && reader["IsActive"] != DBNull.Value)
            {
                p.IsActive = Convert.ToBoolean(reader["IsActive"]);
            }
            if (reader.HasColumn("IsNewInYear") && reader["IsNewInYear"] != DBNull.Value)
            {
                p.IsNewInYear = Convert.ToBoolean(reader["IsNewInYear"]);
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);

                if (reader.HasColumn("CStaffFullName") && reader["CStaffFullName"] != DBNull.Value)
                {
                    p.CreatedStaff.FullName = Convert.ToString(reader["CStaffFullName"]);
                }
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("DeletedStaffID") && reader["DeletedStaffID"] != DBNull.Value)
            {
                p.DeletedStaff.StaffID = Convert.ToInt64(reader["DeletedStaffID"]);

                if (reader.HasColumn("DStaffFullName") && reader["DStaffFullName"] != DBNull.Value)
                {
                    p.DeletedStaff.FullName = Convert.ToString(reader["DStaffFullName"]);
                }
            }
            if (reader.HasColumn("DeletedDate") && reader["DeletedDate"] != DBNull.Value)
            {
                p.DeletedDate = Convert.ToDateTime(reader["DeletedDate"]);
            }
            return p;
        }

        public List<PrescriptionMaxHIPayDrugList> GetPrescriptionMaxHIPayDrugListCollectionFromReader(IDataReader reader)
        {
            List<PrescriptionMaxHIPayDrugList> p = new List<PrescriptionMaxHIPayDrugList>();
            while (reader.Read())
            {
                PrescriptionMaxHIPayDrugList item = GetPrescriptionMaxHIPayDrugListFromReader(reader);
                p.Add(item);
            }
            return p;
        }

        protected virtual PrescriptionMaxHIPayDrugList GetPrescriptionMaxHIPayDrugListFromReader(IDataReader reader)
        {
            var p = new PrescriptionMaxHIPayDrugList();
            p.V_RegistrationType = new Lookup();
            p.PrescriptionMaxHIPayGroup = new PrescriptionMaxHIPayGroup();
            p.CreatedStaff = new Staff();
            p.LastUpdateStaff = new Staff();

            if (reader.HasColumn("PrescriptionMaxHIPayDrugListID") && reader["PrescriptionMaxHIPayDrugListID"] != DBNull.Value)
            {
                p.PrescriptionMaxHIPayDrugListID = Convert.ToInt64(reader["PrescriptionMaxHIPayDrugListID"]);
            }
            if (reader.HasColumn("PrescriptionMaxHIPayGroupID") && reader["PrescriptionMaxHIPayGroupID"] != DBNull.Value)
            {
                p.PrescriptionMaxHIPayGroup.PrescriptionMaxHIPayGroupID = Convert.ToInt64(reader["PrescriptionMaxHIPayGroupID"]);
            }
            if (reader.HasColumn("GroupName") && reader["GroupName"] != DBNull.Value)
            {
                p.PrescriptionMaxHIPayGroup.GroupName = Convert.ToString(reader["GroupName"]);
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                p.V_RegistrationType.LookupID = Convert.ToInt64(reader["V_RegistrationType"]);

                if (reader.HasColumn("V_RegistrationTypeStr") && reader["V_RegistrationTypeStr"] != DBNull.Value)
                {
                    p.V_RegistrationType.ObjectValue = Convert.ToString(reader["V_RegistrationTypeStr"]);
                }
            }
            if (reader.HasColumn("MaxHIPay") && reader["MaxHIPay"] != DBNull.Value)
            {
                p.MaxHIPay = Convert.ToDecimal(reader["MaxHIPay"]);
            }
            if (reader.HasColumn("ValidDate") && reader["ValidDate"] != DBNull.Value)
            {
                p.ValidDate = Convert.ToDateTime(reader["ValidDate"]);
            }
            if (reader.HasColumn("Note") && reader["Note"] != DBNull.Value)
            {
                p.Note = Convert.ToString(reader["Note"]);
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);

                if (reader.HasColumn("CStaffFullName") && reader["CStaffFullName"] != DBNull.Value)
                {
                    p.CreatedStaff.FullName = Convert.ToString(reader["CStaffFullName"]);
                }
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("LastUpdateStaffID") && reader["LastUpdateStaffID"] != DBNull.Value)
            {
                p.LastUpdateStaff.StaffID = Convert.ToInt64(reader["LastUpdateStaffID"]);

                if (reader.HasColumn("UStaffFullName") && reader["UStaffFullName"] != DBNull.Value)
                {
                    p.LastUpdateStaff.FullName = Convert.ToString(reader["UStaffFullName"]);
                }
            }
            if (reader.HasColumn("LastUpdateDate") && reader["LastUpdateDate"] != DBNull.Value)
            {
                p.LastUpdateDate = Convert.ToDateTime(reader["LastUpdateDate"]);
            }
            //try
            //{
            //    p.DrugLists = new ObservableCollection<PrescriptionMaxHIPayDrugListLink>();
            //    p.DrugLists = GetPrescriptionMaxHIPayDrugListLinkCollectionFromReader(reader).ToObservableCollection();
            //}
            //catch { }
            return p;
        }
        
        public List<PrescriptionMaxHIPayDrugListLink> GetPrescriptionMaxHIPayDrugListLinkCollectionFromReader(IDataReader reader)
        {
            List<PrescriptionMaxHIPayDrugListLink> p = new List<PrescriptionMaxHIPayDrugListLink>();
            while (reader.Read())
            {
                PrescriptionMaxHIPayDrugListLink item = GetPrescriptionMaxHIPayDrugListLinkFromReader(reader);
                p.Add(item);
            }
            return p;
        }

        protected virtual PrescriptionMaxHIPayDrugListLink GetPrescriptionMaxHIPayDrugListLinkFromReader(IDataReader reader)
        {
            var p = new PrescriptionMaxHIPayDrugListLink();
            p.CreatedStaff = new Staff();
            p.DeletedStaff = new Staff();

            if (reader.HasColumn("PrescriptionMaxHIPayDrugListLinkID") && reader["PrescriptionMaxHIPayDrugListLinkID"] != DBNull.Value)
            {
                p.PrescriptionMaxHIPayDrugListLinkID = Convert.ToInt64(reader["PrescriptionMaxHIPayDrugListLinkID"]);
            }
            if (reader.HasColumn("PrescriptionMaxHIPayDrugListID") && reader["PrescriptionMaxHIPayDrugListID"] != DBNull.Value)
            {
                p.PrescriptionMaxHIPayDrugListID = Convert.ToInt64(reader["PrescriptionMaxHIPayDrugListID"]);
            }
            if (reader.HasColumn("GenMedProductID") && reader["GenMedProductID"] != DBNull.Value)
            {
                p.GenMedProductID = Convert.ToInt64(reader["GenMedProductID"]);
            }
            if (reader.HasColumn("Code") && reader["Code"] != DBNull.Value)
            {
                p.Code = Convert.ToString(reader["Code"]);
            }
            if (reader.HasColumn("BrandName") && reader["BrandName"] != DBNull.Value)
            {
                p.BrandName = Convert.ToString(reader["BrandName"]);
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                p.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                p.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);

                if (reader.HasColumn("CStaffFullName") && reader["CStaffFullName"] != DBNull.Value)
                {
                    p.CreatedStaff.FullName = Convert.ToString(reader["CStaffFullName"]);
                }
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                p.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("DeletedStaffID") && reader["DeletedStaffID"] != DBNull.Value)
            {
                p.DeletedStaff.StaffID = Convert.ToInt64(reader["DeletedStaffID"]);

                if (reader.HasColumn("DStaffFullName") && reader["DStaffFullName"] != DBNull.Value)
                {
                    p.DeletedStaff.FullName = Convert.ToString(reader["DStaffFullName"]);
                }
            }
            if (reader.HasColumn("DeletedDate") && reader["DeletedDate"] != DBNull.Value)
            {
                p.DeletedDate = Convert.ToDateTime(reader["DeletedDate"]);
            }
            return p;
        }
        //▲==== #188
        //▼==== #185
        protected virtual List<ObstetricGynecologicalHistory> GetObstetricGynecologicalHistoryCollectionFromReader(IDataReader reader)
        {
            var lst = new List<ObstetricGynecologicalHistory>();
            while (reader.Read())
            {
                lst.Add(GetObstetricGynecologicalHistoryFromReader(reader));
            }
            return lst;
        }

        protected virtual ObstetricGynecologicalHistory GetObstetricGynecologicalHistoryFromReader(IDataReader reader)
        {
            //reader.Read();
            var item = new ObstetricGynecologicalHistory();
            item.CreatedStaff = new Staff();
            item.LastUpdateStaff = new Staff();

            if (reader.HasColumn("ObstetricGynecologicalHistoryID") && reader["ObstetricGynecologicalHistoryID"] != DBNull.Value)
            {
                item.ObstetricGynecologicalHistoryID = Convert.ToInt64(reader["ObstetricGynecologicalHistoryID"]);
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                item.PatientID = Convert.ToInt64(reader["PatientID"]);
            }
            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                item.PtRegDetailID = Convert.ToInt64(reader["PtRegDetailID"]);
            }
            if (reader.HasColumn("Menarche") && reader["Menarche"] != DBNull.Value)
            {
                item.Menarche = Convert.ToInt32(reader["Menarche"]);
            }
            if (reader.HasColumn("MenstruationIsRegular") && reader["MenstruationIsRegular"] != DBNull.Value)
            {
                item.MenstruationIsRegular = Convert.ToBoolean(reader["MenstruationIsRegular"]);
            }
            if (reader.HasColumn("MenstrualCycle") && reader["MenstrualCycle"] != DBNull.Value)
            {
                item.MenstrualCycle = Convert.ToInt32(reader["MenstrualCycle"]);
            }
            if (reader.HasColumn("MenstrualVolume") && reader["MenstrualVolume"] != DBNull.Value)
            {
                item.MenstrualVolume = Convert.ToInt32(reader["MenstrualVolume"]);
            }
            if (reader.HasColumn("Dysmenorrhea") && reader["Dysmenorrhea"] != DBNull.Value)
            {
                item.Dysmenorrhea = Convert.ToBoolean(reader["Dysmenorrhea"]);
            }
            if (reader.HasColumn("Married") && reader["Married"] != DBNull.Value)
            {
                item.Married = Convert.ToBoolean(reader["Married"]);
            }
            if (reader.HasColumn("Para") && reader["Para"] != DBNull.Value)
            {
                item.Para = Convert.ToInt32(reader["Para"]);
            }
            if (reader.HasColumn("HasOBGYNSurgeries") && reader["HasOBGYNSurgeries"] != DBNull.Value)
            {
                item.HasOBGYNSurgeries = Convert.ToBoolean(reader["HasOBGYNSurgeries"]);
            }
            if (reader.HasColumn("NumberOfOBGYNSurgeries") && reader["NumberOfOBGYNSurgeries"] != DBNull.Value)
            {
                item.NumberOfOBGYNSurgeries = Convert.ToInt32(reader["NumberOfOBGYNSurgeries"]);
            }
            if (reader.HasColumn("NoteOBGYNSurgeries") && reader["NoteOBGYNSurgeries"] != DBNull.Value)
            {
                item.NoteOBGYNSurgeries = reader["NoteOBGYNSurgeries"].ToString();
            }
            if (reader.HasColumn("IsUseContraception") && reader["IsUseContraception"] != DBNull.Value)
            {
                item.IsUseContraception = Convert.ToBoolean(reader["IsUseContraception"]);
            }
            if (reader.HasColumn("V_Contraception") && reader["V_Contraception"] != DBNull.Value)
            {
                item.V_Contraception = Convert.ToInt64(reader["V_Contraception"]);
            }
            if (reader.HasColumn("NoteContraception") && reader["NoteContraception"] != DBNull.Value)
            {
                item.NoteContraception = reader["NoteContraception"].ToString();
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                item.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                item.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                item.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("LastUpdateStaffID") && reader["LastUpdateStaffID"] != DBNull.Value)
            {
                item.LastUpdateStaff.StaffID = Convert.ToInt64(reader["LastUpdateStaffID"]);
            }
            if (reader.HasColumn("LastUpdateDate") && reader["LastUpdateDate"] != DBNull.Value)
            {
                item.LastUpdateDate = Convert.ToDateTime(reader["LastUpdateDate"]);
            }
            return item;
        }
        //▲==== #185

        //▼==== #195
        protected virtual List<FamilyRelationships> GetFamilyRelationshipsCollectionFromReader(IDataReader reader)
        {
            var lst = new List<FamilyRelationships>();
            while (reader.Read())
            {
                lst.Add(GetFamilyRelationshipsFromReader(reader));
            }
            return lst;
        }

        protected virtual FamilyRelationships GetFamilyRelationshipsFromReader(IDataReader reader)
        {
            //reader.Read();
            var item = new FamilyRelationships();
            item.V_FamilyRelationship = new Lookup();
            item.CreatedStaff = new Staff();
            item.LastUpdateStaff = new Staff();

            if (reader.HasColumn("FamilyRelationshipID") && reader["FamilyRelationshipID"] != DBNull.Value)
            {
                item.FamilyRelationshipID = Convert.ToInt64(reader["FamilyRelationshipID"]);
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                item.PatientID = Convert.ToInt64(reader["PatientID"]);
            }
            if (reader.HasColumn("FFullName") && reader["FFullName"] != DBNull.Value)
            {
                item.FFullName = Convert.ToString(reader["FFullName"]);
            }
            if (reader.HasColumn("FCulturalLevel") && reader["FCulturalLevel"] != DBNull.Value)
            {
                item.FCulturalLevel = Convert.ToString(reader["FCulturalLevel"]);
            }
            if (reader.HasColumn("FOccupation") && reader["FOccupation"] != DBNull.Value)
            {
                item.FOccupation = Convert.ToString(reader["FOccupation"]);
            }
            try
            {
                if (reader.HasColumn("V_FamilyRelationship") && reader["V_FamilyRelationship"] != DBNull.Value)
                {
                    item.V_FamilyRelationship.LookupID = Convert.ToInt64(reader["V_FamilyRelationship"]);
                }
                if (reader.HasColumn("FamilyRelationship") && reader["FamilyRelationship"] != DBNull.Value)
                {
                    item.V_FamilyRelationship.ObjectValue = Convert.ToString(reader["FamilyRelationship"]);
                }
            }
            catch { }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                item.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                item.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                item.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("LastUpdateStaffID") && reader["LastUpdateStaffID"] != DBNull.Value)
            {
                item.LastUpdateStaff.StaffID = Convert.ToInt64(reader["LastUpdateStaffID"]);
            }
            if (reader.HasColumn("LastUpdateDate") && reader["LastUpdateDate"] != DBNull.Value)
            {
                item.LastUpdateDate = Convert.ToDateTime(reader["LastUpdateDate"]);
            }
            return item;
        }

        protected virtual List<MedicalRecordCoverSampleFront> GetMedicalRecordCoverSampleFrontCollectionFromReader(IDataReader reader)
        {
            var lst = new List<MedicalRecordCoverSampleFront>();
            while (reader.Read())
            {
                lst.Add(GetMedicalRecordCoverSampleFrontFromReader(reader));
            }
            return lst;
        }

        protected virtual MedicalRecordCoverSampleFront GetMedicalRecordCoverSampleFrontFromReader(IDataReader reader)
        {
            //reader.Read();
            var item = new MedicalRecordCoverSampleFront();
            item.V_ReferralType = new Lookup();
            item.V_HospitalTransfer = new Lookup();
            item.V_Surgery_Tips_Item = new Lookup();
            item.V_Stroke_Complications = new Lookup();
            item.V_Pathology = new Lookup();
            item.CreatedStaff = new Staff();
            item.LastUpdateStaff = new Staff();

            if (reader.HasColumn("MedicalRecordCoverSampleFrontID") && reader["MedicalRecordCoverSampleFrontID"] != DBNull.Value)
            {
                item.MedicalRecordCoverSampleFrontID = Convert.ToInt64(reader["MedicalRecordCoverSampleFrontID"]);
            }
            if (reader.HasColumn("InPatientAdmDisDetailID") && reader["InPatientAdmDisDetailID"] != DBNull.Value)
            {
                item.InPatientAdmDisDetailID = Convert.ToInt64(reader["InPatientAdmDisDetailID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                item.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("ServiceRecID") && reader["ServiceRecID"] != DBNull.Value)
            {
                item.ServiceRecID = Convert.ToInt64(reader["ServiceRecID"]);
            }
            try
            {
                if (reader.HasColumn("V_ReferralType") && reader["V_ReferralType"] != DBNull.Value)
                {
                    item.V_ReferralType.LookupID = Convert.ToInt64(reader["V_ReferralType"]);
                }
                if (reader.HasColumn("ReferralType") && reader["ReferralType"] != DBNull.Value)
                {
                    item.V_ReferralType.ObjectValue = Convert.ToString(reader["ReferralType"]);
                }
            }
            catch { }
            if (reader.HasColumn("HospitalizedForThisDisease") && reader["HospitalizedForThisDisease"] != DBNull.Value)
            {
                item.HospitalizedForThisDisease = Convert.ToInt32(reader["HospitalizedForThisDisease"]);
            }
            try
            {
                if (reader.HasColumn("V_HospitalTransfer") && reader["V_HospitalTransfer"] != DBNull.Value)
                {
                    item.V_HospitalTransfer.LookupID = Convert.ToInt64(reader["V_HospitalTransfer"]);
                }
                if (reader.HasColumn("HospitalTransfer") && reader["HospitalTransfer"] != DBNull.Value)
                {
                    item.V_HospitalTransfer.ObjectValue = Convert.ToString(reader["HospitalTransfer"]);
                }
            }
            catch { }
            try
            {
                if (reader.HasColumn("V_Surgery_Tips_Item") && reader["V_Surgery_Tips_Item"] != DBNull.Value)
                {
                    item.V_Surgery_Tips_Item.LookupID = Convert.ToInt64(reader["V_Surgery_Tips_Item"]);
                }
                if (reader.HasColumn("Surgery_Tips_Item") && reader["Surgery_Tips_Item"] != DBNull.Value)
                {
                    item.V_Surgery_Tips_Item.ObjectValue = Convert.ToString(reader["Surgery_Tips_Item"]);
                }
            }
            catch { }
            try
            {
                if (reader.HasColumn("V_Stroke_Complications") && reader["V_Stroke_Complications"] != DBNull.Value)
                {
                    item.V_Stroke_Complications.LookupID = Convert.ToInt64(reader["V_Stroke_Complications"]);
                }
                if (reader.HasColumn("Stroke_Complications") && reader["Stroke_Complications"] != DBNull.Value)
                {
                    item.V_Stroke_Complications.ObjectValue = Convert.ToString(reader["Stroke_Complications"]);
                }
            }
            catch { }
            try
            {
                if (reader.HasColumn("V_Pathology") && reader["V_Pathology"] != DBNull.Value)
                {
                    item.V_Pathology.LookupID = Convert.ToInt64(reader["V_Pathology"]);
                }
                if (reader.HasColumn("Pathology") && reader["Pathology"] != DBNull.Value)
                {
                    item.V_Pathology.ObjectValue = Convert.ToString(reader["Pathology"]);
                }
            }
            catch { }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                item.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                item.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                item.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("LastUpdateStaffID") && reader["LastUpdateStaffID"] != DBNull.Value)
            {
                item.LastUpdateStaff.StaffID = Convert.ToInt64(reader["LastUpdateStaffID"]);
            }
            if (reader.HasColumn("LastUpdateDate") && reader["LastUpdateDate"] != DBNull.Value)
            {
                item.LastUpdateDate = Convert.ToDateTime(reader["LastUpdateDate"]);
            }
            return item;
        }

        protected virtual List<MedicalRecordCoverSample2> GetMedicalRecordCoverSample2CollectionFromReader(IDataReader reader)
        {
            var lst = new List<MedicalRecordCoverSample2>();
            while (reader.Read())
            {
                lst.Add(GetMedicalRecordCoverSample2FromReader(reader));
            }
            return lst;
        }

        protected virtual MedicalRecordCoverSample2 GetMedicalRecordCoverSample2FromReader(IDataReader reader)
        {
            //reader.Read();
            var item = new MedicalRecordCoverSample2();
            item.V_ConditionAtBirth = new Lookup();
            item.V_Alimentation = new Lookup();
            item.V_TakeCare = new Lookup();
            item.CreatedStaff = new Staff();
            item.LastUpdateStaff = new Staff();

            if (reader.HasColumn("MedicalRecordCoverSample2ID") && reader["MedicalRecordCoverSample2ID"] != DBNull.Value)
            {
                item.MedicalRecordCoverSample2ID = Convert.ToInt64(reader["MedicalRecordCoverSample2ID"]);
            }
            if (reader.HasColumn("InPatientAdmDisDetailID") && reader["InPatientAdmDisDetailID"] != DBNull.Value)
            {
                item.InPatientAdmDisDetailID = Convert.ToInt64(reader["InPatientAdmDisDetailID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                item.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("ServiceRecID") && reader["ServiceRecID"] != DBNull.Value)
            {
                item.ServiceRecID = Convert.ToInt64(reader["ServiceRecID"]);
            }
            if (reader.HasColumn("ReasonHospitalStay") && reader["ReasonHospitalStay"] != DBNull.Value)
            {
                item.ReasonHospitalStay = Convert.ToString(reader["ReasonHospitalStay"]);
            }
            if (reader.HasColumn("DayOfIllness") && reader["DayOfIllness"] != DBNull.Value)
            {
                item.DayOfIllness = Convert.ToInt32(reader["DayOfIllness"]);
            }
            if (reader.HasColumn("NumberOfChild") && reader["NumberOfChild"] != DBNull.Value)
            {
                item.NumberOfChild = Convert.ToInt32(reader["NumberOfChild"]);
            }
            if (reader.HasColumn("Para") && reader["Para"] != DBNull.Value)
            {
                item.Para = Convert.ToInt32(reader["Para"]);
            }
            try
            {
                if (reader.HasColumn("V_ConditionAtBirth") && reader["V_ConditionAtBirth"] != DBNull.Value)
                {
                    item.V_ConditionAtBirth.LookupID = Convert.ToInt64(reader["V_ConditionAtBirth"]);
                }
                if (reader.HasColumn("VConditionAtBirth") && reader["VConditionAtBirth"] != DBNull.Value)
                {
                    item.V_ConditionAtBirth.ObjectValue = Convert.ToString(reader["VConditionAtBirth"]);
                }
            }
            catch { }
            if (reader.HasColumn("Weight") && reader["Weight"] != DBNull.Value)
            {
                item.Weight = float.Parse(reader["Weight"].ToString());
            }
            if (reader.HasColumn("IsBirthDefects") && reader["IsBirthDefects"] != DBNull.Value)
            {
                item.IsBirthDefects = Convert.ToBoolean(reader["IsBirthDefects"]);
            }
            if (reader.HasColumn("NoteBirthDefects") && reader["NoteBirthDefects"] != DBNull.Value)
            {
                item.NoteBirthDefects = Convert.ToString(reader["NoteBirthDefects"]);
            }
            if (reader.HasColumn("MentalDevelopment") && reader["MentalDevelopment"] != DBNull.Value)
            {
                item.MentalDevelopment = Convert.ToString(reader["MentalDevelopment"]);
            }
            if (reader.HasColumn("MovementDevelopment") && reader["MovementDevelopment"] != DBNull.Value)
            {
                item.MovementDevelopment = Convert.ToString(reader["MovementDevelopment"]);
            }
            if (reader.HasColumn("OtherDiseases") && reader["OtherDiseases"] != DBNull.Value)
            {
                item.OtherDiseases = Convert.ToString(reader["OtherDiseases"]);
            }
            try
            {
                if (reader.HasColumn("V_Alimentation") && reader["V_Alimentation"] != DBNull.Value)
                {
                    item.V_Alimentation.LookupID = Convert.ToInt64(reader["V_Alimentation"]);
                }
                if (reader.HasColumn("VAlimentation") && reader["VAlimentation"] != DBNull.Value)
                {
                    item.V_Alimentation.ObjectValue = Convert.ToString(reader["VAlimentation"]);
                }
            }
            catch { }
            if (reader.HasColumn("WeaningMonth") && reader["WeaningMonth"] != DBNull.Value)
            {
                item.WeaningMonth = Convert.ToInt32(reader["WeaningMonth"]);
            }
            try
            {
                if (reader.HasColumn("V_TakeCare") && reader["V_TakeCare"] != DBNull.Value)
                {
                    item.V_TakeCare.LookupID = Convert.ToInt64(reader["V_TakeCare"]);
                }
                if (reader.HasColumn("VTakeCare") && reader["VTakeCare"] != DBNull.Value)
                {
                    item.V_TakeCare.ObjectValue = Convert.ToString(reader["VTakeCare"]);
                }
            }
            catch { }
            if (reader.HasColumn("IsVaccinated_Tuberculosis") && reader["IsVaccinated_Tuberculosis"] != DBNull.Value)
            {
                item.IsVaccinated_Tuberculosis = Convert.ToBoolean(reader["IsVaccinated_Tuberculosis"]);
            }
            if (reader.HasColumn("IsVaccinated_Polio") && reader["IsVaccinated_Polio"] != DBNull.Value)
            {
                item.IsVaccinated_Polio = Convert.ToBoolean(reader["IsVaccinated_Polio"]);
            }
            if (reader.HasColumn("IsVaccinated_Measles") && reader["IsVaccinated_Measles"] != DBNull.Value)
            {
                item.IsVaccinated_Measles = Convert.ToBoolean(reader["IsVaccinated_Measles"]);
            }
            if (reader.HasColumn("IsVaccinated_WhoopingCough") && reader["IsVaccinated_WhoopingCough"] != DBNull.Value)
            {
                item.IsVaccinated_WhoopingCough = Convert.ToBoolean(reader["IsVaccinated_WhoopingCough"]);
            }
            if (reader.HasColumn("IsVaccinated_Tetanus") && reader["IsVaccinated_Tetanus"] != DBNull.Value)
            {
                item.IsVaccinated_Tetanus = Convert.ToBoolean(reader["IsVaccinated_Tetanus"]);
            }
            if (reader.HasColumn("IsVaccinated_Diphtheria") && reader["IsVaccinated_Diphtheria"] != DBNull.Value)
            {
                item.IsVaccinated_Diphtheria = Convert.ToBoolean(reader["IsVaccinated_Diphtheria"]);
            }
            if (reader.HasColumn("IsVaccinated_Other") && reader["IsVaccinated_Other"] != DBNull.Value)
            {
                item.IsVaccinated_Other = Convert.ToBoolean(reader["IsVaccinated_Other"]);
            }
            if (reader.HasColumn("Vaccinated_Other") && reader["Vaccinated_Other"] != DBNull.Value)
            {
                item.Vaccinated_Other = Convert.ToString(reader["Vaccinated_Other"]);
            }
            if (reader.HasColumn("FullBodyExamination") && reader["FullBodyExamination"] != DBNull.Value)
            {
                item.FullBodyExamination = Convert.ToString(reader["FullBodyExamination"]);
            }
            if (reader.HasColumn("CirculatoryExamination") && reader["CirculatoryExamination"] != DBNull.Value)
            {
                item.CirculatoryExamination = Convert.ToString(reader["CirculatoryExamination"]);
            }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                item.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                item.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                item.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("LastUpdateStaffID") && reader["LastUpdateStaffID"] != DBNull.Value)
            {
                item.LastUpdateStaff.StaffID = Convert.ToInt64(reader["LastUpdateStaffID"]);
            }
            if (reader.HasColumn("LastUpdateDate") && reader["LastUpdateDate"] != DBNull.Value)
            {
                item.LastUpdateDate = Convert.ToDateTime(reader["LastUpdateDate"]);
            }
            return item;
        }

        protected virtual List<MedicalRecordCoverSample3> GetMedicalRecordCoverSample3CollectionFromReader(IDataReader reader)
        {
            var lst = new List<MedicalRecordCoverSample3>();
            while (reader.Read())
            {
                lst.Add(GetMedicalRecordCoverSample3FromReader(reader));
            }
            return lst;
        }

        protected virtual MedicalRecordCoverSample3 GetMedicalRecordCoverSample3FromReader(IDataReader reader)
        {
            //reader.Read();
            var item = new MedicalRecordCoverSample3();
            item.DoctorStaff = new Staff();
            item.CreatedStaff = new Staff();
            item.LastUpdateStaff = new Staff();

            if (reader.HasColumn("MedicalRecordCoverSample3ID") && reader["MedicalRecordCoverSample3ID"] != DBNull.Value)
            {
                item.MedicalRecordCoverSample3ID = Convert.ToInt64(reader["MedicalRecordCoverSample3ID"]);
            }
            if (reader.HasColumn("InPatientAdmDisDetailID") && reader["InPatientAdmDisDetailID"] != DBNull.Value)
            {
                item.InPatientAdmDisDetailID = Convert.ToInt64(reader["InPatientAdmDisDetailID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                item.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("ServiceRecID") && reader["ServiceRecID"] != DBNull.Value)
            {
                item.ServiceRecID = Convert.ToInt64(reader["ServiceRecID"]);
            }
            if (reader.HasColumn("RespiratoryTestResult") && reader["RespiratoryTestResult"] != DBNull.Value)
            {
                item.RespiratoryTestResult = Convert.ToString(reader["RespiratoryTestResult"]);
            }
            if (reader.HasColumn("DigestionTestResult") && reader["DigestionTestResult"] != DBNull.Value)
            {
                item.DigestionTestResult = Convert.ToString(reader["DigestionTestResult"]);
            }
            if (reader.HasColumn("UrologyTestResult") && reader["UrologyTestResult"] != DBNull.Value)
            {
                item.UrologyTestResult = Convert.ToString(reader["UrologyTestResult"]);
            }
            if (reader.HasColumn("NeurologyTestResult") && reader["NeurologyTestResult"] != DBNull.Value)
            {
                item.NeurologyTestResult = Convert.ToString(reader["NeurologyTestResult"]);
            }
            if (reader.HasColumn("OrthopaedicsTestResult") && reader["OrthopaedicsTestResult"] != DBNull.Value)
            {
                item.OrthopaedicsTestResult = Convert.ToString(reader["OrthopaedicsTestResult"]);
            }
            if (reader.HasColumn("OtherDiseases") && reader["OtherDiseases"] != DBNull.Value)
            {
                item.OtherDiseases = Convert.ToString(reader["OtherDiseases"]);
            }
            if (reader.HasColumn("SummaryOfMedicalRecords") && reader["SummaryOfMedicalRecords"] != DBNull.Value)
            {
                item.SummaryOfMedicalRecords = Convert.ToString(reader["SummaryOfMedicalRecords"]);
            }
            if (reader.HasColumn("Distinguish") && reader["Distinguish"] != DBNull.Value)
            {
                item.Distinguish = Convert.ToString(reader["Distinguish"]);
            }
            if (reader.HasColumn("Prognosis") && reader["Prognosis"] != DBNull.Value)
            {
                item.Prognosis = Convert.ToString(reader["Prognosis"]);
            }
            if (reader.HasColumn("TreatmentDirection") && reader["TreatmentDirection"] != DBNull.Value)
            {
                item.TreatmentDirection = Convert.ToString(reader["TreatmentDirection"]);
            }
            try
            {
                if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
                {
                    item.DoctorStaff.StaffID = Convert.ToInt64(reader["DoctorStaffID"]);
                }
                if (reader.HasColumn("FullName") && reader["FullName"] != DBNull.Value)
                {
                    item.DoctorStaff.FullName = Convert.ToString(reader["FullName"]);
                }
                if (reader.HasColumn("PrintTitle") && reader["PrintTitle"] != DBNull.Value)
                {
                    item.DoctorStaff.PrintTitle = Convert.ToString(reader["PrintTitle"]);
                }
            }
            catch { }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                item.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                item.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                item.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("LastUpdateStaffID") && reader["LastUpdateStaffID"] != DBNull.Value)
            {
                item.LastUpdateStaff.StaffID = Convert.ToInt64(reader["LastUpdateStaffID"]);
            }
            if (reader.HasColumn("LastUpdateDate") && reader["LastUpdateDate"] != DBNull.Value)
            {
                item.LastUpdateDate = Convert.ToDateTime(reader["LastUpdateDate"]);
            }
            return item;
        }

        protected virtual List<MedicalRecordCoverSample4> GetMedicalRecordCoverSample4CollectionFromReader(IDataReader reader)
        {
            var lst = new List<MedicalRecordCoverSample4>();
            while (reader.Read())
            {
                lst.Add(GetMedicalRecordCoverSample4FromReader(reader));
            }
            return lst;
        }

        protected virtual MedicalRecordCoverSample4 GetMedicalRecordCoverSample4FromReader(IDataReader reader)
        {
            //reader.Read();
            var item = new MedicalRecordCoverSample4();
            item.DeliverStaff = new Staff();
            item.ReceiverStaff = new Staff();
            item.DoctorStaff = new Staff();
            item.CreatedStaff = new Staff();
            item.LastUpdateStaff = new Staff();

            if (reader.HasColumn("MedicalRecordCoverSample4ID") && reader["MedicalRecordCoverSample4ID"] != DBNull.Value)
            {
                item.MedicalRecordCoverSample4ID = Convert.ToInt64(reader["MedicalRecordCoverSample4ID"]);
            }
            if (reader.HasColumn("InPatientAdmDisDetailID") && reader["InPatientAdmDisDetailID"] != DBNull.Value)
            {
                item.InPatientAdmDisDetailID = Convert.ToInt64(reader["InPatientAdmDisDetailID"]);
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                item.PtRegistrationID = Convert.ToInt64(reader["PtRegistrationID"]);
            }
            if (reader.HasColumn("ServiceRecID") && reader["ServiceRecID"] != DBNull.Value)
            {
                item.ServiceRecID = Convert.ToInt64(reader["ServiceRecID"]);
            }
            if (reader.HasColumn("TreatmentDirection") && reader["TreatmentDirection"] != DBNull.Value)
            {
                item.TreatmentDirection = Convert.ToString(reader["TreatmentDirection"]);
            }
            if (reader.HasColumn("XQuangFilmNum") && reader["XQuangFilmNum"] != DBNull.Value)
            {
                item.XQuangFilmNum = Convert.ToString(reader["XQuangFilmNum"]);
            }
            if (reader.HasColumn("CTFilmNum") && reader["CTFilmNum"] != DBNull.Value)
            {
                item.CTFilmNum = Convert.ToString(reader["CTFilmNum"]);
            }
            if (reader.HasColumn("UltrasoundFilmNum") && reader["UltrasoundFilmNum"] != DBNull.Value)
            {
                item.UltrasoundFilmNum = Convert.ToString(reader["UltrasoundFilmNum"]);
            }
            if (reader.HasColumn("LaboratoryFilmNum") && reader["LaboratoryFilmNum"] != DBNull.Value)
            {
                item.LaboratoryFilmNum = Convert.ToString(reader["LaboratoryFilmNum"]);
            }
            if (reader.HasColumn("OrderFilmName") && reader["OrderFilmName"] != DBNull.Value)
            {
                item.OrderFilmName = Convert.ToString(reader["OrderFilmName"]);
            }
            if (reader.HasColumn("OrderFilmNum") && reader["OrderFilmNum"] != DBNull.Value)
            {
                item.OrderFilmNum = Convert.ToString(reader["OrderFilmNum"]);
            }
            if (reader.HasColumn("TotalFilmNum") && reader["TotalFilmNum"] != DBNull.Value)
            {
                item.TotalFilmNum = Convert.ToByte(reader["TotalFilmNum"]);
            }
            try
            {
                if (reader.HasColumn("DeliverStaffID") && reader["DeliverStaffID"] != DBNull.Value)
                {
                    item.DeliverStaff.StaffID = Convert.ToInt64(reader["DeliverStaffID"]);
                }
                if (reader.HasColumn("DeliverName") && reader["DeliverName"] != DBNull.Value)
                {
                    item.DeliverStaff.FullName = Convert.ToString(reader["DeliverName"]);
                }
                if (reader.HasColumn("DeliverTitle") && reader["DeliverTitle"] != DBNull.Value)
                {
                    item.DeliverStaff.PrintTitle = Convert.ToString(reader["DeliverTitle"]);
                }
            }
            catch { }
            try
            {
                if (reader.HasColumn("ReceiverStaffID") && reader["ReceiverStaffID"] != DBNull.Value)
                {
                    item.ReceiverStaff.StaffID = Convert.ToInt64(reader["ReceiverStaffID"]);
                }
                if (reader.HasColumn("ReceiverName") && reader["ReceiverName"] != DBNull.Value)
                {
                    item.ReceiverStaff.FullName = Convert.ToString(reader["ReceiverName"]);
                }
                if (reader.HasColumn("ReceiverTitle") && reader["ReceiverTitle"] != DBNull.Value)
                {
                    item.ReceiverStaff.PrintTitle = Convert.ToString(reader["ReceiverTitle"]);
                }
            }
            catch { }
            try
            {
                if (reader.HasColumn("DoctorStaffID") && reader["DoctorStaffID"] != DBNull.Value)
                {
                    item.DoctorStaff.StaffID = Convert.ToInt64(reader["DoctorStaffID"]);
                }
                if (reader.HasColumn("DoctorName") && reader["DoctorName"] != DBNull.Value)
                {
                    item.DoctorStaff.FullName = Convert.ToString(reader["DoctorName"]);
                }
                if (reader.HasColumn("DoctorTitle") && reader["DoctorTitle"] != DBNull.Value)
                {
                    item.DoctorStaff.PrintTitle = Convert.ToString(reader["DoctorTitle"]);
                }
            }
            catch { }
            if (reader.HasColumn("IsDeleted") && reader["IsDeleted"] != DBNull.Value)
            {
                item.IsDeleted = Convert.ToBoolean(reader["IsDeleted"]);
            }
            if (reader.HasColumn("CreatedStaffID") && reader["CreatedStaffID"] != DBNull.Value)
            {
                item.CreatedStaff.StaffID = Convert.ToInt64(reader["CreatedStaffID"]);
            }
            if (reader.HasColumn("CreatedDate") && reader["CreatedDate"] != DBNull.Value)
            {
                item.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
            }
            if (reader.HasColumn("LastUpdateStaffID") && reader["LastUpdateStaffID"] != DBNull.Value)
            {
                item.LastUpdateStaff.StaffID = Convert.ToInt64(reader["LastUpdateStaffID"]);
            }
            if (reader.HasColumn("LastUpdateDate") && reader["LastUpdateDate"] != DBNull.Value)
            {
                item.LastUpdateDate = Convert.ToDateTime(reader["LastUpdateDate"]);
            }
            return item;
        }
        //▲==== #195

    }
    public static class DataEntitiesExt
    {
        public static void FillData(this RefTreatmentRegimen aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("TreatmentRegimenID") && aReader["TreatmentRegimenID"] != DBNull.Value)
            {
                aItem.TreatmentRegimenID = (long)aReader["TreatmentRegimenID"];
            }
            if (aReader.HasColumn("TreatmentRegimenCode") && aReader["TreatmentRegimenCode"] != DBNull.Value)
            {
                aItem.TreatmentRegimenCode = aReader["TreatmentRegimenCode"].ToString();
            }
            if (aReader.HasColumn("TreatmentRegimenName") && aReader["TreatmentRegimenName"] != DBNull.Value)
            {
                aItem.TreatmentRegimenName = aReader["TreatmentRegimenName"].ToString();
            }
            if (aReader.HasColumn("ICD10Code") && aReader["ICD10Code"] != DBNull.Value)
            {
                aItem.ICD10Code = aReader["ICD10Code"].ToString();
            }
            if (aReader.HasColumn("TreatmentRegimenNote") && aReader["TreatmentRegimenNote"] != DBNull.Value)
            {
                aItem.TreatmentRegimenNote = aReader["TreatmentRegimenNote"].ToString();
            }
            if (aReader.HasColumn("IsDeleted") && aReader["IsDeleted"] != DBNull.Value)
            {
                aItem.IsDeleted = Convert.ToBoolean(aReader["IsDeleted"]);
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
            if (aReader.HasColumn("CreatedStaffID") && aReader["CreatedStaffID"] != DBNull.Value)
            {
                aItem.CreatedStaffID = (long)aReader["CreatedStaffID"];
            }
            if (aReader.HasColumn("LastUpdatedDate") && aReader["LastUpdatedDate"] != DBNull.Value)
            {
                aItem.LastUpdatedDate = Convert.ToDateTime(aReader["LastUpdatedDate"]);
            }
            if (aReader.HasColumn("LastUpdatedStaffID") && aReader["LastUpdatedStaffID"] != DBNull.Value)
            {
                aItem.LastUpdatedStaffID = (long)aReader["LastUpdatedStaffID"];
            }
        }
        public static void FillData(this RefTreatmentRegimenDrugDetail aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("TreatmentRegimenDrugDetailID") && aReader["TreatmentRegimenDrugDetailID"] != DBNull.Value)
            {
                aItem.TreatmentRegimenDrugDetailID = (long)aReader["TreatmentRegimenDrugDetailID"];
            }
            if (aReader.HasColumn("TreatmentRegimenID") && aReader["TreatmentRegimenID"] != DBNull.Value)
            {
                aItem.TreatmentRegimenID = (long)aReader["TreatmentRegimenID"];
            }
            if (aReader.HasColumn("V_TreatmentPeriodic") && aReader["V_TreatmentPeriodic"] != DBNull.Value)
            {
                aItem.V_TreatmentPeriodic = (long)aReader["V_TreatmentPeriodic"];
            }
            if (aReader.HasColumn("GenericID") && aReader["GenericID"] != DBNull.Value)
            {
                aItem.GenericID = (long)aReader["GenericID"];
            }
            if (aReader.HasColumn("MDose") && aReader["MDose"] != DBNull.Value)
            {
                aItem.MDose = (float)aReader["MDose"];
            }
            if (aReader.HasColumn("ADose") && aReader["ADose"] != DBNull.Value)
            {
                aItem.ADose = (float)aReader["ADose"];
            }
            if (aReader.HasColumn("EDose") && aReader["EDose"] != DBNull.Value)
            {
                aItem.EDose = (float)aReader["EDose"];
            }
            if (aReader.HasColumn("NDose") && aReader["NDose"] != DBNull.Value)
            {
                aItem.NDose = (float)aReader["NDose"];
            }
            if (aReader.HasColumn("Quantity") && aReader["Quantity"] != DBNull.Value)
            {
                aItem.Quantity = Convert.ToDouble(aReader["Quantity"]);
            }
            if (aReader.HasColumn("TreatmentRegimenDrugDetailNote") && aReader["TreatmentRegimenDrugDetailNote"] != DBNull.Value)
            {
                aItem.TreatmentRegimenDrugDetailNote = aReader["TreatmentRegimenDrugDetailNote"].ToString();
            }
            if (aReader.HasColumn("IsDeleted") && aReader["IsDeleted"] != DBNull.Value)
            {
                aItem.IsDeleted = Convert.ToBoolean(aReader["IsDeleted"]);
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
            if (aReader.HasColumn("CreatedStaffID") && aReader["CreatedStaffID"] != DBNull.Value)
            {
                aItem.CreatedStaffID = (long)aReader["CreatedStaffID"];
            }
            if (aReader.HasColumn("LastUpdatedDate") && aReader["LastUpdatedDate"] != DBNull.Value)
            {
                aItem.LastUpdatedDate = Convert.ToDateTime(aReader["LastUpdatedDate"]);
            }
            if (aReader.HasColumn("LastUpdatedStaffID") && aReader["LastUpdatedStaffID"] != DBNull.Value)
            {
                aItem.LastUpdatedStaffID = (long)aReader["LastUpdatedStaffID"];
            }
            if (aReader.HasColumn("TreatmentPeriodic") && aReader["TreatmentPeriodic"] != DBNull.Value)
            {
                aItem.TreatmentPeriodic = aReader["TreatmentPeriodic"].ToString();
            }
            if (aReader.HasColumn("GenericCode") && aReader["GenericCode"] != DBNull.Value)
            {
                aItem.GenericCode = aReader["GenericCode"].ToString();
            }
            if (aReader.HasColumn("GenericName") && aReader["GenericName"] != DBNull.Value)
            {
                aItem.GenericName = aReader["GenericName"].ToString();
            }
        }
        public static void FillData(this RefTreatmentRegimenPCLDetail aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("TreatmentRegimenPCLDetailID") && aReader["TreatmentRegimenPCLDetailID"] != DBNull.Value)
            {
                aItem.TreatmentRegimenPCLDetailID = (long)aReader["TreatmentRegimenPCLDetailID"];
            }
            if (aReader.HasColumn("TreatmentRegimenID") && aReader["TreatmentRegimenID"] != DBNull.Value)
            {
                aItem.TreatmentRegimenID = (long)aReader["TreatmentRegimenID"];
            }
            if (aReader.HasColumn("V_TreatmentPeriodic") && aReader["V_TreatmentPeriodic"] != DBNull.Value)
            {
                aItem.V_TreatmentPeriodic = (long)aReader["V_TreatmentPeriodic"];
            }
            if (aReader.HasColumn("PCLExamTypeID") && aReader["PCLExamTypeID"] != DBNull.Value)
            {
                aItem.PCLExamTypeID = (long)aReader["PCLExamTypeID"];
            }
            if (aReader.HasColumn("PCLExamTypeCode") && aReader["PCLExamTypeCode"] != DBNull.Value)
            {
                aItem.PCLExamTypeCode = aReader["PCLExamTypeCode"].ToString();
            }
            if (aReader.HasColumn("PCLExamTypeName") && aReader["PCLExamTypeName"] != DBNull.Value)
            {
                aItem.PCLExamTypeName = aReader["PCLExamTypeName"].ToString();
            }
            if (aReader.HasColumn("V_PCLMainCategory") && aReader["V_PCLMainCategory"] != DBNull.Value)
            {
                aItem.V_PCLMainCategory = (long)aReader["V_PCLMainCategory"];
            }
            if (aReader.HasColumn("V_PCLMainCategoryValue") && aReader["V_PCLMainCategoryValue"] != DBNull.Value)
            {
                aItem.V_PCLMainCategoryValue = aReader["V_PCLMainCategoryValue"].ToString();
            }
            if (aReader.HasColumn("TreatmentRegimenPCLDetailNote") && aReader["TreatmentRegimenPCLDetailNote"] != DBNull.Value)
            {
                aItem.TreatmentRegimenPCLDetailNote = aReader["TreatmentRegimenPCLDetailNote"].ToString();
            }
            if (aReader.HasColumn("IsDeleted") && aReader["IsDeleted"] != DBNull.Value)
            {
                aItem.IsDeleted = Convert.ToBoolean(aReader["IsDeleted"]);
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
            if (aReader.HasColumn("CreatedStaffID") && aReader["CreatedStaffID"] != DBNull.Value)
            {
                aItem.CreatedStaffID = (long)aReader["CreatedStaffID"];
            }
            if (aReader.HasColumn("LastUpdatedDate") && aReader["LastUpdatedDate"] != DBNull.Value)
            {
                aItem.LastUpdatedDate = Convert.ToDateTime(aReader["LastUpdatedDate"]);
            }
            if (aReader.HasColumn("LastUpdatedStaffID") && aReader["LastUpdatedStaffID"] != DBNull.Value)
            {
                aItem.LastUpdatedStaffID = (long)aReader["LastUpdatedStaffID"];
            }
            if (aReader.HasColumn("TreatmentPeriodic") && aReader["TreatmentPeriodic"] != DBNull.Value)
            {
                aItem.TreatmentPeriodic = aReader["TreatmentPeriodic"].ToString();
            }
        }
        public static void FillData(this RefTreatmentRegimenServiceDetail aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("TreatmentRegimenServiceDetailID") && aReader["TreatmentRegimenServiceDetailID"] != DBNull.Value)
            {
                aItem.TreatmentRegimenServiceDetailID = (long)aReader["TreatmentRegimenServiceDetailID"];
            }
            if (aReader.HasColumn("TreatmentRegimenID") && aReader["TreatmentRegimenID"] != DBNull.Value)
            {
                aItem.TreatmentRegimenID = (long)aReader["TreatmentRegimenID"];
            }
            if (aReader.HasColumn("V_TreatmentPeriodic") && aReader["V_TreatmentPeriodic"] != DBNull.Value)
            {
                aItem.V_TreatmentPeriodic = (long)aReader["V_TreatmentPeriodic"];
            }
            if (aReader.HasColumn("MedserviceID") && aReader["MedserviceID"] != DBNull.Value)
            {
                aItem.MedServiceID = (long)aReader["MedserviceID"];
            }
            if (aReader.HasColumn("MedserviceCode") && aReader["MedserviceCode"] != DBNull.Value)
            {
                aItem.MedServiceCode = aReader["MedserviceCode"].ToString();
            }
            if (aReader.HasColumn("MedserviceName") && aReader["MedserviceName"] != DBNull.Value)
            {
                aItem.MedServiceName = aReader["MedserviceName"].ToString();
            }
            if (aReader.HasColumn("MedicalServiceTypeID") && aReader["MedicalServiceTypeID"] != DBNull.Value)
            {
                aItem.MedicalServiceTypeID = (long)aReader["MedicalServiceTypeID"];
            }
            if (aReader.HasColumn("MedicalServiceTypeName") && aReader["MedicalServiceTypeName"] != DBNull.Value)
            {
                aItem.MedicalServiceTypeName = aReader["MedicalServiceTypeName"].ToString();
            }
            if (aReader.HasColumn("TreatmentRegimenServiceDetailNote") && aReader["TreatmentRegimenServiceDetailNote"] != DBNull.Value)
            {
                aItem.TreatmentRegimenServiceDetailNote = aReader["TreatmentRegimenServiceDetailNote"].ToString();
            }
            if (aReader.HasColumn("IsDeleted") && aReader["IsDeleted"] != DBNull.Value)
            {
                aItem.IsDeleted = Convert.ToBoolean(aReader["IsDeleted"]);
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
            if (aReader.HasColumn("CreatedStaffID") && aReader["CreatedStaffID"] != DBNull.Value)
            {
                aItem.CreatedStaffID = (long)aReader["CreatedStaffID"];
            }
            if (aReader.HasColumn("LastUpdatedDate") && aReader["LastUpdatedDate"] != DBNull.Value)
            {
                aItem.LastUpdatedDate = Convert.ToDateTime(aReader["LastUpdatedDate"]);
            }
            if (aReader.HasColumn("LastUpdatedStaffID") && aReader["LastUpdatedStaffID"] != DBNull.Value)
            {
                aItem.LastUpdatedStaffID = (long)aReader["LastUpdatedStaffID"];
            }
            if (aReader.HasColumn("TreatmentPeriodic") && aReader["TreatmentPeriodic"] != DBNull.Value)
            {
                aItem.TreatmentPeriodic = aReader["TreatmentPeriodic"].ToString();
            }
        }
        public static void FillData(this OutPatientCashAdvance aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("OutPtCashAdvanceID") && aReader["OutPtCashAdvanceID"] != DBNull.Value)
            {
                aItem.OutPtCashAdvanceID = (long)aReader["OutPtCashAdvanceID"];
            }
            if (aReader.HasColumn("PtRegistrationID") && aReader["PtRegistrationID"] != DBNull.Value)
            {
                aItem.PtRegistrationID = (long)aReader["PtRegistrationID"];
            }
            if (aReader.HasColumn("CashAdvReceiptNum") && aReader["CashAdvReceiptNum"] != DBNull.Value)
            {
                aItem.CashAdvReceiptNum = aReader["CashAdvReceiptNum"].ToString();
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
            if (aReader.HasColumn("PaymentDate") && aReader["PaymentDate"] != DBNull.Value)
            {
                aItem.PaymentDate = Convert.ToDateTime(aReader["PaymentDate"]);
            }
            if (aReader.HasColumn("StaffID") && aReader["StaffID"] != DBNull.Value)
            {
                aItem.StaffID = (long)aReader["StaffID"];
            }
            if (aReader.HasColumn("V_CashAdvanceType") && aReader["V_CashAdvanceType"] != DBNull.Value)
            {
                aItem.V_CashAdvanceType = (long)aReader["V_CashAdvanceType"];
            }
            if (aReader.HasColumn("PaymentAmount") && aReader["PaymentAmount"] != DBNull.Value)
            {
                aItem.PaymentAmount = Convert.ToDecimal(aReader["PaymentAmount"]);
            }
            if (aReader.HasColumn("BalanceAmount") && aReader["BalanceAmount"] != DBNull.Value)
            {
                aItem.BalanceAmount = Convert.ToDecimal(aReader["BalanceAmount"]);
            }
            if (aReader.HasColumn("GeneralNote") && aReader["GeneralNote"] != DBNull.Value)
            {
                aItem.GeneralNote = aReader["GeneralNote"].ToString();
            }
            if (aReader.HasColumn("RptPtCashAdvRemID") && aReader["RptPtCashAdvRemID"] != DBNull.Value)
            {
                aItem.RptPtCashAdvRemID = (long)aReader["RptPtCashAdvRemID"];
            }
            if (aReader.HasColumn("V_PaymentReason") && aReader["V_PaymentReason"] != DBNull.Value)
            {
                aItem.V_PaymentReason = (long)aReader["V_PaymentReason"];
            }
            if (aReader.HasColumn("V_PaymentMode") && aReader["V_PaymentMode"] != DBNull.Value)
            {
                aItem.V_PaymentMode = (long)aReader["V_PaymentMode"];
            }
            if (aReader.HasColumn("IsDeleted") && aReader["IsDeleted"] != DBNull.Value)
            {
                aItem.IsDeleted = Convert.ToBoolean(aReader["IsDeleted"]);
            }
            if (aReader.HasColumn("RecLog") && aReader["RecLog"] != DBNull.Value)
            {
                aItem.RecLog = aReader["RecLog"].ToString();
            }
            if (aReader.HasColumn("PtTranPaymtID") && aReader["PtTranPaymtID"] != DBNull.Value)
            {
                aItem.PtTranPaymtID = (long)aReader["PtTranPaymtID"];
            }
        }
        public static void FillData(this OutPatientCashAdvanceLink aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("PtCashAdvanceLinkID") && aReader["PtCashAdvanceLinkID"] != DBNull.Value)
            {
                aItem.PtCashAdvanceLinkID = (long)aReader["PtCashAdvanceLinkID"];
            }
            if (aReader.HasColumn("OutPtCashAdvanceID") && aReader["OutPtCashAdvanceID"] != DBNull.Value)
            {
                aItem.OutPtCashAdvanceID = (long)aReader["OutPtCashAdvanceID"];
            }
            if (aReader.HasColumn("TransItemID") && aReader["TransItemID"] != DBNull.Value)
            {
                aItem.TransItemID = (long)aReader["TransItemID"];
            }
        }
        public static void FillData(this PromoDiscountProgram aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("PromoDiscProgID") && aReader["PromoDiscProgID"] != DBNull.Value)
            {
                aItem.PromoDiscProgID = (long)aReader["PromoDiscProgID"];
            }
            if (aReader.HasColumn("PromoDiscCode") && aReader["PromoDiscCode"] != DBNull.Value)
            {
                aItem.PromoDiscCode = aReader["PromoDiscCode"].ToString();
            }
            if (aReader.HasColumn("PromoDiscName") && aReader["PromoDiscName"] != DBNull.Value)
            {
                aItem.PromoDiscName = aReader["PromoDiscName"].ToString();
            }
            if (aReader.HasColumn("StaffID") && aReader["StaffID"] != DBNull.Value)
            {
                aItem.StaffID = (long)aReader["StaffID"];
            }
            if (aReader.HasColumn("StaffName") && aReader["StaffName"] != DBNull.Value)
            {
                aItem.StaffName = aReader["StaffName"].ToString();
            }
            if (aReader.HasColumn("AuthorizedStaffID") && aReader["AuthorizedStaffID"] != DBNull.Value)
            {
                aItem.AuthorizedStaffID = (long)aReader["AuthorizedStaffID"];
            }
            if (aReader.HasColumn("ReasonOrNote") && aReader["ReasonOrNote"] != DBNull.Value)
            {
                aItem.ReasonOrNote = aReader["ReasonOrNote"].ToString();
            }
            if (aReader.HasColumn("ValidFromDate") && aReader["ValidFromDate"] != DBNull.Value)
            {
                aItem.ValidFromDate = Convert.ToDateTime(aReader["ValidFromDate"]);
            }
            if (aReader.HasColumn("ValidToDate") && aReader["ValidToDate"] != DBNull.Value)
            {
                aItem.ValidToDate = Convert.ToDateTime(aReader["ValidToDate"]);
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
            if (aReader.HasColumn("DiscountPercent") && aReader["DiscountPercent"] != DBNull.Value)
            {
                aItem.DiscountPercent = Convert.ToDecimal(aReader["DiscountPercent"]);
            }
            if (aReader.HasColumn("ConfirmedStaffID") && aReader["ConfirmedStaffID"] != DBNull.Value)
            {
                aItem.ConfirmedStaff = new Staff { StaffID = (long)aReader["ConfirmedStaffID"] };
                if (aReader.HasColumn("ConfirmedStaffFullName") && aReader["ConfirmedStaffFullName"] != DBNull.Value)
                {
                    aItem.ConfirmedStaff.FullName = aReader["ConfirmedStaffFullName"].ToString();
                }
            }
            if (aReader.HasColumn("IsOnPriceDiscount") && aReader["IsOnPriceDiscount"] != DBNull.Value)
            {
                aItem.IsOnPriceDiscount = Convert.ToBoolean(aReader["IsOnPriceDiscount"]);
            }
            if (aReader.HasColumn("V_RegistrationType") && aReader["V_RegistrationType"] != DBNull.Value)
            {
                aItem.V_RegistrationType = (long)aReader["V_RegistrationType"];
            }
            if (aReader.HasColumn("V_RegistrationTypeName") && aReader["V_RegistrationTypeName"] != DBNull.Value)
            {
                aItem.V_RegistrationTypeName = aReader["V_RegistrationTypeName"].ToString();
            }
            if (aReader.HasColumn("V_DiscountTypeCount") && aReader["V_DiscountTypeCount"] != DBNull.Value)
            {
                aItem.V_DiscountTypeCount = new Lookup { LookupID = Convert.ToInt64(aReader["V_DiscountTypeCount"]), ObjectName = "V_DiscountTypeCount" };
                if (aReader.HasColumn("DiscountTypeCount") && aReader["DiscountTypeCount"] != DBNull.Value)
                {
                    aItem.V_DiscountTypeCount.ObjectValue = Convert.ToString(aReader["DiscountTypeCount"]);
                }
            }
        }
        public static void FillData(this RefMedicalServiceGroups aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("MedicalServiceGroupID") && aReader["MedicalServiceGroupID"] != DBNull.Value)
            {
                aItem.MedicalServiceGroupID = (long)aReader["MedicalServiceGroupID"];
            }
            if (aReader.HasColumn("MedicalServiceGroupCode") && aReader["MedicalServiceGroupCode"] != DBNull.Value)
            {
                aItem.MedicalServiceGroupCode = aReader["MedicalServiceGroupCode"].ToString();
            }
            if (aReader.HasColumn("MedicalServiceGroupName") && aReader["MedicalServiceGroupName"] != DBNull.Value)
            {
                aItem.MedicalServiceGroupName = aReader["MedicalServiceGroupName"].ToString();
            }
            if (aReader.HasColumn("MedicalServiceGroupDescription") && aReader["MedicalServiceGroupDescription"] != DBNull.Value)
            {
                aItem.MedicalServiceGroupDescription = aReader["MedicalServiceGroupDescription"].ToString();
            }
            if (aReader.HasColumn("V_RegistrationType") && aReader["V_RegistrationType"] != DBNull.Value)
            {
                aItem.V_RegistrationType = Convert.ToInt64(aReader["V_RegistrationType"]);
            }
            else
            {
                aItem.V_RegistrationType = 0;
            }
            if (aReader.HasColumn("RegistrationTypeStr") && aReader["RegistrationTypeStr"] != DBNull.Value)
            {
                aItem.RegistrationTypeStr = Convert.ToString(aReader["RegistrationTypeStr"]);
            }
            if (aReader.HasColumn("V_MedicalServiceGroupType") && aReader["V_MedicalServiceGroupType"] != DBNull.Value)
            {
                aItem.V_MedicalServiceGroupType = Convert.ToInt64(aReader["V_MedicalServiceGroupType"]);
            }
            if (aReader.HasColumn("MedicalServiceGroupTypeStr") && aReader["MedicalServiceGroupTypeStr"] != DBNull.Value)
            {
                aItem.MedicalServiceGroupTypeStr = Convert.ToString(aReader["MedicalServiceGroupTypeStr"]);
            }
            if (aReader.HasColumn("Gender") && aReader["Gender"] != DBNull.Value)
            {
                aItem.Gender = Convert.ToBoolean(aReader["Gender"]);
            }
            else
            {
                aItem.Gender = null;
            }
            if (aReader.HasColumn("AgeFrom") && aReader["AgeFrom"] != DBNull.Value)
            {
                aItem.AgeFrom = Convert.ToByte(aReader["AgeFrom"]);
            }
            if (aReader.HasColumn("AgeTo") && aReader["AgeTo"] != DBNull.Value)
            {
                aItem.AgeTo= Convert.ToByte(aReader["AgeTo"]);
            }
            if (aReader.HasColumn("V_MedicalServiceParentGroup") && aReader["V_MedicalServiceParentGroup"] != DBNull.Value)
            {
                aItem.V_MedicalServiceParentGroup = Convert.ToInt64(aReader["V_MedicalServiceParentGroup"]);
            }
            else
            {
                aItem.V_MedicalServiceParentGroup = null;
            }
            if (aReader.HasColumn("DiscountPercent") && aReader["DiscountPercent"] != DBNull.Value)
            {
                aItem.DiscountPercent = Convert.ToDecimal(aReader["DiscountPercent"]);
            }
        }
        public static void FillData(this RefMedicalServiceGroupItem aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("MedicalServiceGroupItemID") && aReader["MedicalServiceGroupItemID"] != DBNull.Value)
            {
                aItem.MedicalServiceGroupItemID = (long)aReader["MedicalServiceGroupItemID"];
            }
            if (aReader.HasColumn("MedicalServiceGroupID") && aReader["MedicalServiceGroupID"] != DBNull.Value)
            {
                aItem.MedicalServiceGroupID = (long)aReader["MedicalServiceGroupID"];
            }
            if (aReader.HasColumn("MedServiceID") && aReader["MedServiceID"] != DBNull.Value)
            {
                aItem.MedServiceID = (long)aReader["MedServiceID"];
            }
            if (aReader.HasColumn("PCLExamTypeID") && aReader["PCLExamTypeID"] != DBNull.Value)
            {
                aItem.PCLExamTypeID = (long)aReader["PCLExamTypeID"];
            }
            if (aReader.HasColumn("IsDeleted") && aReader["IsDeleted"] != DBNull.Value)
            {
                aItem.IsDeleted = Convert.ToBoolean(aReader["IsDeleted"]);
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
            if (aReader.HasColumn("Qty") && aReader["Qty"] != DBNull.Value)
            {
                aItem.Qty = Convert.ToInt32(aReader["Qty"]);
            }
        }
        public static void FillData(this OutPtTransactionFinalization aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("TranFinalizationID") && aReader["TranFinalizationID"] != DBNull.Value)
            {
                aItem.TranFinalizationID = (long)aReader["TranFinalizationID"];
            }
            if (aReader.HasColumn("DateFinalize") && aReader["DateFinalize"] != DBNull.Value)
            {
                aItem.DateFinalize = Convert.ToDateTime(aReader["DateFinalize"]);
            }
            if (aReader.HasColumn("PtRegistrationID") && aReader["PtRegistrationID"] != DBNull.Value)
            {
                aItem.PtRegistrationID = (long)aReader["PtRegistrationID"];
            }
            if (aReader.HasColumn("StaffID") && aReader["StaffID"] != DBNull.Value)
            {
                aItem.StaffID = (long)aReader["StaffID"];
                aItem.CreatedStaff = new Staff { StaffID = aItem.StaffID };
            }
            if (aReader.HasColumn("StaffName") && aReader["StaffName"] != DBNull.Value && aItem.CreatedStaff != null)
            {
                aItem.CreatedStaff.FullName = Convert.ToString(aReader["StaffName"]);
            }
            if (aReader.HasColumn("TranDateFrom") && aReader["TranDateFrom"] != DBNull.Value)
            {
                aItem.TranDateFrom = Convert.ToDateTime(aReader["TranDateFrom"]);
            }
            if (aReader.HasColumn("TranDateTo") && aReader["TranDateTo"] != DBNull.Value)
            {
                aItem.TranDateTo = Convert.ToDateTime(aReader["TranDateTo"]);
            }
            if (aReader.HasColumn("V_TranFinalizationType") && aReader["V_TranFinalizationType"] != DBNull.Value)
            {
                aItem.V_TranFinalizationType = (long)aReader["V_TranFinalizationType"];
            }
            if (aReader.HasColumn("V_RegistrationType") && aReader["V_RegistrationType"] != DBNull.Value)
            {
                aItem.V_RegistrationType = (long)aReader["V_RegistrationType"];
            }
            if (aReader.HasColumn("FinalizedReceiptNum") && aReader["FinalizedReceiptNum"] != DBNull.Value)
            {
                aItem.FinalizedReceiptNum = Convert.ToString(aReader["FinalizedReceiptNum"]);
            }
            if (aReader.HasColumn("Amount") && aReader["Amount"] != DBNull.Value)
            {
                aItem.Amount = Convert.ToDecimal(aReader["Amount"]);
            }
            if (aReader.HasColumn("TotalHasVATAmount") && aReader["TotalHasVATAmount"] != DBNull.Value)
            {
                aItem.TotalHasVATAmount = Convert.ToDecimal(aReader["TotalHasVATAmount"]);
            }
            if (aReader.HasColumn("VATPercent") && aReader["VATPercent"] != DBNull.Value)
            {
                aItem.VATPercent = Convert.ToDouble(aReader["VATPercent"]);
            }
            if (aReader.HasColumn("V_PaymentMode") && aReader["V_PaymentMode"] != DBNull.Value)
            {
                aItem.V_PaymentMode = (long)aReader["V_PaymentMode"];
            }
            if (aReader.HasColumn("BankAccountNumber") && aReader["BankAccountNumber"] != DBNull.Value)
            {
                aItem.BankAccountNumber = Convert.ToString(aReader["BankAccountNumber"]);
            }
            if (aReader.HasColumn("TaxMemberName") && aReader["TaxMemberName"] != DBNull.Value)
            {
                aItem.TaxMemberName = Convert.ToString(aReader["TaxMemberName"]);
            }
            if (aReader.HasColumn("TaxMemberAddress") && aReader["TaxMemberAddress"] != DBNull.Value)
            {
                aItem.TaxMemberAddress = Convert.ToString(aReader["TaxMemberAddress"]);
            }
            if (aReader.HasColumn("TaxCode") && aReader["TaxCode"] != DBNull.Value)
            {
                aItem.TaxCode = Convert.ToString(aReader["TaxCode"]);
            }
            if (aReader.HasColumn("Denominator") && aReader["Denominator"] != DBNull.Value)
            {
                aItem.Denominator = Convert.ToString(aReader["Denominator"]);
            }
            if (aReader.HasColumn("InvoiceNumb") && aReader["InvoiceNumb"] != DBNull.Value)
            {
                aItem.InvoiceNumb = Convert.ToString(aReader["InvoiceNumb"]);
            }
            if (aReader.HasColumn("Symbol") && aReader["Symbol"] != DBNull.Value)
            {
                aItem.Symbol = Convert.ToString(aReader["Symbol"]);
            }
            if (aReader.HasColumn("TransactionFinalizationSummaryInfoID") && aReader["TransactionFinalizationSummaryInfoID"] != DBNull.Value)
            {
                aItem.TransactionFinalizationSummaryInfoID = (long)aReader["TransactionFinalizationSummaryInfoID"];
            }
            if (aReader.HasColumn("DateInvoice") && aReader["DateInvoice"] != DBNull.Value)
            {
                aItem.DateInvoice = Convert.ToDateTime(aReader["DateInvoice"]);
            }
            if (aReader.HasColumn("ReceiptDetails") && aReader["ReceiptDetails"] != DBNull.Value)
            {
                aItem.ReceiptDetails = Convert.ToString(aReader["ReceiptDetails"]);
            }
            //▼====: #078
            if (aReader.HasColumn("TotalAmount") && aReader["TotalAmount"] != DBNull.Value)
            {
                aItem.TotalAmount = Convert.ToDecimal(aReader["TotalAmount"]);
            }
            if (aReader.HasColumn("Buyer") && aReader["Buyer"] != DBNull.Value)
            {
                aItem.Buyer = Convert.ToString(aReader["Buyer"]);
            }
            //▲====: #078
        }
        public static void FillData(this ShortHandDictionary aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("ShortHandDictionaryID") && aReader["ShortHandDictionaryID"] != DBNull.Value)
            {
                aItem.ShortHandDictionaryID = (long)aReader["ShortHandDictionaryID"];
            }
            if (aReader.HasColumn("ShortHandDictionaryKey") && aReader["ShortHandDictionaryKey"] != DBNull.Value)
            {
                aItem.ShortHandDictionaryKey = Convert.ToString(aReader["ShortHandDictionaryKey"]);
            }
            if (aReader.HasColumn("ShortHandDictionaryValue") && aReader["ShortHandDictionaryValue"] != DBNull.Value)
            {
                aItem.ShortHandDictionaryValue = Convert.ToString(aReader["ShortHandDictionaryValue"]);
            }
            if (aReader.HasColumn("StaffID") && aReader["StaffID"] != DBNull.Value)
            {
                aItem.StaffID = (long)aReader["StaffID"];
            }
        }
        public static void FillData(this SmallProcedure aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("SmallProcedureID") && aReader["SmallProcedureID"] != DBNull.Value)
            {
                aItem.SmallProcedureID = (long)aReader["SmallProcedureID"];
            }
            if (aReader.HasColumn("ProcedureDateTime") && aReader["ProcedureDateTime"] != DBNull.Value)
            {
                aItem.ProcedureDateTime = Convert.ToDateTime(aReader["ProcedureDateTime"]);
            }
            if (aReader.HasColumn("Diagnosis") && aReader["Diagnosis"] != DBNull.Value)
            {
                aItem.Diagnosis = Convert.ToString(aReader["Diagnosis"]);
            }
            if (aReader.HasColumn("ProcedureMethod") && aReader["ProcedureMethod"] != DBNull.Value)
            {
                aItem.ProcedureMethod = Convert.ToString(aReader["ProcedureMethod"]);
            }
            if (aReader.HasColumn("NarcoticMethod") && aReader["NarcoticMethod"] != DBNull.Value)
            {
                aItem.NarcoticMethod = Convert.ToString(aReader["NarcoticMethod"]);
            }
            if (aReader.HasColumn("ProcedureDoctorStaffID") && aReader["ProcedureDoctorStaffID"] != DBNull.Value)
            {
                aItem.ProcedureDoctorStaffID = aReader["ProcedureDoctorStaffID"] as long?;
                aItem.ProcedureDoctorStaff = new Staff { StaffID = aItem.ProcedureDoctorStaffID.Value };
                if (aReader.HasColumn("ProcedureDoctor") && aReader["ProcedureDoctor"] != DBNull.Value)
                {
                    aItem.ProcedureDoctorStaff.FullName = Convert.ToString(aReader["ProcedureDoctor"]);
                }
                // 20200207 TNHX: Get StaffCatgID + StaffCatgDes for show in report
                aItem.ProcedureDoctorStaff.RefStaffCategory = new RefStaffCategory();
                if (aReader.HasColumn("ProcedureDoctorStaffCatgID") && aReader["ProcedureDoctorStaffCatgID"] != DBNull.Value)
                {
                    aItem.ProcedureDoctorStaff.StaffCatgID = Convert.ToInt64(aReader["ProcedureDoctorStaffCatgID"]);
                }
                if (aReader.HasColumn("ProcedureDoctorStaffCatgDes") && aReader["ProcedureDoctorStaffCatgDes"] != DBNull.Value)
                {
                    aItem.ProcedureDoctorStaff.RefStaffCategory.StaffCatgDescription = Convert.ToString(aReader["ProcedureDoctorStaffCatgDes"]);
                }
            }
            if (aReader.HasColumn("ProcedureDoctorStaffID2") && aReader["ProcedureDoctorStaffID2"] != DBNull.Value)
            {
                aItem.ProcedureDoctorStaffID2 = aReader["ProcedureDoctorStaffID2"] as long?;
                aItem.ProcedureDoctorStaff2 = new Staff { StaffID = aItem.ProcedureDoctorStaffID2.Value };
                if (aReader.HasColumn("ProcedureDoctor2") && aReader["ProcedureDoctor2"] != DBNull.Value)
                {
                    aItem.ProcedureDoctorStaff2.FullName = Convert.ToString(aReader["ProcedureDoctor2"]);
                }
                // 20200207 TNHX: Get StaffCatgID + StaffCatgDes for show in report
                aItem.ProcedureDoctorStaff2.RefStaffCategory = new RefStaffCategory();
                if (aReader.HasColumn("ProcedureDoctor2StaffCatgID") && aReader["ProcedureDoctor2StaffCatgID"] != DBNull.Value)
                {
                    aItem.ProcedureDoctorStaff2.StaffCatgID = Convert.ToInt64(aReader["ProcedureDoctor2StaffCatgID"]);
                }
                if (aReader.HasColumn("ProcedureDoctor2StaffCatgDes") && aReader["ProcedureDoctor2StaffCatgDes"] != DBNull.Value)
                {
                    aItem.ProcedureDoctorStaff2.RefStaffCategory.StaffCatgDescription = Convert.ToString(aReader["ProcedureDoctor2StaffCatgDes"]);
                }
            }
            if (aReader.HasColumn("NarcoticDoctorStaffID") && aReader["NarcoticDoctorStaffID"] != DBNull.Value)
            {
                aItem.NarcoticDoctorStaffID = aReader["NarcoticDoctorStaffID"] as long?;
                aItem.NarcoticDoctorStaff = new Staff { StaffID = aItem.NarcoticDoctorStaffID.Value };
                if (aReader.HasColumn("NarcoticDoctor") && aReader["NarcoticDoctor"] != DBNull.Value)
                {
                    aItem.NarcoticDoctorStaff.FullName = Convert.ToString(aReader["NarcoticDoctor"]);
                }
                // 20200207 TNHX: Get StaffCatgID + StaffCatgDes for show in report
                aItem.NarcoticDoctorStaff.RefStaffCategory = new RefStaffCategory();
                if (aReader.HasColumn("NarcoticDoctorStaffCatgID") && aReader["NarcoticDoctorStaffCatgID"] != DBNull.Value)
                {
                    aItem.NarcoticDoctorStaff.StaffCatgID = Convert.ToInt64(aReader["NarcoticDoctorStaffCatgID"]);
                }
                if (aReader.HasColumn("NarcoticDoctorStaffCatgDes") && aReader["NarcoticDoctorStaffCatgDes"] != DBNull.Value)
                {
                    aItem.NarcoticDoctorStaff.RefStaffCategory.StaffCatgDescription = Convert.ToString(aReader["NarcoticDoctorStaffCatgDes"]);
                }
            }
            if (aReader.HasColumn("NarcoticDoctorOfficialStaffID") && aReader["NarcoticDoctorOfficialStaffID"] != DBNull.Value)
            {
                aItem.NarcoticDoctorOfficialStaffID = aReader["NarcoticDoctorOfficialStaffID"] as long?;
                aItem.NarcoticDoctorOfficialStaff = new Staff { StaffID = aItem.NarcoticDoctorOfficialStaffID.Value };
                if (aReader.HasColumn("NarcoticDoctorOfficial") && aReader["NarcoticDoctorOfficial"] != DBNull.Value)
                {
                    aItem.NarcoticDoctorOfficialStaff.FullName = Convert.ToString(aReader["NarcoticDoctorOfficial"]);
                }
                // 20200207 TNHX: Get StaffCatgID + StaffCatgDes for show in report
                aItem.NarcoticDoctorOfficialStaff.RefStaffCategory = new RefStaffCategory();
                if (aReader.HasColumn("NarcoticDoctorOfficialStaffCatgID") && aReader["NarcoticDoctorOfficialStaffCatgID"] != DBNull.Value)
                {
                    aItem.NarcoticDoctorOfficialStaff.StaffCatgID = Convert.ToInt64(aReader["NarcoticDoctorOfficialStaffCatgID"]);
                }
                if (aReader.HasColumn("NarcoticDoctorOfficialStaffCatgDes") && aReader["NarcoticDoctorOfficialStaffCatgDes"] != DBNull.Value)
                {
                    aItem.NarcoticDoctorOfficialStaff.RefStaffCategory.StaffCatgDescription = Convert.ToString(aReader["NarcoticDoctorOfficialStaffCatgDes"]);
                }
            }
            if (aReader.HasColumn("NarcoticDoctorStaffID2") && aReader["NarcoticDoctorStaffID2"] != DBNull.Value)
            {
                aItem.NarcoticDoctorStaffID2 = aReader["NarcoticDoctorStaffID2"] as long?;
                aItem.NarcoticDoctorStaff2 = new Staff { StaffID = aItem.NarcoticDoctorStaffID2.Value };
                if (aReader.HasColumn("NarcoticDoctor2") && aReader["NarcoticDoctor2"] != DBNull.Value)
                {
                    aItem.NarcoticDoctorStaff2.FullName = Convert.ToString(aReader["NarcoticDoctor2"]);
                }
                // 20200207 TNHX: Get StaffCatgID + StaffCatgDes for show in report
                aItem.NarcoticDoctorStaff2.RefStaffCategory = new RefStaffCategory();
                if (aReader.HasColumn("NarcoticDoctor2StaffCatgID") && aReader["NarcoticDoctor2StaffCatgID"] != DBNull.Value)
                {
                    aItem.NarcoticDoctorStaff2.StaffCatgID = Convert.ToInt64(aReader["NarcoticDoctor2StaffCatgID"]);
                }
                if (aReader.HasColumn("NarcoticDoctor2StaffCatgDes") && aReader["NarcoticDoctor2StaffCatgDes"] != DBNull.Value)
                {
                    aItem.NarcoticDoctorStaff2.RefStaffCategory.StaffCatgDescription = Convert.ToString(aReader["NarcoticDoctor2StaffCatgDes"]);
                }
            }
            if (aReader.HasColumn("CreatedStaffID") && aReader["CreatedStaffID"] != DBNull.Value)
            {
                aItem.CreatedStaffID = (long)aReader["CreatedStaffID"];
            }
            if (aReader.HasColumn("ModifiedStaffID") && aReader["ModifiedStaffID"] != DBNull.Value)
            {
                aItem.ModifiedStaffID = (long)aReader["ModifiedStaffID"];
            }
            if (aReader.HasColumn("PtRegDetailID") && aReader["PtRegDetailID"] != DBNull.Value)
            {
                aItem.PtRegDetailID = (long)aReader["PtRegDetailID"];
            }
            if (aReader.HasColumn("NurseStaffID") && aReader["NurseStaffID"] != DBNull.Value)
            {
                aItem.NurseStaffID = aReader["NurseStaffID"] as long?;
                aItem.NurseStaff = new Staff { StaffID = aItem.NurseStaffID.Value };
                if (aReader.HasColumn("NurseName") && aReader["NurseName"] != DBNull.Value)
                {
                    aItem.NurseStaff.FullName = Convert.ToString(aReader["NurseName"]);
                }
                // 20200207 TNHX: Get StaffCatgID + StaffCatgDes for show in report
                aItem.NurseStaff.RefStaffCategory = new RefStaffCategory();
                if (aReader.HasColumn("NurseNameStaffCatgID") && aReader["NurseNameStaffCatgID"] != DBNull.Value)
                {
                    aItem.NurseStaff.StaffCatgID = Convert.ToInt64(aReader["NurseNameStaffCatgID"]);
                }
                if (aReader.HasColumn("NurseNameStaffCatgDes") && aReader["NurseNameStaffCatgDes"] != DBNull.Value)
                {
                    aItem.NurseStaff.RefStaffCategory.StaffCatgDescription = Convert.ToString(aReader["NurseNameStaffCatgDes"]);
                }
            }
            if (aReader.HasColumn("NurseStaffID2") && aReader["NurseStaffID2"] != DBNull.Value)
            {
                aItem.NurseStaffID2 = aReader["NurseStaffID2"] as long?;
                aItem.NurseStaff2 = new Staff { StaffID = aItem.NurseStaffID2.Value };
                if (aReader.HasColumn("NurseName1") && aReader["NurseName1"] != DBNull.Value)
                {
                    aItem.NurseStaff2.FullName = Convert.ToString(aReader["NurseName1"]);
                }
                // 20200207 TNHX: Get StaffCatgID + StaffCatgDes for show in report
                aItem.NurseStaff2.RefStaffCategory = new RefStaffCategory();
                if (aReader.HasColumn("NurseName1StaffCatgID") && aReader["NurseName1StaffCatgID"] != DBNull.Value)
                {
                    aItem.NurseStaff2.StaffCatgID = Convert.ToInt64(aReader["NurseName1StaffCatgID"]);
                }
                if (aReader.HasColumn("NurseName1StaffCatgDes") && aReader["NurseName1StaffCatgDes"] != DBNull.Value)
                {
                    aItem.NurseStaff2.RefStaffCategory.StaffCatgDescription = Convert.ToString(aReader["NurseName1StaffCatgDes"]);
                }
            }
            if (aReader.HasColumn("NurseStaffID3") && aReader["NurseStaffID3"] != DBNull.Value)
            {
                aItem.NurseStaffID3 = aReader["NurseStaffID3"] as long?;
                aItem.NurseStaff3 = new Staff { StaffID = aItem.NurseStaffID3.Value };
                if (aReader.HasColumn("NurseName2") && aReader["NurseName2"] != DBNull.Value)
                {
                    aItem.NurseStaff3.FullName = Convert.ToString(aReader["NurseName2"]);
                }
                // 20200207 TNHX: Get StaffCatgID + StaffCatgDes for show in report
                aItem.NurseStaff3.RefStaffCategory = new RefStaffCategory();
                if (aReader.HasColumn("NurseName2StaffCatgID") && aReader["NurseName2StaffCatgID"] != DBNull.Value)
                {
                    aItem.NurseStaff3.StaffCatgID = Convert.ToInt64(aReader["NurseStaff2StaffCatgID"]);
                }
                if (aReader.HasColumn("NurseName2StaffCatgDes") && aReader["NurseName2StaffCatgDes"] != DBNull.Value)
                {
                    aItem.NurseStaff3.RefStaffCategory.StaffCatgDescription = Convert.ToString(aReader["NurseName2StaffCatgDes"]);
                }
            }
            if (aReader.HasColumn("CheckRecordDoctorStaffID") && aReader["CheckRecordDoctorStaffID"] != DBNull.Value)
            {
                aItem.CheckRecordDoctorStaffID = aReader["CheckRecordDoctorStaffID"] as long?;
                aItem.CheckRecordDoctorStaff = new Staff { StaffID = aItem.CheckRecordDoctorStaffID.Value };
                if (aReader.HasColumn("CheckRecordDoctorStaff") && aReader["CheckRecordDoctorStaff"] != DBNull.Value)
                {
                    aItem.CheckRecordDoctorStaff.FullName = Convert.ToString(aReader["CheckRecordDoctorStaff"]);
                }
                // 20200207 TNHX: Get StaffCatgID + StaffCatgDes for show in report
                aItem.CheckRecordDoctorStaff.RefStaffCategory = new RefStaffCategory();
                if (aReader.HasColumn("CheckRecordDoctorStaffCatgID") && aReader["CheckRecordDoctorStaffCatgID"] != DBNull.Value)
                {
                    aItem.CheckRecordDoctorStaff.StaffCatgID = Convert.ToInt64(aReader["CheckRecordDoctorStaffCatgID"]);
                }
                if (aReader.HasColumn("CheckRecordDoctorStaffCatgDes") && aReader["CheckRecordDoctorStaffCatgDes"] != DBNull.Value)
                {
                    aItem.CheckRecordDoctorStaff.RefStaffCategory.StaffCatgDescription = Convert.ToString(aReader["CheckRecordDoctorStaffCatgDes"]);
                }
            }
            if (aReader.HasColumn("TrinhTu") && aReader["TrinhTu"] != DBNull.Value)
            {
                aItem.TrinhTu = Convert.ToString(aReader["TrinhTu"]);
            }
            if (aReader.HasColumn("V_Surgery_Tips_Type") && aReader["V_Surgery_Tips_Type"] != DBNull.Value)
            {
                aItem.V_Surgery_Tips_Type = new Lookup { LookupID = Convert.ToInt64(aReader["V_Surgery_Tips_Type"]), ObjectName = "V_Surgery_Tips_Type" };
                if (aReader.HasColumn("Surgery_Tips_Type") && aReader["Surgery_Tips_Type"] != DBNull.Value)
                {
                    aItem.V_Surgery_Tips_Type.ObjectValue = Convert.ToString(aReader["Surgery_Tips_Type"]);
                }
            }
            //▼====: #059
            if (aReader.HasColumn("Notes") && aReader["Notes"] != DBNull.Value)
            {
                aItem.Notes = Convert.ToString(aReader["Notes"]);
            }
            if (aReader.HasColumn("DateOffStitches") && aReader["DateOffStitches"] != DBNull.Value)
            {
                aItem.DateOffStitches = Convert.ToDateTime(aReader["DateOffStitches"]);
            }
            if (aReader.HasColumn("Drainage") && aReader["Drainage"] != DBNull.Value)
            {
                aItem.Drainage = Convert.ToString(aReader["Drainage"]);
            }
            if (aReader.HasColumn("V_DeathReason") && aReader["V_DeathReason"] != DBNull.Value)
            {
                aItem.V_DeathReason = (long)aReader["V_DeathReason"];
            }
            if (aReader.HasColumn("V_SurgicalMode") && aReader["V_SurgicalMode"] != DBNull.Value)
            {
                aItem.V_SurgicalMode = (long)aReader["V_SurgicalMode"];
            }
            if (aReader.HasColumn("V_CatactropheType") && aReader["V_CatactropheType"] != DBNull.Value)
            {
                aItem.V_CatactropheType = (long)aReader["V_CatactropheType"];
            }
            if (aReader.HasColumn("V_AnesthesiaType") && aReader["V_AnesthesiaType"] != DBNull.Value)
            {
                aItem.V_AnesthesiaType = (long)aReader["V_AnesthesiaType"];
            }
            if (aReader.HasColumn("BeforeICD10Code") && aReader["BeforeICD10Code"] != DBNull.Value)
            {
                aItem.BeforeICD10 = new DiseasesReference();
                aItem.BeforeICD10.ICD10Code = Convert.ToString(aReader["BeforeICD10Code"]);
            }
            if (aReader.HasColumn("BeforeDiagnosis") && aReader["BeforeDiagnosis"] != DBNull.Value)
            {
                if (aItem.BeforeICD10 != null)
                {
                    aItem.BeforeICD10.DiseaseNameVN = Convert.ToString(aReader["BeforeDiagnosis"]);
                }
            }
            if (aReader.HasColumn("AfterICD10Code") && aReader["AfterICD10Code"] != DBNull.Value)
            {
                aItem.AfterICD10 = new DiseasesReference();
                aItem.AfterICD10.ICD10Code = Convert.ToString(aReader["AfterICD10Code"]);
            }
            if (aReader.HasColumn("AfterDiagnosis") && aReader["AfterDiagnosis"] != DBNull.Value)
            {
                if (aItem.AfterICD10 != null)
                {
                    aItem.AfterICD10.DiseaseNameVN = Convert.ToString(aReader["AfterDiagnosis"]);
                }
            }
            if (aReader.HasColumn("DeptLocID") && aReader["DeptLocID"] != DBNull.Value)
            {
                aItem.DeptLocID = (long)aReader["DeptLocID"];
            }
            if (aReader.HasColumn("DepartmentName") && aReader["DepartmentName"] != DBNull.Value)
            {
                aItem.DepartmentName = Convert.ToString(aReader["DepartmentName"]);
            }
            if (aReader.HasColumn("CompletedDateTime") && aReader["CompletedDateTime"] != DBNull.Value)
            {
                aItem.CompletedDateTime = Convert.ToDateTime(aReader["CompletedDateTime"]);
            }
            if (aReader.HasColumn("V_RegistrationType") && aReader["V_RegistrationType"] != DBNull.Value)
            {
                aItem.V_RegistrationType = (long)aReader["V_RegistrationType"];
            }
            if (aReader.HasColumn("ProcedureDescription") && aReader["ProcedureDescription"] != DBNull.Value)
            {
                aItem.ProcedureDescription = Convert.ToString(aReader["ProcedureDescription"]);
            }
            if (aReader.HasColumn("ProcedureDescriptionContent") && aReader["ProcedureDescriptionContent"] != DBNull.Value)
            {
                aItem.ProcedureDescriptionContent = Convert.ToString(aReader["ProcedureDescriptionContent"]);
            }
            //▲====: #059
            if (aReader.HasColumn("ServiceRecID") && aReader["ServiceRecID"] != DBNull.Value)
            {
                aItem.ServiceRecID = (long)aReader["ServiceRecID"];
            }
            //▼====: #098
            if (aReader.HasColumn("UserOfficialPDStaffID") && aReader["UserOfficialPDStaffID"] != DBNull.Value)
            {
                aItem.UserOfficialPDStaffID = aReader["UserOfficialPDStaffID"] as long?;
                aItem.UserOfficialPDStaff = new Staff { StaffID = aItem.UserOfficialPDStaffID.Value };
                if (aReader.HasColumn("UserOfficialPDStaffFullName") && aReader["UserOfficialPDStaffFullName"] != DBNull.Value)
                {
                    aItem.UserOfficialPDStaff.FullName = Convert.ToString(aReader["UserOfficialPDStaffFullName"]);
                }
                aItem.UserOfficialPDStaff.RefStaffCategory = new RefStaffCategory();
                if (aReader.HasColumn("UserOfficialPDStaffCatgID") && aReader["UserOfficialPDStaffCatgID"] != DBNull.Value)
                {
                    aItem.UserOfficialPDStaff.StaffCatgID = Convert.ToInt64(aReader["UserOfficialPDStaffCatgID"]);
                }
                if (aReader.HasColumn("UserOfficialPDStaffCatgDes") && aReader["UserOfficialPDStaffCatgDes"] != DBNull.Value)
                {
                    aItem.UserOfficialPDStaff.RefStaffCategory.StaffCatgDescription = Convert.ToString(aReader["UserOfficialPDStaffCatgDes"]);
                }
            }
            if (aReader.HasColumn("UserOfficialPDStaffID2") && aReader["UserOfficialPDStaffID2"] != DBNull.Value)
            {
                aItem.UserOfficialPDStaffID2 = aReader["UserOfficialPDStaffID2"] as long?;
                aItem.UserOfficialPDStaff2 = new Staff { StaffID = aItem.UserOfficialPDStaffID2.Value };
                if (aReader.HasColumn("UserOfficialPDStaff2FullName") && aReader["UserOfficialPDStaff2FullName"] != DBNull.Value)
                {
                    aItem.UserOfficialPDStaff2.FullName = Convert.ToString(aReader["UserOfficialPDStaff2FullName"]);
                }
                aItem.UserOfficialPDStaff2.RefStaffCategory = new RefStaffCategory();
                if (aReader.HasColumn("UserOfficialPDStaff2CatgID") && aReader["UserOfficialPDStaff2CatgID"] != DBNull.Value)
                {
                    aItem.UserOfficialPDStaff2.StaffCatgID = Convert.ToInt64(aReader["UserOfficialPDStaff2CatgID"]);
                }
                if (aReader.HasColumn("UserOfficialPDStaff2CatgDes") && aReader["UserOfficialPDStaff2CatgDes"] != DBNull.Value)
                {
                    aItem.UserOfficialPDStaff2.RefStaffCategory.StaffCatgDescription = Convert.ToString(aReader["UserOfficialPDStaff2CatgDes"]);
                }
            }
            //▲====: #098
            //▼====: #106
            if (aReader.HasColumn("NarcoticDoctorStaffID3") && aReader["NarcoticDoctorStaffID3"] != DBNull.Value)
            {
                aItem.NarcoticDoctorStaffID3 = aReader["NarcoticDoctorStaffID3"] as long?;
                aItem.NarcoticDoctorStaff3 = new Staff { StaffID = aItem.NarcoticDoctorStaffID3.Value };
                if (aReader.HasColumn("NarcoticDoctorStaff3FullName") && aReader["NarcoticDoctorStaff3FullName"] != DBNull.Value)
                {
                    aItem.NarcoticDoctorStaff3.FullName = Convert.ToString(aReader["NarcoticDoctorStaff3FullName"]);
                }
                aItem.NarcoticDoctorStaff3.RefStaffCategory = new RefStaffCategory();
                if (aReader.HasColumn("NarcoticDoctorStaff3CatgID") && aReader["NarcoticDoctorStaff3CatgID"] != DBNull.Value)
                {
                    aItem.NarcoticDoctorStaff3.StaffCatgID = Convert.ToInt64(aReader["NarcoticDoctorStaff3CatgID"]);
                }
                if (aReader.HasColumn("NarcoticDoctorStaff3CatgDes") && aReader["NarcoticDoctorStaff3CatgDes"] != DBNull.Value)
                {
                    aItem.NarcoticDoctorStaff3.RefStaffCategory.StaffCatgDescription = Convert.ToString(aReader["NarcoticDoctorStaff3CatgDes"]);
                }
            }
            //▲====: #106
            if (aReader.HasColumn("ServiceMainTime") && aReader["ServiceMainTime"] != DBNull.Value)
            {
                aItem.ServiceMainTime = Convert.ToInt32(aReader["ServiceMainTime"]);
            }
            else
            {
                aItem.ServiceMainTime = 0;
            }
            //▼====: #166
            if (aReader.HasColumn("V_SurgicalSite") && aReader["V_SurgicalSite"] != DBNull.Value)
            {
                aItem.V_SurgicalSite = (long)aReader["V_SurgicalSite"];
            }
            //▲====: #166
        }
        public static void FillData(this RptOutPtTransactionFinalizationDetail aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("IdxTemp12Code") && aReader["IdxTemp12Code"] != DBNull.Value)
            {
                aItem.IdxTemp12Code = (long)aReader["IdxTemp12Code"];
            }
            if (aReader.HasColumn("HITypeDescription") && aReader["HITypeDescription"] != DBNull.Value)
            {
                aItem.HITypeDescription = aReader["HITypeDescription"].ToString();
            }
            if (aReader.HasColumn("TotalPatientPayment") && aReader["TotalPatientPayment"] != DBNull.Value)
            {
                aItem.TotalPatientPayment = Convert.ToDecimal(aReader["TotalPatientPayment"]);
            }
            if (aReader.HasColumn("IsHasVAT") && aReader["IsHasVAT"] != DBNull.Value)
            {
                aItem.IsHasVAT = Convert.ToBoolean(aReader["IsHasVAT"]);
            }
            if (aReader.HasColumn("VATPercent") && aReader["VATPercent"] != DBNull.Value)
            {
                aItem.VATPercent = Convert.ToDouble(aReader["VATPercent"]);
            }
            if (aReader.HasColumn("CharityOrgID") && aReader["CharityOrgID"] != DBNull.Value)
            {
                aItem.CharityOrgID = Convert.ToInt64(aReader["CharityOrgID"]);
            }
        }
        public static void FillData(this CitiesProvince aItem, IDataReader aReader)
        {
            aItem.CityProvinceID = (long)aReader["CityProvinceID"];
            aItem.CityProvinceName = aReader["CityProvinceName"].ToString();
            if (aReader.HasColumn("CityProviceCode"))
            {
                aItem.CityProviceCode = aReader["CityProviceCode"].ToString();
            }
            if (aReader.HasColumn("CityProviceHICode"))
            {
                aItem.CityProviceHICode = aReader["CityProviceHICode"].ToString();
            }
        }
        public static void FillData(this SuburbNames aItem, IDataReader aReader)
        {
            aItem.CitiesProvince = new CitiesProvince();
            if (aReader.HasColumn("SuburbNameID") && aReader["SuburbNameID"] != DBNull.Value)
            {
                aItem.SuburbNameID = (long)aReader["SuburbNameID"];
            }
            if (aReader.HasColumn("CityProvinceID") && aReader["CityProvinceID"] != DBNull.Value)
            {
                aItem.CityProvinceID = (long)aReader["CityProvinceID"];
                aItem.CitiesProvince.CityProvinceID = (long)aReader["CityProvinceID"];
            }
            if (aReader.HasColumn("DescNote") && aReader["DescNote"] != DBNull.Value)
            {
                aItem.DescNote = aReader["DescNote"].ToString();
            }
            if (aReader.HasColumn("SuburbName") && aReader["SuburbName"] != DBNull.Value)
            {
                aItem.SuburbName = aReader["SuburbName"].ToString();
            }
            if (aReader.HasColumn("CityProvinceName") && aReader["CityProvinceName"] != DBNull.Value)
            {
                aItem.CitiesProvince.CityProvinceName = aReader["CityProvinceName"].ToString();
            }
        }
        public static void FillData(this WardNames aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("WardNameID") && aReader["WardNameID"] != DBNull.Value)
            {
                aItem.WardNameID = (long)aReader["WardNameID"];
            }
            else
            {
                aItem.WardNameID = -1;
            }
            if (aReader.HasColumn("SuburbNameID") && aReader["SuburbNameID"] != DBNull.Value)
            {
                aItem.SuburbNameID = (long)aReader["SuburbNameID"];
            }
            if (aReader.HasColumn("WardName") && aReader["WardName"] != DBNull.Value)
            {
                aItem.WardName = aReader["WardName"].ToString();
            }
            else
            {
                aItem.WardName = eHCMSResources.Z2338_G1_KhongXacDinh;
            }
        }
        public static void FillData(this Patient aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("PatientID"))
            {
                aItem.PatientID = (long)aReader["PatientID"];
            }
            if (aReader.HasColumn("PatientCode"))
            {
                aItem.PatientCode = aReader["PatientCode"].ToString();
            }
            if (aReader.HasColumn("FullName"))
            {
                aItem.FullName = aReader["FullName"].ToString();
            }
            if (aReader.HasColumn("OldPtNamesLog") && aReader["OldPtNamesLog"] != DBNull.Value)
            {
                aItem.OldPtNamesLog = aReader["OldPtNamesLog"].ToString();
            }
            if (aReader.HasColumn("Gender"))
            {
                aItem.Gender = aReader["Gender"].ToString();
                aItem.GenderObj = Gender.GetGender(aReader["Gender"].ToString());
            }
            if (aReader.HasColumn("CountryID"))
            {
                aItem.CountryID = aReader["CountryID"] as long?;
            }
            if (aReader.HasColumn("NationalityID"))
            {
                aItem.NationalityID = aReader["NationalityID"] as long?;
            }
            if (aReader.HasColumn("CityProvinceID"))
            {
                aItem.CityProvinceID = aReader["CityProvinceID"] as long?;
            }
            if (aReader.HasColumn("PatientBarcode"))
            {
                aItem.PatientBarcode = aReader["PatientBarcode"].ToString();
            }
            if (aReader.HasColumn("IDNumber"))
            {
                aItem.IDNumber = aReader["IDNumber"].ToString().Trim();
            }
            if (aReader.HasColumn("FirstName"))
            {
                aItem.FirstName = aReader["FirstName"].ToString();
            }
            if (aReader.HasColumn("MiddleName"))
            {
                aItem.MiddleName = aReader["MiddleName"].ToString();
            }
            if (aReader.HasColumn("LastName"))
            {
                aItem.LastName = aReader["LastName"].ToString();
            }
            if (aReader.HasColumn("AgeOnly"))
            {
                aItem.AgeOnly = aReader["AgeOnly"] as bool?;
            }
            if (aReader.HasColumn("DOB"))
            {
                aItem.DOB = aReader["DOB"] as DateTime?;
                if (aItem.DOB != null)
                {
                    if (aItem.AgeOnly != null && !aItem.AgeOnly.Value)
                    {
                        aItem.DOBText = aItem.DOB.GetValueOrDefault().ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        aItem.DOBText = aItem.DOB.Value.Year.ToString();
                    }
                }
                aItem.GenerateAgeString(DateTime.Now);
            }
            if (aReader.HasColumn("DOBText") && aReader["DOBText"] != DBNull.Value)
            {
                aItem.DOBText = aReader["DOBText"].ToString();
            }
            if (aItem.AgeOnly != null && !aItem.AgeOnly.Value)
            {
                if (aReader.HasColumn("DOB"))
                {
                    aItem.DOBForBaby = aReader["DOB"] as DateTime?;
                }
            }
            if (aItem.AgeOnly.GetValueOrDefault())
            {
                aItem.MaskedDOB = null;
            }
            if (aReader.HasColumn("DateBecamePatient"))
            {
                aItem.DateBecamePatient = aReader["DateBecamePatient"] as DateTime?;
            }
            if (aReader.HasColumn("V_MaritalStatus"))
            {
                aItem.V_MaritalStatus = aReader["V_MaritalStatus"] as long?;
            }
            if (aReader.HasColumn("PatientPhoto"))
            {
                aItem.PatientPhoto = aReader["PatientPhoto"].ToString();
            }
            if (aReader.HasColumn("PatientNotes"))
            {
                aItem.PatientNotes = aReader["PatientNotes"].ToString();
            }
            if (aReader.HasColumn("PatientStreetAddress"))
            {
                aItem.PatientStreetAddress = aReader["PatientStreetAddress"].ToString();
            }
            if (aReader.HasColumn("PatientSurburb") && aReader["PatientSurburb"] != DBNull.Value)
            {
                aItem.PatientSurburb = aReader["PatientSurburb"].ToString();
            }
            if (aReader.HasColumn("PatientPhoneNumber"))
            {
                aItem.PatientPhoneNumber = aReader["PatientPhoneNumber"].ToString();
            }
            if (aReader.HasColumn("PatientCellPhoneNumber"))
            {
                aItem.PatientCellPhoneNumber = aReader["PatientCellPhoneNumber"].ToString();
            }
            if (aReader.HasColumn("PatientEmailAddress"))
            {
                aItem.PatientEmailAddress = aReader["PatientEmailAddress"].ToString();
            }
            if (aReader.HasColumn("PatientEmployer"))
            {
                aItem.PatientEmployer = aReader["PatientEmployer"].ToString();
            }
            if (aReader.HasColumn("PatientOccupation"))
            {
                aItem.PatientOccupation = aReader["PatientOccupation"].ToString();
            }
            if (aReader.HasColumn("V_Ethnic"))
            {
                aItem.V_Ethnic = aReader["V_Ethnic"] as long?;
            }
            if (aReader.HasColumn("FContactFullName"))
            {
                aItem.FContactFullName = aReader["FContactFullName"].ToString();
            }
            if (aReader.HasColumn("V_FamilyRelationship"))
            {
                aItem.V_FamilyRelationship = aReader["V_FamilyRelationship"] as long?;
            }
            if (aReader.HasColumn("FContactAddress"))
            {
                aItem.FContactAddress = aReader["FContactAddress"].ToString();
            }
            if (aReader.HasColumn("FContactHomePhone"))
            {
                aItem.FContactHomePhone = aReader["FContactHomePhone"].ToString();
            }
            if (aReader.HasColumn("FContactBusinessPhone"))
            {
                aItem.FContactBusinessPhone = aReader["FContactBusinessPhone"].ToString();
            }
            if (aReader.HasColumn("FContactCellPhone"))
            {
                aItem.FContactCellPhone = aReader["FContactCellPhone"].ToString();
            }
            if (aReader.HasColumn("FAlternateContact"))
            {
                aItem.FAlternateContact = aReader["FAlternateContact"].ToString();
            }
            if (aReader.HasColumn("FAlternatePhone"))
            {
                aItem.FAlternatePhone = aReader["FAlternatePhone"].ToString();
            }
            if (aReader.HasColumn("BloodTypeID"))
            {
                aItem.BloodTypeID = aReader["BloodTypeID"] as int?;
                try
                {
                    aItem.VBloodType = new BloodType();
                    aItem.VBloodType.BloodTypeID = Convert.ToByte(aReader["BloodTypeID"]);
                    if (aReader.HasColumn("BloodTypeName") && aReader["BloodTypeName"] != DBNull.Value)
                    {
                        aItem.VBloodType.BloodTypeName = aReader["BloodTypeName"].ToString();
                    }

                    if (aReader.HasColumn("RhType") && aReader["RhType"] != DBNull.Value)
                    {
                        aItem.VBloodType.RhType = aReader["RhType"].ToString();
                    }
                    aItem.VBloodType.Descript = aItem.VBloodType.BloodTypeName + " " + aItem.VBloodType.RhType;
                }
                catch
                {
                }
            }
            if (aReader.HasColumn("CityProvinceID"))
            {
                try
                {
                    aItem.CitiesProvince = new CitiesProvince();
                    aItem.CitiesProvince.FillData(aReader);
                }
                catch
                {
                }
            }
            aItem.SuburbName = new SuburbNames();
            aItem.SuburbName.FillData(aReader);
            if (aItem.SuburbName != null && !string.IsNullOrEmpty(aItem.SuburbName.SuburbName))
            {
                aItem.PatientSurburb = aItem.SuburbName.SuburbName;
            }
            aItem.WardName = new WardNames();
            aItem.WardName.FillData(aReader);
            try
            {
                aItem.NormalizeDOB();
            }
            catch
            {
            }
            if (aReader.HasColumn("NationalMedicalCode") && aReader["NationalMedicalCode"] != DBNull.Value)
            {
                try
                {
                    aItem.NationalMedicalCode = aReader["NationalMedicalCode"].ToString();
                }
                catch
                {
                }
            }
            if (aReader.HasColumn("FileCodeNumber") && aReader["FileCodeNumber"] != DBNull.Value)
            {
                aItem.FileCodeNumber = aReader["FileCodeNumber"].ToString();
            }
            if (aReader.HasColumn("StaffName") && aReader["StaffName"] != DBNull.Value)
            {
                aItem.StaffName = aReader["StaffName"].ToString();
            }
            if (aReader.HasColumn("PatientStaffID") && aReader["PatientStaffID"] != DBNull.Value)
            {
                aItem.StaffID = (long)aReader["PatientStaffID"];
            }
            if (aReader.HasColumn("MaxExamDateHI"))
            {
                aItem.MaxExamDateHI = aReader["MaxExamDateHI"] as DateTime?;
            }
            if (aReader.HasColumn("MaxDayRptsHI") && aReader["MaxDayRptsHI"] != DBNull.Value)
            {
                aItem.MaxDayRptsHI = Convert.ToDecimal(aReader["MaxDayRptsHI"]);
            }
            if (aReader.HasColumn("HICardNo") && aReader["HICardNo"] != DBNull.Value)
            {
                aItem.LastNewHealthInsurance = new HealthInsurance { HICardNo = aReader["HICardNo"].ToString() };
            }
            if (aReader.HasColumn("PatientFullStreetAddress") && aReader["PatientFullStreetAddress"] != DBNull.Value)
            {
                aItem.PatientFullStreetAddress = aReader["PatientFullStreetAddress"].ToString();
            }
            if (aReader.HasColumn("IDCreatedDate") && aReader["IDCreatedDate"] != DBNull.Value)
            {
                aItem.IDCreatedDate = Convert.ToDateTime(aReader["IDCreatedDate"]);
            }
            if (aReader.HasColumn("OccupationDate") && aReader["OccupationDate"] != DBNull.Value)
            {
                aItem.OccupationDate = Convert.ToDateTime(aReader["OccupationDate"]);
            }
            if (aReader.HasColumn("IDCreatedFrom") && aReader["IDCreatedFrom"] != DBNull.Value)
            {
                aItem.IDCreatedFrom = Convert.ToString(aReader["IDCreatedFrom"]);
            }
        }
        public static void FillData(this DiagnosisTreatment p, IDataReader reader)
        {
            if (reader.HasColumn("DTItemID") && reader["DTItemID"] != DBNull.Value)
            {
                p.DTItemID = (long)reader["DTItemID"];
            }
            else
            {
                p.DTItemID = 0;
            }
            if (reader.HasColumn("AdmissionDate") && reader["AdmissionDate"] != DBNull.Value)
            {
                p.AdmissionInfo = new InPatientAdmDisDetails();
                p.AdmissionInfo.AdmissionDate = Convert.ToDateTime(reader["AdmissionDate"]);
            }
            if (reader.HasColumn("ServiceRecID") && reader["ServiceRecID"] != DBNull.Value)
            {
                p.ServiceRecID = reader["ServiceRecID"] as long?;
            }
            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                p.PtRegDetailID = reader["PtRegDetailID"] as long?;
            }
            if (reader.HasColumn("OrientedTreatment") && reader["OrientedTreatment"] != DBNull.Value)
            {
                p.OrientedTreatment = reader["OrientedTreatment"].ToString();
            }
            if (reader.HasColumn("ICD10List") && reader["ICD10List"] != DBNull.Value)
            {
                p.ICD10List = reader["ICD10List"].ToString();
            }
            if (reader.HasColumn("Treatment") && reader["Treatment"] != DBNull.Value)
            {
                p.Treatment = reader["Treatment"].ToString();
            }
            if (reader.HasColumn("DoctorComments") && reader["DoctorComments"] != DBNull.Value)
            {
                p.DoctorComments = reader["DoctorComments"].ToString();
            }
            if (reader.HasColumn("Diagnosis") && reader["Diagnosis"] != DBNull.Value)
            {
                p.Diagnosis = reader["Diagnosis"].ToString();
            }
            else
            {
                p.Diagnosis = "";
            }
            if (reader.HasColumn("DiagnosisFinal") && reader["DiagnosisFinal"] != DBNull.Value)
            {
                p.DiagnosisFinal = reader["DiagnosisFinal"].ToString();
            }
            else
            {
                p.DiagnosisFinal = "";
            }
            try
            {
                p.DiagnosisPriorityView = p.Diagnosis;
            }
            catch
            {
                p.DiagnosisPriorityView = p.DiagnosisFinal;
            }
            if (reader.HasColumn("DiagnosisForDrug") && reader["DiagnosisForDrug"] != DBNull.Value)
            {
                p.DiagnosisForDrug = reader["DiagnosisForDrug"].ToString();
            }
            if (reader.HasColumn("MDRptTemplateID") && reader["MDRptTemplateID"] != DBNull.Value)
            {
                p.MDRptTemplateID = (long)reader["MDRptTemplateID"];
            }
            else
            {
                p.MDRptTemplateID = 0;
            }
            if (reader.HasColumn("V_DiagnosisType") && reader["V_DiagnosisType"] != DBNull.Value)
            {
                p.V_DiagnosisType = Convert.ToInt64(reader["V_DiagnosisType"]);
                p.LookupDiagnosis = new Lookup();
                p.LookupDiagnosis.LookupID = Convert.ToInt64(reader["V_DiagnosisType"]);
                if (reader.HasColumn("DiagnosisTypeName"))
                {
                    p.LookupDiagnosis.ObjectValue = reader["DiagnosisTypeName"].ToString();
                }
            }
            if (reader.HasColumn("DeptIDCreated") && reader["DeptIDCreated"] != DBNull.Value)
            {
                p.Department = new RefDepartment();
                p.Department.DeptID = Convert.ToInt64(reader["DeptIDCreated"]);

                if (reader.HasColumn("DeptNameCreated") && reader["DeptNameCreated"] != DBNull.Value)
                {
                    p.Department.DeptName = reader["DeptNameCreated"].ToString();
                }
            }
            p.PatientServiceRecord = new PatientServiceRecord();
            if (reader.HasColumn("ServiceRecID") && reader["ServiceRecID"] != DBNull.Value)
            {
                p.PatientServiceRecord.ServiceRecID = (long)reader["ServiceRecID"];
            }
            else
            {
                p.PatientServiceRecord.ServiceRecID = 0;
            }
            if (reader.HasColumn("PtRegistrationID") && reader["PtRegistrationID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PtRegistrationID = reader["PtRegistrationID"] as long?;
            }
            if (reader.HasColumn("PtRegistrationCode") && reader["PtRegistrationCode"] != DBNull.Value)
            {
                p.PatientServiceRecord.PtRegistrationCode = reader["PtRegistrationCode"].ToString();
            }
            if (reader.HasColumn("PtRegDetailID") && reader["PtRegDetailID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PtRegDetailID = reader["PtRegDetailID"] as long?;
            }
            try
            {
                if (reader.HasColumn("DoctorStaffID"))
                {
                    p.DoctorStaffID = Convert.ToInt64(reader["DoctorStaffID"]);

                    p.ObjDoctorStaffID = new Staff { StaffID = Convert.ToInt64(reader["DoctorStaffID"]) };
                    if (reader.HasColumn("DoctorName"))
                    {
                        p.ObjDoctorStaffID.FullName = reader["DoctorName"] == null ? "" : reader["DoctorName"].ToString();
                    }

                    if (reader.HasColumn("DrPhoneNumber"))
                    {
                        p.ObjDoctorStaffID.SPhoneNumber = reader["DrPhoneNumber"].ToString();
                    }
                }
            }
            catch
            {
                p.ObjDoctorStaffID = new Staff();
                p.DoctorStaffID = 0;
                p.ObjDoctorStaffID.StaffID = 0;
            }
            if (reader.HasColumn("PatientRecID"))
            {
                p.PatientServiceRecord.PatientRecID = reader["PatientRecID"] as long?;
            }
            if (reader.HasColumn("PatientMedicalFileID"))
            {
                p.PatientServiceRecord.PatientMedicalFileID = reader["PatientMedicalFileID"] as long?;
            }
            p.PatientServiceRecord.ExamDate = DateTime.Now;
            if (reader.HasColumn("ExamDate") && reader["ExamDate"] != DBNull.Value)
            {
                p.PatientServiceRecord.ExamDate = Convert.ToDateTime(reader["ExamDate"]);
            }
            p.PatientServiceRecord.V_ProcessingType = 0;
            if (reader.HasColumn("V_ProcessingType") && reader["V_ProcessingType"] != DBNull.Value)
            {
                p.PatientServiceRecord.V_ProcessingType = (long)reader["V_ProcessingType"];
            }
            p.PatientServiceRecord.LookupProcessingType = new Lookup();
            if (reader.HasColumn("V_ProcessingType") && reader["V_ProcessingType"] != DBNull.Value)
            {
                p.PatientServiceRecord.LookupProcessingType.LookupID = (long)reader["V_ProcessingType"];
            }
            if (reader.HasColumn("ProcessingType") && reader["ProcessingType"] != DBNull.Value)
            {
                p.PatientServiceRecord.LookupProcessingType.ObjectValue = reader["ProcessingType"].ToString();
            }
            p.PatientServiceRecord.LookupBehaving = new Lookup();
            p.PatientServiceRecord.V_Behaving = 0;
            if (reader.HasColumn("V_Behaving") && reader["V_Behaving"] != DBNull.Value)
            {
                p.PatientServiceRecord.LookupBehaving.LookupID = (long)reader["V_Behaving"];
                p.PatientServiceRecord.V_Behaving = (long)reader["V_Behaving"];
            }
            p.PatientServiceRecord.LookupDiagnosis = new Lookup();
            p.PatientServiceRecord.V_DiagnosisType = 0;
            if (reader.HasColumn("V_DiagnosisType") && reader["V_DiagnosisType"] != DBNull.Value)
            {
                p.PatientServiceRecord.LookupDiagnosis.LookupID = (long)reader["V_DiagnosisType"];
                p.PatientServiceRecord.V_DiagnosisType = (long)reader["V_DiagnosisType"];
            }
            if (reader.HasColumn("DiagnosisTypeName") && reader["DiagnosisTypeName"] != DBNull.Value)
            {
                p.PatientServiceRecord.LookupDiagnosis.ObjectValue = reader["DiagnosisTypeName"].ToString();
            }
            if (reader.HasColumn("Behaving") && reader["Behaving"] != DBNull.Value)
            {
                p.PatientServiceRecord.LookupBehaving.ObjectValue = reader["Behaving"].ToString();
            }
            p.PatientServiceRecord.PatientMedicalRecord = new PatientMedicalRecord();
            if (reader.HasColumn("PatientRecID") && reader["PatientRecID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PatientMedicalRecord.PatientRecID = (long)reader["PatientRecID"];
            }
            if (reader.HasColumn("PatientID") && reader["PatientID"] != DBNull.Value)
            {
                p.PatientServiceRecord.PatientMedicalRecord.PatientID = reader["PatientID"] as long?;
            }
            if (reader.HasColumn("NationalMedicalCode") && reader["NationalMedicalCode"] != DBNull.Value)
            {
                p.PatientServiceRecord.PatientMedicalRecord.NationalMedicalCode = reader["NationalMedicalCode"].ToString();
            }
            if (reader.HasColumn("CreatedDate"))
            {
                p.PatientServiceRecord.PatientMedicalRecord.CreatedDate = reader["CreatedDate"] as DateTime?;
            }
            if (reader.HasColumn("LatestPrescriptID"))
            {
                p.LatestPrescriptID = reader["LatestPrescriptID"] as long?;
            }
            if (reader.HasColumn("PrescriptID"))
            {
                p.PrescriptID = reader["PrescriptID"] as long?;
            }
            if (reader.HasColumn("IssueID"))
            {
                p.IssueID = reader["IssueID"] as long?;
            }
            if (reader.HasColumn("DiagnosisDate") && reader["DiagnosisDate"] != DBNull.Value)
            {
                p.DiagnosisDate = (DateTime)reader["DiagnosisDate"];
            }
            if (reader.HasColumn("InPtDeptGuid"))
            {
                p.InPtDeptGuid = reader["InPtDeptGuid"] as Guid?;
            }
            if (reader.HasColumn("HeartFailureType") && reader["HeartFailureType"] != DBNull.Value)
            {
                p.HeartFailureType = Convert.ToBoolean(reader["HeartFailureType"]);
            }
            else
            {
                p.HeartFailureType = false;
            }
            if (reader.HasColumn("IntPtDiagDrInstructionID") && reader["IntPtDiagDrInstructionID"] != DBNull.Value)
            {
                p.IntPtDiagDrInstructionID = (long)reader["IntPtDiagDrInstructionID"];
            }
            if (reader.HasColumn("Pulse") && reader["Pulse"] != DBNull.Value)
            {
                p.Pulse = Convert.ToDecimal(reader["Pulse"]);
            }
            if (reader.HasColumn("BloodPressure") && reader["BloodPressure"] != DBNull.Value)
            {
                p.BloodPressure = Convert.ToDecimal(reader["BloodPressure"]);
            }
            if (reader.HasColumn("Temperature") && reader["Temperature"] != DBNull.Value)
            {
                p.Temperature = Convert.ToDecimal(reader["Temperature"]);
            }
            if (reader.HasColumn("SpO2") && reader["SpO2"] != DBNull.Value)
            {
                p.SpO2 = Convert.ToDecimal(reader["SpO2"]);
            }
            if (reader.HasColumn("V_RegistrationType") && reader["V_RegistrationType"] != DBNull.Value)
            {
                if (Enum.IsDefined(typeof(AllLookupValues.RegistrationType), Convert.ToInt32(reader["V_RegistrationType"])))
                    p.V_RegistrationType = (AllLookupValues.RegistrationType)Enum.Parse(typeof(AllLookupValues.RegistrationType), reader["V_RegistrationType"].ToString());
            }
            if (reader.HasColumn("KLSTriGiac") && reader["KLSTriGiac"] != DBNull.Value)
            {
                p.KLSTriGiac = reader["KLSTriGiac"].ToString();
            }
            if (reader.HasColumn("KLSNiemMac") && reader["KLSNiemMac"] != DBNull.Value)
            {
                p.KLSNiemMac = reader["KLSNiemMac"].ToString();
            }
            if (reader.HasColumn("KLSKetMac") && reader["KLSKetMac"] != DBNull.Value)
            {
                p.KLSKetMac = reader["KLSKetMac"].ToString();
            }
            if (reader.HasColumn("KLSTuyenGiap") && reader["KLSTuyenGiap"] != DBNull.Value)
            {
                p.KLSTuyenGiap = reader["KLSTuyenGiap"].ToString();
            }
            if (reader.HasColumn("KLSHachBachHuyet") && reader["KLSHachBachHuyet"] != DBNull.Value)
            {
                p.KLSHachBachHuyet = reader["KLSHachBachHuyet"].ToString();
            }
            if (reader.HasColumn("KLSPhoi") && reader["KLSPhoi"] != DBNull.Value)
            {
                p.KLSPhoi = reader["KLSPhoi"].ToString();
            }
            if (reader.HasColumn("KLSTim") && reader["KLSTim"] != DBNull.Value)
            {
                p.KLSTim = reader["KLSTim"].ToString();
            }
            if (reader.HasColumn("KLSBung") && reader["KLSBung"] != DBNull.Value)
            {
                p.KLSBung = reader["KLSBung"].ToString();
            }
            if (reader.HasColumn("KLSTMH") && reader["KLSTMH"] != DBNull.Value)
            {
                p.KLSTMH = reader["KLSTMH"].ToString();
            }
            if (reader.HasColumn("V_TreatmentType") && reader["V_TreatmentType"] != DBNull.Value)
            {
                p.V_TreatmentType = (long)reader["V_TreatmentType"];
            }
            if (reader.HasColumn("TreatmentType") && reader["TreatmentType"] != DBNull.Value)
            {
                p.TreatmentType = Convert.ToString(reader["TreatmentType"]);
            }
        }
        public static void FillData(this PatientRegistration_V2 aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("DischargeDate") && aReader["DischargeDate"] != DBNull.Value)
            {
                aItem.DischargeDate = aReader["DischargeDate"] as DateTime?;
            }
            if (aReader.HasColumn("DischargeDetailRecCreatedDate") && aReader["DischargeDetailRecCreatedDate"] != DBNull.Value)
            {
                aItem.DischargeDetailRecCreatedDate = aReader["DischargeDetailRecCreatedDate"] as DateTime?;
            }
            if (aReader.HasColumn("TempDischargeDate") && aReader["TempDischargeDate"] != DBNull.Value)
            {
                aItem.TempDischargeDate = aReader["TempDischargeDate"] as DateTime?;
            }
            if (aReader.HasColumn("InPtAdmissionStatus") && aReader["InPtAdmissionStatus"] != DBNull.Value)
            {
                aItem.InPtAdmissionStatus = Convert.ToInt16(aReader["InPtAdmissionStatus"]);
            }
            if (aReader.HasColumn("IsDischarge") && aReader["IsDischarge"] != DBNull.Value)
            {
                aItem.IsDischarge = Convert.ToBoolean(aReader["IsDischarge"]);
            }
            if (aReader.HasColumn("PtRegistrationID") && aReader["PtRegistrationID"] != DBNull.Value)
            {
                aItem.PtRegistrationID = (long)aReader["PtRegistrationID"];
            }
            if (aReader.HasColumn("PatientClassID") && aReader["PatientClassID"] != DBNull.Value)
            {
                aItem.PatientClassID = aReader["PatientClassID"] as long?;
            }
            if (aReader.HasColumn("RegTypeID") && aReader["RegTypeID"] != DBNull.Value)
            {
                aItem.RegTypeID = aReader["RegTypeID"] as byte?;
                aItem.RegistrationType = new RegistrationType { RegTypeID = aItem.RegTypeID.GetValueOrDefault(0) };
                if (aReader.HasColumn("RegTypeName") && aReader["RegTypeName"] != DBNull.Value)
                {
                    aItem.RegistrationType.RegTypeName = aReader["RegTypeName"].ToString();
                }
            }
            if (aReader.HasColumn("DeptID") && aReader["DeptID"] != DBNull.Value)
            {
                aItem.DeptID = aReader["DeptID"] as long?;
            }
            if (aReader.HasColumn("PatientID") && aReader["PatientID"] != DBNull.Value)
            {
                aItem.PatientID = aReader["PatientID"] as long?;
            }
            if (aReader.HasColumn("EmergRecID") && aReader["EmergRecID"] != DBNull.Value)
            {
                aItem.EmergRecID = aReader["EmergRecID"] as long?;
            }
            if (aReader.HasColumn("StaffID") && aReader["StaffID"] != DBNull.Value)
            {
                aItem.StaffID = aReader["StaffID"] as long?;
            }
            if (aReader.HasColumn("HIApprovedStaffID") && aReader["HIApprovedStaffID"] != DBNull.Value)
            {
                aItem.HIApprovedStaffID = aReader["HIApprovedStaffID"] as long?;
            }
            if (aReader.HasColumn("HisID") && aReader["HisID"] != DBNull.Value)
            {
                aItem.HisID = aReader["HisID"] as long?;
            }
            if (aReader.HasColumn("PaperReferalID") && aReader["PaperReferalID"] != DBNull.Value)
            {
                aItem.PaperReferalID = aReader["PaperReferalID"] as long?;
            }
            if (aReader.HasColumn("StaffFullName"))
            {
                aItem.StaffName = aReader["StaffFullName"] as string;
            }
            if (aReader.HasColumn("ExamDate") && aReader["ExamDate"] != DBNull.Value)
            {
                aItem.ExamDate = (DateTime)aReader["ExamDate"];
            }
            if (aReader.HasColumn("PtRegistrationCode") && aReader["PtRegistrationCode"] != DBNull.Value)
            {
                aItem.PtRegistrationCode = aReader["PtRegistrationCode"] as string;
            }
            if (aReader.HasColumn("V_DocumentTypeOnHold") && aReader["V_DocumentTypeOnHold"] != DBNull.Value)
            {
                aItem.V_DocumentTypeOnHold = aReader["V_DocumentTypeOnHold"] as long?;
            }
            if (aReader.HasColumn("SequenceNo") && aReader["SequenceNo"] != DBNull.Value)
            {
                aItem.SequenceNo = (int)aReader["SequenceNo"];
            }
            if (aReader.HasColumn("ProgSumMinusMinHI") && aReader["ProgSumMinusMinHI"] != DBNull.Value)
            {
                aItem.ProgSumMinusMinHI = aReader["ProgSumMinusMinHI"] as decimal?;
            }
            if (aReader.HasColumn("IsCrossRegion") && aReader["IsCrossRegion"] != DBNull.Value)
            {
                aItem.IsCrossRegion = (aReader["IsCrossRegion"] as bool?).GetValueOrDefault(false);
            }
            if (aReader.HasColumn("IsForeigner") && aReader["IsForeigner"] != DBNull.Value)
            {
                aItem.IsForeigner = (aReader["IsForeigner"] as bool?).GetValueOrDefault(false);
            }
            if (aReader.HasColumn("IsHICard_FiveYearsCont") && aReader["IsHICard_FiveYearsCont"] != DBNull.Value)
            {
                aItem.IsHICard_FiveYearsCont = Convert.ToBoolean(aReader["IsHICard_FiveYearsCont"]);
            }
            if (aReader.HasColumn("EmergInPtReExamination") && aReader["EmergInPtReExamination"] != DBNull.Value)
            {
                aItem.EmergInPtReExamination = (aReader["EmergInPtReExamination"] as bool?).GetValueOrDefault(false);
            }
            if (aReader.HasColumn("PtInsuranceBenefit") && aReader["PtInsuranceBenefit"] != DBNull.Value)
            {
                aItem.PtInsuranceBenefit = aReader["PtInsuranceBenefit"] as double?;
            }
            if (aReader.HasColumn("IsAllowCrossRegion") && aReader["IsAllowCrossRegion"] != DBNull.Value)
            {
                aItem.IsAllowCrossRegion = Convert.ToBoolean(aReader["IsAllowCrossRegion"]);
            }
            aItem.RecordState = RecordState.UNCHANGED;
            if (aReader.HasColumn("V_RegistrationStatus") && aReader["V_RegistrationStatus"] != DBNull.Value)
            {
                aItem.V_RegistrationStatus = (long)aReader["V_RegistrationStatus"];
            }
            if (Enum.IsDefined(typeof(AllLookupValues.RegistrationStatus), (int)aItem.V_RegistrationStatus))
            {
                aItem.RegistrationStatus = (AllLookupValues.RegistrationStatus)aItem.V_RegistrationStatus;
            }
            else
            {
                aItem.RegistrationStatus = AllLookupValues.RegistrationStatus.INVALID;
            }
            if (aReader.HasColumn("V_RegistrationPaymentStatus") && aReader["V_RegistrationPaymentStatus"] != DBNull.Value)
            {
                try
                {
                    var ps = (long)aReader["V_RegistrationPaymentStatus"];
                    if (Enum.IsDefined(typeof(AllLookupValues.RegistrationPaymentStatus), (int)ps))
                    {
                        aItem.RegistrationPaymentStatus = (AllLookupValues.RegistrationPaymentStatus)ps;
                    }
                }
                catch
                {
                }
            }
            if (aReader.HasColumn("V_RegistrationType"))
            {
                var V_RegistrationType = aReader["V_RegistrationType"] as long?;
                if (Enum.IsDefined(typeof(AllLookupValues.RegistrationType), (int)V_RegistrationType.GetValueOrDefault(0)))
                {
                    aItem.V_RegistrationType = (AllLookupValues.RegistrationType)V_RegistrationType.Value;
                }
                else
                {
                    aItem.V_RegistrationType = AllLookupValues.RegistrationType.Unknown;
                }
            }
            if (aReader.HasColumn("V_RegForPatientOfType"))
            {
                var vregForPatientOfType = aReader["V_RegForPatientOfType"] as long?;
                if (Enum.IsDefined(typeof(AllLookupValues.V_RegForPatientOfType), (int)vregForPatientOfType.GetValueOrDefault(0)))
                {
                    aItem.V_RegForPatientOfType = (AllLookupValues.V_RegForPatientOfType)vregForPatientOfType.GetValueOrDefault(0);
                }
                else
                {
                    aItem.V_RegForPatientOfType = AllLookupValues.V_RegForPatientOfType.Unknown;
                }
            }
            if (aReader.HasColumn("MedServiceNames"))
            {
                aItem.MedServiceNames = aReader["MedServiceNames"] as string;
            }
            if (aReader.HasColumn("MarkedAsDeleted") && aReader["MarkedAsDeleted"] != DBNull.Value)
            {
                aItem.MarkedAsDeleted = (bool)aReader["MarkedAsDeleted"];
            }
            if (aReader.HasColumn("SomeRegDetailsRemoved") && aReader["SomeRegDetailsRemoved"] != DBNull.Value)
            {
                aItem.SomeRegDetailsRemoved = (bool)aReader["SomeRegDetailsRemoved"];
            }
            if (aItem.MarkedAsDeleted)
            {
                aItem.RecordState = RecordState.DELETED;
            }
            try
            {
                if (aReader.HasColumn("PatientCode") && aReader["PatientCode"] != DBNull.Value)
                {
                    aItem.Patient = new Patient();
                    aItem.Patient.FillData(aReader);
                    aItem.Patient.GenerateAgeString(aItem.ExamDate);
                }
                else
                {
                    aItem.Patient = new Patient();
                }
                aItem.Patient.CurrentHealthInsurance = new HealthInsurance();
                if (aReader.HasColumn("HIID") && aReader["HIID"] != DBNull.Value)
                {
                    aItem.Patient.CurrentHealthInsurance.HIID = (long)aReader["HIID"];
                }
                if (aReader.HasColumn("HICardNo"))
                {
                    aItem.Patient.CurrentHealthInsurance.HICardNo = aReader["HICardNo"].ToString();
                }
                if (aReader.HasColumn("ValidDateFrom") && aReader["ValidDateFrom"] != DBNull.Value)
                {
                    aItem.Patient.CurrentHealthInsurance.ValidDateFrom = (DateTime)aReader["ValidDateFrom"];
                }
                if (aReader.HasColumn("ValidDateTo") && aReader["ValidDateTo"] != DBNull.Value)
                {
                    aItem.Patient.CurrentHealthInsurance.ValidDateTo = (DateTime)aReader["ValidDateTo"];
                }
                if (aReader.HasColumn("InPtRegRefIssuerLoc") && aReader["InPtRegRefIssuerLoc"] != DBNull.Value)
                {
                    aItem.PaperReferal = new PaperReferal();
                    aItem.PaperReferal.IssuerLocation = aReader["IssuerLocation"].ToString();
                }
            }
            catch
            {
            }
            if (aReader.HasColumn("HICardNo"))
            {
                aItem.HiCardNo = aReader["HICardNo"] as string;
            }
            if (aReader.HasColumn("DeptLocationNameResponse") && aReader["DeptLocationNameResponse"] != DBNull.Value)
            {
                aItem.DeptLocationName = aReader["DeptLocationNameResponse"].ToString();
            }
            if (aReader.HasColumn("DiagDeptLocationName") && aReader["DiagDeptLocationName"] != DBNull.Value)
            {
                aItem.DiagDeptLocationName = aReader["DiagDeptLocationName"].ToString();
            }
            if (aReader.HasColumn("HIComment") && aReader["HIComment"] != DBNull.Value)
            {
                aItem.HIComment = aReader["HIComment"].ToString();
            }
            if (aReader.HasColumn("RegisType") && aReader["RegisType"] != DBNull.Value)
            {
                aItem.RegisType = Convert.ToInt32(aReader["RegisType"]);
            }
            if (aReader.HasColumn("AppointmentID") && aReader["AppointmentID"] != DBNull.Value)
            {
                aItem.AppointmentID = Convert.ToInt64(aReader["AppointmentID"]);
            }
            if (aReader.HasColumn("InDeptLocation") && aReader["InDeptLocation"] != DBNull.Value)
            {
                aItem.InDeptLocation = aReader["InDeptLocation"].ToString();
            }
            //KMx: Ngày nhập viện, dùng để chọn từ ngày mặc định khi in mẫu 02 (25/01/2015 15:35).
            if (aReader.HasColumn("AdmissionDate") && aReader["AdmissionDate"] != DBNull.Value)
            {
                aItem.AdmissionDate = (DateTime)aReader["AdmissionDate"];
            }
            if (aReader.HasColumn("IsChildUnder6YearsOld") && aReader["IsChildUnder6YearsOld"] != DBNull.Value)
            {
                aItem.IsChildUnder6YearsOld = Convert.ToBoolean(aReader["IsChildUnder6YearsOld"]);
            }
            if (aReader.HasColumn("IsAllowCrossRegion") && aReader["IsAllowCrossRegion"] != DBNull.Value)
            {
                aItem.IsAllowCrossRegion = Convert.ToBoolean(aReader["IsAllowCrossRegion"]);
            }
            if (aReader.HasColumn("AdmDeptID") && aReader["AdmDeptID"] != DBNull.Value)
            {
                aItem.AdmDeptID = Convert.ToInt32(aReader["AdmDeptID"]);
            }
            if (aReader.HasColumn("HIReportID") && aReader["HIReportID"] != DBNull.Value)
            {
                aItem.HIReportID = Convert.ToInt32(aReader["HIReportID"]);
                aItem.RegLockFlag = 1;
            }
            if (aReader.HasColumn("IsHICard_FiveYearsCont_NoPaid") && aReader["IsHICard_FiveYearsCont_NoPaid"] != DBNull.Value)
            {
                aItem.IsHICard_FiveYearsCont_NoPaid = Convert.ToBoolean(aReader["IsHICard_FiveYearsCont_NoPaid"]);
            }
            if (aReader.HasColumn("Applied02Version1") && aReader["Applied02Version1"] != DBNull.Value)
            {
                aItem.Applied02Version1 = Convert.ToInt16(aReader["Applied02Version1"]);
            }
            if (aReader.HasColumn("TransferForm") && aReader["TransferForm"] != DBNull.Value)
            {
                aItem.TransferForm = (long)aReader["TransferForm"];
            }
            if (aReader.HasColumn("TransferNum") && aReader["TransferNum"] != DBNull.Value)
            {
                aItem.TransferNum = aReader["TransferNum"].ToString();
            }
            if (aReader.HasColumn("HisID_2") && aReader["HisID_2"] != DBNull.Value)
            {
                aItem.HisID_2 = (long)aReader["HisID_2"];
            }
            if (aReader.HasColumn("PtInsuranceBenefit_2") && aReader["PtInsuranceBenefit_2"] != DBNull.Value)
            {
                aItem.PtInsuranceBenefit_2 = Convert.ToDouble(aReader["PtInsuranceBenefit_2"]);
            }
            if (aReader.HasColumn("HisID_3") && aReader["HisID_3"] != DBNull.Value)
            {
                aItem.HisID_3 = (long)aReader["HisID_3"];
            }
            if (aReader.HasColumn("PtInsuranceBenefit_3") && aReader["PtInsuranceBenefit_3"] != DBNull.Value)
            {
                aItem.PtInsuranceBenefit_3 = Convert.ToDouble(aReader["PtInsuranceBenefit_3"]);
            }
            if (aReader.HasColumn("FiveYearsAppliedDate") && aReader["FiveYearsAppliedDate"] != DBNull.Value)
            {
                aItem.FiveYearsAppliedDate = Convert.ToDateTime(aReader["FiveYearsAppliedDate"]);
            }
            if (aReader.HasColumn("FiveYearsARowDate") && aReader["FiveYearsARowDate"] != DBNull.Value)
            {
                aItem.FiveYearsARowDate = Convert.ToDateTime(aReader["FiveYearsARowDate"]);
            }
            if (aReader.HasColumn("PaperReferralID_2") && aReader["PaperReferralID_2"] != DBNull.Value)
            {
                aItem.PaperReferralID_2 = aReader["PaperReferralID_2"] as long?;
            }
            if (aReader.HasColumn("PaperReferralID_3") && aReader["PaperReferralID_3"] != DBNull.Value)
            {
                aItem.PaperReferralID_3 = aReader["PaperReferralID_3"] as long?;
            }
            if (aReader.HasColumn("IsHIUnder15Percent") && aReader["IsHIUnder15Percent"] != DBNull.Value)
            {
                aItem.IsHIUnder15Percent = Convert.ToBoolean(aReader["IsHIUnder15Percent"]);
            }
            if (aReader.HasColumn("BNTKSauXV") && aReader["BNTKSauXV"] != DBNull.Value)
            {
                aItem.BNTKSauXV = Convert.ToBoolean(aReader["BNTKSauXV"]);
            }
            if (aReader.HasColumn("DTItemID") && aReader["DTItemID"] != DBNull.Value)
            {
                aItem.DiagnosisTreatment = new DiagnosisTreatment();
                aItem.DiagnosisTreatment.FillData(aReader);
            }
            if (aReader.HasColumn("ReportAppliedCode") && aReader["ReportAppliedCode"] != DBNull.Value)
            {
                aItem.ReportAppliedCode = aReader["ReportAppliedCode"].ToString();
            }
            if (aReader.HasColumn("V_ReportStatus") && aReader["V_ReportStatus"] != DBNull.Value)
            {
                aItem.V_ReportStatus = new Lookup { LookupID = (long)aReader["V_ReportStatus"], ObjectName = "V_ReportStatus" };
                if (aReader.HasColumn("ReportStatus") && aReader["ReportStatus"] != DBNull.Value)
                {
                    aItem.V_ReportStatus.ObjectValue = aReader["ReportStatus"].ToString();
                }
            }
            if (aReader.HasColumn("ConfirmHIStaffID") && aReader["ConfirmHIStaffID"] != DBNull.Value)
            {
                aItem.ConfirmHIStaffID = (long)aReader["ConfirmHIStaffID"];
            }
            if (aReader.HasColumn("BasicDiagTreatment") && aReader["BasicDiagTreatment"] != DBNull.Value)
            {
                aItem.BasicDiagTreatment = aReader["BasicDiagTreatment"].ToString();
            }
            if (aReader.HasColumn("ConfirmStaffFullName") && aReader["ConfirmStaffFullName"] != DBNull.Value)
            {
                aItem.ConfirmStaffFullName = aReader["ConfirmStaffFullName"].ToString();
            }
            if (aReader.HasColumn("TotalAmount") && aReader["TotalAmount"] != DBNull.Value)
            {
                aItem.TotalAmount = Convert.ToDecimal(aReader["TotalAmount"]);
            }
            if (aReader.HasColumn("TotalHIRebate") && aReader["TotalHIRebate"] != DBNull.Value)
            {
                aItem.TotalHIRebate = Convert.ToDecimal(aReader["TotalHIRebate"]);
            }
            if (aReader.HasColumn("TotalAmountCoPay") && aReader["TotalAmountCoPay"] != DBNull.Value)
            {
                aItem.TotalAmountCoPay = Convert.ToDecimal(aReader["TotalAmountCoPay"]);
            }
            if (aReader.HasColumn("ReportedDate") && aReader["ReportedDate"] != DBNull.Value)
            {
                aItem.ReportedDate = Convert.ToDateTime(aReader["ReportedDate"]);
            }
            if (aReader.HasColumn("PtRegDetailID") && aReader["PtRegDetailID"] != DBNull.Value)
            {
                PatientRegistrationDetail mDetails = new PatientRegistrationDetail();
                mDetails.PtRegDetailID = (long)aReader["PtRegDetailID"];
                if (aReader.HasColumn("MedServiceID") && aReader["MedServiceID"] != DBNull.Value)
                {
                    mDetails.MedServiceID = (long)aReader["MedServiceID"];
                }
                if (aReader.HasColumn("MedServiceName") && aReader["MedServiceName"] != DBNull.Value)
                {
                    mDetails.MedServiceName = aReader["MedServiceName"].ToString();
                }
                if (aReader.HasColumn("V_ExamRegStatus") && aReader["V_ExamRegStatus"] != DBNull.Value)
                {
                    mDetails.V_ExamRegStatus = (long)aReader["V_ExamRegStatus"];
                }
                aItem.PatientRegistrationDetails = new ObservableCollection<PatientRegistrationDetail>() { mDetails };
            }
            if (aReader.HasColumn("InPtRegistrationID") && aReader["InPtRegistrationID"] != DBNull.Value)
            {
                aItem.InPtRegistrationID = aReader["InPtRegistrationID"] as long?;
            }
            if (aReader.HasColumn("TranFinalizationID") && aReader["TranFinalizationID"] != DBNull.Value)
            {
                aItem.TranFinalizationID = (long)aReader["TranFinalizationID"];
                aItem.PtTranFinalization = new OutPtTransactionFinalization();
                aItem.PtTranFinalization.FillData(aReader);
            }
            //▼===== #062
            if (aReader.HasColumn("AdmissionICD10Code") && aReader["AdmissionICD10Code"] != DBNull.Value)
            {
                aItem.AdmissionICD10 = new DiseasesReference();
                aItem.AdmissionICD10.ICD10Code = aReader["AdmissionICD10Code"].ToString();
                if (aReader.HasColumn("BasicDiagTreatment") && aReader["BasicDiagTreatment"] != DBNull.Value)
                {
                    aItem.AdmissionICD10.DiseaseNameVN = aReader["BasicDiagTreatment"].ToString();
                }
            }
            if (aReader.HasColumn("OutHosDiagStaffFullName") && aReader["OutHosDiagStaffFullName"] != DBNull.Value)
            {
                aItem.OutHosDiagStaff = new Staff();
                aItem.OutHosDiagStaff.FullName = aReader["OutHosDiagStaffFullName"].ToString();
            }
            //▲===== #062
            //▼===== #124
            if (aReader.HasColumn("IsAdmission") && aReader["IsAdmission"] != DBNull.Value)
            {
                aItem.IsAdmission = Convert.ToBoolean(aReader["IsAdmission"]);
                if (aItem.IsAdmission)
                {
                    aItem.RegLockFlag = 1;
                }
            }
            //▲===== #124

            if (aReader.HasColumn("DTDTReportID") && aReader["DTDTReportID"] != DBNull.Value)
            {
                aItem.DTDTReportID = (long)aReader["DTDTReportID"];
            }
        }
        public static void FillData(this DQGReport aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("DQGReportID") && aReader["DQGReportID"] != DBNull.Value)
            {
                aItem.DQGReportID = (long)aReader["DQGReportID"];
            }
            if (aReader.HasColumn("Title") && aReader["Title"] != DBNull.Value)
            {
                aItem.Title = Convert.ToString(aReader["Title"]);
            }
            if (aReader.HasColumn("FromDate") && aReader["FromDate"] != DBNull.Value)
            {
                aItem.FromDate = Convert.ToDateTime(aReader["FromDate"]);
            }
            if (aReader.HasColumn("ToDate") && aReader["ToDate"] != DBNull.Value)
            {
                aItem.ToDate = Convert.ToDateTime(aReader["ToDate"]);
            }
            if (aReader.HasColumn("CreatedStaffID") && aReader["CreatedStaffID"] != DBNull.Value)
            {
                aItem.CreatedStaff = new Staff { StaffID = (long)aReader["CreatedStaffID"] };
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
            if (aReader.HasColumn("IsTransferCompleted") && aReader["IsTransferCompleted"] != DBNull.Value)
            {
                aItem.IsTransferCompleted = Convert.ToBoolean(aReader["IsTransferCompleted"]);
            }
        }
        public static void FillData(this DQG_phieu_nhap aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("DQGReportID") && aReader["DQGReportID"] != DBNull.Value)
            {
                aItem.DQGReportID = (long)aReader["DQGReportID"];
            }
            if (aReader.HasColumn("id_phieu_nhap") && aReader["id_phieu_nhap"] != DBNull.Value)
            {
                aItem.id_phieu_nhap = (long)aReader["id_phieu_nhap"];
            }
            if (aReader.HasColumn("ma_phieu_nhap") && aReader["ma_phieu_nhap"] != DBNull.Value)
            {
                aItem.ma_phieu_nhap = Convert.ToString(aReader["ma_phieu_nhap"]);
            }
            if (aReader.HasColumn("ma_co_so") && aReader["ma_co_so"] != DBNull.Value)
            {
                aItem.ma_co_so = Convert.ToString(aReader["ma_co_so"]);
            }
            if (aReader.HasColumn("ngay_nhap") && aReader["ngay_nhap"] != DBNull.Value)
            {
                aItem.ngay_nhap = Convert.ToString(aReader["ngay_nhap"]);
            }
            if (aReader.HasColumn("loai_phieu_nhap") && aReader["loai_phieu_nhap"] != DBNull.Value)
            {
                aItem.loai_phieu_nhap = Convert.ToByte(aReader["loai_phieu_nhap"]);
            }
            if (aReader.HasColumn("ghi_chu") && aReader["ghi_chu"] != DBNull.Value)
            {
                aItem.ghi_chu = Convert.ToString(aReader["ghi_chu"]);
            }
            if (aReader.HasColumn("ten_co_so_cung_cap") && aReader["ten_co_so_cung_cap"] != DBNull.Value)
            {
                aItem.ten_co_so_cung_cap = Convert.ToString(aReader["ten_co_so_cung_cap"]);
            }
            if (aReader.HasColumn("ma_phieu_nhap_quoc_gia") && aReader["ma_phieu_nhap_quoc_gia"] != DBNull.Value)
            {
                aItem.ma_phieu_nhap_quoc_gia = Convert.ToString(aReader["ma_phieu_nhap_quoc_gia"]);
            }
            if (aReader.HasColumn("inviID") && aReader["inviID"] != DBNull.Value)
            {
                aItem.inviID = (long)aReader["inviID"];
            }
            if (aReader.HasColumn("outiID") && aReader["outiID"] != DBNull.Value)
            {
                aItem.outiID = (long)aReader["outiID"];
            }
        }
        public static void FillData(this DQG_phieu_nhap_chi_tiet aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("id_phieu_nhap_chi_tiet") && aReader["id_phieu_nhap_chi_tiet"] != DBNull.Value)
            {
                aItem.id_phieu_nhap_chi_tiet = (long)aReader["id_phieu_nhap_chi_tiet"];
            }
            if (aReader.HasColumn("id_phieu_nhap") && aReader["id_phieu_nhap"] != DBNull.Value)
            {
                aItem.id_phieu_nhap = (long)aReader["id_phieu_nhap"];
            }
            if (aReader.HasColumn("ma_thuoc") && aReader["ma_thuoc"] != DBNull.Value)
            {
                aItem.ma_thuoc = Convert.ToString(aReader["ma_thuoc"]);
            }
            if (aReader.HasColumn("ten_thuoc") && aReader["ten_thuoc"] != DBNull.Value)
            {
                aItem.ten_thuoc = Convert.ToString(aReader["ten_thuoc"]);
            }
            if (aReader.HasColumn("so_lo") && aReader["so_lo"] != DBNull.Value)
            {
                aItem.so_lo = Convert.ToString(aReader["so_lo"]);
            }
            if (aReader.HasColumn("ngay_san_xuat") && aReader["ngay_san_xuat"] != DBNull.Value)
            {
                aItem.ngay_san_xuat = Convert.ToString(aReader["ngay_san_xuat"]);
            }
            if (aReader.HasColumn("han_dung") && aReader["han_dung"] != DBNull.Value)
            {
                aItem.han_dung = Convert.ToString(aReader["han_dung"]);
            }
            if (aReader.HasColumn("so_dklh") && aReader["so_dklh"] != DBNull.Value)
            {
                aItem.so_dklh = Convert.ToString(aReader["so_dklh"]);
            }
            if (aReader.HasColumn("so_luong") && aReader["so_luong"] != DBNull.Value)
            {
                aItem.so_luong = Convert.ToInt32(aReader["so_luong"]);
            }
            if (aReader.HasColumn("don_gia") && aReader["don_gia"] != DBNull.Value)
            {
                aItem.don_gia = Convert.ToDecimal(aReader["don_gia"]);
            }
            if (aReader.HasColumn("don_vi_tinh") && aReader["don_vi_tinh"] != DBNull.Value)
            {
                aItem.don_vi_tinh = Convert.ToString(aReader["don_vi_tinh"]);
            }
        }
        public static void FillData(this DQG_don_thuoc aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("DQGReportID") && aReader["DQGReportID"] != DBNull.Value)
            {
                aItem.DQGReportID = (long)aReader["DQGReportID"];
            }
            if (aReader.HasColumn("id_don_thuoc") && aReader["id_don_thuoc"] != DBNull.Value)
            {
                aItem.id_don_thuoc = (long)aReader["id_don_thuoc"];
            }
            if (aReader.HasColumn("ma_don_thuoc_co_so_kcb") && aReader["ma_don_thuoc_co_so_kcb"] != DBNull.Value)
            {
                aItem.ma_don_thuoc_co_so_kcb = Convert.ToString(aReader["ma_don_thuoc_co_so_kcb"]);
            }
            if (aReader.HasColumn("ma_co_so") && aReader["ma_co_so"] != DBNull.Value)
            {
                aItem.ma_co_so = Convert.ToString(aReader["ma_co_so"]);
            }
            if (aReader.HasColumn("ten_co_so") && aReader["ten_co_so"] != DBNull.Value)
            {
                aItem.ten_co_so = Convert.ToString(aReader["ten_co_so"]);
            }
            if (aReader.HasColumn("ma_benh_nhan") && aReader["ma_benh_nhan"] != DBNull.Value)
            {
                aItem.ma_benh_nhan = Convert.ToString(aReader["ma_benh_nhan"]);
            }
            if (aReader.HasColumn("ho_ten") && aReader["ho_ten"] != DBNull.Value)
            {
                aItem.ho_ten = Convert.ToString(aReader["ho_ten"]);
            }
            if (aReader.HasColumn("tuoi") && aReader["tuoi"] != DBNull.Value)
            {
                aItem.tuoi = Convert.ToInt16(aReader["tuoi"]);
            }
            if (aReader.HasColumn("gioi_tinh") && aReader["gioi_tinh"] != DBNull.Value)
            {
                aItem.gioi_tinh = Convert.ToByte(aReader["gioi_tinh"]);
            }
            if (aReader.HasColumn("dia_chi") && aReader["dia_chi"] != DBNull.Value)
            {
                aItem.dia_chi = Convert.ToString(aReader["dia_chi"]);
            }
            if (aReader.HasColumn("ma_benh") && aReader["ma_benh"] != DBNull.Value)
            {
                aItem.ma_benh = Convert.ToString(aReader["ma_benh"]);
            }
            if (aReader.HasColumn("ten_benh") && aReader["ten_benh"] != DBNull.Value)
            {
                aItem.ten_benh = Convert.ToString(aReader["ten_benh"]);
            }
            if (aReader.HasColumn("ngay_ke_don") && aReader["ngay_ke_don"] != DBNull.Value)
            {
                aItem.ngay_ke_don = Convert.ToString(aReader["ngay_ke_don"]);
            }
            if (aReader.HasColumn("ma_don_thuoc_quoc_gia") && aReader["ma_don_thuoc_quoc_gia"] != DBNull.Value)
            {
                aItem.ma_don_thuoc_quoc_gia = Convert.ToString(aReader["ma_don_thuoc_quoc_gia"]);
            }
            if (aReader.HasColumn("IssueID") && aReader["IssueID"] != DBNull.Value)
            {
                aItem.IssueID = (long)aReader["IssueID"];
            }
            if (aReader.HasColumn("nguoi_ke_don") && aReader["nguoi_ke_don"] != DBNull.Value)
            {
                aItem.nguoi_ke_don = Convert.ToString(aReader["nguoi_ke_don"]);
            }
            //▼====: #164
            if (aReader.HasColumn("dia_chi_co_so") && aReader["dia_chi_co_so"] != DBNull.Value)
            {
                aItem.dia_chi_co_so = Convert.ToString(aReader["dia_chi_co_so"]);
            }
            if (aReader.HasColumn("so_dien_thoai_co_so") && aReader["so_dien_thoai_co_so"] != DBNull.Value)
            {
                aItem.so_dien_thoai_co_so = Convert.ToString(aReader["so_dien_thoai_co_so"]);
            }
            if (aReader.HasColumn("ma_hoa_don") && aReader["ma_hoa_don"] != DBNull.Value)
            {
                aItem.ma_hoa_don = Convert.ToString(aReader["ma_hoa_don"]);
            }
            //▲====: #164
        }
        public static void FillData(this DQG_don_thuoc_chi_tiet aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("id_don_thuoc_chi_tiet") && aReader["id_don_thuoc_chi_tiet"] != DBNull.Value)
            {
                aItem.id_don_thuoc_chi_tiet = (long)aReader["id_don_thuoc_chi_tiet"];
            }
            if (aReader.HasColumn("id_don_thuoc") && aReader["id_don_thuoc"] != DBNull.Value)
            {
                aItem.id_don_thuoc = (long)aReader["id_don_thuoc"];
            }
            if (aReader.HasColumn("ma_thuoc") && aReader["ma_thuoc"] != DBNull.Value)
            {
                aItem.ma_thuoc = Convert.ToString(aReader["ma_thuoc"]);
            }
            if (aReader.HasColumn("ten_thuoc") && aReader["ten_thuoc"] != DBNull.Value)
            {
                aItem.ten_thuoc = Convert.ToString(aReader["ten_thuoc"]);
            }
            if (aReader.HasColumn("don_vi_tinh") && aReader["don_vi_tinh"] != DBNull.Value)
            {
                aItem.don_vi_tinh = Convert.ToString(aReader["don_vi_tinh"]);
            }
            if (aReader.HasColumn("ham_luong") && aReader["ham_luong"] != DBNull.Value)
            {
                aItem.ham_luong = Convert.ToString(aReader["ham_luong"]);
            }
            if (aReader.HasColumn("duong_dung") && aReader["duong_dung"] != DBNull.Value)
            {
                aItem.duong_dung = Convert.ToString(aReader["duong_dung"]);
            }
            if (aReader.HasColumn("lieu_dung") && aReader["lieu_dung"] != DBNull.Value)
            {
                aItem.lieu_dung = Convert.ToString(aReader["lieu_dung"]);
            }
            if (aReader.HasColumn("so_dang_ky") && aReader["so_dang_ky"] != DBNull.Value)
            {
                aItem.so_dang_ky = Convert.ToString(aReader["so_dang_ky"]);
            }
            if (aReader.HasColumn("so_luong") && aReader["so_luong"] != DBNull.Value)
            {
                aItem.so_luong = Convert.ToInt32(aReader["so_luong"]);
            }
            //▼====: #164
            if (aReader.HasColumn("so_luong_ban") && aReader["so_luong_ban"] != DBNull.Value)
            {
                aItem.so_luong_ban = Convert.ToInt32(aReader["so_luong_ban"]);
            }
            if (aReader.HasColumn("ma_thuoc_da_ke_don") && aReader["ma_thuoc_da_ke_don"] != DBNull.Value)
            {
                aItem.ma_thuoc_da_ke_don = Convert.ToString(aReader["ma_thuoc_da_ke_don"]);
            }
            if (aReader.HasColumn("biet_duoc") && aReader["biet_duoc"] != DBNull.Value)
            {
                aItem.biet_duoc = Convert.ToString(aReader["biet_duoc"]);
            }
            if (aReader.HasColumn("cach_dung") && aReader["cach_dung"] != DBNull.Value)
            {
                aItem.cach_dung = Convert.ToString(aReader["cach_dung"]);
            }
            //▲====: #164
        }
        public static void FillData(this DQG_hoa_don aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("DQGReportID") && aReader["DQGReportID"] != DBNull.Value)
            {
                aItem.DQGReportID = (long)aReader["DQGReportID"];
            }
            if (aReader.HasColumn("id_hoa_don") && aReader["id_hoa_don"] != DBNull.Value)
            {
                aItem.id_hoa_don = (long)aReader["id_hoa_don"];
            }
            if (aReader.HasColumn("ma_hoa_don") && aReader["ma_hoa_don"] != DBNull.Value)
            {
                aItem.ma_hoa_don = Convert.ToString(aReader["ma_hoa_don"]);
            }
            if (aReader.HasColumn("ma_co_so") && aReader["ma_co_so"] != DBNull.Value)
            {
                aItem.ma_co_so = Convert.ToString(aReader["ma_co_so"]);
            }
            if (aReader.HasColumn("ma_don_thuoc_quoc_gia") && aReader["ma_don_thuoc_quoc_gia"] != DBNull.Value)
            {
                aItem.ma_don_thuoc_quoc_gia = Convert.ToString(aReader["ma_don_thuoc_quoc_gia"]);
            }
            if (aReader.HasColumn("ngay_ban") && aReader["ngay_ban"] != DBNull.Value)
            {
                aItem.ngay_ban = Convert.ToString(aReader["ngay_ban"]);
            }
            if (aReader.HasColumn("ho_ten_nguoi_ban") && aReader["ho_ten_nguoi_ban"] != DBNull.Value)
            {
                aItem.ho_ten_nguoi_ban = Convert.ToString(aReader["ho_ten_nguoi_ban"]);
            }
            if (aReader.HasColumn("ho_ten_khach_hang") && aReader["ho_ten_khach_hang"] != DBNull.Value)
            {
                aItem.ho_ten_khach_hang = Convert.ToString(aReader["ho_ten_khach_hang"]);
            }
            if (aReader.HasColumn("ma_hoa_don_quoc_gia") && aReader["ma_hoa_don_quoc_gia"] != DBNull.Value)
            {
                aItem.ma_hoa_don_quoc_gia = Convert.ToString(aReader["ma_hoa_don_quoc_gia"]);
            }
            if (aReader.HasColumn("outiID") && aReader["outiID"] != DBNull.Value)
            {
                aItem.outiID = (long)aReader["outiID"];
            }
            if (aReader.HasColumn("IssueID") && aReader["IssueID"] != DBNull.Value)
            {
                aItem.IssueID = (long)aReader["IssueID"];
            }
        }
        public static void FillData(this DQG_hoa_don_chi_tiet aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("id_hoa_don_chi_tiet") && aReader["id_hoa_don_chi_tiet"] != DBNull.Value)
            {
                aItem.id_hoa_don_chi_tiet = (long)aReader["id_hoa_don_chi_tiet"];
            }
            if (aReader.HasColumn("id_hoa_don") && aReader["id_hoa_don"] != DBNull.Value)
            {
                aItem.id_hoa_don = (long)aReader["id_hoa_don"];
            }
            if (aReader.HasColumn("ma_thuoc") && aReader["ma_thuoc"] != DBNull.Value)
            {
                aItem.ma_thuoc = Convert.ToString(aReader["ma_thuoc"]);
            }
            if (aReader.HasColumn("ten_thuoc") && aReader["ten_thuoc"] != DBNull.Value)
            {
                aItem.ten_thuoc = Convert.ToString(aReader["ten_thuoc"]);
            }
            if (aReader.HasColumn("so_lo") && aReader["so_lo"] != DBNull.Value)
            {
                aItem.so_lo = Convert.ToString(aReader["so_lo"]);
            }
            if (aReader.HasColumn("ngay_san_xuat") && aReader["ngay_san_xuat"] != DBNull.Value)
            {
                aItem.ngay_san_xuat = Convert.ToString(aReader["ngay_san_xuat"]);
            }
            if (aReader.HasColumn("han_dung") && aReader["han_dung"] != DBNull.Value)
            {
                aItem.han_dung = Convert.ToString(aReader["han_dung"]);
            }
            if (aReader.HasColumn("don_vi_tinh") && aReader["don_vi_tinh"] != DBNull.Value)
            {
                aItem.don_vi_tinh = Convert.ToString(aReader["don_vi_tinh"]);
            }
            if (aReader.HasColumn("ham_luong") && aReader["ham_luong"] != DBNull.Value)
            {
                aItem.ham_luong = Convert.ToString(aReader["ham_luong"]);
            }
            if (aReader.HasColumn("duong_dung") && aReader["duong_dung"] != DBNull.Value)
            {
                aItem.duong_dung = Convert.ToString(aReader["duong_dung"]);
            }
            if (aReader.HasColumn("lieu_dung") && aReader["lieu_dung"] != DBNull.Value)
            {
                aItem.lieu_dung = Convert.ToString(aReader["lieu_dung"]);
            }
            if (aReader.HasColumn("so_dang_ky") && aReader["so_dang_ky"] != DBNull.Value)
            {
                aItem.so_dang_ky = Convert.ToString(aReader["so_dang_ky"]);
            }
            if (aReader.HasColumn("so_luong") && aReader["so_luong"] != DBNull.Value)
            {
                aItem.so_luong = Convert.ToInt32(aReader["so_luong"]);
            }
            if (aReader.HasColumn("don_gia") && aReader["don_gia"] != DBNull.Value)
            {
                aItem.don_gia = Convert.ToDecimal(aReader["don_gia"]);
            }
            if (aReader.HasColumn("thanh_tien") && aReader["thanh_tien"] != DBNull.Value)
            {
                aItem.thanh_tien = Convert.ToDecimal(aReader["thanh_tien"]);
            }
            if (aReader.HasColumn("ty_le_quy_doi") && aReader["ty_le_quy_doi"] != DBNull.Value)
            {
                aItem.ty_le_quy_doi = Convert.ToInt32(aReader["ty_le_quy_doi"]);
            }
        }
        public static void FillData(this DQG_phieu_xuat aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("DQGReportID") && aReader["DQGReportID"] != DBNull.Value)
            {
                aItem.DQGReportID = (long)aReader["DQGReportID"];
            }
            if (aReader.HasColumn("id_phieu_xuat") && aReader["id_phieu_xuat"] != DBNull.Value)
            {
                aItem.id_phieu_xuat = (long)aReader["id_phieu_xuat"];
            }
            if (aReader.HasColumn("ma_phieu_xuat") && aReader["ma_phieu_xuat"] != DBNull.Value)
            {
                aItem.ma_phieu_xuat = Convert.ToString(aReader["ma_phieu_xuat"]);
            }
            if (aReader.HasColumn("ma_co_so") && aReader["ma_co_so"] != DBNull.Value)
            {
                aItem.ma_co_so = Convert.ToString(aReader["ma_co_so"]);
            }
            if (aReader.HasColumn("ngay_xuat") && aReader["ngay_xuat"] != DBNull.Value)
            {
                aItem.ngay_xuat = Convert.ToString(aReader["ngay_xuat"]);
            }
            if (aReader.HasColumn("loai_phieu_xuat") && aReader["loai_phieu_xuat"] != DBNull.Value)
            {
                aItem.loai_phieu_xuat = Convert.ToByte(aReader["loai_phieu_xuat"]);
            }
            if (aReader.HasColumn("ghi_chu") && aReader["ghi_chu"] != DBNull.Value)
            {
                aItem.ghi_chu = Convert.ToString(aReader["ghi_chu"]);
            }
            if (aReader.HasColumn("ten_co_so_nhan") && aReader["ten_co_so_nhan"] != DBNull.Value)
            {
                aItem.ten_co_so_nhan = Convert.ToString(aReader["ten_co_so_nhan"]);
            }
            if (aReader.HasColumn("ma_phieu_xuat_quoc_gia") && aReader["ma_phieu_xuat_quoc_gia"] != DBNull.Value)
            {
                aItem.ma_phieu_xuat_quoc_gia = Convert.ToString(aReader["ma_phieu_xuat_quoc_gia"]);
            }
            if (aReader.HasColumn("outiID") && aReader["outiID"] != DBNull.Value)
            {
                aItem.outiID = (long)aReader["outiID"];
            }
        }
        public static void FillData(this DQG_phieu_xuat_chi_tiet aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("id_phieu_xuat_chi_tiet") && aReader["id_phieu_xuat_chi_tiet"] != DBNull.Value)
            {
                aItem.id_phieu_xuat_chi_tiet = (long)aReader["id_phieu_xuat_chi_tiet"];
            }
            if (aReader.HasColumn("id_phieu_xuat") && aReader["id_phieu_xuat"] != DBNull.Value)
            {
                aItem.id_phieu_xuat = (long)aReader["id_phieu_xuat"];
            }
            if (aReader.HasColumn("ma_thuoc") && aReader["ma_thuoc"] != DBNull.Value)
            {
                aItem.ma_thuoc = Convert.ToString(aReader["ma_thuoc"]);
            }
            if (aReader.HasColumn("ten_thuoc") && aReader["ten_thuoc"] != DBNull.Value)
            {
                aItem.ten_thuoc = Convert.ToString(aReader["ten_thuoc"]);
            }
            if (aReader.HasColumn("so_lo") && aReader["so_lo"] != DBNull.Value)
            {
                aItem.so_lo = Convert.ToString(aReader["so_lo"]);
            }
            if (aReader.HasColumn("ngay_san_xuat") && aReader["ngay_san_xuat"] != DBNull.Value)
            {
                aItem.ngay_san_xuat = Convert.ToString(aReader["ngay_san_xuat"]);
            }
            if (aReader.HasColumn("han_dung") && aReader["han_dung"] != DBNull.Value)
            {
                aItem.han_dung = Convert.ToString(aReader["han_dung"]);
            }
            if (aReader.HasColumn("so_dklh") && aReader["so_dklh"] != DBNull.Value)
            {
                aItem.so_dklh = Convert.ToString(aReader["so_dklh"]);
            }
            if (aReader.HasColumn("so_luong") && aReader["so_luong"] != DBNull.Value)
            {
                aItem.so_luong = Convert.ToInt32(aReader["so_luong"]);
            }
            if (aReader.HasColumn("don_gia") && aReader["don_gia"] != DBNull.Value)
            {
                aItem.don_gia = Convert.ToDecimal(aReader["don_gia"]);
            }
            if (aReader.HasColumn("don_vi_tinh") && aReader["don_vi_tinh"] != DBNull.Value)
            {
                aItem.don_vi_tinh = Convert.ToString(aReader["don_vi_tinh"]);
            }
        }
        public static void FillData(this HospitalClient aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("HosClientID") && aReader["HosClientID"] != DBNull.Value)
            {
                aItem.HosClientID = (long)aReader["HosClientID"];
            }
            if (aReader.HasColumn("HosClientCode") && aReader["HosClientCode"] != DBNull.Value)
            {
                aItem.HosClientCode = Convert.ToString(aReader["HosClientCode"]);
            }
            if (aReader.HasColumn("ClientName") && aReader["ClientName"] != DBNull.Value)
            {
                aItem.ClientName = Convert.ToString(aReader["ClientName"]);
            }
            if (aReader.HasColumn("CompanyName") && aReader["CompanyName"] != DBNull.Value)
            {
                aItem.CompanyName = Convert.ToString(aReader["CompanyName"]);
            }
            if (aReader.HasColumn("TaxNumber") && aReader["TaxNumber"] != DBNull.Value)
            {
                aItem.TaxNumber = Convert.ToString(aReader["TaxNumber"]);
            }
            if (aReader.HasColumn("Address") && aReader["Address"] != DBNull.Value)
            {
                aItem.Address = Convert.ToString(aReader["Address"]);
            }
            if (aReader.HasColumn("CityStateZipCode") && aReader["CityStateZipCode"] != DBNull.Value)
            {
                aItem.CityStateZipCode = Convert.ToString(aReader["CityStateZipCode"]);
            }
            if (aReader.HasColumn("ContactPerson") && aReader["ContactPerson"] != DBNull.Value)
            {
                aItem.ContactPerson = Convert.ToString(aReader["ContactPerson"]);
            }
            if (aReader.HasColumn("TelephoneNumber") && aReader["TelephoneNumber"] != DBNull.Value)
            {
                aItem.TelephoneNumber = Convert.ToString(aReader["TelephoneNumber"]);
            }
            if (aReader.HasColumn("FaxNumber") && aReader["FaxNumber"] != DBNull.Value)
            {
                aItem.FaxNumber = Convert.ToString(aReader["FaxNumber"]);
            }
            if (aReader.HasColumn("EmailAddress") && aReader["EmailAddress"] != DBNull.Value)
            {
                aItem.EmailAddress = Convert.ToString(aReader["EmailAddress"]);
            }
            if (aReader.HasColumn("WebSite") && aReader["WebSite"] != DBNull.Value)
            {
                aItem.WebSite = Convert.ToString(aReader["WebSite"]);
            }
            if (aReader.HasColumn("ClientDescription") && aReader["ClientDescription"] != DBNull.Value)
            {
                aItem.ClientDescription = Convert.ToString(aReader["ClientDescription"]);
            }
            if (aReader.HasColumn("IsActive") && aReader["IsActive"] != DBNull.Value)
            {
                aItem.IsActive = Convert.ToBoolean(aReader["IsActive"]);
            }
            if (aReader.HasColumn("V_HosClientType") && aReader["V_HosClientType"] != DBNull.Value)
            {
                aItem.V_HosClientType = (long)aReader["V_HosClientType"];
                if (aReader.HasColumn("HosClientType") && aReader["HosClientType"] != DBNull.Value)
                {
                    aItem.HosClientType = new Lookup
                    {
                        LookupID = aItem.V_HosClientType,
                        ObjectName = "V_HosClientType",
                        ObjectValue = Convert.ToString(aReader["HosClientType"])
                    };
                }
            }
            if (aReader.HasColumn("AccountNumber") && aReader["AccountNumber"] != DBNull.Value)
            {
                aItem.AccountNumber = Convert.ToString(aReader["AccountNumber"]);
            }
            if (aReader.HasColumn("BankName") && aReader["BankName"] != DBNull.Value)
            {
                aItem.BankName = Convert.ToString(aReader["BankName"]);
            }
            if (aReader.HasColumn("BranchName") && aReader["BranchName"] != DBNull.Value)
            {
                aItem.BranchName = Convert.ToString(aReader["BranchName"]);
            }
        }
        public static void FillData(this HospitalClientContract aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("HosClientContractID") && aReader["HosClientContractID"] != DBNull.Value)
            {
                aItem.HosClientContractID = (long)aReader["HosClientContractID"];
            }
            if (aReader.HasColumn("HosClientID") && aReader["HosClientID"] != DBNull.Value)
            {
                aItem.HosClient = new HospitalClient { HosClientID = (long)aReader["HosClientID"] };
                aItem.HosClient.FillData(aReader);
            }
            if (aReader.HasColumn("ContractName") && aReader["ContractName"] != DBNull.Value)
            {
                aItem.ContractName = Convert.ToString(aReader["ContractName"]);
            }
            if (aReader.HasColumn("ContractNo") && aReader["ContractNo"] != DBNull.Value)
            {
                aItem.ContractNo = Convert.ToString(aReader["ContractNo"]);
            }
            if (aReader.HasColumn("ContractDate") && aReader["ContractDate"] != DBNull.Value)
            {
                aItem.ContractDate = Convert.ToDateTime(aReader["ContractDate"]);
            }
            if (aReader.HasColumn("ContractDescription") && aReader["ContractDescription"] != DBNull.Value)
            {
                aItem.ContractDescription = Convert.ToString(aReader["ContractDescription"]);
            }
            if (aReader.HasColumn("ValidDateFrom") && aReader["ValidDateFrom"] != DBNull.Value)
            {
                aItem.ValidDateFrom = Convert.ToDateTime(aReader["ValidDateFrom"]);
            }
            if (aReader.HasColumn("ValidDateTo") && aReader["ValidDateTo"] != DBNull.Value)
            {
                aItem.ValidDateTo = Convert.ToDateTime(aReader["ValidDateTo"]);
            }
            if (aReader.HasColumn("ActivationDate") && aReader["ActivationDate"] != DBNull.Value)
            {
                aItem.ActivationDate = Convert.ToDateTime(aReader["ActivationDate"]);
            }
            if (aReader.HasColumn("CreatedByStaffID") && aReader["CreatedByStaffID"] != DBNull.Value)
            {
                aItem.CreatedStaff = new Staff { StaffID = (long)aReader["CreatedByStaffID"] };
            }
            if (aReader.HasColumn("ModifiedStaffID") && aReader["ModifiedStaffID"] != DBNull.Value)
            {
                aItem.ModifiedStaff = new Staff { StaffID = (long)aReader["ModifiedStaffID"] };
            }
            if (aReader.HasColumn("RefDocID") && aReader["RefDocID"] != DBNull.Value)
            {
                aItem.ContractDocument = new RefDocument { RefDocID = (long)aReader["RefDocID"] };
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
            if (aReader.HasColumn("IsPayAddingMoreSvs") && aReader["IsPayAddingMoreSvs"] != DBNull.Value)
            {
                aItem.IsPayAddingMoreSvs = Convert.ToBoolean(aReader["IsPayAddingMoreSvs"]);
            }
            if (aReader.HasColumn("CompletedDate") && aReader["CompletedDate"] != DBNull.Value)
            {
                aItem.CompletedDate = Convert.ToDateTime(aReader["CompletedDate"]);
            }
            if (aReader.HasColumn("FinalizedDate") && aReader["FinalizedDate"] != DBNull.Value)
            {
                aItem.FinalizedDate = Convert.ToDateTime(aReader["FinalizedDate"]);
            }
            if (aReader.HasColumn("TotalContractAmount") && aReader["TotalContractAmount"] != DBNull.Value)
            {
                aItem.TotalContractAmount = Convert.ToDecimal(aReader["TotalContractAmount"]);
            }
            if (aReader.HasColumn("DiscountPercent") && aReader["DiscountPercent"] != DBNull.Value)
            {
                aItem.DiscountPercent = Convert.ToByte(aReader["DiscountPercent"]);
            }
        }
        public static void FillData(this HosClientContractPatient aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("HosContractPtID") && aReader["HosContractPtID"] != DBNull.Value)
            {
                aItem.HosContractPtID = (long)aReader["HosContractPtID"];
            }
            if (aReader.HasColumn("HosClientContractID") && aReader["HosClientContractID"] != DBNull.Value)
            {
                aItem.HosClientContractID = (long)aReader["HosClientContractID"];
            }
            if (aReader.HasColumn("PatientID") && aReader["PatientID"] != DBNull.Value)
            {
                aItem.PatientObj = new Patient { PatientID = (long)aReader["PatientID"] };
                if (aReader.HasColumn("PatientFullName") && aReader["PatientFullName"] != DBNull.Value)
                {
                    aItem.PatientObj.FullName = Convert.ToString(aReader["PatientFullName"]);
                }
                if (aReader.HasColumn("PatientCode") && aReader["PatientCode"] != DBNull.Value)
                {
                    aItem.PatientObj.PatientCode = Convert.ToString(aReader["PatientCode"]);
                }
                if (aReader.HasColumn("Gender") && aReader["Gender"] != DBNull.Value)
                {
                    aItem.PatientObj.Gender = Convert.ToString(aReader["Gender"]);
                }
                if (aReader.HasColumn("Age") && aReader["Age"] != DBNull.Value)
                {
                    aItem.PatientObj.Age = Convert.ToInt32(aReader["Age"]);
                }
            }
            if (aReader.HasColumn("ClientClassification") && aReader["ClientClassification"] != DBNull.Value)
            {
                aItem.ClientClassification = Convert.ToString(aReader["ClientClassification"]);
            }
            if (aReader.HasColumn("ClientGroup") && aReader["ClientGroup"] != DBNull.Value)
            {
                aItem.ClientGroup = Convert.ToString(aReader["ClientGroup"]);
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
            if (aReader.HasColumn("IsDeleted") && aReader["IsDeleted"] != DBNull.Value)
            {
                aItem.IsDeleted = Convert.ToBoolean(aReader["IsDeleted"]);
            }
            if (aReader.HasColumn("IsScheduled") && aReader["IsScheduled"] != DBNull.Value)
            {
                aItem.IsScheduled = Convert.ToBoolean(aReader["IsScheduled"]);
            }
            if (aReader.HasColumn("TotalContractPaidAmount") && aReader["TotalContractPaidAmount"] != DBNull.Value)
            {
                aItem.TotalContractPaidAmount = Convert.ToDecimal(aReader["TotalContractPaidAmount"]);
            }
            if (aReader.HasColumn("HosClientContractPatientGroupID") && aReader["HosClientContractPatientGroupID"] != DBNull.Value)
            {
                string PatientGroupName = string.Empty;
                if (aReader.HasColumn("HosClientContractPatientGroupName") && aReader["HosClientContractPatientGroupName"] != DBNull.Value)
                {
                    PatientGroupName = Convert.ToString(aReader["HosClientContractPatientGroupName"]);
                }
                aItem.PatientGroupCollection = new List<HosClientContractPatientGroup> { new HosClientContractPatientGroup { HosClientContractPatientGroupID = (long)aReader["HosClientContractPatientGroupID"], HosClientContractPatientGroupName = PatientGroupName } };
            }
            if (aReader.HasColumn("IsProcessed") && aReader["IsProcessed"] != DBNull.Value)
            {
                aItem.IsProcessed = Convert.ToBoolean(aReader["IsProcessed"]);
            }
            if (aReader.HasColumn("PtRegistrationID") && aReader["PtRegistrationID"] != DBNull.Value)
            {
                aItem.PtRegistrationID = Convert.ToInt64(aReader["PtRegistrationID"]);
            }
        }
        public static void FillData(this ClientContractServiceItem aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("ClientContractSvcID") && aReader["ClientContractSvcID"] != DBNull.Value)
            {
                aItem.ClientContractSvcID = (long)aReader["ClientContractSvcID"];
            }
            if (aReader.HasColumn("HosClientContractID") && aReader["HosClientContractID"] != DBNull.Value)
            {
                aItem.HosClientContractID = (long)aReader["HosClientContractID"];
            }
            if (aReader.HasColumn("MedServiceID") && aReader["MedServiceID"] != DBNull.Value)
            {
                aItem.MedRegItem = new PatientRegistrationDetail { MedServiceID = (long)aReader["MedServiceID"] };
                (aItem.MedRegItem as PatientRegistrationDetail).RefMedicalServiceItem = new RefMedicalServiceItem();
                if (aReader.HasColumn("MedServiceCode") && aReader["MedServiceCode"] != DBNull.Value)
                {
                    (aItem.MedRegItem as PatientRegistrationDetail).RefMedicalServiceItem.MedServiceCode = Convert.ToString(aReader["MedServiceCode"]);
                }
                if (aReader.HasColumn("MedServiceName") && aReader["MedServiceName"] != DBNull.Value)
                {
                    (aItem.MedRegItem as PatientRegistrationDetail).RefMedicalServiceItem.MedServiceName = Convert.ToString(aReader["MedServiceName"]);
                }
            }
            if (aReader.HasColumn("PCLExamTypeID") && aReader["PCLExamTypeID"] != DBNull.Value)
            {
                aItem.MedRegItem = new PatientPCLRequestDetail { PCLExamTypeID = (long)aReader["PCLExamTypeID"] };
                (aItem.MedRegItem as PatientPCLRequestDetail).PCLExamType = new PCLExamType();
                if (aReader.HasColumn("MedServiceCode") && aReader["MedServiceCode"] != DBNull.Value)
                {
                    (aItem.MedRegItem as PatientPCLRequestDetail).PCLExamType.PCLExamTypeCode = Convert.ToString(aReader["MedServiceCode"]);
                }
                if (aReader.HasColumn("MedServiceName") && aReader["MedServiceName"] != DBNull.Value)
                {
                    (aItem.MedRegItem as PatientPCLRequestDetail).PCLExamType.PCLExamTypeName = Convert.ToString(aReader["MedServiceName"]);
                }
            }
            if (aReader.HasColumn("UnitPrice") && aReader["UnitPrice"] != DBNull.Value)
            {
                aItem.MedRegItem.InvoicePrice = Convert.ToDecimal(aReader["UnitPrice"]);
            }
            if (aReader.HasColumn("Qty") && aReader["Qty"] != DBNull.Value)
            {
                aItem.MedRegItem.Qty = Convert.ToInt32(aReader["Qty"]);
            }
            if (aReader.HasColumn("TotalAmount") && aReader["TotalAmount"] != DBNull.Value)
            {
                aItem.MedRegItem.TotalInvoicePrice = Convert.ToDecimal(aReader["TotalAmount"]);
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
            if (aReader.HasColumn("IsDeleted") && aReader["IsDeleted"] != DBNull.Value)
            {
                aItem.IsDeleted = Convert.ToBoolean(aReader["IsDeleted"]);
            }
            if (aReader.HasColumn("NormalPrice") && aReader["NormalPrice"] != DBNull.Value && aItem.MedRegItem.ChargeableItem != null)
            {
                aItem.MedRegItem.ChargeableItem.NormalPrice = Convert.ToDecimal(aReader["NormalPrice"]);
            }
            if (aReader.HasColumn("IsProcessed") && aReader["IsProcessed"] != DBNull.Value)
            {
                aItem.IsProcessed = Convert.ToBoolean(aReader["IsProcessed"]);
            }
        }
        public static void FillData(this ClientContractServiceItemPatientLink aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("ClientContractSvcPtID") && aReader["ClientContractSvcPtID"] != DBNull.Value)
            {
                aItem.ClientContractSvcPtID = (long)aReader["ClientContractSvcPtID"];
            }
            if (aReader.HasColumn("ClientContractSvcID") && aReader["ClientContractSvcID"] != DBNull.Value)
            {
                aItem.ContractMedRegItem = new ClientContractServiceItem { ClientContractSvcID = (long)aReader["ClientContractSvcID"] };
            }
            if (aReader.HasColumn("HosContractPtID") && aReader["HosContractPtID"] != DBNull.Value)
            {
                aItem.ContractPatient = new HosClientContractPatient { HosContractPtID = (long)aReader["HosContractPtID"] };
            }
            if (aReader.HasColumn("RecordCreatedDate") && aReader["RecordCreatedDate"] != DBNull.Value)
            {
                aItem.RecordCreatedDate = Convert.ToDateTime(aReader["RecordCreatedDate"]);
            }
            if (aReader.HasColumn("IsDeleted") && aReader["IsDeleted"] != DBNull.Value)
            {
                aItem.IsDeleted = Convert.ToBoolean(aReader["IsDeleted"]);
            }
        }
        public static void FillData(this HosClientContractFinalization aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("ClientContractFinalizationID") && aReader["ClientContractFinalizationID"] != DBNull.Value)
            {
                aItem.ClientContractFinalizationID = (long)aReader["ClientContractFinalizationID"];
            }
            if (aReader.HasColumn("HosClientContractID") && aReader["HosClientContractID"] != DBNull.Value)
            {
                aItem.HosClientContractID = (long)aReader["HosClientContractID"];
            }
            if (aReader.HasColumn("FinalizedReceiptNum") && aReader["FinalizedReceiptNum"] != DBNull.Value)
            {
                aItem.FinalizedReceiptNum = Convert.ToString(aReader["FinalizedReceiptNum"]);
            }
            if (aReader.HasColumn("DateFinalize") && aReader["DateFinalize"] != DBNull.Value)
            {
                aItem.DateFinalize = Convert.ToDateTime(aReader["DateFinalize"]);
            }
            if (aReader.HasColumn("Amount") && aReader["Amount"] != DBNull.Value)
            {
                aItem.Amount = Convert.ToDecimal(aReader["Amount"]);
            }
            if (aReader.HasColumn("StaffID") && aReader["StaffID"] != DBNull.Value)
            {
                aItem.Staff = new Staff { StaffID = Convert.ToInt64(aReader["StaffID"]) };
                if (aReader.HasColumn("StaffFullName") && aReader["StaffFullName"] != DBNull.Value)
                {
                    aItem.Staff.FullName = Convert.ToString(aReader["StaffFullName"]);
                }
            }
        }
        public static void FillData(this MedicalExaminationResult aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("MedicalExaminationResultID") && aReader["MedicalExaminationResultID"] != DBNull.Value)
            {
                aItem.MedicalExaminationResultID = (long)aReader["MedicalExaminationResultID"];
            }
            if (aReader.HasColumn("PtRegDetailID") && aReader["PtRegDetailID"] != DBNull.Value)
            {
                aItem.PtRegDetailID = (long)aReader["PtRegDetailID"];
            }
            if (aReader.HasColumn("PtRegistrationID") && aReader["PtRegistrationID"] != DBNull.Value)
            {
                aItem.PtRegistrationID = (long)aReader["PtRegistrationID"];
            }
            if (aReader.HasColumn("MedicalExaminationHistory") && aReader["MedicalExaminationHistory"] != DBNull.Value)
            {
                aItem.MedicalExaminationHistory = Convert.ToString(aReader["MedicalExaminationHistory"]);
            }
            if (aReader.HasColumn("CirculationTestResult") && aReader["CirculationTestResult"] != DBNull.Value)
            {
                aItem.CirculationTestResult = Convert.ToString(aReader["CirculationTestResult"]);
            }
            if (aReader.HasColumn("Circulation_V_HealthClass") && aReader["Circulation_V_HealthClass"] != DBNull.Value)
            {
                aItem.Circulation_V_HealthClass = Convert.ToInt64(aReader["Circulation_V_HealthClass"]);
            }
            if (aReader.HasColumn("RespiratoryTestResult") && aReader["RespiratoryTestResult"] != DBNull.Value)
            {
                aItem.RespiratoryTestResult = Convert.ToString(aReader["RespiratoryTestResult"]);
            }
            if (aReader.HasColumn("Respiratory_V_HealthClass") && aReader["Respiratory_V_HealthClass"] != DBNull.Value)
            {
                aItem.Respiratory_V_HealthClass = Convert.ToInt64(aReader["Respiratory_V_HealthClass"]);
            }
            if (aReader.HasColumn("DigestionTestResult") && aReader["DigestionTestResult"] != DBNull.Value)
            {
                aItem.DigestionTestResult = Convert.ToString(aReader["DigestionTestResult"]);
            }
            if (aReader.HasColumn("Digestion_V_HealthClass") && aReader["Digestion_V_HealthClass"] != DBNull.Value)
            {
                aItem.Digestion_V_HealthClass = Convert.ToInt64(aReader["Digestion_V_HealthClass"]);
            }
            if (aReader.HasColumn("UrologyTestResult") && aReader["UrologyTestResult"] != DBNull.Value)
            {
                aItem.UrologyTestResult = Convert.ToString(aReader["UrologyTestResult"]);
            }
            if (aReader.HasColumn("Urology_V_HealthClass") && aReader["Urology_V_HealthClass"] != DBNull.Value)
            {
                aItem.Urology_V_HealthClass = Convert.ToInt64(aReader["Urology_V_HealthClass"]);
            }
            if (aReader.HasColumn("EndocrineTestResult") && aReader["EndocrineTestResult"] != DBNull.Value)
            {
                aItem.EndocrineTestResult = Convert.ToString(aReader["EndocrineTestResult"]);
            }
            if (aReader.HasColumn("Endocrine_V_HealthClass") && aReader["Endocrine_V_HealthClass"] != DBNull.Value)
            {
                aItem.Endocrine_V_HealthClass = Convert.ToInt64(aReader["Endocrine_V_HealthClass"]);
            }
            if (aReader.HasColumn("OrthopaedicsTestResult") && aReader["OrthopaedicsTestResult"] != DBNull.Value)
            {
                aItem.OrthopaedicsTestResult = Convert.ToString(aReader["OrthopaedicsTestResult"]);
            }
            if (aReader.HasColumn("Orthopaedics_V_HealthClass") && aReader["Orthopaedics_V_HealthClass"] != DBNull.Value)
            {
                aItem.Orthopaedics_V_HealthClass = Convert.ToInt64(aReader["Orthopaedics_V_HealthClass"]);
            }
            if (aReader.HasColumn("NeurologyTestResult") && aReader["NeurologyTestResult"] != DBNull.Value)
            {
                aItem.NeurologyTestResult = Convert.ToString(aReader["NeurologyTestResult"]);
            }
            if (aReader.HasColumn("Neurology_V_HealthClass") && aReader["Neurology_V_HealthClass"] != DBNull.Value)
            {
                aItem.Neurology_V_HealthClass = Convert.ToInt64(aReader["Neurology_V_HealthClass"]);
            }
            if (aReader.HasColumn("NeuropsychiatricTestResult") && aReader["NeuropsychiatricTestResult"] != DBNull.Value)
            {
                aItem.NeuropsychiatricTestResult = Convert.ToString(aReader["NeuropsychiatricTestResult"]);
            }
            if (aReader.HasColumn("Neuropsychiatric_V_HealthClass") && aReader["Neuropsychiatric_V_HealthClass"] != DBNull.Value)
            {
                aItem.Neuropsychiatric_V_HealthClass = Convert.ToInt64(aReader["Neuropsychiatric_V_HealthClass"]);
            }
            if (aReader.HasColumn("GeneralSugeryTestResult") && aReader["GeneralSugeryTestResult"] != DBNull.Value)
            {
                aItem.GeneralSugeryTestResult = Convert.ToString(aReader["GeneralSugeryTestResult"]);
            }
            if (aReader.HasColumn("GeneralSugery_V_HealthClass") && aReader["GeneralSugery_V_HealthClass"] != DBNull.Value)
            {
                aItem.GeneralSugery_V_HealthClass = Convert.ToInt64(aReader["GeneralSugery_V_HealthClass"]);
            }
            if (aReader.HasColumn("LeftOptometryTestResult") && aReader["LeftOptometryTestResult"] != DBNull.Value)
            {
                aItem.LeftOptometryTestResult = Convert.ToString(aReader["LeftOptometryTestResult"]);
            }
            if (aReader.HasColumn("RightOptometryTestResult") && aReader["RightOptometryTestResult"] != DBNull.Value)
            {
                aItem.RightOptometryTestResult = Convert.ToString(aReader["RightOptometryTestResult"]);
            }
            if (aReader.HasColumn("LeftSightedOptometryTestResult") && aReader["LeftSightedOptometryTestResult"] != DBNull.Value)
            {
                aItem.LeftSightedOptometryTestResult = Convert.ToString(aReader["LeftSightedOptometryTestResult"]);
            }
            if (aReader.HasColumn("RightSightedOptometryTestResult") && aReader["RightSightedOptometryTestResult"] != DBNull.Value)
            {
                aItem.RightSightedOptometryTestResult = Convert.ToString(aReader["RightSightedOptometryTestResult"]);
            }
            if (aReader.HasColumn("OptometryDecreases") && aReader["OptometryDecreases"] != DBNull.Value)
            {
                aItem.OptometryDecreases = Convert.ToString(aReader["OptometryDecreases"]);
            }
            if (aReader.HasColumn("Optometry_V_HealthClass") && aReader["Optometry_V_HealthClass"] != DBNull.Value)
            {
                aItem.Optometry_V_HealthClass = Convert.ToInt64(aReader["Optometry_V_HealthClass"]);
            }
            if (aReader.HasColumn("LeftHearingTestResult") && aReader["LeftHearingTestResult"] != DBNull.Value)
            {
                aItem.LeftHearingTestResult = Convert.ToString(aReader["LeftHearingTestResult"]);
            }
            if (aReader.HasColumn("RightHearingTestResult") && aReader["RightHearingTestResult"] != DBNull.Value)
            {
                aItem.RightHearingTestResult = Convert.ToString(aReader["RightHearingTestResult"]);
            }
            if (aReader.HasColumn("LeftSilentlyHearingTestResult") && aReader["LeftSilentlyHearingTestResult"] != DBNull.Value)
            {
                aItem.LeftSilentlyHearingTestResult = Convert.ToString(aReader["LeftSilentlyHearingTestResult"]);
            }
            if (aReader.HasColumn("RightSilentlyHearingTestResult") && aReader["RightSilentlyHearingTestResult"] != DBNull.Value)
            {
                aItem.RightSilentlyHearingTestResult = Convert.ToString(aReader["RightSilentlyHearingTestResult"]);
            }
            if (aReader.HasColumn("EarAndThroatDecreases") && aReader["EarAndThroatDecreases"] != DBNull.Value)
            {
                aItem.EarAndThroatDecreases = Convert.ToString(aReader["EarAndThroatDecreases"]);
            }
            if (aReader.HasColumn("EarAndThroatDecreases_V_HealthClass") && aReader["EarAndThroatDecreases_V_HealthClass"] != DBNull.Value)
            {
                aItem.EarAndThroatDecreases_V_HealthClass = Convert.ToInt64(aReader["EarAndThroatDecreases_V_HealthClass"]);
            }
            if (aReader.HasColumn("UpperJawTestResult") && aReader["UpperJawTestResult"] != DBNull.Value)
            {
                aItem.UpperJawTestResult = Convert.ToString(aReader["UpperJawTestResult"]);
            }
            if (aReader.HasColumn("LowerJawTestResult") && aReader["LowerJawTestResult"] != DBNull.Value)
            {
                aItem.LowerJawTestResult = Convert.ToString(aReader["LowerJawTestResult"]);
            }
            if (aReader.HasColumn("DentalAndJawDecreases") && aReader["DentalAndJawDecreases"] != DBNull.Value)
            {
                aItem.DentalAndJawDecreases = Convert.ToString(aReader["DentalAndJawDecreases"]);
            }
            if (aReader.HasColumn("DentalAndJaw_V_HealthClass") && aReader["DentalAndJaw_V_HealthClass"] != DBNull.Value)
            {
                aItem.DentalAndJaw_V_HealthClass = Convert.ToInt64(aReader["DentalAndJaw_V_HealthClass"]);
            }
            if (aReader.HasColumn("DermatologyTestResult") && aReader["DermatologyTestResult"] != DBNull.Value)
            {
                aItem.DermatologyTestResult = Convert.ToString(aReader["DermatologyTestResult"]);
            }
            if (aReader.HasColumn("Dermatology_V_HealthClass") && aReader["Dermatology_V_HealthClass"] != DBNull.Value)
            {
                aItem.Dermatology_V_HealthClass = Convert.ToInt64(aReader["Dermatology_V_HealthClass"]);
            }
            if (aReader.HasColumn("InternalMedicalResultStaffID") && aReader["InternalMedicalResultStaffID"] != DBNull.Value)
            {
                aItem.InternalMedicalResultStaff = new Staff { StaffID = Convert.ToInt64(aReader["InternalMedicalResultStaffID"]) };
                if (aReader.HasColumn("InternalMedicalResultStaffFullName") && aReader["InternalMedicalResultStaffFullName"] != DBNull.Value)
                {
                    aItem.InternalMedicalResultStaff.FullName = Convert.ToString(aReader["InternalMedicalResultStaffFullName"]);
                }
            }
            if (aReader.HasColumn("GeneralSugeryResultStaffID") && aReader["GeneralSugeryResultStaffID"] != DBNull.Value)
            {
                aItem.GeneralSugeryResultStaff = new Staff { StaffID = Convert.ToInt64(aReader["GeneralSugeryResultStaffID"]) };
                if (aReader.HasColumn("GeneralSugeryResultStaffFullName") && aReader["GeneralSugeryResultStaffFullName"] != DBNull.Value)
                {
                    aItem.GeneralSugeryResultStaff.FullName = Convert.ToString(aReader["GeneralSugeryResultStaffFullName"]);
                }
            }
            if (aReader.HasColumn("OptometryResultStaffID") && aReader["OptometryResultStaffID"] != DBNull.Value)
            {
                aItem.OptometryResultStaff = new Staff { StaffID = Convert.ToInt64(aReader["OptometryResultStaffID"]) };
                if (aReader.HasColumn("OptometryResultStaffFullName") && aReader["OptometryResultStaffFullName"] != DBNull.Value)
                {
                    aItem.OptometryResultStaff.FullName = Convert.ToString(aReader["OptometryResultStaffFullName"]);
                }
            }
            if (aReader.HasColumn("EarAndThroatResultStaffID") && aReader["EarAndThroatResultStaffID"] != DBNull.Value)
            {
                aItem.EarAndThroatResultStaff = new Staff { StaffID = Convert.ToInt64(aReader["EarAndThroatResultStaffID"]) };
                if (aReader.HasColumn("EarAndThroatResultStaffFullName") && aReader["EarAndThroatResultStaffFullName"] != DBNull.Value)
                {
                    aItem.EarAndThroatResultStaff.FullName = Convert.ToString(aReader["EarAndThroatResultStaffFullName"]);
                }
            }
            if (aReader.HasColumn("DentalAndJawResultStaffID") && aReader["DentalAndJawResultStaffID"] != DBNull.Value)
            {
                aItem.DentalAndJawResultStaff = new Staff { StaffID = Convert.ToInt64(aReader["DentalAndJawResultStaffID"]) };
                if (aReader.HasColumn("DentalAndJawResultStaffFullName") && aReader["DentalAndJawResultStaffFullName"] != DBNull.Value)
                {
                    aItem.DentalAndJawResultStaff.FullName = Convert.ToString(aReader["DentalAndJawResultStaffFullName"]);
                }
            }
            if (aReader.HasColumn("DermatologyResultStaffID") && aReader["DermatologyResultStaffID"] != DBNull.Value)
            {
                aItem.DermatologyResultStaff = new Staff { StaffID = Convert.ToInt64(aReader["DermatologyResultStaffID"]) };
                if (aReader.HasColumn("DermatologyResultStaffFullName") && aReader["DermatologyResultStaffFullName"] != DBNull.Value)
                {
                    aItem.DermatologyResultStaff.FullName = Convert.ToString(aReader["DermatologyResultStaffFullName"]);
                }
            }

            // 20200717 TNHX: Thêm khám sản
            if (aReader.HasColumn("ObstetricTestResultStaffID") && aReader["ObstetricTestResultStaffID"] != DBNull.Value)
            {
                aItem.ObstetricResultStaff = new Staff { StaffID = Convert.ToInt64(aReader["ObstetricTestResultStaffID"]) };
                if (aReader.HasColumn("ObstetricResultStaffFullName") && aReader["ObstetricResultStaffFullName"] != DBNull.Value)
                {
                    aItem.ObstetricResultStaff.FullName = Convert.ToString(aReader["ObstetricResultStaffFullName"]);
                }
            }
            if (aReader.HasColumn("Obstetric_V_HealthClass") && aReader["Obstetric_V_HealthClass"] != DBNull.Value)
            {
                aItem.Obstetric_V_HealthClass = Convert.ToInt64(aReader["Obstetric_V_HealthClass"]);
            }
            if (aReader.HasColumn("ObstetricTestResult") && aReader["ObstetricTestResult"] != DBNull.Value)
            {
                aItem.ObstetricTestResult = Convert.ToString(aReader["ObstetricTestResult"]);
            }

            //▼==== #121
            if (aReader.HasColumn("HealthClassification") && aReader["HealthClassification"] != DBNull.Value)
            {
                aItem.HealthClassification = Convert.ToInt32(aReader["HealthClassification"]);
            }
            if (aReader.HasColumn("Diseases") && aReader["Diseases"] != DBNull.Value)
            {
                aItem.Diseases = Convert.ToString(aReader["Diseases"]);
            }
            if (aReader.HasColumn("Record") && aReader["Record"] != DBNull.Value)
            {
                aItem.Record = Convert.ToString(aReader["Record"]);
            }
            if (aReader.HasColumn("CurrentHealth") && aReader["CurrentHealth"] != DBNull.Value)
            {
                aItem.CurrentHealth = Convert.ToString(aReader["CurrentHealth"]);
            }
            if (aReader.HasColumn("HealthCheckUpDate") && aReader["HealthCheckUpDate"] != DBNull.Value)
            {
                aItem.HealthCheckUpDate = Convert.ToDateTime(aReader["HealthCheckUpDate"]);
            }
            if (aReader.HasColumn("ExpiryDateHealthCertificate") && aReader["ExpiryDateHealthCertificate"] != DBNull.Value)
            {
                aItem.ExpiryDateHealthCertificate = Convert.ToDateTime(aReader["ExpiryDateHealthCertificate"]);
            }
            //▲==== #121
        }
        public static void FillData(this TreatmentHistory aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("AdmissionDate") && aReader["AdmissionDate"] != DBNull.Value)
            {
                aItem.AdmissionDate = Convert.ToDateTime(aReader["AdmissionDate"]);
            }
            if (aReader.HasColumn("DischargeDate") && aReader["DischargeDate"] != DBNull.Value)
            {
                aItem.DischargeDate = Convert.ToDateTime(aReader["DischargeDate"]);
            }
            if (aReader.HasColumn("MedServiceName") && aReader["MedServiceName"] != DBNull.Value)
            {
                aItem.MedServiceName = Convert.ToString(aReader["MedServiceName"]);
            }
            if (aReader.HasColumn("InPt") && aReader["InPt"] != DBNull.Value)
            {
                aItem.InPt = Convert.ToBoolean(aReader["InPt"]);
            }
            if (aReader.HasColumn("V_PCLMainCategory") && aReader["V_PCLMainCategory"] != DBNull.Value)
            {
                aItem.V_PCLMainCategory = Convert.ToInt64(aReader["V_PCLMainCategory"]);
            }
            if (aReader.HasColumn("GroupText") && aReader["GroupText"] != DBNull.Value)
            {
                aItem.GroupText = Convert.ToString(aReader["GroupText"]);
            }
            if (aReader.HasColumn("Ordinal") && aReader["Ordinal"] != DBNull.Value)
            {
                aItem.Ordinal = Convert.ToInt32(aReader["Ordinal"]);
            }
            if (aReader.HasColumn("PrescriptID") && aReader["PrescriptID"] != DBNull.Value)
            {
                aItem.PrescriptID = Convert.ToInt64(aReader["PrescriptID"]);
            }
            if (aReader.HasColumn("DTItemID") && aReader["DTItemID"] != DBNull.Value)
            {
                aItem.DTItemID = Convert.ToInt64(aReader["DTItemID"]);
            }
            if (aReader.HasColumn("PatientPCLReqID") && aReader["PatientPCLReqID"] != DBNull.Value)
            {
                aItem.PatientPCLReqID = Convert.ToInt64(aReader["PatientPCLReqID"]);
            }
            if (aReader.HasColumn("PCLExamTypeID") && aReader["PCLExamTypeID"] != DBNull.Value)
            {
                aItem.PCLExamTypeID = Convert.ToInt64(aReader["PCLExamTypeID"]);
            }
            if (aReader.HasColumn("PtRegistrationID") && aReader["PtRegistrationID"] != DBNull.Value)
            {
                aItem.PtRegistrationID = Convert.ToInt64(aReader["PtRegistrationID"]);
            }
            if (aReader.HasColumn("ServiceRecID") && aReader["ServiceRecID"] != DBNull.Value)
            {
                aItem.ServiceRecID = Convert.ToInt64(aReader["ServiceRecID"]);
            }
            if (aReader.HasColumn("SmallProcedureID") && aReader["SmallProcedureID"] != DBNull.Value)
            {
                aItem.SmallProcedureID = Convert.ToInt64(aReader["SmallProcedureID"]);
            }
            if (aReader.HasColumn("OutPtTreatmentProgramID") && aReader["OutPtTreatmentProgramID"] != DBNull.Value)
            {
                aItem.OutPtTreatmentProgramID = Convert.ToInt64(aReader["OutPtTreatmentProgramID"]);
            }
            if (aReader.HasColumn("IsWarning") && aReader["IsWarning"] != DBNull.Value)
            {
                aItem.IsWarning = Convert.ToBoolean(aReader["IsWarning"]);
            }
            if (aReader.HasColumn("DiagConsultationSummaryID") && aReader["DiagConsultationSummaryID"] != DBNull.Value)
            {
                aItem.DiagConsultationSummaryID = Convert.ToInt64(aReader["DiagConsultationSummaryID"]);
            }
            if (aReader.HasColumn("HL7FillerOrderNumber") && aReader["HL7FillerOrderNumber"] != DBNull.Value)
            {
                aItem.HL7FillerOrderNumber = aReader["HL7FillerOrderNumber"].ToString();
            }
        }
        public static void FillData(this InfectionVirus aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("InfectionVirusID") && aReader["InfectionVirusID"] != DBNull.Value)
            {
                aItem.InfectionVirusID = (long)aReader["InfectionVirusID"];
            }
            if (aReader.HasColumn("InfectionVirusName") && aReader["InfectionVirusName"] != DBNull.Value)
            {
                aItem.InfectionVirusName = Convert.ToString(aReader["InfectionVirusName"]);
            }
            if (aReader.HasColumn("Notes") && aReader["Notes"] != DBNull.Value)
            {
                aItem.Notes = Convert.ToString(aReader["Notes"]);
            }
        }
        public static void FillData(this InfectionICD10Item aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("InfectionICD10ID") && aReader["InfectionICD10ID"] != DBNull.Value)
            {
                aItem.InfectionICD10ID = (long)aReader["InfectionICD10ID"];
            }
            if (aReader.HasColumn("InfectionICD10ListID") && aReader["InfectionICD10ListID"] != DBNull.Value)
            {
                aItem.InfectionICD10ListID = (long)aReader["InfectionICD10ListID"];
            }
            if (aReader.HasColumn("ICD10Code") && aReader["ICD10Code"] != DBNull.Value)
            {
                aItem.ICD10Code = Convert.ToString(aReader["ICD10Code"]);
            }
            if (aReader.HasColumn("ICD10Name") && aReader["ICD10Name"] != DBNull.Value)
            {
                aItem.ICD10Name = Convert.ToString(aReader["ICD10Name"]);
            }
            if (aReader.HasColumn("IsMain") && aReader["IsMain"] != DBNull.Value)
            {
                aItem.IsMain = Convert.ToBoolean(aReader["IsMain"]);
            }
        }
        public static void FillData(this InfectionCase aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("InfectionCaseID") && aReader["InfectionCaseID"] != DBNull.Value)
            {
                aItem.InfectionCaseID = (long)aReader["InfectionCaseID"];
            }
            if (aReader.HasColumn("V_InfectionType") && aReader["V_InfectionType"] != DBNull.Value)
            {
                aItem.V_InfectionType = (long)aReader["V_InfectionType"];
            }
            if (aReader.HasColumn("InfectionTypeNote") && aReader["InfectionTypeNote"] != DBNull.Value)
            {
                aItem.InfectionTypeNote = Convert.ToString(aReader["InfectionTypeNote"]);
            }
            if (aReader.HasColumn("InfectedByVirusID") && aReader["InfectedByVirusID"] != DBNull.Value)
            {
                aItem.InfectedByVirusID = (long)aReader["InfectedByVirusID"];
            }
            if (aReader.HasColumn("V_BloodSmearResult") && aReader["V_BloodSmearResult"] != DBNull.Value)
            {
                aItem.V_BloodSmearResult = (long)aReader["V_BloodSmearResult"];
            }
            if (aReader.HasColumn("V_BloodSmearMethod") && aReader["V_BloodSmearMethod"] != DBNull.Value)
            {
                aItem.V_BloodSmearMethod = (long)aReader["V_BloodSmearMethod"];
            }
            if (aReader.HasColumn("StartDate") && aReader["StartDate"] != DBNull.Value)
            {
                aItem.StartDate = Convert.ToDateTime(aReader["StartDate"]);
            }
            if (aReader.HasColumn("EndDate") && aReader["EndDate"] != DBNull.Value)
            {
                aItem.EndDate = Convert.ToDateTime(aReader["EndDate"]);
            }
            if (aReader.HasColumn("Notes") && aReader["Notes"] != DBNull.Value)
            {
                aItem.Notes = Convert.ToString(aReader["Notes"]);
            }
            if (aReader.HasColumn("PtRegistrationID") && aReader["PtRegistrationID"] != DBNull.Value)
            {
                aItem.PtRegistrationID = (long)aReader["PtRegistrationID"];
            }
            if (aReader.HasColumn("PatientID") && aReader["PatientID"] != DBNull.Value)
            {
                aItem.PatientID = (long)aReader["PatientID"];
            }
            if (aReader.HasColumn("DeptID") && aReader["DeptID"] != DBNull.Value)
            {
                aItem.DeptID = (long)aReader["DeptID"];
            }
            if (aReader.HasColumn("DiagnosisFinal1") && aReader["DiagnosisFinal1"] != DBNull.Value)
            {
                aItem.DiagnosisFinal1 = Convert.ToString(aReader["DiagnosisFinal1"]);
            }
            if (aReader.HasColumn("DiagnosisFinal2") && aReader["DiagnosisFinal2"] != DBNull.Value)
            {
                aItem.DiagnosisFinal2 = Convert.ToString(aReader["DiagnosisFinal2"]);
            }
            if (aReader.HasColumn("PtRegistrationID") && aReader["PtRegistrationID"] != DBNull.Value)
            {
                aItem.CurrentRegistration = new PatientRegistration { PtRegistrationID = (long)aReader["PtRegistrationID"] };
                if (aReader.HasColumn("DeptID") && aReader["DeptID"] != DBNull.Value)
                {
                    aItem.CurrentRegistration.RefDepartment = new RefDepartment { DeptID = (long)aReader["DeptID"] };
                    if (aReader.HasColumn("DeptName") && aReader["DeptName"] != DBNull.Value)
                    {
                        aItem.CurrentRegistration.RefDepartment.DeptName = Convert.ToString(aReader["DeptName"]);
                    }
                }
                if (aReader.HasColumn("PatientID") && aReader["PatientID"] != DBNull.Value)
                {
                    aItem.CurrentRegistration.Patient = new Patient { PatientID = (long)aReader["PatientID"] };
                    if (aReader.HasColumn("PatientCode") && aReader["PatientCode"] != DBNull.Value)
                    {
                        aItem.CurrentRegistration.Patient.PatientCode = Convert.ToString(aReader["PatientCode"]);
                    }
                    if (aReader.HasColumn("PatientFullName") && aReader["PatientFullName"] != DBNull.Value)
                    {
                        aItem.CurrentRegistration.Patient.FullName = Convert.ToString(aReader["PatientFullName"]);
                    }
                }
            }
        }
        public static void FillData(this AntibioticTreatment aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("InfectionCaseID") && aReader["InfectionCaseID"] != DBNull.Value)
            {
                aItem.InfectionCaseID = (long)aReader["InfectionCaseID"];
            }
            if (aReader.HasColumn("AntibioticTreatmentID") && aReader["AntibioticTreatmentID"] != DBNull.Value)
            {
                aItem.AntibioticTreatmentID = (long)aReader["AntibioticTreatmentID"];
            }
            if (aReader.HasColumn("StartDate") && aReader["StartDate"] != DBNull.Value)
            {
                aItem.StartDate = Convert.ToDateTime(aReader["StartDate"]);
            }
            if (aReader.HasColumn("EndDate") && aReader["EndDate"] != DBNull.Value)
            {
                aItem.EndDate = Convert.ToDateTime(aReader["EndDate"]);
            }
            if (aReader.HasColumn("AntibioticTreatmentTitle") && aReader["AntibioticTreatmentTitle"] != DBNull.Value)
            {
                aItem.AntibioticTreatmentTitle = Convert.ToString(aReader["AntibioticTreatmentTitle"]);
            }
            if (aReader.HasColumn("V_AntibioticTreatmentType") && aReader["V_AntibioticTreatmentType"] != DBNull.Value)
            {
                aItem.V_AntibioticTreatmentType = Convert.ToInt64(aReader["V_AntibioticTreatmentType"]);
            }
        }
        public static void FillData(this AntibioticTreatmentMedProductDetail aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("AntibioticMedProductID") && aReader["AntibioticMedProductID"] != DBNull.Value)
            {
                aItem.AntibioticMedProductID = (long)aReader["AntibioticMedProductID"];
            }
            if (aReader.HasColumn("AntibioticTreatmentID") && aReader["AntibioticTreatmentID"] != DBNull.Value)
            {
                aItem.AntibioticTreatmentID = (long)aReader["AntibioticTreatmentID"];
            }
            if (aReader.HasColumn("Quantity") && aReader["Quantity"] != DBNull.Value)
            {
                aItem.Quantity = Convert.ToDecimal(aReader["Quantity"]);
            }
            if (aReader.HasColumn("Notes") && aReader["Notes"] != DBNull.Value)
            {
                aItem.Notes = Convert.ToString(aReader["Notes"]);
            }
            if (aReader.HasColumn("GenMedProductID") && aReader["GenMedProductID"] != DBNull.Value)
            {
                aItem.RefGenMedProductDetail = new RefGenMedProductDetails { GenMedProductID = (long)aReader["GenMedProductID"] };
                if (aReader.HasColumn("Code") && aReader["Code"] != DBNull.Value)
                {
                    aItem.RefGenMedProductDetail.Code = Convert.ToString(aReader["Code"]);
                }
                if (aReader.HasColumn("BrandName") && aReader["BrandName"] != DBNull.Value)
                {
                    aItem.RefGenMedProductDetail.BrandName = Convert.ToString(aReader["BrandName"]);
                }
            }
        }
        public static void FillData(this PositionInHospital aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("PositionHosID") && aReader["PositionHosID"] != DBNull.Value)
            {
                aItem.PositionHosID = (long)aReader["PositionHosID"];
            }
            if (aReader.HasColumn("PositionRefID") && aReader["PositionRefID"] != DBNull.Value)
            {
                aItem.PositionRefID = Convert.ToInt32(aReader["PositionRefID"]);
            }
            if (aReader.HasColumn("PositionName") && aReader["PositionName"] != DBNull.Value)
            {
                aItem.PositionName = Convert.ToString(aReader["PositionName"]);
            }
            if (aReader.HasColumn("PositionDesc") && aReader["PositionDesc"] != DBNull.Value)
            {
                aItem.PositionDesc = Convert.ToString(aReader["PositionDesc"]);
            }
        }
        public static void FillData(this HistoryAndPhysicalExaminationInfo aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("HistoryAndPhysicalExaminationInfoID") && aReader["HistoryAndPhysicalExaminationInfoID"] != DBNull.Value)
            {
                aItem.HistoryAndPhysicalExaminationInfoID = (long)aReader["HistoryAndPhysicalExaminationInfoID"];
            }
            if (aReader.HasColumn("PtRegDetailID") && aReader["PtRegDetailID"] != DBNull.Value)
            {
                aItem.PtRegDetailID = (long)aReader["PtRegDetailID"];
            }
            if (aReader.HasColumn("HistoryAndPhysicalExamination") && aReader["HistoryAndPhysicalExamination"] != DBNull.Value)
            {
                aItem.HistoryAndPhysicalExamination = Convert.ToString(aReader["HistoryAndPhysicalExamination"]);
            }
            if (aReader.HasColumn("PastMedicalHistory") && aReader["PastMedicalHistory"] != DBNull.Value)
            {
                aItem.PastMedicalHistory = Convert.ToString(aReader["PastMedicalHistory"]);
            }
            if (aReader.HasColumn("PastMedicalHistoryOfFamily") && aReader["PastMedicalHistoryOfFamily"] != DBNull.Value)
            {
                aItem.PastMedicalHistoryOfFamily = Convert.ToString(aReader["PastMedicalHistoryOfFamily"]);
            }
            if (aReader.HasColumn("PhysicalExamination") && aReader["PhysicalExamination"] != DBNull.Value)
            {
                aItem.PhysicalExamination = Convert.ToString(aReader["PhysicalExamination"]);
            }
            if (aReader.HasColumn("PhysicalExaminationAllParts") && aReader["PhysicalExaminationAllParts"] != DBNull.Value)
            {
                aItem.PhysicalExaminationAllParts = Convert.ToString(aReader["PhysicalExaminationAllParts"]);
            }
            if (aReader.HasColumn("ParaclinicalNote") && aReader["ParaclinicalNote"] != DBNull.Value)
            {
                aItem.ParaclinicalNote = Convert.ToString(aReader["ParaclinicalNote"]);
            }
            if (aReader.HasColumn("MedicalInProcessed") && aReader["MedicalInProcessed"] != DBNull.Value)
            {
                aItem.MedicalInProcessed = Convert.ToString(aReader["MedicalInProcessed"]);
            }
            if (aReader.HasColumn("LaboratoryNote") && aReader["LaboratoryNote"] != DBNull.Value)
            {
                aItem.LaboratoryNote = Convert.ToString(aReader["LaboratoryNote"]);
            }
            if (aReader.HasColumn("TreatmentMethod") && aReader["TreatmentMethod"] != DBNull.Value)
            {
                aItem.TreatmentMethod = Convert.ToString(aReader["TreatmentMethod"]);
            }
            if (aReader.HasColumn("DischargeStatus") && aReader["DischargeStatus"] != DBNull.Value)
            {
                aItem.DischargeStatus = Convert.ToString(aReader["DischargeStatus"]);
            }
            if (aReader.HasColumn("TreatmentSolution") && aReader["TreatmentSolution"] != DBNull.Value)
            {
                aItem.TreatmentSolution = Convert.ToString(aReader["TreatmentSolution"]);
            }
            if (aReader.HasColumn("StaffID") && aReader["StaffID"] != DBNull.Value)
            {
                aItem.StaffID = Convert.ToInt64(aReader["StaffID"]);
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
            if (aReader.HasColumn("SentStaffID") && aReader["SentStaffID"] != DBNull.Value)
            {
                aItem.SentStaffID = Convert.ToInt64(aReader["SentStaffID"]);
            }
            //▼====: #091
            if (aReader.HasColumn("OutPtTreatmentProgramID") && aReader["OutPtTreatmentProgramID"] != DBNull.Value)
            {
                aItem.OutPtTreatmentProgramID = (long)aReader["OutPtTreatmentProgramID"];
            }
            if (aReader.HasColumn("ReasonAdmission") && aReader["ReasonAdmission"] != DBNull.Value)
            {
                aItem.ReasonAdmission = aReader["ReasonAdmission"].ToString();
            }
            if (aReader.HasColumn("FirstDiagnostic") && aReader["FirstDiagnostic"] != DBNull.Value)
            {
                aItem.FirstDiagnostic = aReader["FirstDiagnostic"].ToString();
            }
            if (aReader.HasColumn("DischargeDiagnostic") && aReader["DischargeDiagnostic"] != DBNull.Value)
            {
                aItem.DischargeDiagnostic = aReader["DischargeDiagnostic"].ToString();
            }
            if (aReader.HasColumn("ProgDateFrom") && aReader["ProgDateFrom"] != DBNull.Value)
            {
                aItem.ProgDateFrom = Convert.ToDateTime(aReader["ProgDateFrom"]);
            }
            if (aReader.HasColumn("ProgDateTo") && aReader["ProgDateTo"] != DBNull.Value)
            {
                aItem.ProgDateTo = Convert.ToDateTime(aReader["ProgDateTo"]);
            }
            if (aReader.HasColumn("PathologicalProcessAndClinicalCourse") && aReader["PathologicalProcessAndClinicalCourse"] != DBNull.Value)
            {
                aItem.PathologicalProcessAndClinicalCourse = aReader["PathologicalProcessAndClinicalCourse"].ToString();
            }
            if (aReader.HasColumn("PCLResultsHaveDiagnosticValue") && aReader["PCLResultsHaveDiagnosticValue"] != DBNull.Value)
            {
                aItem.PCLResultsHaveDiagnosticValue = aReader["PCLResultsHaveDiagnosticValue"].ToString();
            }
            if (aReader.HasColumn("DischargeDiagnostic_MainDisease") && aReader["DischargeDiagnostic_MainDisease"] != DBNull.Value)
            {
                aItem.DischargeDiagnostic_MainDisease = aReader["DischargeDiagnostic_MainDisease"].ToString();
            }
            if (aReader.HasColumn("DischargeDiagnostic_IncludingDisease") && aReader["DischargeDiagnostic_IncludingDisease"] != DBNull.Value)
            {
                aItem.DischargeDiagnostic_IncludingDisease = aReader["DischargeDiagnostic_IncludingDisease"].ToString();
            }
            if (aReader.HasColumn("Treatments") && aReader["Treatments"] != DBNull.Value)
            {
                aItem.Treatments = aReader["Treatments"].ToString();
            }
            if (aReader.HasColumn("ConditionDischarge") && aReader["ConditionDischarge"] != DBNull.Value)
            {
                aItem.ConditionDischarge = aReader["ConditionDischarge"].ToString();
            }
            if (aReader.HasColumn("DirectionOfTreatment") && aReader["DirectionOfTreatment"] != DBNull.Value)
            {
                aItem.DirectionOfTreatment = aReader["DirectionOfTreatment"].ToString();
            }
            //▲====: #091
            if (aReader.HasColumn("V_SpecialistType") && aReader["V_SpecialistType"] != DBNull.Value)
            {
                aItem.V_SpecialistType = Convert.ToInt64(aReader["V_SpecialistType"]);
            }
            if (aReader.HasColumn("MedicalRecordNote") && aReader["MedicalRecordNote"] != DBNull.Value)
            {
                aItem.MedicalRecordNote = Convert.ToString(aReader["MedicalRecordNote"]);
            }
            if (aReader.HasColumn("DiagnosisOfOutpatientDept") && aReader["DiagnosisOfOutpatientDept"] != DBNull.Value)
            {
                aItem.DiagnosisOfOutpatientDept = Convert.ToString(aReader["DiagnosisOfOutpatientDept"]);
            }
            if (aReader.HasColumn("ProcessedByDownline") && aReader["ProcessedByDownline"] != DBNull.Value)
            {
                aItem.ProcessedByDownline = Convert.ToString(aReader["ProcessedByDownline"]);
            }
            if (aReader.HasColumn("XQuangNote") && aReader["XQuangNote"] != DBNull.Value)
            {
                aItem.XQuangNote = Convert.ToString(aReader["XQuangNote"]);
            }
            if (aReader.HasColumn("OrientedTreatment") && aReader["OrientedTreatment"] != DBNull.Value)
            {
                aItem.OrientedTreatment = Convert.ToString(aReader["OrientedTreatment"]);
            }
            if (aReader.HasColumn("PatientID") && aReader["PatientID"] != DBNull.Value)
            {
                aItem.PatientID = Convert.ToInt64(aReader["PatientID"]);
            }
            if (aReader.HasColumn("SpecialistDisease") && aReader["SpecialistDisease"] != DBNull.Value)
            {
                aItem.SpecialistDisease = Convert.ToString(aReader["SpecialistDisease"]); //<====: #118
            }
            if (aReader.HasColumn("Diagnosis") && aReader["Diagnosis"] != DBNull.Value)
            {
                aItem.Diagnosis = Convert.ToString(aReader["Diagnosis"]);
            }
            if (aReader.HasColumn("OrientedTreatment") && aReader["OrientedTreatment"] != DBNull.Value)
            {
                aItem.OrientedTreatment = Convert.ToString(aReader["OrientedTreatment"]);
            }
            //▼====: #139
            if (aReader.HasColumn("V_OutDischargeType") && aReader["V_OutDischargeType"] != DBNull.Value)
            {
                aItem.V_OutDischargeType = Convert.ToInt64(aReader["V_OutDischargeType"]);
            }
            if (aReader.HasColumn("V_OutDischargeCondition") && aReader["V_OutDischargeCondition"] != DBNull.Value)
            {
                aItem.V_OutDischargeCondition = Convert.ToInt64(aReader["V_OutDischargeCondition"]);
            }
            if (aReader.HasColumn("IsBorrowing") && aReader["IsBorrowing"] != DBNull.Value)
            {
                aItem.IsBorrowing = Convert.ToBoolean(aReader["IsBorrowing"]);
            }
            //▲====: #139
        }
        public static void FillData(this ConsultationRoomStaffAllocationServiceList aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("ConsultationRoomStaffAllocationServiceListID") && aReader["ConsultationRoomStaffAllocationServiceListID"] != DBNull.Value)
            {
                aItem.ConsultationRoomStaffAllocationServiceListID = (long)aReader["ConsultationRoomStaffAllocationServiceListID"];
            }
            if (aReader.HasColumn("ConsultationRoomStaffAllocationServiceListTitle") && aReader["ConsultationRoomStaffAllocationServiceListTitle"] != DBNull.Value)
            {
                aItem.ConsultationRoomStaffAllocationServiceListTitle = Convert.ToString(aReader["ConsultationRoomStaffAllocationServiceListTitle"]);
            }
        }
        public static void FillData(this ConsultationRoomStaffAllocationService aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("ConsultationRoomStaffAllocationServiceID") && aReader["ConsultationRoomStaffAllocationServiceID"] != DBNull.Value)
            {
                aItem.ConsultationRoomStaffAllocationServiceID = (long)aReader["ConsultationRoomStaffAllocationServiceID"];
            }
            if (aReader.HasColumn("ConsultationRoomStaffAllocationServiceListID") && aReader["ConsultationRoomStaffAllocationServiceListID"] != DBNull.Value)
            {
                aItem.ConsultationRoomStaffAllocationServiceListID = (long)aReader["ConsultationRoomStaffAllocationServiceListID"];
            }
            if (aReader.HasColumn("MedServiceID") && aReader["MedServiceID"] != DBNull.Value)
            {
                aItem.MedicalService = new RefMedicalServiceItem { MedServiceID = Convert.ToInt64(aReader["MedServiceID"]) };
                if (aReader.HasColumn("MedServiceName") && aReader["MedServiceName"] != DBNull.Value)
                {
                    aItem.MedicalService.MedServiceName = Convert.ToString(aReader["MedServiceName"]);
                }
                if (aReader.HasColumn("MedServiceCode") && aReader["MedServiceCode"] != DBNull.Value)
                {
                    aItem.MedicalService.MedServiceCode = Convert.ToString(aReader["MedServiceCode"]);
                }
            }
        }
        public static void FillData(this HosClientContractPatientGroup aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("HosClientContractPatientGroupID") && aReader["HosClientContractPatientGroupID"] != DBNull.Value)
            {
                aItem.HosClientContractPatientGroupID = (long)aReader["HosClientContractPatientGroupID"];
            }
            if (aReader.HasColumn("HosClientContractID") && aReader["HosClientContractID"] != DBNull.Value)
            {
                aItem.HosClientContractID = (long)aReader["HosClientContractID"];
            }
            if (aReader.HasColumn("HosClientContractPatientGroupName") && aReader["HosClientContractPatientGroupName"] != DBNull.Value)
            {
                aItem.HosClientContractPatientGroupName = Convert.ToString(aReader["HosClientContractPatientGroupName"]);
            }
        }
        public static void FillData(this OutPtTreatmentProgram aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("OutPtTreatmentProgramID") && aReader["OutPtTreatmentProgramID"] != DBNull.Value)
            {
                aItem.OutPtTreatmentProgramID = Convert.ToInt64(aReader["OutPtTreatmentProgramID"]);
            }
            if (aReader.HasColumn("TreatmentProgName") && aReader["TreatmentProgName"] != DBNull.Value)
            {
                aItem.TreatmentProgName = Convert.ToString(aReader["TreatmentProgName"]);
            }
            if (aReader.HasColumn("ProgDateFrom") && aReader["ProgDateFrom"] != DBNull.Value)
            {
                aItem.ProgDateFrom = Convert.ToDateTime(aReader["ProgDateFrom"]);
            }
            if (aReader.HasColumn("ProgDateTo") && aReader["ProgDateTo"] != DBNull.Value)
            {
                aItem.ProgDateTo = Convert.ToDateTime(aReader["ProgDateTo"]);
            }
            if (aReader.HasColumn("DoctorStaffID") && aReader["DoctorStaffID"] != DBNull.Value)
            {
                aItem.DoctorStaffID = Convert.ToInt64(aReader["DoctorStaffID"]);
            }
            if (aReader.HasColumn("CreatorStaffID") && aReader["CreatorStaffID"] != DBNull.Value)
            {
                aItem.CreatorStaff = new Staff { StaffID = Convert.ToInt64(aReader["CreatorStaffID"]) };
                if (aReader.HasColumn("CreatorStaffName") && aReader["CreatorStaffName"] != DBNull.Value)
                {
                    aItem.CreatorStaff.FullName = Convert.ToString(aReader["CreatorStaffName"]);
                }
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
            if (aReader.HasColumn("IsDeleted") && aReader["IsDeleted"] != DBNull.Value)
            {
                aItem.IsDeleted = Convert.ToBoolean(aReader["IsDeleted"]);
                aItem.CanDelete = !aItem.IsDeleted;
            }
            if (aReader.HasColumn("PatientID") && aReader["PatientID"] != DBNull.Value)
            {
                aItem.PatientID = Convert.ToInt64(aReader["PatientID"]);
            }
            //▼==== #126
            if (aReader.HasColumn("TreatmentProgCode") && aReader["TreatmentProgCode"] != DBNull.Value)
            {
                aItem.TreatmentProgCode = Convert.ToString(aReader["TreatmentProgCode"]);
            }
            if (aReader.HasColumn("ProgDatePush") && aReader["ProgDatePush"] != DBNull.Value)
            {
                aItem.ProgDatePush = Convert.ToInt32(aReader["ProgDatePush"]);
            }
            if (aReader.HasColumn("ProgDateFinal") && aReader["ProgDateFinal"] != DBNull.Value)
            {
                aItem.ProgDateFinal = Convert.ToInt32(aReader["ProgDateFinal"]);
            }
            //▲==== #126
            //▼==== #127
            if (aReader.HasColumn("OutpatientTreatmentTypeID") && aReader["OutpatientTreatmentTypeID"] != DBNull.Value)
            {
                aItem.OutpatientTreatmentTypeID = Convert.ToInt64(aReader["OutpatientTreatmentTypeID"]);
                aItem.OutpatientTreatmentType = new OutpatientTreatmentType
                {
                    OutpatientTreatmentTypeID = (long)aReader["OutpatientTreatmentTypeID"]
                };
                if (aReader.HasColumn("OutpatientTreatmentName") && aReader["OutpatientTreatmentName"] != DBNull.Value)
                {
                    aItem.OutpatientTreatmentType.OutpatientTreatmentName = aReader["OutpatientTreatmentName"].ToString();
                }
                if (aReader.HasColumn("MinNumOfDayMedicine") && aReader["MinNumOfDayMedicine"] != DBNull.Value)
                {
                    aItem.OutpatientTreatmentType.MinNumOfDayMedicine = (int)aReader["MinNumOfDayMedicine"];
                }
                if (aReader.HasColumn("MaxNumOfDayMedicine") && aReader["MaxNumOfDayMedicine"] != DBNull.Value)
                {
                    aItem.OutpatientTreatmentType.MaxNumOfDayMedicine = (int)aReader["MaxNumOfDayMedicine"];
                }
                if (aReader.HasColumn("IsChronic") && aReader["IsChronic"] != DBNull.Value)
                {
                    aItem.OutpatientTreatmentType.IsChronic = Convert.ToBoolean(aReader["IsChronic"]);
                }
            }
            //▲==== #127
            //▼==== #129
            if (aReader.HasColumn("OutpatientTreatmentName") && aReader["OutpatientTreatmentName"] != DBNull.Value)
            {
                aItem.OutpatientTreatmentName = Convert.ToString(aReader["OutpatientTreatmentName"]);
            }
            if (aReader.HasColumn("ProgDatePushToDate") && aReader["ProgDatePushToDate"] != DBNull.Value)
            {
                aItem.ProgDatePushToDate = Convert.ToDateTime(aReader["ProgDatePushToDate"]);
            }
            if (aReader.HasColumn("ProgDateFinalToDate") && aReader["ProgDateFinalToDate"] != DBNull.Value)
            {
                aItem.ProgDateFinalToDate = Convert.ToDateTime(aReader["ProgDateFinalToDate"]);
            }
            //▲==== #129
            //▼==== #135
            if (aReader.HasColumn("ProgDateFinalExpect") && aReader["ProgDateFinalExpect"] != DBNull.Value)
            {
                aItem.ProgDateFinalExpect = Convert.ToDateTime(aReader["ProgDateFinalExpect"]);
            }
            //▲==== #135
        }

        //▼==== #127
        public static void FillData(this OutpatientTreatmentType aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("OutpatientTreatmentTypeID") && aReader["OutpatientTreatmentTypeID"] != DBNull.Value)
            {
                aItem.OutpatientTreatmentTypeID = Convert.ToInt64(aReader["OutpatientTreatmentTypeID"]);
            }
            if (aReader.HasColumn("OutpatientTreatmentName") && aReader["OutpatientTreatmentName"] != DBNull.Value)
            {
                aItem.OutpatientTreatmentName = Convert.ToString(aReader["OutpatientTreatmentName"]);
            }
            if (aReader.HasColumn("MaxNumOfDayMedicalRecord") && aReader["MaxNumOfDayMedicalRecord"] != DBNull.Value)
            {
                aItem.MaxNumOfDayMedicalRecord = Convert.ToInt32(aReader["MaxNumOfDayMedicalRecord"]);
            }
            if (aReader.HasColumn("MinNumOfDayMedicalRecord") && aReader["MinNumOfDayMedicalRecord"] != DBNull.Value)
            {
                aItem.MinNumOfDayMedicalRecord = Convert.ToInt32(aReader["MinNumOfDayMedicalRecord"]);
            }
            if (aReader.HasColumn("MaxNumOfDayTreatment") && aReader["MaxNumOfDayTreatment"] != DBNull.Value)
            {
                aItem.MaxNumOfDayTreatment = Convert.ToInt32(aReader["MaxNumOfDayTreatment"]);
            }
            if (aReader.HasColumn("MinNumOfDayTreatment") && aReader["MinNumOfDayTreatment"] != DBNull.Value)
            {
                aItem.MinNumOfDayTreatment = Convert.ToInt32(aReader["MinNumOfDayTreatment"]);
            }
            if (aReader.HasColumn("MaxNumOfDayMedicine") && aReader["MaxNumOfDayMedicine"] != DBNull.Value)
            {
                aItem.MaxNumOfDayMedicine = Convert.ToInt32(aReader["MaxNumOfDayMedicine"]);
            }
            if (aReader.HasColumn("MinNumOfDayMedicine") && aReader["MinNumOfDayMedicine"] != DBNull.Value)
            {
                aItem.MinNumOfDayMedicine = Convert.ToInt32(aReader["MinNumOfDayMedicine"]);
            }
            if (aReader.HasColumn("ListICD10") && aReader["ListICD10"] != DBNull.Value)
            {
                aItem.ListICD10 = Convert.ToString(aReader["ListICD10"]);
            }
            if (aReader.HasColumn("IsDeleted") && aReader["IsDeleted"] != DBNull.Value)
            {
                aItem.IsDeleted = Convert.ToBoolean(aReader["IsDeleted"]);
            }
            if (aReader.HasColumn("Log") && aReader["Log"] != DBNull.Value)
            {
                aItem.Log = Convert.ToString(aReader["Log"]);
            }
            if (aReader.HasColumn("ListICD10") && aReader["ListICD10"] != DBNull.Value)
            {
                aItem.ListICD10 = aReader["ListICD10"].ToString();
                //aItem.GetListICD10Code();
            }
        }
        //▲==== #127

        public static void FillData(this PackageTechnicalService aItem, IDataReader aReader)
        {
            if (aReader.HasColumn("PackageTechnicalServiceID") && aReader["PackageTechnicalServiceID"] != DBNull.Value)
            {
                aItem.PackageTechnicalServiceID = (long)aReader["PackageTechnicalServiceID"];
            }
            if (aReader.HasColumn("Title") && aReader["Title"] != DBNull.Value)
            {
                aItem.Title = aReader["Title"].ToString();
            }
            if (aReader.HasColumn("StaffID") && aReader["StaffID"] != DBNull.Value)
            {
                aItem.CreatedStaffID = (long)aReader["StaffID"];
                aItem.CreatedStaff = new Staff
                {
                    StaffID = (long)aReader["StaffID"]
                };
                if (aReader.HasColumn("FullName") && aReader["FullName"] != DBNull.Value)
                {
                    aItem.CreatedStaff.FullName = aReader["FullName"].ToString();
                }
            }
            if (aReader.HasColumn("RecCreatedDate") && aReader["RecCreatedDate"] != DBNull.Value)
            {
                aItem.RecCreatedDate = Convert.ToDateTime(aReader["RecCreatedDate"]);
            }
        }      
    }
}
