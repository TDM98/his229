//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace aEMRServices.BankingPaymentServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BankingPaymentServiceReference.IBankingPaymentService")]
    public interface IBankingPaymentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/CanPay", ReplyAction="http://tempuri.org/IBankingPaymentService/CanPayResponse")]
        BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse CanPay(bool isHospital, long patientRegistrationId, long patientId, decimal settlementAmount, long staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/CanPay", ReplyAction="http://tempuri.org/IBankingPaymentService/CanPayResponse")]
        System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> CanPayAsync(bool isHospital, long patientRegistrationId, long patientId, decimal settlementAmount, long staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/Pay", ReplyAction="http://tempuri.org/IBankingPaymentService/PayResponse")]
        BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse Pay(bool isHospital, long patientRegistrationId, long patientId, decimal settlementAmount, long staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/Pay", ReplyAction="http://tempuri.org/IBankingPaymentService/PayResponse")]
        System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> PayAsync(bool isHospital, long patientRegistrationId, long patientId, decimal settlementAmount, long staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/Refund", ReplyAction="http://tempuri.org/IBankingPaymentService/RefundResponse")]
        BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse Refund(bool isHospital, long patientRegistrationId, long patientId, long transactionId, decimal settlementAmount, long staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/Refund", ReplyAction="http://tempuri.org/IBankingPaymentService/RefundResponse")]
        System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> RefundAsync(bool isHospital, long patientRegistrationId, long patientId, long transactionId, decimal settlementAmount, long staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/MapCard", ReplyAction="http://tempuri.org/IBankingPaymentService/MapCardResponse")]
        BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse MapCard(bool isHospital, string patientCode, string identifyCardNo, string acctNo, string pan, string issueDate, long staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/MapCard", ReplyAction="http://tempuri.org/IBankingPaymentService/MapCardResponse")]
        System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> MapCardAsync(bool isHospital, string patientCode, string identifyCardNo, string acctNo, string pan, string issueDate, long staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/HasCard", ReplyAction="http://tempuri.org/IBankingPaymentService/HasCardResponse")]
        BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse HasCard(string patientCode, long staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/HasCard", ReplyAction="http://tempuri.org/IBankingPaymentService/HasCardResponse")]
        System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> HasCardAsync(string patientCode, long staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/UnmapCard", ReplyAction="http://tempuri.org/IBankingPaymentService/UnmapCardResponse")]
        BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse UnmapCard(bool isHospital, string patientCode, string identifyCardNo, long staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/UnmapCard", ReplyAction="http://tempuri.org/IBankingPaymentService/UnmapCardResponse")]
        System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> UnmapCardAsync(bool isHospital, string patientCode, string identifyCardNo, long staffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/Deposit", ReplyAction="http://tempuri.org/IBankingPaymentService/DepositResponse")]
        BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse Deposit(bool isHospital, string patientCode, string identifyCardNo, decimal settlementAmount, long staffId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingPaymentService/Deposit", ReplyAction="http://tempuri.org/IBankingPaymentService/DepositResponse")]
        System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> DepositAsync(bool isHospital, string patientCode, string identifyCardNo, decimal settlementAmount, long staffId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBankingPaymentServiceChannel : aEMRServices.BankingPaymentServiceReference.IBankingPaymentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BankingPaymentServiceClient : System.ServiceModel.ClientBase<aEMRServices.BankingPaymentServiceReference.IBankingPaymentService>, aEMRServices.BankingPaymentServiceReference.IBankingPaymentService {
        
        public BankingPaymentServiceClient() {
        }
        
        public BankingPaymentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BankingPaymentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankingPaymentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankingPaymentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse CanPay(bool isHospital, long patientRegistrationId, long patientId, decimal settlementAmount, long staffID) {
            return base.Channel.CanPay(isHospital, patientRegistrationId, patientId, settlementAmount, staffID);
        }
        
        public System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> CanPayAsync(bool isHospital, long patientRegistrationId, long patientId, decimal settlementAmount, long staffID) {
            return base.Channel.CanPayAsync(isHospital, patientRegistrationId, patientId, settlementAmount, staffID);
        }
        
        public BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse Pay(bool isHospital, long patientRegistrationId, long patientId, decimal settlementAmount, long staffID) {
            return base.Channel.Pay(isHospital, patientRegistrationId, patientId, settlementAmount, staffID);
        }
        
        public System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> PayAsync(bool isHospital, long patientRegistrationId, long patientId, decimal settlementAmount, long staffID) {
            return base.Channel.PayAsync(isHospital, patientRegistrationId, patientId, settlementAmount, staffID);
        }
        
        public BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse Refund(bool isHospital, long patientRegistrationId, long patientId, long transactionId, decimal settlementAmount, long staffID) {
            return base.Channel.Refund(isHospital, patientRegistrationId, patientId, transactionId, settlementAmount, staffID);
        }
        
        public System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> RefundAsync(bool isHospital, long patientRegistrationId, long patientId, long transactionId, decimal settlementAmount, long staffID) {
            return base.Channel.RefundAsync(isHospital, patientRegistrationId, patientId, transactionId, settlementAmount, staffID);
        }
        
        public BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse MapCard(bool isHospital, string patientCode, string identifyCardNo, string acctNo, string pan, string issueDate, long staffID) {
            return base.Channel.MapCard(isHospital, patientCode, identifyCardNo, acctNo, pan, issueDate, staffID);
        }
        
        public System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> MapCardAsync(bool isHospital, string patientCode, string identifyCardNo, string acctNo, string pan, string issueDate, long staffID) {
            return base.Channel.MapCardAsync(isHospital, patientCode, identifyCardNo, acctNo, pan, issueDate, staffID);
        }
        
        public BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse HasCard(string patientCode, long staffID) {
            return base.Channel.HasCard(patientCode, staffID);
        }
        
        public System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> HasCardAsync(string patientCode, long staffID) {
            return base.Channel.HasCardAsync(patientCode, staffID);
        }
        
        public BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse UnmapCard(bool isHospital, string patientCode, string identifyCardNo, long staffID) {
            return base.Channel.UnmapCard(isHospital, patientCode, identifyCardNo, staffID);
        }
        
        public System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> UnmapCardAsync(bool isHospital, string patientCode, string identifyCardNo, long staffID) {
            return base.Channel.UnmapCardAsync(isHospital, patientCode, identifyCardNo, staffID);
        }
        
        public BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse Deposit(bool isHospital, string patientCode, string identifyCardNo, decimal settlementAmount, long staffId) {
            return base.Channel.Deposit(isHospital, patientCode, identifyCardNo, settlementAmount, staffId);
        }
        
        public System.Threading.Tasks.Task<BillingPaymentWcfServiceLib.BankingPaymentServiceReference.TransactionResponse> DepositAsync(bool isHospital, string patientCode, string identifyCardNo, decimal settlementAmount, long staffId) {
            return base.Channel.DepositAsync(isHospital, patientCode, identifyCardNo, settlementAmount, staffId);
        }
    }
}
